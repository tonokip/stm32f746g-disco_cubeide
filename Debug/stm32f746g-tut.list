
stm32f746g-tut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000200f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002608  080202c8  080202c8  000302c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000046  080228d0  080228d0  000328d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00013ec0  08022918  08022918  00032918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000008  080367d8  080367d8  000467d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080367e0  080367e0  000500dc  2**0
                  CONTENTS
  7 .ARM          00000008  080367e0  080367e0  000467e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  080367e8  080367e8  000500dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  080367e8  080367e8  000467e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  080367f8  080367f8  000467f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000dc  20000000  08036800  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a6bc  200000dc  080368dc  000500dc  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a798  080368dc  0005a798  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000500dc  2**0
                  CONTENTS, READONLY
 15 .debug_info   00095c8b  00000000  00000000  0005010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00015ff5  00000000  00000000  000e5d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000062e8  00000000  00000000  000fbd90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005be0  00000000  00000000  00102078  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  000422b5  00000000  00000000  00107c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000596a2  00000000  00000000  00149f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    001419ee  00000000  00000000  001a35af  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002e4f9d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001b0b4  00000000  00000000  002e5098  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080202b0 	.word	0x080202b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e0 	.word	0x200000e0
 800020c:	080202b0 	.word	0x080202b0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f012 f9a2 	bl	8012904 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f012 f95d 	bl	80128c8 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f012 f927 	bl	80128c8 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000f8 	.word	0x200000f8

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f012 f874 	bl	80128c8 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f012 f866 	bl	80128c8 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f012 f84b 	bl	80128c8 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f012 f83d 	bl	80128c8 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000f8 	.word	0x200000f8
 8000890:	200000fc 	.word	0x200000fc

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f011 fff0 	bl	8012894 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f011 ffdc 	bl	8012894 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f011 ffcd 	bl	80128c8 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f011 ff42 	bl	80128c8 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f011 ff32 	bl	80128c8 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f011 ff24 	bl	80128c8 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000f8 	.word	0x200000f8

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	200000f8 	.word	0x200000f8

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f011 fedb 	bl	8012880 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000f8 	.word	0x200000f8

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fb8c 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f017 f8c6 	bl	8017c90 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f016 fa4c 	bl	8016fa0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	20009c48 	.word	0x20009c48

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20009c48 	.word	0x20009c48

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e031      	b.n	8000c0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d109      	bne.n	8000bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f016 fa1c 	bl	8016ff0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d116      	bne.n	8000c00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_Init+0x84>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	f043 0202 	orr.w	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f94e 	bl	8000e84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	e001      	b.n	8000c04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	ffffeefd 	.word	0xffffeefd

08000c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e115      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x248>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d935      	bls.n	8000cb4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	2207      	movs	r2, #7
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43da      	mvns	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d10a      	bne.n	8000c8e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	e035      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68d9      	ldr	r1, [r3, #12]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e022      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2207      	movs	r2, #7
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4403      	add	r3, r0
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d824      	bhi.n	8000d4c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	3b05      	subs	r3, #5
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	400a      	ands	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b05      	subs	r3, #5
 8000d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	e04c      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d824      	bhi.n	8000d9e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	221f      	movs	r2, #31
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	400a      	ands	r2, r1
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b23      	subs	r3, #35	; 0x23
 8000d90:	fa00 f203 	lsl.w	r2, r0, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9c:	e023      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3b41      	subs	r3, #65	; 0x41
 8000db0:	221f      	movs	r2, #31
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	; 0x41
 8000dda:	fa00 f203 	lsl.w	r2, r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d109      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0x204>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d11c      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d111      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_ADC_ConfigChannel+0x264>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	10000012 	.word	0x10000012
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	20000064 	.word	0x20000064
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <ADC_Init+0x1ec>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a77      	ldr	r2, [pc, #476]	; (8001070 <ADC_Init+0x1ec>)
 8000e92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e98:	4b75      	ldr	r3, [pc, #468]	; (8001070 <ADC_Init+0x1ec>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4973      	ldr	r1, [pc, #460]	; (8001070 <ADC_Init+0x1ec>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6899      	ldr	r1, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <ADC_Init+0x1f0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6899      	ldr	r1, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e00f      	b.n	8000f7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0202 	bic.w	r2, r2, #2
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6899      	ldr	r1, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	005a      	lsls	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	035a      	lsls	r2, r3, #13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e007      	b.n	8000ff4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	3b01      	subs	r3, #1
 8001010:	051a      	lsls	r2, r3, #20
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6899      	ldr	r1, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001036:	025a      	lsls	r2, r3, #9
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6899      	ldr	r1, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	029a      	lsls	r2, r3, #10
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	0f000001 	.word	0x0f000001

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db10      	blt.n	800114c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <__NVIC_DisableIRQ+0x40>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	3320      	adds	r3, #32
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001148:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff2a 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff3f 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff32 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_DisableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e054      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f015 fef0 	bl	80170a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_CRC_Init+0xc4>)
 80012d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0218 	bic.w	r2, r2, #24
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e00c      	b.n	8001306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f834 	bl	8001364 <HAL_CRCEx_Polynomial_Set>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e028      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e004      	b.n	8001324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	04c11db7 	.word	0x04c11db7

08001364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
 8001376:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	bf00      	nop
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	613a      	str	r2, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_CRCEx_Polynomial_Set+0x34>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b18      	cmp	r3, #24
 800139c:	d846      	bhi.n	800142c <HAL_CRCEx_Polynomial_Set+0xc8>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001433 	.word	0x08001433
 80013a8:	0800142d 	.word	0x0800142d
 80013ac:	0800142d 	.word	0x0800142d
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	0800142d 	.word	0x0800142d
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	08001421 	.word	0x08001421
 80013c8:	0800142d 	.word	0x0800142d
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	0800142d 	.word	0x0800142d
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001415 	.word	0x08001415
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	0800142d 	.word	0x0800142d
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001409 	.word	0x08001409
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d913      	bls.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001412:	e010      	b.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d90f      	bls.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800141e:	e00c      	b.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d90b      	bls.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800142a:	e008      	b.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
      break;
 8001430:	e006      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0118 	bic.w	r1, r3, #24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f015 fe28 	bl	80170e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DCMI_Init+0xe0>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014f0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d112      	bne.n	8001528 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800150e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7f9b      	ldrb	r3, [r3, #30]
 8001514:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001524:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001526:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 021e 	orr.w	r2, r2, #30
 8001536:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe0f007 	.word	0xffe0f007

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e048      	b.n	800160c <HAL_DMA_Start_IT+0xb8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d137      	bne.n	80015fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f842 	bl	800162c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e005      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	d108      	bne.n	800166c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800166a:	e007      	b.n	800167c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e039      	b.n	800170e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f012 ff4c 	bl	801454c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	f023 0107 	bic.w	r1, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_DMA2D_Init+0x90>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68d1      	ldr	r1, [r2, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	ffffc000 	.word	0xffffc000

0800171c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e05f      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_DMA2D_DeInit+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02e      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8c1 	bl	80018d0 <HAL_DMA2D_Abort>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e04a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b20      	cmp	r3, #32
 8001764:	d108      	bne.n	8001778 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8f7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d011      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e03a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8e7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e02a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f012 fee1 	bl	8014598 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA2D_Start_IT+0x1c>
 8001814:	2302      	movs	r3, #2
 8001816:	e020      	b.n	800185a <HAL_DMA2D_Start_IT+0x5e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa84 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001846:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af02      	add	r7, sp, #8
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800187a:	2302      	movs	r3, #2
 800187c:	e024      	b.n	80018c8 <HAL_DMA2D_BlendingStart_IT+0x66>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa4d 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80018b4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0205 	bic.w	r2, r3, #5
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0204 	orr.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff f924 	bl	8000b38 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80018f2:	e017      	b.n	8001924 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80018f4:	f7ff f920 	bl	8000b38 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d90f      	bls.n	8001924 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e017      	b.n	8001954 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e0      	bne.n	80018f4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8001940:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d103      	bne.n	800198c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	331c      	adds	r3, #28
 800198a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff f8d4 	bl	8000b38 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001992:	e017      	b.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001994:	f7ff f8d0 	bl	8000b38 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a2:	d90f      	bls.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e016      	b.n	80019f2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e1      	bne.n	8001994 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80019de:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d026      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d026      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d021      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d021      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0204 	orr.w	r2, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f853 	bl	8001bf2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01f      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f80e 	bl	8001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA2D_ConfigLayer+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA2D_ConfigLayer+0x114>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	3318      	adds	r3, #24
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d003      	beq.n	8001c7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d107      	bne.n	8001c8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d120      	bne.n	8001cde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	ea02 0103 	and.w	r1, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA2D_ConfigLayer+0xb2>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d127      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
 8001cdc:	e01f      	b.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d106      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d1c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	ff03000f 	.word	0xff03000f

08001d40 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d78:	d174      	bne.n	8001e64 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e053      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e048      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d111      	bne.n	8001df4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	0cdb      	lsrs	r3, r3, #19
 8001dd4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	0a9b      	lsrs	r3, r3, #10
 8001dda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	4313      	orrs	r3, r2
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e032      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d117      	bne.n	8001e2c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	0fdb      	lsrs	r3, r3, #31
 8001e00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	0cdb      	lsrs	r3, r3, #19
 8001e06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	03db      	lsls	r3, r3, #15
 8001e22:	4313      	orrs	r3, r2
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	e016      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	0f1b      	lsrs	r3, r3, #28
 8001e30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0d1b      	lsrs	r3, r3, #20
 8001e36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4313      	orrs	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e62:	e003      	b.n	8001e6c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	372c      	adds	r7, #44	; 0x2c
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e183      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f015 f9d4 	bl	8017260 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fe19 	bl	8000b38 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f08:	e011      	b.n	8001f2e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f0a:	f7fe fe15 	bl	8000b38 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f18:	d909      	bls.n	8001f2e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e13b      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f004 fa5e 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8001f54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_ETH_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_Init+0xf8>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_Init+0x112>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d804      	bhi.n	8001f8a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d903      	bls.n	8001f9a <HAL_ETH_Init+0x122>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_Init+0x13c>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_ETH_Init+0x2d4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f956 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9b3 	bl	800234c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d9      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ff2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ff6:	f7fe fdab 	bl	8000b50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80a6 	beq.w	8002150 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fd98 	bl	8000b38 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	461a      	mov	r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8cc 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002018:	f7fe fd8e 	bl	8000b38 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d90f      	bls.n	800204a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f98b 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0ad      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0da      	beq.n	800200a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f910 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f96d 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800207a:	2301      	movs	r3, #1
 800207c:	e093      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800207e:	f7fe fd5b 	bl	8000b38 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002092:	f7fe fd51 	bl	8000b38 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d90f      	bls.n	80020c4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f94e 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e070      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0da      	beq.n	8002084 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	461a      	mov	r2, r3
 80020d4:	211f      	movs	r1, #31
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f86a 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f92f 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f6:	2301      	movs	r3, #1
 80020f8:	e055      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e002      	b.n	8002114 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e036      	b.n	8002194 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e031      	b.n	8002194 <HAL_ETH_Init+0x31c>
 8002130:	03938700 	.word	0x03938700
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	01312cff 	.word	0x01312cff
 8002140:	02160ebf 	.word	0x02160ebf
 8002144:	039386ff 	.word	0x039386ff
 8002148:	05f5e0ff 	.word	0x05f5e0ff
 800214c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_ETH_WritePHYRegister>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8e6 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00c      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800218c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002190:	f7fe fcde 	bl	8000b50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8d8 	bl	800234c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	460b      	mov	r3, r1
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b82      	cmp	r3, #130	; 0x82
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e050      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2282      	movs	r2, #130	; 0x82
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 031c 	and.w	r3, r3, #28
 80021ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8a1b      	ldrh	r3, [r3, #16]
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7fe fc89 	bl	8000b38 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002228:	e015      	b.n	8002256 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800222a:	f7fe fc85 	bl	8000b38 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d309      	bcc.n	800224e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e014      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e4      	bne.n	800222a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b42      	cmp	r3, #66	; 0x42
 80022a0:	d101      	bne.n	80022a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e04e      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022fc:	f7fe fc1c 	bl	8000b38 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002302:	e015      	b.n	8002330 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002304:	f7fe fc18 	bl	8000b38 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d309      	bcc.n	8002328 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00d      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0b0      	sub	sp, #192	; 0xc0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002368:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800237a:	2300      	movs	r3, #0
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
 8002398:	e001      	b.n	800239e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	4bab      	ldr	r3, [pc, #684]	; (80026d4 <ETH_MACDMAConfig+0x388>)
 8002426:	4013      	ands	r3, r2
 8002428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002430:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002434:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002438:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800243e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002442:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002446:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800244c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800244e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002450:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002454:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002458:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800245c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002460:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002462:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002474:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe fb65 	bl	8000b50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002494:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002498:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800249a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800249e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fb40 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002500:	4013      	ands	r3, r2
 8002502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800250c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002510:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002516:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800251c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800251e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002522:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002528:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800252a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fb01 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002556:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002558:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800255c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe faec 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002580:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <ETH_MACDMAConfig+0x38c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025ec:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025f0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025f2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025f4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025f6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025f8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025fa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025fc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025fe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002600:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002602:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002606:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800260a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800260c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f241 0318 	movw	r3, #4120	; 0x1018
 800261e:	4413      	add	r3, r2
 8002620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f241 0318 	movw	r3, #4120	; 0x1018
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002636:	2001      	movs	r0, #1
 8002638:	f7fe fa8a 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	4413      	add	r3, r2
 8002646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800264c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002650:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002654:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002658:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800265c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002662:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002666:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe fa63 	bl	8000b50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002696:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <ETH_MACDMAConfig+0x390>)
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80b 	bl	80026e0 <ETH_MACAddressConfig>
}
 80026ca:	bf00      	nop
 80026cc:	37c0      	adds	r7, #192	; 0xc0
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	ff20810f 	.word	0xff20810f
 80026d8:	f8de3f23 	.word	0xf8de3f23
 80026dc:	00010040 	.word	0x00010040

080026e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3305      	adds	r3, #5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3204      	adds	r2, #4
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <ETH_MACAddressConfig+0x68>)
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3303      	adds	r3, #3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3302      	adds	r3, #2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ETH_MACAddressConfig+0x6c>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e175      	b.n	8002a5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8164 	bne.w	8002a56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00b      	beq.n	800283a <HAL_GPIO_Init+0xea>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282e:	2b11      	cmp	r3, #17
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b12      	cmp	r3, #18
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80be 	beq.w	8002a56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a64      	ldr	r2, [pc, #400]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f2:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d037      	beq.n	800298e <HAL_GPIO_Init+0x23e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_GPIO_Init+0x23a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02b      	beq.n	8002986 <HAL_GPIO_Init+0x236>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x232>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x22e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x33c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x22a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x340>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x344>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x348>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x34c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x21a>
 8002966:	2309      	movs	r3, #9
 8002968:	e012      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296a:	230a      	movs	r3, #10
 800296c:	e010      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296e:	2308      	movs	r3, #8
 8002970:	e00e      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002972:	2307      	movs	r3, #7
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002976:	2306      	movs	r3, #6
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f ae86 	bls.w	8002770 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022400 	.word	0x40022400
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e0d9      	b.n	8002c74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f040 80c9 	bne.w	8002c6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a62      	ldr	r2, [pc, #392]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d037      	beq.n	8002b76 <HAL_GPIO_DeInit+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a61      	ldr	r2, [pc, #388]	; (8002c90 <HAL_GPIO_DeInit+0x1ec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_GPIO_DeInit+0xce>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <HAL_GPIO_DeInit+0x1f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <HAL_GPIO_DeInit+0xca>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5f      	ldr	r2, [pc, #380]	; (8002c98 <HAL_GPIO_DeInit+0x1f4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_DeInit+0xc6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_GPIO_DeInit+0x1f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_DeInit+0xc2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_GPIO_DeInit+0x1fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_DeInit+0xbe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_GPIO_DeInit+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_DeInit+0xba>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_GPIO_DeInit+0x204>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_DeInit+0xb6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_GPIO_DeInit+0x208>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_DeInit+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_GPIO_DeInit+0x20c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_DeInit+0xae>
 8002b4e:	2309      	movs	r3, #9
 8002b50:	e012      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b52:	230a      	movs	r3, #10
 8002b54:	e010      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00e      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d132      	bne.n	8002bee <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b98:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	4837      	ldr	r0, [pc, #220]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	493d      	ldr	r1, [pc, #244]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4936      	ldr	r1, [pc, #216]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	4932      	ldr	r1, [pc, #200]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	08d2      	lsrs	r2, r2, #3
 8002c24:	4019      	ands	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f af22 	bls.w	8002ac0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40021800 	.word	0x40021800
 8002ca8:	40021c00 	.word	0x40021c00
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40022400 	.word	0x40022400
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1c:	b08d      	sub	sp, #52	; 0x34
 8002d1e:	af0a      	add	r7, sp, #40	; 0x28
 8002d20:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e048      	b.n	8002dbe <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f015 f985 	bl	8018050 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 fbbd 	bl	800b4d2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d76:	1d33      	adds	r3, r6, #4
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f008 fb40 	bl	800b400 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f008 fbb4 	bl	800b4f4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f008 fcc6 	bl	800b740 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dc6:	b590      	push	{r4, r7, lr}
 8002dc8:	b089      	sub	sp, #36	; 0x24
 8002dca:	af04      	add	r7, sp, #16
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	4608      	mov	r0, r1
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	70fb      	strb	r3, [r7, #3]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70bb      	strb	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_HCD_HC_Init+0x28>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e07f      	b.n	8002eee <HAL_HCD_HC_Init+0x128>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	333d      	adds	r3, #61	; 0x3d
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3338      	adds	r3, #56	; 0x38
 8002e1a:	787a      	ldrb	r2, [r7, #1]
 8002e1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e30:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	333f      	adds	r3, #63	; 0x3f
 8002e56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	78bb      	ldrb	r3, [r7, #2]
 8002e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	333a      	adds	r3, #58	; 0x3a
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0a      	bge.n	8002e96 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	333b      	adds	r3, #59	; 0x3b
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e009      	b.n	8002eaa <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333b      	adds	r3, #59	; 0x3b
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333c      	adds	r3, #60	; 0x3c
 8002eba:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ebe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	787c      	ldrb	r4, [r7, #1]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	78f9      	ldrb	r1, [r7, #3]
 8002eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4623      	mov	r3, r4
 8002edc:	f008 fda6 	bl	800ba2c <USB_HC_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_HCD_HC_Halt+0x1e>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e00f      	b.n	8002f34 <HAL_HCD_HC_Halt+0x3e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f008 ffe0 	bl	800beea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	70fb      	strb	r3, [r7, #3]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70bb      	strb	r3, [r7, #2]
 8002f52:	4613      	mov	r3, r2
 8002f54:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333b      	adds	r3, #59	; 0x3b
 8002f66:	78ba      	ldrb	r2, [r7, #2]
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	787a      	ldrb	r2, [r7, #1]
 8002f7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f7e:	7c3b      	ldrb	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f200 80d6 	bhi.w	8003162 <HAL_HCD_HC_SubmitRequest+0x226>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x80>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800314d 	.word	0x0800314d
 8002fc4:	08003039 	.word	0x08003039
 8002fc8:	080030c3 	.word	0x080030c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80c9 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c5 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3351      	adds	r3, #81	; 0x51
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3351      	adds	r3, #81	; 0x51
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003020:	e0a1      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e096      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d120      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3351      	adds	r3, #81	; 0x51
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003068:	e07e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e073      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3342      	adds	r3, #66	; 0x42
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e05d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3351      	adds	r3, #81	; 0x51
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f2:	e039      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3342      	adds	r3, #66	; 0x42
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e02e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e018      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e002      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	; 0x44
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	8b39      	ldrh	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3348      	adds	r3, #72	; 0x48
 800318e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	f008 fd20 	bl	800bc40 <USB_HC_StartXfer>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f008 fa49 	bl	800b6ba <USB_GetMode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80f1 	bne.w	8003412 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f008 fa2d 	bl	800b694 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e7 	beq.w	8003410 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f008 fa24 	bl	800b694 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f008 fa14 	bl	800b694 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d104      	bne.n	8003282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f008 fa04 	bl	800b694 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d104      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f008 f9f4 	bl	800b694 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f008 f9e6 	bl	800b694 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d117      	bne.n	8003304 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80032e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032e6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f014 ff23 	bl	8018134 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f008 fad3 	bl	800b8a0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f008 f9c3 	bl	800b694 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d102      	bne.n	8003320 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 f8c8 	bl	80044b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f008 f9b5 	bl	800b694 <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d106      	bne.n	8003342 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f014 fee1 	bl	80180fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f008 f9a4 	bl	800b694 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	d138      	bne.n	80033ca <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f008 fdb3 	bl	800bec8 <USB_HC_ReadInterrupt>
 8003362:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e025      	b.n	80033b6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d106      	bne.n	80033a4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8cf 	bl	8003540 <HCD_HC_IN_IRQHandler>
 80033a2:	e005      	b.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fc5f 	bl	8003c6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3d4      	bcc.n	800336a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f008 f960 	bl	800b694 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_IRQHandler+0x1d6>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_HCD_IRQHandler+0x1d8>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 ffad 	bl	8004358 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	619a      	str	r2, [r3, #24]
 800340e:	e000      	b.n	8003412 <HAL_HCD_IRQHandler+0x206>
      return;
 8003410:	bf00      	nop
    }
  }
}
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_HCD_Start+0x16>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_HCD_Start+0x3e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f008 f838 	bl	800b4b0 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f008 fa8e 	bl	800b968 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_HCD_Stop+0x16>
 8003470:	2302      	movs	r3, #2
 8003472:	e00d      	b.n	8003490 <HAL_HCD_Stop+0x32>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f008 fe6d 	bl	800c160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 fa35 	bl	800b914 <USB_ResetPort>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	; 0x4c
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f008 fa77 	bl	800ba08 <USB_GetCurrentFrame>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f008 fa52 	bl	800b9da <USB_GetHostSpeed>
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d119      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2304      	movs	r3, #4
 8003580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60d3      	str	r3, [r2, #12]
 80035a2:	e095      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d109      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2320      	movs	r3, #32
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e080      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d134      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335d      	adds	r3, #93	; 0x5d
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2310      	movs	r3, #16
 8003628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2308      	movs	r3, #8
 800363a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f008 fc4f 	bl	800beea <USB_HC_Halt>
 800364c:	e040      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d134      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f008 fc2a 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2310      	movs	r3, #16
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	335d      	adds	r3, #93	; 0x5d
 80036b8:	2208      	movs	r2, #8
 80036ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d122      	bne.n	800372e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f008 fbe9 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800372c:	e29b      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80c1 	bne.w	80038c8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01b      	beq.n	8003786 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	440b      	add	r3, r1
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003772:	1ad1      	subs	r1, r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4403      	add	r3, r0
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	335d      	adds	r3, #93	; 0x5d
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	333f      	adds	r3, #63	; 0x3f
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	333f      	adds	r3, #63	; 0x3f
 80037e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d121      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fb67 	bl	800beea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2310      	movs	r3, #16
 800382c:	6093      	str	r3, [r2, #8]
 800382e:	e034      	b.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d129      	bne.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003864:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4601      	mov	r1, r0
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f014 fc5b 	bl	8018150 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3350      	adds	r3, #80	; 0x50
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3350      	adds	r3, #80	; 0x50
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
}
 80038c6:	e1ce      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80f1 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	335d      	adds	r3, #93	; 0x5d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10a      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e0b0      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335d      	adds	r3, #93	; 0x5d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10a      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	335c      	adds	r3, #92	; 0x5c
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09a      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335d      	adds	r3, #93	; 0x5d
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	335d      	adds	r3, #93	; 0x5d
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d156      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	3358      	adds	r3, #88	; 0x58
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4403      	add	r3, r0
 80039a6:	3358      	adds	r3, #88	; 0x58
 80039a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d914      	bls.n	80039ea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	3358      	adds	r3, #88	; 0x58
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e009      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02d      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335d      	adds	r3, #93	; 0x5d
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d122      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4601      	mov	r1, r0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f014 fb48 	bl	8018150 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac0:	e0d1      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d13e      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	3358      	adds	r3, #88	; 0x58
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4403      	add	r3, r0
 8003b1a:	3358      	adds	r3, #88	; 0x58
 8003b1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	335d      	adds	r3, #93	; 0x5d
 8003b2e:	2206      	movs	r2, #6
 8003b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f008 f9d4 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	6093      	str	r3, [r2, #8]
}
 8003b54:	e087      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d17c      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d122      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3358      	adds	r3, #88	; 0x58
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f008 f992 	bl	800beea <USB_HC_Halt>
 8003bc6:	e045      	b.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333f      	adds	r3, #63	; 0x3f
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d12f      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3358      	adds	r3, #88	; 0x58
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	335d      	adds	r3, #93	; 0x5d
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 f94b 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d119      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd0:	e33e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d141      	bne.n	8003d6c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 831f 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	333d      	adds	r3, #61	; 0x3d
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f008 f8c0 	bl	800beea <USB_HC_Halt>
}
 8003d6a:	e2f1      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d13f      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	335d      	adds	r3, #93	; 0x5d
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	; 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3358      	adds	r3, #88	; 0x58
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f008 f87e 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	e2a6      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d122      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f008 f850 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	6093      	str	r3, [r2, #8]
}
 8003e5e:	e277      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d135      	bne.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3358      	adds	r3, #88	; 0x58
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f008 f818 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	335d      	adds	r3, #93	; 0x5d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
}
 8003ee0:	e236      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d12b      	bne.n	8003f50 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f007 ffd8 	bl	800beea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	335d      	adds	r3, #93	; 0x5d
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	e1ff      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d155      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3358      	adds	r3, #88	; 0x58
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	335d      	adds	r3, #93	; 0x5d
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f007 ff76 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2310      	movs	r3, #16
 800400e:	6093      	str	r3, [r2, #8]
}
 8004010:	e19e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d12b      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f007 ff49 	bl	800beea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335d      	adds	r3, #93	; 0x5d
 8004068:	2206      	movs	r2, #6
 800406a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	6093      	str	r3, [r2, #8]
}
 800407e:	e167      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d135      	bne.n	8004104 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 ff11 	bl	800beea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2310      	movs	r3, #16
 80040d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	e125      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	f040 811a 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004136:	f023 0302 	bic.w	r3, r3, #2
 800413a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	335d      	adds	r3, #93	; 0x5d
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d137      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335c      	adds	r3, #92	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00b      	beq.n	8004194 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418e:	2b03      	cmp	r3, #3
 8004190:	f040 80c5 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	3351      	adds	r3, #81	; 0x51
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2d8      	uxtb	r0, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3351      	adds	r3, #81	; 0x51
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e0ad      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	335d      	adds	r3, #93	; 0x5d
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d10a      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e097      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	335d      	adds	r3, #93	; 0x5d
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d10a      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e081      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	335d      	adds	r3, #93	; 0x5d
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10a      	bne.n	8004246 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2205      	movs	r2, #5
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e06b      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	335d      	adds	r3, #93	; 0x5d
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d00a      	beq.n	8004272 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	335d      	adds	r3, #93	; 0x5d
 800426c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800426e:	2b08      	cmp	r3, #8
 8004270:	d155      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4403      	add	r3, r0
 8004294:	3358      	adds	r3, #88	; 0x58
 8004296:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3358      	adds	r3, #88	; 0x58
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d914      	bls.n	80042d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	3358      	adds	r3, #88	; 0x58
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	335c      	adds	r3, #92	; 0x5c
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e009      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004302:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b2d8      	uxtb	r0, r3
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4601      	mov	r1, r0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f013 ff00 	bl	8018150 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	0c5b      	lsrs	r3, r3, #17
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d003      	beq.n	800439c <HCD_RXQLVL_IRQHandler+0x44>
 8004394:	2b05      	cmp	r3, #5
 8004396:	f000 8082 	beq.w	800449e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800439a:	e083      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07f      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d074      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3344      	adds	r3, #68	; 0x44
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f007 f935 	bl	800b642 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3344      	adds	r3, #68	; 0x44
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4403      	add	r3, r0
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HCD_RXQLVL_IRQHandler+0x154>)
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d031      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004454:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	3350      	adds	r3, #80	; 0x50
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	4602      	mov	r2, r0
 800449a:	701a      	strb	r2, [r3, #0]
      break;
 800449c:	e001      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044a2:	bf00      	nop
  }
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	1ff80000 	.word	0x1ff80000

080044b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10a      	bne.n	8004508 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004500:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f013 fe08 	bl	8018118 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d147      	bne.n	80045aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d129      	bne.n	8004580 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d113      	bne.n	800455c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453e:	d106      	bne.n	800454e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f007 f9aa 	bl	800b8a0 <USB_InitFSLSPClkSel>
 800454c:	e011      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f007 f9a3 	bl	800b8a0 <USB_InitFSLSPClkSel>
 800455a:	e00a      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d106      	bne.n	8004572 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	461a      	mov	r2, r3
 800456c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004570:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f013 fdfe 	bl	8018174 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f013 fdcd 	bl	8018118 <HAL_HCD_Connect_Callback>
 800457e:	e014      	b.n	80045aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f013 fe05 	bl	8018190 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004594:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004598:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80045a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d103      	bne.n	80045bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f012 feca 	bl	8017390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e006      	b.n	8004658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d104      	bne.n	800466a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_I2C_Init+0x11c>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	ea42 0103 	orr.w	r1, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	02008000 	.word	0x02008000

080046f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e021      	b.n	8004746 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f012 feb0 	bl	8017480 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	f040 80f9 	bne.w	800496a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_I2C_Mem_Write+0x34>
 800477e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0ed      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2C_Mem_Write+0x4e>
 800479a:	2302      	movs	r3, #2
 800479c:	e0e6      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047a6:	f7fc f9c7 	bl	8000b38 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2319      	movs	r3, #25
 80047b2:	2201      	movs	r2, #1
 80047b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fad1 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d1      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f0:	88f8      	ldrh	r0, [r7, #6]
 80047f2:	893a      	ldrh	r2, [r7, #8]
 80047f4:	8979      	ldrh	r1, [r7, #10]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4603      	mov	r3, r0
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f9e1 	bl	8004bc8 <I2C_RequestMemoryWrite>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0a9      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2bff      	cmp	r3, #255	; 0xff
 8004820:	d90e      	bls.n	8004840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	b2da      	uxtb	r2, r3
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	2300      	movs	r3, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fbb3 	bl	8004fa4 <I2C_TransferConfig>
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	b2da      	uxtb	r2, r3
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fba2 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fabb 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e07b      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d130      	bne.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa4d 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04d      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2bff      	cmp	r3, #255	; 0xff
 80048d8:	d90e      	bls.n	80048f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	22ff      	movs	r2, #255	; 0xff
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb57 	bl	8004fa4 <I2C_TransferConfig>
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb46 	bl	8004fa4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d19e      	bne.n	8004860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa9a 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01a      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_I2C_Mem_Write+0x224>)
 800494a:	400b      	ands	r3, r1
 800494c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fe00e800 	.word	0xfe00e800

08004978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 80fd 	bne.w	8004b9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_I2C_Mem_Read+0x34>
 80049a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0f1      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Read+0x4e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ea      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc f8b3 	bl	8000b38 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2319      	movs	r3, #25
 80049da:	2201      	movs	r2, #1
 80049dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f9bd 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0d5      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4603      	mov	r3, r0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f921 	bl	8004c70 <I2C_RequestMemoryRead>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0ad      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2bff      	cmp	r3, #255	; 0xff
 8004a48:	d90e      	bls.n	8004a68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa9f 	bl	8004fa4 <I2C_TransferConfig>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8979      	ldrh	r1, [r7, #10]
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa8e 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2104      	movs	r1, #4
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f964 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07c      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d034      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d130      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f935 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04d      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d90e      	bls.n	8004b28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa3f 	bl	8004fa4 <I2C_TransferConfig>
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	8979      	ldrh	r1, [r7, #10]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa2e 	bl	8004fa4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d19a      	bne.n	8004a88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f982 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01a      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_I2C_Mem_Read+0x230>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	80002400 	.word	0x80002400
 8004ba8:	fe00e800 	.word	0xfe00e800

08004bac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	8979      	ldrh	r1, [r7, #10]
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <I2C_RequestMemoryWrite+0xa4>)
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f9d7 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8f0 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e02c      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c10:	893b      	ldrh	r3, [r7, #8]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
 8004c1a:	e015      	b.n	8004c48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8d6 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e012      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f884 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	80002000 	.word	0x80002000

08004c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <I2C_RequestMemoryRead+0xa4>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f984 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f89d 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02c      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc0:	e015      	b.n	8004cee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f883 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e012      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f831 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	80002000 	.word	0x80002000

08004d18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d007      	beq.n	8004d54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	619a      	str	r2, [r3, #24]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d70:	e022      	b.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d01e      	beq.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fb fedd 	bl	8000b38 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d113      	bne.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e00f      	b.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d0cd      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dec:	e02c      	b.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f870 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e02a      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d01e      	beq.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fb fe95 	bl	8000b38 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d1cb      	bne.n	8004dee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	e028      	b.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f830 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e026      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fb fe59 	bl	8000b38 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d1cf      	bne.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d151      	bne.n	8004f96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef2:	e022      	b.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d01e      	beq.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fb fe1c 	bl	8000b38 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_IsAcknowledgeFailed+0x3a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02e      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d1d5      	bne.n	8004ef4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2220      	movs	r2, #32
 8004f56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fedd 	bl	8004d18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fe00e800 	.word	0xfe00e800

08004fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	0d5b      	lsrs	r3, r3, #21
 8004fc0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <I2C_TransferConfig+0x58>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	ea02 0103 	and.w	r1, r2, r3
 8004fce:	897b      	ldrh	r3, [r7, #10]
 8004fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fd4:	7a7b      	ldrb	r3, [r7, #9]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	03ff63ff 	.word	0x03ff63ff

08005000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d138      	bne.n	8005088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005020:	2302      	movs	r3, #2
 8005022:	e032      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d139      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e033      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0bf      	b.n	80052c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f00f f85a 	bl	8014210 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005172:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005188:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68d9      	ldr	r1, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6919      	ldr	r1, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <HAL_LTDC_Init+0x19c>)
 8005200:	400b      	ands	r3, r1
 8005202:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_LTDC_Init+0x19c>)
 800522e:	400b      	ands	r3, r1
 8005230:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6959      	ldr	r1, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0206 	orr.w	r2, r2, #6
 800529e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	f000f800 	.word	0xf000f800

080052d0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f00f f861 	bl	80143a0 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d023      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01e      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2204      	movs	r2, #4
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2204      	movs	r2, #4
 8005358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f86f 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01e      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0202 	bic.w	r2, r2, #2
 800538c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800539c:	f043 0202 	orr.w	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f846 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01b      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f010 f801 	bl	8015400 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2208      	movs	r2, #8
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f80e 	bl	800545c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_LTDC_ConfigLayer+0x1a>
 8005486:	2302      	movs	r3, #2
 8005488:	e02c      	b.n	80054e4 <HAL_LTDC_ConfigLayer+0x74>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2134      	movs	r1, #52	; 0x34
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f8cf 	bl	8005668 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdb0      	pop	{r4, r5, r7, pc}

080054ec <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_LTDC_SetPitch+0x1a>
 8005502:	2302      	movs	r3, #2
 8005504:	e06e      	b.n	80055e4 <HAL_LTDC_SetPitch+0xf8>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2134      	movs	r1, #52	; 0x34
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	3348      	adds	r3, #72	; 0x48
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 800552e:	2304      	movs	r3, #4
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e016      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d102      	bne.n	8005540 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800553a:	2303      	movs	r3, #3
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e010      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d008      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d005      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d002      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b07      	cmp	r3, #7
 8005556:	d102      	bne.n	800555e <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005558:	2302      	movs	r3, #2
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e001      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 800555e:	2301      	movs	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4413      	add	r3, r2
 800557a:	3384      	adds	r3, #132	; 0x84
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	440b      	add	r3, r1
 800558a:	3384      	adds	r3, #132	; 0x84
 800558c:	4619      	mov	r1, r3
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_LTDC_SetPitch+0x104>)
 8005590:	4013      	ands	r3, r2
 8005592:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	440b      	add	r3, r1
 80055bc:	3384      	adds	r3, #132	; 0x84
 80055be:	4619      	mov	r1, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ffff 	.word	0xe000ffff
 80055f4:	40016800 	.word	0x40016800

080055f8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_LTDC_ProgramLineEvent+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e023      	b.n	8005658 <HAL_LTDC_ProgramLineEvent+0x60>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40016800 	.word	0x40016800

08005668 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	4413      	add	r3, r2
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4413      	add	r3, r2
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	01d2      	lsls	r2, r2, #7
 80056a4:	440a      	add	r2, r1
 80056a6:	3284      	adds	r2, #132	; 0x84
 80056a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056be:	4413      	add	r3, r2
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	440b      	add	r3, r1
 80056ce:	3384      	adds	r3, #132	; 0x84
 80056d0:	4619      	mov	r1, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e6:	4413      	add	r3, r2
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	01db      	lsls	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	3384      	adds	r3, #132	; 0x84
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	4611      	mov	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	01d2      	lsls	r2, r2, #7
 8005706:	440a      	add	r2, r1
 8005708:	3284      	adds	r2, #132	; 0x84
 800570a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800570e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571e:	4413      	add	r3, r2
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	440b      	add	r3, r1
 800572e:	3384      	adds	r3, #132	; 0x84
 8005730:	4619      	mov	r1, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	; 0x84
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	4611      	mov	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	01d2      	lsls	r2, r2, #7
 8005752:	440a      	add	r2, r1
 8005754:	3284      	adds	r2, #132	; 0x84
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	4413      	add	r3, r2
 8005768:	3384      	adds	r3, #132	; 0x84
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	4413      	add	r3, r2
 80057aa:	3384      	adds	r3, #132	; 0x84
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b8:	461a      	mov	r2, r3
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	431a      	orrs	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	440b      	add	r3, r1
 80057ce:	3384      	adds	r3, #132	; 0x84
 80057d0:	4619      	mov	r1, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	3384      	adds	r3, #132	; 0x84
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	4611      	mov	r1, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	01d2      	lsls	r2, r2, #7
 80057f2:	440a      	add	r2, r1
 80057f4:	3284      	adds	r2, #132	; 0x84
 80057f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	; 0x84
 800580a:	461a      	mov	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	01db      	lsls	r3, r3, #7
 800581c:	4413      	add	r3, r2
 800581e:	3384      	adds	r3, #132	; 0x84
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	440b      	add	r3, r1
 800582e:	3384      	adds	r3, #132	; 0x84
 8005830:	4619      	mov	r1, r3
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <LTDC_SetConfig+0x32c>)
 8005834:	4013      	ands	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	68f9      	ldr	r1, [r7, #12]
 8005842:	6809      	ldr	r1, [r1, #0]
 8005844:	4608      	mov	r0, r1
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	01c9      	lsls	r1, r1, #7
 800584a:	4401      	add	r1, r0
 800584c:	3184      	adds	r1, #132	; 0x84
 800584e:	4313      	orrs	r3, r2
 8005850:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	4413      	add	r3, r2
 800585e:	3384      	adds	r3, #132	; 0x84
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4413      	add	r3, r2
 800586e:	3384      	adds	r3, #132	; 0x84
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	4413      	add	r3, r2
 8005882:	3384      	adds	r3, #132	; 0x84
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005894:	2304      	movs	r3, #4
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e01b      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80058a2:	2303      	movs	r3, #3
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e014      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d00b      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d007      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d003      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058c4:	2b07      	cmp	r3, #7
 80058c6:	d102      	bne.n	80058ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80058c8:	2302      	movs	r3, #2
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e001      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	; 0x84
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	01d2      	lsls	r2, r2, #7
 80058ec:	440a      	add	r2, r1
 80058ee:	3284      	adds	r2, #132	; 0x84
 80058f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1acb      	subs	r3, r1, r3
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	3303      	adds	r3, #3
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	6809      	ldr	r1, [r1, #0]
 8005918:	4608      	mov	r0, r1
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	01c9      	lsls	r1, r1, #7
 800591e:	4401      	add	r1, r0
 8005920:	3184      	adds	r1, #132	; 0x84
 8005922:	4313      	orrs	r3, r2
 8005924:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	4413      	add	r3, r2
 8005932:	3384      	adds	r3, #132	; 0x84
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	440b      	add	r3, r1
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	4619      	mov	r1, r3
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <LTDC_SetConfig+0x330>)
 8005948:	4013      	ands	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4413      	add	r3, r2
 8005958:	3384      	adds	r3, #132	; 0x84
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	01db      	lsls	r3, r3, #7
 800596c:	4413      	add	r3, r2
 800596e:	3384      	adds	r3, #132	; 0x84
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	01d2      	lsls	r2, r2, #7
 800597c:	440a      	add	r2, r1
 800597e:	3284      	adds	r2, #132	; 0x84
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	fffff8f8 	.word	0xfffff8f8
 8005998:	fffff800 	.word	0xfffff800

0800599c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40007000 	.word	0x40007000

080059bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ea:	f7fb f8a5 	bl	8000b38 <HAL_GetTick>
 80059ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059f0:	e009      	b.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059f2:	f7fb f8a1 	bl	8000b38 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a00:	d901      	bls.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e022      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a12:	d1ee      	bne.n	80059f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0f      	ldr	r2, [pc, #60]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a20:	f7fb f88a 	bl	8000b38 <HAL_GetTick>
 8005a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a26:	e009      	b.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a28:	f7fb f886 	bl	8000b38 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a36:	d901      	bls.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e007      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d1ee      	bne.n	8005a28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40007000 	.word	0x40007000

08005a5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a68:	f7fb f866 	bl	8000b38 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e073      	b.n	8005b60 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_QSPI_Init+0x2c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e06b      	b.n	8005b60 <HAL_QSPI_Init+0x104>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f011 fd1f 	bl	80174e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005aaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f85e 	bl	8005b70 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2120      	movs	r1, #32
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f856 	bl	8005b8c <QSPI_WaitFlagStateUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d135      	bne.n	8005b56 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <HAL_QSPI_Init+0x10c>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	0611      	lsls	r1, r2, #24
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	69d2      	ldr	r2, [r2, #28]
 8005b04:	4311      	orrs	r1, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a12      	ldr	r2, [r2, #32]
 8005b0a:	4311      	orrs	r1, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_QSPI_Init+0x110>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6912      	ldr	r2, [r2, #16]
 8005b22:	0411      	lsls	r1, r2, #16
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6952      	ldr	r2, [r2, #20]
 8005b28:	4311      	orrs	r1, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6992      	ldr	r2, [r2, #24]
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	00ffff2f 	.word	0x00ffff2f
 8005b6c:	ffe0f8fe 	.word	0xffe0f8fe

08005b70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005b9c:	e01a      	b.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d016      	beq.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005bac:	f7fa ffc4 	bl	8000b38 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e00e      	b.n	8005bf2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf14      	ite	ne
 8005be2:	2301      	movne	r3, #1
 8005be4:	2300      	moveq	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1d6      	bne.n	8005b9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e25c      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8087 	beq.w	8005d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c20:	4b96      	ldr	r3, [pc, #600]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2c:	4b93      	ldr	r3, [pc, #588]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
 8005c38:	4b90      	ldr	r3, [pc, #576]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b8d      	ldr	r3, [pc, #564]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x130>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d168      	bne.n	8005d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e236      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x7a>
 8005c68:	4b84      	ldr	r3, [pc, #528]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a83      	ldr	r2, [pc, #524]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02e      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x9c>
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7e      	ldr	r2, [pc, #504]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b7c      	ldr	r3, [pc, #496]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7b      	ldr	r2, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e01d      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0xc0>
 8005ca2:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b73      	ldr	r3, [pc, #460]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a72      	ldr	r2, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e00b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005cbc:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6e      	ldr	r2, [pc, #440]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fa ff2c 	bl	8000b38 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce4:	f7fa ff28 	bl	8000b38 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e1ea      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe8>
 8005d02:	e014      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fa ff18 	bl	8000b38 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fa ff14 	bl	8000b38 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1d6      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x110>
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d069      	beq.n	8005e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3a:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1aa      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e040      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d023      	beq.n	8005ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a38      	ldr	r2, [pc, #224]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fa feca 	bl	8000b38 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da8:	f7fa fec6 	bl	8000b38 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e188      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4929      	ldr	r1, [pc, #164]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	e018      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fa fea6 	bl	8000b38 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fa fea2 	bl	8000b38 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e164      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d038      	beq.n	8005e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d019      	beq.n	8005e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fa fe83 	bl	8000b38 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fa fe7f 	bl	8000b38 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e141      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x23a>
 8005e54:	e01a      	b.n	8005e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fa fe69 	bl	8000b38 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6a:	f7fa fe65 	bl	8000b38 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d903      	bls.n	8005e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e127      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
 8005e7c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e80:	4b94      	ldr	r3, [pc, #592]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80a4 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b8e      	ldr	r3, [pc, #568]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec2:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ece:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a81      	ldr	r2, [pc, #516]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eda:	f7fa fe2d 	bl	8000b38 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fa fe29 	bl	8000b38 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	; 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0eb      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef4:	4b78      	ldr	r3, [pc, #480]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x31a>
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a71      	ldr	r2, [pc, #452]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	e02d      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x33c>
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	e01c      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCC_OscConfig+0x35e>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	e00b      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f5a:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f6c:	f023 0304 	bic.w	r3, r3, #4
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fa fddd 	bl	8000b38 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	e00a      	b.n	8005f98 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fa fdd9 	bl	8000b38 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e099      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ee      	beq.n	8005f82 <HAL_RCC_OscConfig+0x386>
 8005fa4:	e014      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fa fdc7 	bl	8000b38 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fac:	e00a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fae:	f7fa fdc3 	bl	8000b38 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e083      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ee      	bne.n	8005fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a3e      	ldr	r2, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06f      	beq.n	80060ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fea:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d067      	beq.n	80060c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d149      	bne.n	8006092 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fa fd95 	bl	8000b38 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006012:	f7fa fd91 	bl	8000b38 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e053      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f0      	bne.n	8006012 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	019b      	lsls	r3, r3, #6
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	3b01      	subs	r3, #1
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	4313      	orrs	r3, r2
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fa fd65 	bl	8000b38 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006072:	f7fa fd61 	bl	8000b38 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e023      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x476>
 8006090:	e01b      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fa fd4b 	bl	8000b38 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fa fd47 	bl	8000b38 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e009      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x4aa>
 80060c4:	e001      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0ce      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d910      	bls.n	8006124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b66      	ldr	r3, [pc, #408]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 020f 	bic.w	r2, r3, #15
 800610a:	4964      	ldr	r1, [pc, #400]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b62      	ldr	r3, [pc, #392]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0b6      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a57      	ldr	r2, [pc, #348]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006154:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800615e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	494c      	ldr	r1, [pc, #304]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d040      	beq.n	8006200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e07d      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e071      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e069      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061be:	4b38      	ldr	r3, [pc, #224]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f023 0203 	bic.w	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4935      	ldr	r1, [pc, #212]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d0:	f7fa fcb2 	bl	8000b38 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d8:	f7fa fcae 	bl	8000b38 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e051      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 020c 	and.w	r2, r3, #12
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d1eb      	bne.n	80061d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d210      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b23      	ldr	r3, [pc, #140]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	4921      	ldr	r1, [pc, #132]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b1f      	ldr	r3, [pc, #124]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e030      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4915      	ldr	r1, [pc, #84]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	490d      	ldr	r1, [pc, #52]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800626e:	f000 f81d 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006272:	4601      	mov	r1, r0
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	fa21 f303 	lsr.w	r3, r1, r3
 8006286:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800628a:	2000      	movs	r0, #0
 800628c:	f011 fd00 	bl	8017c90 <HAL_InitTick>

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023c00 	.word	0x40023c00
 80062a0:	40023800 	.word	0x40023800
 80062a4:	08021110 	.word	0x08021110
 80062a8:	20000064 	.word	0x20000064

080062ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c2:	4b50      	ldr	r3, [pc, #320]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d007      	beq.n	80062de <HAL_RCC_GetSysClockFreq+0x32>
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d008      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x38>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 808d 	bne.w	80063f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062da:	60bb      	str	r3, [r7, #8]
       break;
 80062dc:	e08c      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 80062e0:	60bb      	str	r3, [r7, #8]
      break;
 80062e2:	e089      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e4:	4b47      	ldr	r3, [pc, #284]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062ee:	4b45      	ldr	r3, [pc, #276]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d023      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fa:	4b42      	ldr	r3, [pc, #264]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	ea03 0501 	and.w	r5, r3, r1
 8006310:	ea04 0602 	and.w	r6, r4, r2
 8006314:	4a3d      	ldr	r2, [pc, #244]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006316:	fb02 f106 	mul.w	r1, r2, r6
 800631a:	2200      	movs	r2, #0
 800631c:	fb02 f205 	mul.w	r2, r2, r5
 8006320:	440a      	add	r2, r1
 8006322:	493a      	ldr	r1, [pc, #232]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006324:	fba5 0101 	umull	r0, r1, r5, r1
 8006328:	1853      	adds	r3, r2, r1
 800632a:	4619      	mov	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f04f 0400 	mov.w	r4, #0
 8006332:	461a      	mov	r2, r3
 8006334:	4623      	mov	r3, r4
 8006336:	f7f9 ffbb 	bl	80002b0 <__aeabi_uldivmod>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e049      	b.n	80063d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	f04f 0400 	mov.w	r4, #0
 800634c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	ea03 0501 	and.w	r5, r3, r1
 8006358:	ea04 0602 	and.w	r6, r4, r2
 800635c:	4629      	mov	r1, r5
 800635e:	4632      	mov	r2, r6
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f04f 0400 	mov.w	r4, #0
 8006368:	0154      	lsls	r4, r2, #5
 800636a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800636e:	014b      	lsls	r3, r1, #5
 8006370:	4619      	mov	r1, r3
 8006372:	4622      	mov	r2, r4
 8006374:	1b49      	subs	r1, r1, r5
 8006376:	eb62 0206 	sbc.w	r2, r2, r6
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	0194      	lsls	r4, r2, #6
 8006384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006388:	018b      	lsls	r3, r1, #6
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	eb64 0402 	sbc.w	r4, r4, r2
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	00e2      	lsls	r2, r4, #3
 800639a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800639e:	00d9      	lsls	r1, r3, #3
 80063a0:	460b      	mov	r3, r1
 80063a2:	4614      	mov	r4, r2
 80063a4:	195b      	adds	r3, r3, r5
 80063a6:	eb44 0406 	adc.w	r4, r4, r6
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	02a2      	lsls	r2, r4, #10
 80063b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063b8:	0299      	lsls	r1, r3, #10
 80063ba:	460b      	mov	r3, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	4621      	mov	r1, r4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7f9 ff70 	bl	80002b0 <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	3301      	adds	r3, #1
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	60bb      	str	r3, [r7, #8]
      break;
 80063f0:	e002      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80063f4:	60bb      	str	r3, [r7, #8]
      break;
 80063f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f8:	68bb      	ldr	r3, [r7, #8]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400
 800640c:	017d7840 	.word	0x017d7840

08006410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000064 	.word	0x20000064

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800642c:	f7ff fff0 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006430:	4601      	mov	r1, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4a03      	ldr	r2, [pc, #12]	; (800644c <HAL_RCC_GetPCLK1Freq+0x24>)
 800643e:	5cd3      	ldrb	r3, [r2, r3]
 8006440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	08021120 	.word	0x08021120

08006450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006454:	f7ff ffdc 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006458:	4601      	mov	r1, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0b5b      	lsrs	r3, r3, #13
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	08021120 	.word	0x08021120

08006478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220f      	movs	r2, #15
 8006486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCC_GetClockConfig+0x60>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40023c00 	.word	0x40023c00

080064dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d012      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006504:	4b69      	ldr	r3, [pc, #420]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800650e:	6093      	str	r3, [r2, #8]
 8006510:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	4964      	ldr	r1, [pc, #400]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006536:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	4959      	ldr	r1, [pc, #356]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	d101      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006572:	4b4e      	ldr	r3, [pc, #312]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	494a      	ldr	r1, [pc, #296]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006590:	d101      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006592:	2301      	movs	r3, #1
 8006594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808b 	beq.w	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065c0:	4b3a      	ldr	r3, [pc, #232]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a39      	ldr	r2, [pc, #228]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d8:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a34      	ldr	r2, [pc, #208]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fa faa8 	bl	8000b38 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fa faa4 	bl	8000b38 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e355      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d035      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	429a      	cmp	r2, r3
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006650:	4b16      	ldr	r3, [pc, #88]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	d114      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fa fa6c 	bl	8000b38 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006662:	e00a      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006664:	f7fa fa68 	bl	8000b38 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e317      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0ee      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d111      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066a2:	400b      	ands	r3, r1
 80066a4:	4901      	ldr	r1, [pc, #4]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40007000 	.word	0x40007000
 80066b4:	0ffffcff 	.word	0x0ffffcff
 80066b8:	4bb0      	ldr	r3, [pc, #704]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4aaf      	ldr	r2, [pc, #700]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	4bad      	ldr	r3, [pc, #692]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	49aa      	ldr	r1, [pc, #680]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d010      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066e2:	4ba6      	ldr	r3, [pc, #664]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	4aa4      	ldr	r2, [pc, #656]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066f2:	4ba2      	ldr	r3, [pc, #648]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	499f      	ldr	r1, [pc, #636]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671e:	4997      	ldr	r1, [pc, #604]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006740:	498e      	ldr	r1, [pc, #568]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006754:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	4986      	ldr	r1, [pc, #536]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006776:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	497d      	ldr	r1, [pc, #500]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006798:	4b78      	ldr	r3, [pc, #480]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	4975      	ldr	r1, [pc, #468]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ba:	4b70      	ldr	r3, [pc, #448]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f023 020c 	bic.w	r2, r3, #12
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c8:	496c      	ldr	r1, [pc, #432]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067dc:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	4964      	ldr	r1, [pc, #400]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006804:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	495b      	ldr	r1, [pc, #364]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006820:	4b56      	ldr	r3, [pc, #344]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	4953      	ldr	r1, [pc, #332]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006842:	4b4e      	ldr	r3, [pc, #312]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	494a      	ldr	r1, [pc, #296]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006864:	4b45      	ldr	r3, [pc, #276]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	4942      	ldr	r1, [pc, #264]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006894:	4939      	ldr	r1, [pc, #228]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a8:	4b34      	ldr	r3, [pc, #208]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b6:	4931      	ldr	r1, [pc, #196]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068ca:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d8:	4928      	ldr	r1, [pc, #160]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e8:	d101      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068ea:	2301      	movs	r3, #1
 80068ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	4918      	ldr	r1, [pc, #96]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800692c:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	490f      	ldr	r1, [pc, #60]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d005      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006952:	f040 80d8 	bne.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a08      	ldr	r2, [pc, #32]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800695c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006962:	f7fa f8e9 	bl	8000b38 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006968:	e00a      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800696a:	f7fa f8e5 	bl	8000b38 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b64      	cmp	r3, #100	; 0x64
 8006976:	d903      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e196      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800697c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ee      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	019a      	lsls	r2, r3, #6
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	071b      	lsls	r3, r3, #28
 80069d4:	4957      	ldr	r1, [pc, #348]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a06:	d129      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a08:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	0f1b      	lsrs	r3, r3, #28
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	019a      	lsls	r2, r3, #6
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	071b      	lsls	r3, r3, #28
 8006a3c:	493d      	ldr	r1, [pc, #244]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4a:	f023 021f 	bic.w	r2, r3, #31
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a68:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a76:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	019a      	lsls	r2, r3, #6
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	071b      	lsls	r3, r3, #28
 8006a9c:	4925      	ldr	r1, [pc, #148]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	019a      	lsls	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	4919      	ldr	r1, [pc, #100]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fa f82a 	bl	8000b38 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7fa f826 	bl	8000b38 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	; 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0d7      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 80cd 	bne.w	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1a:	f7fa f80d 	bl	8000b38 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b22:	f7fa f809 	bl	8000b38 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d903      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0ba      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006b34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d0ed      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	0f1b      	lsrs	r3, r3, #28
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	019a      	lsls	r2, r3, #6
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4944      	ldr	r1, [pc, #272]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	493d      	ldr	r1, [pc, #244]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd8:	d11d      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	019a      	lsls	r2, r3, #6
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c80:	f7f9 ff5a 	bl	8000b38 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c88:	f7f9 ff56 	bl	8000b38 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e007      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d1ef      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800

08006cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cd6:	f040 8086 	bne.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ce8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d03e      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf6:	d073      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d000      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006cfc:	e074      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cfe:	4b84      	ldr	r3, [pc, #528]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0a:	4b81      	ldr	r3, [pc, #516]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	4a80      	ldr	r2, [pc, #512]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e007      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d1c:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	4a7c      	ldr	r2, [pc, #496]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d2c:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d3a:	4b75      	ldr	r3, [pc, #468]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d40:	099b      	lsrs	r3, r3, #6
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fb02 f203 	mul.w	r2, r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d54:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
        break;
 8006d6e:	e03b      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d7c:	4b64      	ldr	r3, [pc, #400]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	4a63      	ldr	r2, [pc, #396]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e007      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d96:	4a60      	ldr	r2, [pc, #384]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d9e:	4b5c      	ldr	r3, [pc, #368]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	0e1b      	lsrs	r3, r3, #24
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	fb02 f203 	mul.w	r2, r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006dc6:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]
        break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006de0:	4b4e      	ldr	r3, [pc, #312]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006de2:	617b      	str	r3, [r7, #20]
        break;
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006de6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	f040 8086 	bne.w	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e00:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e08:	d03e      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e0e:	d073      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d000      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e14:	e074      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d108      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e22:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e007      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e44:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e52:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	fb02 f203 	mul.w	r2, r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
        break;
 8006e86:	e03b      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e007      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebc:	0e1b      	lsrs	r3, r3, #24
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ec4:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f203 	mul.w	r2, r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
        break;
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006efa:	617b      	str	r3, [r7, #20]
        break;
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006efe:	bf00      	nop

  return frequency;
 8006f00:	697b      	ldr	r3, [r7, #20]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	017d7840 	.word	0x017d7840
 8006f1c:	00bb8000 	.word	0x00bb8000

08006f20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e06b      	b.n	800700a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7f5b      	ldrb	r3, [r3, #29]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f010 fb60 	bl	8017608 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ca      	movs	r2, #202	; 0xca
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2253      	movs	r2, #83	; 0x53
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb00 	bl	8007564 <RTC_EnterInitMode>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	22ff      	movs	r2, #255	; 0xff
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e046      	b.n	800700a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_RTC_Init+0xf4>)
 8006f88:	400b      	ands	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68d2      	ldr	r2, [r2, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	041a      	lsls	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0208 	bic.w	r2, r2, #8
 8006fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	ff8fffbf 	.word	0xff8fffbf

08007018 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	7f1b      	ldrb	r3, [r3, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_RTC_SetTime+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e0a8      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d126      	bne.n	8007094 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 faac 	bl	80075bc <RTC_ByteToBcd2>
 8007064:	4603      	mov	r3, r0
 8007066:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 faa5 	bl	80075bc <RTC_ByteToBcd2>
 8007072:	4603      	mov	r3, r0
 8007074:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007076:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	789b      	ldrb	r3, [r3, #2]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fa9d 	bl	80075bc <RTC_ByteToBcd2>
 8007082:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007084:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	7b1b      	ldrb	r3, [r3, #12]
 800708c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e018      	b.n	80070c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	7b1b      	ldrb	r3, [r3, #12]
 80070c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa44 	bl	8007564 <RTC_EnterInitMode>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	22ff      	movs	r2, #255	; 0xff
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2204      	movs	r2, #4
 80070ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e045      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	4b23      	ldr	r3, [pc, #140]	; (8007190 <HAL_RTC_SetTime+0x178>)
 8007102:	400b      	ands	r3, r1
 8007104:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007114:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d111      	bne.n	8007170 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f9e1 	bl	8007514 <HAL_RTC_WaitForSynchro>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2204      	movs	r2, #4
 8007164:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e00a      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007184:	2300      	movs	r3, #0
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd90      	pop	{r4, r7, pc}
 800718e:	bf00      	nop
 8007190:	007f7f7f 	.word	0x007f7f7f

08007194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	7f1b      	ldrb	r3, [r3, #28]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_RTC_SetDate+0x1c>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e092      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10e      	bne.n	80071e0 <HAL_RTC_SetDate+0x4c>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	330a      	adds	r3, #10
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11c      	bne.n	8007220 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f9e6 	bl	80075bc <RTC_ByteToBcd2>
 80071f0:	4603      	mov	r3, r0
 80071f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f9df 	bl	80075bc <RTC_ByteToBcd2>
 80071fe:	4603      	mov	r3, r0
 8007200:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007202:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f9d7 	bl	80075bc <RTC_ByteToBcd2>
 800720e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007210:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e00e      	b.n	800723e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	78db      	ldrb	r3, [r3, #3]
 8007224:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800722c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007232:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	22ca      	movs	r2, #202	; 0xca
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2253      	movs	r2, #83	; 0x53
 800724c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f988 	bl	8007564 <RTC_EnterInitMode>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	22ff      	movs	r2, #255	; 0xff
 8007260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2204      	movs	r2, #4
 8007266:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e031      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_RTC_SetDate+0x14c>)
 800727a:	400b      	ands	r3, r1
 800727c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f939 	bl	8007514 <HAL_RTC_WaitForSynchro>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2204      	movs	r2, #4
 80072b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e00a      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd90      	pop	{r4, r7, pc}
 80072de:	bf00      	nop
 80072e0:	00ffff3f 	.word	0x00ffff3f

080072e4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b089      	sub	sp, #36	; 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7f1b      	ldrb	r3, [r3, #28]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_RTC_SetAlarm+0x24>
 8007304:	2302      	movs	r3, #2
 8007306:	e101      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d137      	bne.n	800738a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f942 	bl	80075bc <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f93b 	bl	80075bc <RTC_ByteToBcd2>
 8007346:	4603      	mov	r3, r0
 8007348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800734a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f933 	bl	80075bc <RTC_ByteToBcd2>
 8007356:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007358:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007362:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f925 	bl	80075bc <RTC_ByteToBcd2>
 8007372:	4603      	mov	r3, r0
 8007374:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007376:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800737e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007384:	4313      	orrs	r3, r2
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e023      	b.n	80073d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	7b1b      	ldrb	r3, [r3, #12]
 80073b6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	22ca      	movs	r2, #202	; 0xca
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2253      	movs	r2, #83	; 0x53
 80073ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f6:	d13f      	bne.n	8007478 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007406:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007416:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007418:	f7f9 fb8e 	bl	8000b38 <HAL_GetTick>
 800741c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800741e:	e013      	b.n	8007448 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007420:	f7f9 fb8a 	bl	8000b38 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742e:	d90b      	bls.n	8007448 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2203      	movs	r2, #3
 800743c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e061      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0e4      	beq.n	8007420 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	e03e      	b.n	80074f6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007486:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007496:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007498:	f7f9 fb4e 	bl	8000b38 <HAL_GetTick>
 800749c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800749e:	e013      	b.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a0:	f7f9 fb4a 	bl	8000b38 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d90b      	bls.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2203      	movs	r2, #3
 80074bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e021      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0e4      	beq.n	80074a0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3724      	adds	r7, #36	; 0x24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007530:	f7f9 fb02 	bl	8000b38 <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007536:	e009      	b.n	800754c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007538:	f7f9 fafe 	bl	8000b38 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007546:	d901      	bls.n	800754c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e007      	b.n	800755c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ee      	beq.n	8007538 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d119      	bne.n	80075b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007588:	f7f9 fad6 	bl	8000b38 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800758e:	e009      	b.n	80075a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007590:	f7f9 fad2 	bl	8000b38 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800759e:	d901      	bls.n	80075a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e007      	b.n	80075b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0ee      	beq.n	8007590 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80075ca:	e005      	b.n	80075d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	3b0a      	subs	r3, #10
 80075d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b09      	cmp	r3, #9
 80075dc:	d8f6      	bhi.n	80075cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2db      	uxtb	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7f1b      	ldrb	r3, [r3, #28]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e03e      	b.n	8007692 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007628:	4013      	ands	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	22ca      	movs	r2, #202	; 0xca
 800763a:	625a      	str	r2, [r3, #36]	; 0x24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2253      	movs	r2, #83	; 0x53
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0206 	bic.w	r2, r2, #6
 8007652:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	430a      	orrs	r2, r1
 8007662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	fffff7f7 	.word	0xfffff7f7

080076a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e149      	b.n	8007956 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f010 fa70 	bl	8017bbc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f94f 	bl	8007988 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d007      	beq.n	8007702 <HAL_SAI_Init+0x5e>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d302      	bcc.n	80076fc <HAL_SAI_Init+0x58>
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d006      	beq.n	8007708 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80076fa:	e008      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
      break;
 8007700:	e005      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007702:	2310      	movs	r3, #16
 8007704:	61fb      	str	r3, [r7, #28]
      break;
 8007706:	e002      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007708:	2320      	movs	r3, #32
 800770a:	61fb      	str	r3, [r7, #28]
      break;
 800770c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d81d      	bhi.n	8007752 <HAL_SAI_Init+0xae>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_SAI_Init+0x78>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007733 	.word	0x08007733
 8007724:	0800773b 	.word	0x0800773b
 8007728:	08007743 	.word	0x08007743
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007730:	e010      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007736:	617b      	str	r3, [r7, #20]
      }
      break;
 8007738:	e00c      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800773a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800773e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007740:	e008      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007746:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007750:	e000      	b.n	8007754 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007752:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a81      	ldr	r2, [pc, #516]	; (8007960 <HAL_SAI_Init+0x2bc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_SAI_Init+0xc4>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a80      	ldr	r2, [pc, #512]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007768:	4a7f      	ldr	r2, [pc, #508]	; (8007968 <HAL_SAI_Init+0x2c4>)
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e002      	b.n	8007776 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007770:	4a7e      	ldr	r2, [pc, #504]	; (800796c <HAL_SAI_Init+0x2c8>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d043      	beq.n	8007806 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a76      	ldr	r2, [pc, #472]	; (8007960 <HAL_SAI_Init+0x2bc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_SAI_Init+0xf2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a74      	ldr	r2, [pc, #464]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d104      	bne.n	80077a0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007796:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800779a:	f7ff fa8d 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800779e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a72      	ldr	r2, [pc, #456]	; (8007970 <HAL_SAI_Init+0x2cc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_SAI_Init+0x110>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a71      	ldr	r2, [pc, #452]	; (8007974 <HAL_SAI_Init+0x2d0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d104      	bne.n	80077be <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077b8:	f7ff fa7e 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077bc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	025b      	lsls	r3, r3, #9
 80077d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a67      	ldr	r2, [pc, #412]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	08da      	lsrs	r2, r3, #3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	4b64      	ldr	r3, [pc, #400]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077e8:	fba3 2301 	umull	r2, r3, r3, r1
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	1aca      	subs	r2, r1, r3
 80077f8:	2a08      	cmp	r2, #8
 80077fa:	d904      	bls.n	8007806 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_SAI_Init+0x172>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d109      	bne.n	800782a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_SAI_Init+0x17e>
 800781e:	2300      	movs	r3, #0
 8007820:	e001      	b.n	8007826 <HAL_SAI_Init+0x182>
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e008      	b.n	800783c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d102      	bne.n	8007838 <HAL_SAI_Init+0x194>
 8007832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007836:	e000      	b.n	800783a <HAL_SAI_Init+0x196>
 8007838:	2300      	movs	r3, #0
 800783a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b4d      	ldr	r3, [pc, #308]	; (800797c <HAL_SAI_Init+0x2d8>)
 8007848:	400b      	ands	r3, r1
 800784a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6819      	ldr	r1, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007860:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	431a      	orrs	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007874:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007880:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b38      	ldr	r3, [pc, #224]	; (8007980 <HAL_SAI_Init+0x2dc>)
 800789e:	400b      	ands	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <HAL_SAI_Init+0x2e0>)
 80078cc:	400b      	ands	r3, r1
 80078ce:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6899      	ldr	r1, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078e0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80078e6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80078ec:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	3b01      	subs	r3, #1
 80078f4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80078f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800790e:	400b      	ands	r3, r1
 8007910:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68d9      	ldr	r1, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	3b01      	subs	r3, #1
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40015804 	.word	0x40015804
 8007964:	40015824 	.word	0x40015824
 8007968:	40015800 	.word	0x40015800
 800796c:	40015c00 	.word	0x40015c00
 8007970:	40015c04 	.word	0x40015c04
 8007974:	40015c24 	.word	0x40015c24
 8007978:	cccccccd 	.word	0xcccccccd
 800797c:	ff05c010 	.word	0xff05c010
 8007980:	ffff1ff0 	.word	0xffff1ff0
 8007984:	fff88000 	.word	0xfff88000

08007988 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007988:	b490      	push	{r4, r7}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <SAI_Disable+0x64>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <SAI_Disable+0x68>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0b1b      	lsrs	r3, r3, #12
 800799c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079b0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80079b2:	4623      	mov	r3, r4
 80079b4:	1e5c      	subs	r4, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
      break;
 80079ce:	e006      	b.n	80079de <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e9      	bne.n	80079b2 <SAI_Disable+0x2a>

  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc90      	pop	{r4, r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000064 	.word	0x20000064
 80079f0:	95cbec1b 	.word	0x95cbec1b

080079f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e01d      	b.n	8007a42 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f00f fe0f 	bl	801763c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2203      	movs	r2, #3
 8007a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f80f 	bl	8007a4a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a4a:	b5b0      	push	{r4, r5, r7, lr}
 8007a4c:	b08e      	sub	sp, #56	; 0x38
 8007a4e:	af04      	add	r7, sp, #16
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007a6a:	2376      	movs	r3, #118	; 0x76
 8007a6c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	466c      	mov	r4, sp
 8007a74:	f107 0318 	add.w	r3, r7, #24
 8007a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a86:	4628      	mov	r0, r5
 8007a88:	f002 ff68 	bl	800a95c <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a9a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f002 ff94 	bl	800a9ce <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7f9 f84a 	bl	8000b50 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fe24 	bl	800870a <SD_PowerON>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e013      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd48 	bl	8008578 <SD_InitCard>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b14 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0b0      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 80a9 	bne.w	8007c9c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d907      	bls.n	8007b6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e097      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	4a45      	ldr	r2, [pc, #276]	; (8007ca8 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007b94:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	4a44      	ldr	r2, [pc, #272]	; (8007cac <HAL_SD_ReadBlocks_DMA+0x198>)
 8007b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3380      	adds	r3, #128	; 0x80
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	025b      	lsls	r3, r3, #9
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	f7f9 fccb 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0208 	orr.w	r2, r2, #8
 8007bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d002      	beq.n	8007bdc <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	025b      	lsls	r3, r3, #9
 8007be6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be8:	2390      	movs	r3, #144	; 0x90
 8007bea:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bec:	2302      	movs	r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f107 0214 	add.w	r2, r7, #20
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 ff4c 	bl	800aaa0 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 ff71 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8007c16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d010      	beq.n	8007c40 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e02e      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d90a      	bls.n	8007c5c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2282      	movs	r2, #130	; 0x82
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f002 ff98 	bl	800ab88 <SDMMC_CmdReadMultiBlock>
 8007c58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c5a:	e009      	b.n	8007c70 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2281      	movs	r2, #129	; 0x81
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 ff69 	bl	800ab40 <SDMMC_CmdReadSingleBlock>
 8007c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e002      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3730      	adds	r7, #48	; 0x30
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08008475 	.word	0x08008475
 8007cac:	080084e3 	.word	0x080084e3

08007cb0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08c      	sub	sp, #48	; 0x30
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0b0      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f040 80a9 	bne.w	8007e38 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d907      	bls.n	8007d0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e097      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 021a 	orr.w	r2, r2, #26
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	4a45      	ldr	r2, [pc, #276]	; (8007e44 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007d30:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	4a44      	ldr	r2, [pc, #272]	; (8007e48 <HAL_SD_WriteBlocks_DMA+0x198>)
 8007d38:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	2200      	movs	r2, #0
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d002      	beq.n	8007d50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	025b      	lsls	r3, r3, #9
 8007d4e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 fecd 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8007d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e058      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d90a      	bls.n	8007da4 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22a0      	movs	r2, #160	; 0xa0
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 ff3c 	bl	800ac18 <SDMMC_CmdWriteMultiBlock>
 8007da0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007da2:	e009      	b.n	8007db8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2290      	movs	r2, #144	; 0x90
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 ff0d 	bl	800abd0 <SDMMC_CmdWriteSingleBlock>
 8007db6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e02c      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0208 	orr.w	r2, r2, #8
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3380      	adds	r3, #128	; 0x80
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	025b      	lsls	r3, r3, #9
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	f7f9 fba6 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e08:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	025b      	lsls	r3, r3, #9
 8007e12:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e14:	2390      	movs	r3, #144	; 0x90
 8007e16:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f107 0214 	add.w	r2, r7, #20
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fe36 	bl	800aaa0 <SDMMC_ConfigData>
    
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3730      	adds	r7, #48	; 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0800844b 	.word	0x0800844b
 8007e48:	080084e3 	.word	0x080084e3

08007e4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	089b      	lsrs	r3, r3, #2
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0e1b      	lsrs	r3, r3, #24
 8007ede:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	09db      	lsrs	r3, r3, #7
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	099b      	lsrs	r3, r3, #6
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8086 	bne.w	8008084 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	029b      	lsls	r3, r3, #10
 8007f7c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	431a      	orrs	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	099b      	lsrs	r3, r3, #6
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	089b      	lsrs	r3, r3, #2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	b2db      	uxtb	r3, r3
 8008018:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	7e1b      	ldrb	r3, [r3, #24]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	09db      	lsrs	r3, r3, #7
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	7e1b      	ldrb	r3, [r3, #24]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3302      	adds	r3, #2
 8008046:	2201      	movs	r2, #1
 8008048:	409a      	lsls	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	fb02 f203 	mul.w	r2, r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	7a1b      	ldrb	r3, [r3, #8]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	2301      	movs	r3, #1
 8008060:	4093      	lsls	r3, r2
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008070:	0a52      	lsrs	r2, r2, #9
 8008072:	fb02 f203 	mul.w	r2, r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	661a      	str	r2, [r3, #96]	; 0x60
 8008082:	e04d      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	2b01      	cmp	r3, #1
 800808a:	d138      	bne.n	80080fe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008090:	b2db      	uxtb	r3, r3
 8008092:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a4:	0e1b      	lsrs	r3, r3, #24
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	431a      	orrs	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080bc:	0c1b      	lsrs	r3, r3, #16
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	029a      	lsls	r2, r3, #10
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f2:	659a      	str	r2, [r3, #88]	; 0x58
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
 80080fc:	e010      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0c1      	b.n	80082a4 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	099b      	lsrs	r3, r3, #6
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	7e9b      	ldrb	r3, [r3, #26]
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	09db      	lsrs	r3, r3, #7
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4313      	orrs	r3, r2
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	0e1b      	lsrs	r3, r3, #24
 8008178:	b2db      	uxtb	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	09db      	lsrs	r3, r3, #7
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 030c 	and.w	r3, r3, #12
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	7fdb      	ldrb	r3, [r3, #31]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	b2db      	uxtb	r3, r3
 8008214:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	09db      	lsrs	r3, r3, #7
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	b2da      	uxtb	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	b2db      	uxtb	r3, r3
 8008286:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b08e      	sub	sp, #56	; 0x38
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	2b03      	cmp	r3, #3
 8008324:	d02e      	beq.n	8008384 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d106      	bne.n	800833c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
 800833a:	e029      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d10a      	bne.n	800835a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fab2 	bl	80088ae <SD_WideBus_Enable>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
 8008358:	e01a      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 faf1 	bl	8008948 <SD_WideBus_Disable>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
 8008374:	e00c      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
 8008382:	e005      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e024      	b.n	80083f8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681d      	ldr	r5, [r3, #0]
 80083d4:	466c      	mov	r4, sp
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e8:	4628      	mov	r0, r5
 80083ea:	f002 fab7 	bl	800a95c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	; 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bdb0      	pop	{r4, r5, r7, pc}

08008400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008408:	2304      	movs	r3, #4
 800840a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa1d 	bl	800885a <SD_SendStatus>
 8008420:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0a5b      	lsrs	r3, r3, #9
 8008438:	b2db      	uxtb	r3, r3
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008466:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	2b82      	cmp	r3, #130	; 0x82
 800848c:	d111      	bne.n	80084b2 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f002 fbe4 	bl	800ac60 <SDMMC_CmdStopTransfer>
 8008498:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fccd 	bl	8007e4c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0208 	bic.w	r2, r2, #8
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f00d f9e9 	bl	80158ac <HAL_SD_RxCpltCallback>
#endif
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f9 f88f 	bl	8001614 <HAL_DMA_GetError>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d039      	beq.n	8008570 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2b01      	cmp	r3, #1
 8008504:	d004      	beq.n	8008510 <SD_DMAError+0x2e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850c:	2b01      	cmp	r3, #1
 800850e:	d12c      	bne.n	800856a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008528:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff ff62 	bl	8008400 <HAL_SD_GetCardState>
 800853c:	4603      	mov	r3, r0
 800853e:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b06      	cmp	r3, #6
 8008544:	d002      	beq.n	800854c <SD_DMAError+0x6a>
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b05      	cmp	r3, #5
 800854a:	d10a      	bne.n	8008562 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f002 fb85 	bl	800ac60 <SDMMC_CmdStopTransfer>
 8008556:	4602      	mov	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	431a      	orrs	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fc6e 	bl	8007e4c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b094      	sub	sp, #80	; 0x50
 800857c:	af04      	add	r7, sp, #16
 800857e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008580:	2300      	movs	r3, #0
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008584:	2301      	movs	r3, #1
 8008586:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fa2c 	bl	800a9ea <SDMMC_GetPowerState>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800859c:	e0b1      	b.n	8008702 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d02f      	beq.n	8008606 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fc73 	bl	800ae96 <SDMMC_CmdSendCID>
 80085b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SD_InitCard+0x44>
    {
      return errorstate;
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	e0a2      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f002 fa57 	bl	800aa76 <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f002 fa4e 	bl	800aa76 <SDMMC_GetResponse>
 80085da:	4602      	mov	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2108      	movs	r1, #8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 fa45 	bl	800aa76 <SDMMC_GetResponse>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	210c      	movs	r1, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fa3c 	bl	800aa76 <SDMMC_GetResponse>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	2b03      	cmp	r3, #3
 800860c:	d00d      	beq.n	800862a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f107 020e 	add.w	r2, r7, #14
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f002 fc7d 	bl	800af18 <SDMMC_CmdSetRelAdd>
 800861e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SD_InitCard+0xb2>
    {
      return errorstate;
 8008626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008628:	e06b      	b.n	8008702 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	2b03      	cmp	r3, #3
 8008630:	d036      	beq.n	80086a0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f002 fc45 	bl	800aed6 <SDMMC_CmdSendCSD>
 800864c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SD_InitCard+0xe0>
    {
      return errorstate;
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	e054      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f002 fa09 	bl	800aa76 <SDMMC_GetResponse>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2104      	movs	r1, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f002 fa00 	bl	800aa76 <SDMMC_GetResponse>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2108      	movs	r1, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f002 f9f7 	bl	800aa76 <SDMMC_GetResponse>
 8008688:	4602      	mov	r2, r0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	210c      	movs	r1, #12
 8008694:	4618      	mov	r0, r3
 8008696:	f002 f9ee 	bl	800aa76 <SDMMC_GetResponse>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2104      	movs	r1, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 f9e5 	bl	800aa76 <SDMMC_GetResponse>
 80086ac:	4603      	mov	r3, r0
 80086ae:	0d1a      	lsrs	r2, r3, #20
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fbd0 	bl	8007e60 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	461a      	mov	r2, r3
 80086d0:	4623      	mov	r3, r4
 80086d2:	4608      	mov	r0, r1
 80086d4:	f002 fae8 	bl	800aca8 <SDMMC_CmdSelDesel>
 80086d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_InitCard+0x16c>
  {
    return errorstate;
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	e00e      	b.n	8008702 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681d      	ldr	r5, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	466c      	mov	r4, sp
 80086ec:	f103 0210 	add.w	r2, r3, #16
 80086f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80086f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086f6:	3304      	adds	r3, #4
 80086f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fa:	4628      	mov	r0, r5
 80086fc:	f002 f92e 	bl	800a95c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3740      	adds	r7, #64	; 0x40
 8008706:	46bd      	mov	sp, r7
 8008708:	bdb0      	pop	{r4, r5, r7, pc}

0800870a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fae3 	bl	800acf2 <SDMMC_CmdGoIdleState>
 800872c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <SD_PowerON+0x2e>
  {
    return errorstate;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e08c      	b.n	8008852 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f002 faf8 	bl	800ad32 <SDMMC_CmdOperCond>
 8008742:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03d      	beq.n	80087c6 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008750:	e032      	b.n	80087b8 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	60ba      	str	r2, [r7, #8]
 8008758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875c:	4293      	cmp	r3, r2
 800875e:	d102      	bne.n	8008766 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008764:	e075      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f002 fb01 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008772:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800877e:	e068      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fb18 	bl	800adbc <SDMMC_CmdAppOperCommand>
 800878c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008798:	e05b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f968 	bl	800aa76 <SDMMC_GetResponse>
 80087a6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	0fdb      	lsrs	r3, r3, #31
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c9      	beq.n	8008752 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
 80087c4:	e044      	b.n	8008850 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80087cc:	e031      	b.n	8008832 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	60ba      	str	r2, [r7, #8]
 80087d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d8:	4293      	cmp	r3, r2
 80087da:	d102      	bne.n	80087e2 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087e0:	e037      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 fac3 	bl	800ad74 <SDMMC_CmdAppCommand>
 80087ee:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <SD_PowerON+0xf0>
      {
        return errorstate;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e02b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008802:	4618      	mov	r0, r3
 8008804:	f002 fada 	bl	800adbc <SDMMC_CmdAppOperCommand>
 8008808:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SD_PowerON+0x10a>
      {
        return errorstate;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	e01e      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f002 f92b 	bl	800aa76 <SDMMC_GetResponse>
 8008820:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	0fdb      	lsrs	r3, r3, #31
 8008826:	2b01      	cmp	r3, #1
 8008828:	bf0c      	ite	eq
 800882a:	2301      	moveq	r3, #1
 800882c:	2300      	movne	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0ca      	beq.n	80087ce <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
 8008848:	e002      	b.n	8008850 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800886e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008872:	e018      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f002 fb6c 	bl	800af5e <SDMMC_CmdSendStatus>
 8008886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <SD_SendStatus+0x38>
  {
    return errorstate;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e009      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f002 f8ec 	bl	800aa76 <SDMMC_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f8d4 	bl	800aa76 <SDMMC_GetResponse>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d8:	d102      	bne.n	80088e0 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088de:	e02f      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f87b 	bl	80089e2 <SD_FindSCR>
 80088ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	e023      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01c      	beq.n	800893c <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f002 fa30 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008914:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	e00f      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fa6e 	bl	800ae08 <SDMMC_CmdBusWidth>
 800892c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e003      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	e001      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800893c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f002 f887 	bl	800aa76 <SDMMC_GetResponse>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008972:	d102      	bne.n	800897a <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008978:	e02f      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f82e 	bl	80089e2 <SD_FindSCR>
 8008986:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	e023      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01c      	beq.n	80089d6 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f002 f9e3 	bl	800ad74 <SDMMC_CmdAppCommand>
 80089ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	e00f      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fa21 	bl	800ae08 <SDMMC_CmdBusWidth>
 80089c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	e003      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e001      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089e2:	b590      	push	{r4, r7, lr}
 80089e4:	b08f      	sub	sp, #60	; 0x3c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80089f0:	f7f8 f8a2 	bl	8000b38 <HAL_GetTick>
 80089f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2108      	movs	r1, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f002 f875 	bl	800aaf8 <SDMMC_CmdBlockLength>
 8008a0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	e0a8      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f002 f9a4 	bl	800ad74 <SDMMC_CmdAppCommand>
 8008a2c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	e099      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a42:	2330      	movs	r3, #48	; 0x30
 8008a44:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a46:	2302      	movs	r3, #2
 8008a48:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f107 0214 	add.w	r2, r7, #20
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f002 f81f 	bl	800aaa0 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 f9f2 	bl	800ae50 <SDMMC_CmdSendSCR>
 8008a6c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d022      	beq.n	8008aba <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	e079      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	f107 020c 	add.w	r2, r7, #12
 8008a92:	18d4      	adds	r4, r2, r3
 8008a94:	4608      	mov	r0, r1
 8008a96:	f001 ff8d 	bl	800a9b4 <SDMMC_ReadFIFO>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6023      	str	r3, [r4, #0]
      index++;
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aa4:	f7f8 f848 	bl	8000b38 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d102      	bne.n	8008aba <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ab8:	e058      	b.n	8008b6c <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	f240 432a 	movw	r3, #1066	; 0x42a
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0d6      	beq.n	8008a78 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2208      	movs	r2, #8
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	e043      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2202      	movs	r2, #2
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e036      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2220      	movs	r2, #32
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b14:	2320      	movs	r3, #32
 8008b16:	e029      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b38:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b44:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b46:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b54:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b5e:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	0e1b      	lsrs	r3, r3, #24
 8008b64:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	373c      	adds	r7, #60	; 0x3c
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e025      	b.n	8008bd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00b fccb 	bl	8014538 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f001 fdab 	bl	800a710 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	f001 fe15 	bl	800a7f4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e018      	b.n	8008c2a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fe73 	bl	800a8f4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d104      	bne.n	8008c20 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c1e:	e003      	b.n	8008c28 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d101      	bne.n	8008c4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e00e      	b.n	8008c6a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fe6b 	bl	800a936 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e04c      	b.n	8008d20 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f00e fd30 	bl	8017700 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0203 	bic.w	r2, r2, #3
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_SPDIFRX_Init+0xb4>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008cd0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008cd6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008cdc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008ce2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008ce8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008cee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008cf4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008cfa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d00:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	fff88407 	.word	0xfff88407

08008d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e084      	b.n	8008e48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f00e fd13 	bl	8017784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d7e:	d902      	bls.n	8008d86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008db6:	d903      	bls.n	8008dc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8008dbe:	e002      	b.n	8008dc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	ea42 0103 	orr.w	r1, r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	f003 0204 	and.w	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	ea42 0103 	orr.w	r1, r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e01d      	b.n	8008e9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f00e fce6 	bl	8017848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f000 fba2 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <HAL_TIM_Base_Start+0x50>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b06      	cmp	r3, #6
 8008ec8:	d00b      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d007      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	00010007 	.word	0x00010007

08008efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <HAL_TIM_Base_Start_IT+0x50>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d00b      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d007      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	00010007 	.word	0x00010007

08008f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e01d      	b.n	8008f9e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f00e fcc2 	bl	8017900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f000 fb22 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d122      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d11b      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0202 	mvn.w	r2, #2
 8008fd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fad7 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8008fee:	e005      	b.n	8008ffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fac9 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fada 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b04      	cmp	r3, #4
 800900e:	d122      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b04      	cmp	r3, #4
 800901c:	d11b      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f06f 0204 	mvn.w	r2, #4
 8009026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 faad 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009042:	e005      	b.n	8009050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa9f 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fab0 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b08      	cmp	r3, #8
 8009062:	d122      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b08      	cmp	r3, #8
 8009070:	d11b      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f06f 0208 	mvn.w	r2, #8
 800907a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2204      	movs	r2, #4
 8009080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa83 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009096:	e005      	b.n	80090a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa75 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa86 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d122      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d11b      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f06f 0210 	mvn.w	r2, #16
 80090ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2208      	movs	r2, #8
 80090d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fa59 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 80090ea:	e005      	b.n	80090f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fa4b 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa5c 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10e      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f06f 0201 	mvn.w	r2, #1
 8009122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f00d fd0f 	bl	8016b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d10e      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d107      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 febd 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009164:	d10e      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d107      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 feb0 	bl	8009ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa0a 	bl	80095c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0220 	mvn.w	r2, #32
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fe70 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e105      	b.n	800940a <HAL_TIM_PWM_ConfigChannel+0x226>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b14      	cmp	r3, #20
 8009212:	f200 80f0 	bhi.w	80093f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009271 	.word	0x08009271
 8009220:	080093f7 	.word	0x080093f7
 8009224:	080093f7 	.word	0x080093f7
 8009228:	080093f7 	.word	0x080093f7
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080093f7 	.word	0x080093f7
 8009234:	080093f7 	.word	0x080093f7
 8009238:	080093f7 	.word	0x080093f7
 800923c:	080092f3 	.word	0x080092f3
 8009240:	080093f7 	.word	0x080093f7
 8009244:	080093f7 	.word	0x080093f7
 8009248:	080093f7 	.word	0x080093f7
 800924c:	08009333 	.word	0x08009333
 8009250:	080093f7 	.word	0x080093f7
 8009254:	080093f7 	.word	0x080093f7
 8009258:	080093f7 	.word	0x080093f7
 800925c:	08009375 	.word	0x08009375
 8009260:	080093f7 	.word	0x080093f7
 8009264:	080093f7 	.word	0x080093f7
 8009268:	080093f7 	.word	0x080093f7
 800926c:	080093b5 	.word	0x080093b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa4e 	bl	8009718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0208 	orr.w	r2, r2, #8
 800928a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699a      	ldr	r2, [r3, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0204 	bic.w	r2, r2, #4
 800929a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6999      	ldr	r1, [r3, #24]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	619a      	str	r2, [r3, #24]
      break;
 80092ae:	e0a3      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 faa0 	bl	80097fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	021a      	lsls	r2, r3, #8
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	619a      	str	r2, [r3, #24]
      break;
 80092f0:	e082      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 faf7 	bl	80098ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0208 	orr.w	r2, r2, #8
 800930c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0204 	bic.w	r2, r2, #4
 800931c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69d9      	ldr	r1, [r3, #28]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	61da      	str	r2, [r3, #28]
      break;
 8009330:	e062      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fb4d 	bl	80099d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	021a      	lsls	r2, r3, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	61da      	str	r2, [r3, #28]
      break;
 8009372:	e041      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fb84 	bl	8009a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0208 	orr.w	r2, r2, #8
 800938e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0204 	bic.w	r2, r2, #4
 800939e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093b2:	e021      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fbb6 	bl	8009b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	021a      	lsls	r2, r3, #8
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093f4:	e000      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80093f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_TIM_ConfigClockSource+0x18>
 8009428:	2302      	movs	r3, #2
 800942a:	e0a6      	b.n	800957a <HAL_TIM_ConfigClockSource+0x166>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <HAL_TIM_ConfigClockSource+0x170>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d067      	beq.n	8009534 <HAL_TIM_ConfigClockSource+0x120>
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d80b      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x6c>
 8009468:	2b10      	cmp	r3, #16
 800946a:	d073      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d802      	bhi.n	8009476 <HAL_TIM_ConfigClockSource+0x62>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d06f      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009474:	e078      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009476:	2b20      	cmp	r3, #32
 8009478:	d06c      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800947a:	2b30      	cmp	r3, #48	; 0x30
 800947c:	d06a      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800947e:	e073      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009480:	2b70      	cmp	r3, #112	; 0x70
 8009482:	d00d      	beq.n	80094a0 <HAL_TIM_ConfigClockSource+0x8c>
 8009484:	2b70      	cmp	r3, #112	; 0x70
 8009486:	d804      	bhi.n	8009492 <HAL_TIM_ConfigClockSource+0x7e>
 8009488:	2b50      	cmp	r3, #80	; 0x50
 800948a:	d033      	beq.n	80094f4 <HAL_TIM_ConfigClockSource+0xe0>
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	d041      	beq.n	8009514 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009490:	e06a      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d066      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x152>
 8009498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949c:	d017      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800949e:	e063      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6899      	ldr	r1, [r3, #8]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f000 fc0a 	bl	8009cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	609a      	str	r2, [r3, #8]
      break;
 80094cc:	e04c      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f000 fbf3 	bl	8009cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094f0:	609a      	str	r2, [r3, #8]
      break;
 80094f2:	e039      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6859      	ldr	r1, [r3, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	461a      	mov	r2, r3
 8009502:	f000 fb67 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2150      	movs	r1, #80	; 0x50
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fbc0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009512:	e029      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	461a      	mov	r2, r3
 8009522:	f000 fb86 	bl	8009c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2160      	movs	r1, #96	; 0x60
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fbb0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009532:	e019      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	461a      	mov	r2, r3
 8009542:	f000 fb47 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2140      	movs	r1, #64	; 0x40
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fba0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009552:	e009      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f000 fb97 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009564:	e000      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	fffeff88 	.word	0xfffeff88

08009588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a40      	ldr	r2, [pc, #256]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d00f      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3d      	ldr	r2, [pc, #244]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00b      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3c      	ldr	r2, [pc, #240]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3b      	ldr	r2, [pc, #236]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3a      	ldr	r2, [pc, #232]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d108      	bne.n	800962a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2f      	ldr	r2, [pc, #188]	; (80096ec <TIM_Base_SetConfig+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d027      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d023      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d01f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d01b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a29      	ldr	r2, [pc, #164]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d017      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <TIM_Base_SetConfig+0x128>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <TIM_Base_SetConfig+0x12c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <TIM_Base_SetConfig+0x130>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a25      	ldr	r2, [pc, #148]	; (800970c <TIM_Base_SetConfig+0x134>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a24      	ldr	r2, [pc, #144]	; (8009710 <TIM_Base_SetConfig+0x138>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a23      	ldr	r2, [pc, #140]	; (8009714 <TIM_Base_SetConfig+0x13c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d108      	bne.n	800969c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <TIM_Base_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d103      	bne.n	80096d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	615a      	str	r2, [r3, #20]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800
 800970c:	40001800 	.word	0x40001800
 8009710:	40001c00 	.word	0x40001c00
 8009714:	40002000 	.word	0x40002000

08009718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <TIM_OC1_SetConfig+0xd8>)
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0302 	bic.w	r3, r3, #2
 8009760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a21      	ldr	r2, [pc, #132]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_OC1_SetConfig+0x64>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d10c      	bne.n	8009796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 0308 	bic.w	r3, r3, #8
 8009782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f023 0304 	bic.w	r3, r3, #4
 8009794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_OC1_SetConfig+0x8e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d111      	bne.n	80097ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4313      	orrs	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	621a      	str	r2, [r3, #32]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	fffeff8f 	.word	0xfffeff8f
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0210 	bic.w	r2, r3, #16
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <TIM_OC2_SetConfig+0xe4>)
 8009828:	4013      	ands	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0320 	bic.w	r3, r3, #32
 8009846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a23      	ldr	r2, [pc, #140]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_OC2_SetConfig+0x68>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d10d      	bne.n	8009880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a18      	ldr	r2, [pc, #96]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_OC2_SetConfig+0x94>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d113      	bne.n	80098b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800989e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	feff8fff 	.word	0xfeff8fff
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <TIM_OC3_SetConfig+0xe0>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC3_SetConfig+0x66>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a21      	ldr	r2, [pc, #132]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d10d      	bne.n	800996e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800996c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a17      	ldr	r2, [pc, #92]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_OC3_SetConfig+0x92>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a16      	ldr	r2, [pc, #88]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d113      	bne.n	80099a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800998c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	621a      	str	r2, [r3, #32]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	fffeff8f 	.word	0xfffeff8f
 80099d0:	40010000 	.word	0x40010000
 80099d4:	40010400 	.word	0x40010400

080099d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <TIM_OC4_SetConfig+0xa4>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	031b      	lsls	r3, r3, #12
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <TIM_OC4_SetConfig+0xa8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_OC4_SetConfig+0x68>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a12      	ldr	r2, [pc, #72]	; (8009a84 <TIM_OC4_SetConfig+0xac>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d109      	bne.n	8009a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	019b      	lsls	r3, r3, #6
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	feff8fff 	.word	0xfeff8fff
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40010400 	.word	0x40010400

08009a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <TIM_OC5_SetConfig+0x98>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <TIM_OC5_SetConfig+0x9c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC5_SetConfig+0x5e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <TIM_OC5_SetConfig+0xa0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d109      	bne.n	8009afa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	621a      	str	r2, [r3, #32]
}
 8009b14:	bf00      	nop
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	fffeff8f 	.word	0xfffeff8f
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40010400 	.word	0x40010400

08009b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <TIM_OC6_SetConfig+0x9c>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	051b      	lsls	r3, r3, #20
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a13      	ldr	r2, [pc, #76]	; (8009bcc <TIM_OC6_SetConfig+0xa0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d003      	beq.n	8009b8c <TIM_OC6_SetConfig+0x60>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <TIM_OC6_SetConfig+0xa4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d109      	bne.n	8009ba0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	029b      	lsls	r3, r3, #10
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	feff8fff 	.word	0xfeff8fff
 8009bcc:	40010000 	.word	0x40010000
 8009bd0:	40010400 	.word	0x40010400

08009bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f023 0201 	bic.w	r2, r3, #1
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f023 030a 	bic.w	r3, r3, #10
 8009c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b087      	sub	sp, #28
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	f023 0210 	bic.w	r2, r3, #16
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	031b      	lsls	r3, r3, #12
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	621a      	str	r2, [r3, #32]
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f043 0307 	orr.w	r3, r3, #7
 8009cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	609a      	str	r2, [r3, #8]
}
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	021a      	lsls	r2, r3, #8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	609a      	str	r2, [r3, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e045      	b.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a1b      	ldr	r2, [pc, #108]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e065      	b.n	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d004      	beq.n	8009e6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d115      	bne.n	8009e96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	051b      	lsls	r3, r3, #20
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40010400 	.word	0x40010400

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e040      	b.n	8009f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f00d fdba 	bl	8017a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2224      	movs	r2, #36	; 0x24
 8009f24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f82c 	bl	8009f94 <UART_SetConfig>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e022      	b.n	8009f8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fac4 	bl	800a4dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f72:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fb4b 	bl	800a620 <UART_CheckIdleState>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	695b      	ldr	r3, [r3, #20]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4bb1      	ldr	r3, [pc, #708]	; (800a288 <UART_SetConfig+0x2f4>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	6939      	ldr	r1, [r7, #16]
 8009fcc:	430b      	orrs	r3, r1
 8009fce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	693a      	ldr	r2, [r7, #16]
 800a006:	430a      	orrs	r2, r1
 800a008:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a9f      	ldr	r2, [pc, #636]	; (800a28c <UART_SetConfig+0x2f8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d121      	bne.n	800a058 <UART_SetConfig+0xc4>
 800a014:	4b9e      	ldr	r3, [pc, #632]	; (800a290 <UART_SetConfig+0x2fc>)
 800a016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a01a:	f003 0303 	and.w	r3, r3, #3
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d816      	bhi.n	800a050 <UART_SetConfig+0xbc>
 800a022:	a201      	add	r2, pc, #4	; (adr r2, 800a028 <UART_SetConfig+0x94>)
 800a024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a028:	0800a039 	.word	0x0800a039
 800a02c:	0800a045 	.word	0x0800a045
 800a030:	0800a03f 	.word	0x0800a03f
 800a034:	0800a04b 	.word	0x0800a04b
 800a038:	2301      	movs	r3, #1
 800a03a:	77fb      	strb	r3, [r7, #31]
 800a03c:	e151      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a03e:	2302      	movs	r3, #2
 800a040:	77fb      	strb	r3, [r7, #31]
 800a042:	e14e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a044:	2304      	movs	r3, #4
 800a046:	77fb      	strb	r3, [r7, #31]
 800a048:	e14b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a04a:	2308      	movs	r3, #8
 800a04c:	77fb      	strb	r3, [r7, #31]
 800a04e:	e148      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a050:	2310      	movs	r3, #16
 800a052:	77fb      	strb	r3, [r7, #31]
 800a054:	bf00      	nop
 800a056:	e144      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a8d      	ldr	r2, [pc, #564]	; (800a294 <UART_SetConfig+0x300>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d134      	bne.n	800a0cc <UART_SetConfig+0x138>
 800a062:	4b8b      	ldr	r3, [pc, #556]	; (800a290 <UART_SetConfig+0x2fc>)
 800a064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a068:	f003 030c 	and.w	r3, r3, #12
 800a06c:	2b0c      	cmp	r3, #12
 800a06e:	d829      	bhi.n	800a0c4 <UART_SetConfig+0x130>
 800a070:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <UART_SetConfig+0xe4>)
 800a072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a076:	bf00      	nop
 800a078:	0800a0ad 	.word	0x0800a0ad
 800a07c:	0800a0c5 	.word	0x0800a0c5
 800a080:	0800a0c5 	.word	0x0800a0c5
 800a084:	0800a0c5 	.word	0x0800a0c5
 800a088:	0800a0b9 	.word	0x0800a0b9
 800a08c:	0800a0c5 	.word	0x0800a0c5
 800a090:	0800a0c5 	.word	0x0800a0c5
 800a094:	0800a0c5 	.word	0x0800a0c5
 800a098:	0800a0b3 	.word	0x0800a0b3
 800a09c:	0800a0c5 	.word	0x0800a0c5
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0c5 	.word	0x0800a0c5
 800a0a8:	0800a0bf 	.word	0x0800a0bf
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	77fb      	strb	r3, [r7, #31]
 800a0b0:	e117      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	77fb      	strb	r3, [r7, #31]
 800a0b6:	e114      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0b8:	2304      	movs	r3, #4
 800a0ba:	77fb      	strb	r3, [r7, #31]
 800a0bc:	e111      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0be:	2308      	movs	r3, #8
 800a0c0:	77fb      	strb	r3, [r7, #31]
 800a0c2:	e10e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0c4:	2310      	movs	r3, #16
 800a0c6:	77fb      	strb	r3, [r7, #31]
 800a0c8:	bf00      	nop
 800a0ca:	e10a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a71      	ldr	r2, [pc, #452]	; (800a298 <UART_SetConfig+0x304>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d120      	bne.n	800a118 <UART_SetConfig+0x184>
 800a0d6:	4b6e      	ldr	r3, [pc, #440]	; (800a290 <UART_SetConfig+0x2fc>)
 800a0d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a0e0:	2b10      	cmp	r3, #16
 800a0e2:	d00f      	beq.n	800a104 <UART_SetConfig+0x170>
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d802      	bhi.n	800a0ee <UART_SetConfig+0x15a>
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <UART_SetConfig+0x164>
 800a0ec:	e010      	b.n	800a110 <UART_SetConfig+0x17c>
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d005      	beq.n	800a0fe <UART_SetConfig+0x16a>
 800a0f2:	2b30      	cmp	r3, #48	; 0x30
 800a0f4:	d009      	beq.n	800a10a <UART_SetConfig+0x176>
 800a0f6:	e00b      	b.n	800a110 <UART_SetConfig+0x17c>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	77fb      	strb	r3, [r7, #31]
 800a0fc:	e0f1      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a0fe:	2302      	movs	r3, #2
 800a100:	77fb      	strb	r3, [r7, #31]
 800a102:	e0ee      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a104:	2304      	movs	r3, #4
 800a106:	77fb      	strb	r3, [r7, #31]
 800a108:	e0eb      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a10a:	2308      	movs	r3, #8
 800a10c:	77fb      	strb	r3, [r7, #31]
 800a10e:	e0e8      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a110:	2310      	movs	r3, #16
 800a112:	77fb      	strb	r3, [r7, #31]
 800a114:	bf00      	nop
 800a116:	e0e4      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a5f      	ldr	r2, [pc, #380]	; (800a29c <UART_SetConfig+0x308>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d120      	bne.n	800a164 <UART_SetConfig+0x1d0>
 800a122:	4b5b      	ldr	r3, [pc, #364]	; (800a290 <UART_SetConfig+0x2fc>)
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a12c:	2b40      	cmp	r3, #64	; 0x40
 800a12e:	d00f      	beq.n	800a150 <UART_SetConfig+0x1bc>
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d802      	bhi.n	800a13a <UART_SetConfig+0x1a6>
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <UART_SetConfig+0x1b0>
 800a138:	e010      	b.n	800a15c <UART_SetConfig+0x1c8>
 800a13a:	2b80      	cmp	r3, #128	; 0x80
 800a13c:	d005      	beq.n	800a14a <UART_SetConfig+0x1b6>
 800a13e:	2bc0      	cmp	r3, #192	; 0xc0
 800a140:	d009      	beq.n	800a156 <UART_SetConfig+0x1c2>
 800a142:	e00b      	b.n	800a15c <UART_SetConfig+0x1c8>
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e0cb      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a14a:	2302      	movs	r3, #2
 800a14c:	77fb      	strb	r3, [r7, #31]
 800a14e:	e0c8      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a150:	2304      	movs	r3, #4
 800a152:	77fb      	strb	r3, [r7, #31]
 800a154:	e0c5      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a156:	2308      	movs	r3, #8
 800a158:	77fb      	strb	r3, [r7, #31]
 800a15a:	e0c2      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a15c:	2310      	movs	r3, #16
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	bf00      	nop
 800a162:	e0be      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a4d      	ldr	r2, [pc, #308]	; (800a2a0 <UART_SetConfig+0x30c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d124      	bne.n	800a1b8 <UART_SetConfig+0x224>
 800a16e:	4b48      	ldr	r3, [pc, #288]	; (800a290 <UART_SetConfig+0x2fc>)
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a17c:	d012      	beq.n	800a1a4 <UART_SetConfig+0x210>
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d802      	bhi.n	800a18a <UART_SetConfig+0x1f6>
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <UART_SetConfig+0x204>
 800a188:	e012      	b.n	800a1b0 <UART_SetConfig+0x21c>
 800a18a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a18e:	d006      	beq.n	800a19e <UART_SetConfig+0x20a>
 800a190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a194:	d009      	beq.n	800a1aa <UART_SetConfig+0x216>
 800a196:	e00b      	b.n	800a1b0 <UART_SetConfig+0x21c>
 800a198:	2300      	movs	r3, #0
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e0a1      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	77fb      	strb	r3, [r7, #31]
 800a1a2:	e09e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	77fb      	strb	r3, [r7, #31]
 800a1a8:	e09b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1aa:	2308      	movs	r3, #8
 800a1ac:	77fb      	strb	r3, [r7, #31]
 800a1ae:	e098      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1b0:	2310      	movs	r3, #16
 800a1b2:	77fb      	strb	r3, [r7, #31]
 800a1b4:	bf00      	nop
 800a1b6:	e094      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a39      	ldr	r2, [pc, #228]	; (800a2a4 <UART_SetConfig+0x310>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d124      	bne.n	800a20c <UART_SetConfig+0x278>
 800a1c2:	4b33      	ldr	r3, [pc, #204]	; (800a290 <UART_SetConfig+0x2fc>)
 800a1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d0:	d012      	beq.n	800a1f8 <UART_SetConfig+0x264>
 800a1d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d6:	d802      	bhi.n	800a1de <UART_SetConfig+0x24a>
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d007      	beq.n	800a1ec <UART_SetConfig+0x258>
 800a1dc:	e012      	b.n	800a204 <UART_SetConfig+0x270>
 800a1de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e2:	d006      	beq.n	800a1f2 <UART_SetConfig+0x25e>
 800a1e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a1e8:	d009      	beq.n	800a1fe <UART_SetConfig+0x26a>
 800a1ea:	e00b      	b.n	800a204 <UART_SetConfig+0x270>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e077      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e074      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1f8:	2304      	movs	r3, #4
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e071      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a1fe:	2308      	movs	r3, #8
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	e06e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a204:	2310      	movs	r3, #16
 800a206:	77fb      	strb	r3, [r7, #31]
 800a208:	bf00      	nop
 800a20a:	e06a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a25      	ldr	r2, [pc, #148]	; (800a2a8 <UART_SetConfig+0x314>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d124      	bne.n	800a260 <UART_SetConfig+0x2cc>
 800a216:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <UART_SetConfig+0x2fc>)
 800a218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a224:	d012      	beq.n	800a24c <UART_SetConfig+0x2b8>
 800a226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a22a:	d802      	bhi.n	800a232 <UART_SetConfig+0x29e>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <UART_SetConfig+0x2ac>
 800a230:	e012      	b.n	800a258 <UART_SetConfig+0x2c4>
 800a232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a236:	d006      	beq.n	800a246 <UART_SetConfig+0x2b2>
 800a238:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a23c:	d009      	beq.n	800a252 <UART_SetConfig+0x2be>
 800a23e:	e00b      	b.n	800a258 <UART_SetConfig+0x2c4>
 800a240:	2300      	movs	r3, #0
 800a242:	77fb      	strb	r3, [r7, #31]
 800a244:	e04d      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a246:	2302      	movs	r3, #2
 800a248:	77fb      	strb	r3, [r7, #31]
 800a24a:	e04a      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a24c:	2304      	movs	r3, #4
 800a24e:	77fb      	strb	r3, [r7, #31]
 800a250:	e047      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a252:	2308      	movs	r3, #8
 800a254:	77fb      	strb	r3, [r7, #31]
 800a256:	e044      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a258:	2310      	movs	r3, #16
 800a25a:	77fb      	strb	r3, [r7, #31]
 800a25c:	bf00      	nop
 800a25e:	e040      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <UART_SetConfig+0x318>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d139      	bne.n	800a2de <UART_SetConfig+0x34a>
 800a26a:	4b09      	ldr	r3, [pc, #36]	; (800a290 <UART_SetConfig+0x2fc>)
 800a26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a278:	d027      	beq.n	800a2ca <UART_SetConfig+0x336>
 800a27a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a27e:	d817      	bhi.n	800a2b0 <UART_SetConfig+0x31c>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d01c      	beq.n	800a2be <UART_SetConfig+0x32a>
 800a284:	e027      	b.n	800a2d6 <UART_SetConfig+0x342>
 800a286:	bf00      	nop
 800a288:	efff69f3 	.word	0xefff69f3
 800a28c:	40011000 	.word	0x40011000
 800a290:	40023800 	.word	0x40023800
 800a294:	40004400 	.word	0x40004400
 800a298:	40004800 	.word	0x40004800
 800a29c:	40004c00 	.word	0x40004c00
 800a2a0:	40005000 	.word	0x40005000
 800a2a4:	40011400 	.word	0x40011400
 800a2a8:	40007800 	.word	0x40007800
 800a2ac:	40007c00 	.word	0x40007c00
 800a2b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2b4:	d006      	beq.n	800a2c4 <UART_SetConfig+0x330>
 800a2b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a2ba:	d009      	beq.n	800a2d0 <UART_SetConfig+0x33c>
 800a2bc:	e00b      	b.n	800a2d6 <UART_SetConfig+0x342>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	77fb      	strb	r3, [r7, #31]
 800a2c2:	e00e      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e00b      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e008      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e005      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2d6:	2310      	movs	r3, #16
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	bf00      	nop
 800a2dc:	e001      	b.n	800a2e2 <UART_SetConfig+0x34e>
 800a2de:	2310      	movs	r3, #16
 800a2e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2ea:	d17c      	bne.n	800a3e6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800a2ec:	7ffb      	ldrb	r3, [r7, #31]
 800a2ee:	2b08      	cmp	r3, #8
 800a2f0:	d859      	bhi.n	800a3a6 <UART_SetConfig+0x412>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0x364>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a33b 	.word	0x0800a33b
 800a300:	0800a359 	.word	0x0800a359
 800a304:	0800a3a7 	.word	0x0800a3a7
 800a308:	0800a371 	.word	0x0800a371
 800a30c:	0800a3a7 	.word	0x0800a3a7
 800a310:	0800a3a7 	.word	0x0800a3a7
 800a314:	0800a3a7 	.word	0x0800a3a7
 800a318:	0800a38f 	.word	0x0800a38f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a31c:	f7fc f884 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a320:	4603      	mov	r3, r0
 800a322:	005a      	lsls	r2, r3, #1
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	085b      	lsrs	r3, r3, #1
 800a32a:	441a      	add	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	fbb2 f3f3 	udiv	r3, r2, r3
 800a334:	b29b      	uxth	r3, r3
 800a336:	61bb      	str	r3, [r7, #24]
        break;
 800a338:	e038      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a33a:	f7fc f889 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a33e:	4603      	mov	r3, r0
 800a340:	005a      	lsls	r2, r3, #1
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	441a      	add	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a352:	b29b      	uxth	r3, r3
 800a354:	61bb      	str	r3, [r7, #24]
        break;
 800a356:	e029      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	085a      	lsrs	r2, r3, #1
 800a35e:	4b5d      	ldr	r3, [pc, #372]	; (800a4d4 <UART_SetConfig+0x540>)
 800a360:	4413      	add	r3, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	6852      	ldr	r2, [r2, #4]
 800a366:	fbb3 f3f2 	udiv	r3, r3, r2
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	61bb      	str	r3, [r7, #24]
        break;
 800a36e:	e01d      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a370:	f7fb ff9c 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a374:	4603      	mov	r3, r0
 800a376:	005a      	lsls	r2, r3, #1
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	085b      	lsrs	r3, r3, #1
 800a37e:	441a      	add	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	fbb2 f3f3 	udiv	r3, r2, r3
 800a388:	b29b      	uxth	r3, r3
 800a38a:	61bb      	str	r3, [r7, #24]
        break;
 800a38c:	e00e      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	61bb      	str	r3, [r7, #24]
        break;
 800a3a4:	e002      	b.n	800a3ac <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	75fb      	strb	r3, [r7, #23]
        break;
 800a3aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	2b0f      	cmp	r3, #15
 800a3b0:	d916      	bls.n	800a3e0 <UART_SetConfig+0x44c>
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b8:	d212      	bcs.n	800a3e0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	f023 030f 	bic.w	r3, r3, #15
 800a3c2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	89fa      	ldrh	r2, [r7, #14]
 800a3dc:	60da      	str	r2, [r3, #12]
 800a3de:	e06e      	b.n	800a4be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
 800a3e4:	e06b      	b.n	800a4be <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800a3e6:	7ffb      	ldrb	r3, [r7, #31]
 800a3e8:	2b08      	cmp	r3, #8
 800a3ea:	d857      	bhi.n	800a49c <UART_SetConfig+0x508>
 800a3ec:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <UART_SetConfig+0x460>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a419 	.word	0x0800a419
 800a3f8:	0800a435 	.word	0x0800a435
 800a3fc:	0800a451 	.word	0x0800a451
 800a400:	0800a49d 	.word	0x0800a49d
 800a404:	0800a469 	.word	0x0800a469
 800a408:	0800a49d 	.word	0x0800a49d
 800a40c:	0800a49d 	.word	0x0800a49d
 800a410:	0800a49d 	.word	0x0800a49d
 800a414:	0800a485 	.word	0x0800a485
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a418:	f7fc f806 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a41c:	4602      	mov	r2, r0
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	085b      	lsrs	r3, r3, #1
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42e:	b29b      	uxth	r3, r3
 800a430:	61bb      	str	r3, [r7, #24]
        break;
 800a432:	e036      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a434:	f7fc f80c 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a438:	4602      	mov	r2, r0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	085b      	lsrs	r3, r3, #1
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	61bb      	str	r3, [r7, #24]
        break;
 800a44e:	e028      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	085a      	lsrs	r2, r3, #1
 800a456:	4b20      	ldr	r3, [pc, #128]	; (800a4d8 <UART_SetConfig+0x544>)
 800a458:	4413      	add	r3, r2
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6852      	ldr	r2, [r2, #4]
 800a45e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	61bb      	str	r3, [r7, #24]
        break;
 800a466:	e01c      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a468:	f7fb ff20 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a46c:	4602      	mov	r2, r0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	441a      	add	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	61bb      	str	r3, [r7, #24]
        break;
 800a482:	e00e      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	085b      	lsrs	r3, r3, #1
 800a48a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	b29b      	uxth	r3, r3
 800a498:	61bb      	str	r3, [r7, #24]
        break;
 800a49a:	e002      	b.n	800a4a2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75fb      	strb	r3, [r7, #23]
        break;
 800a4a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	2b0f      	cmp	r3, #15
 800a4a6:	d908      	bls.n	800a4ba <UART_SetConfig+0x526>
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ae:	d204      	bcs.n	800a4ba <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	60da      	str	r2, [r3, #12]
 800a4b8:	e001      	b.n	800a4be <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	01e84800 	.word	0x01e84800
 800a4d8:	00f42400 	.word	0x00f42400

0800a4dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	f003 0304 	and.w	r3, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	f003 0308 	and.w	r3, r3, #8
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	f003 0310 	and.w	r3, r3, #16
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00a      	beq.n	800a58e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5da:	d10a      	bne.n	800a5f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	605a      	str	r2, [r3, #4]
  }
}
 800a614:	bf00      	nop
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af02      	add	r7, sp, #8
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a62e:	f7f6 fa83 	bl	8000b38 <HAL_GetTick>
 800a632:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 0308 	and.w	r3, r3, #8
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d10e      	bne.n	800a660 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a642:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f814 	bl	800a67e <UART_WaitOnFlagUntilTimeout>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e00a      	b.n	800a676 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2220      	movs	r2, #32
 800a664:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2200      	movs	r2, #0
 800a670:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	603b      	str	r3, [r7, #0]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a68e:	e02a      	b.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d026      	beq.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a698:	f7f6 fa4e 	bl	8000b38 <HAL_GetTick>
 800a69c:	4602      	mov	r2, r0
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d302      	bcc.n	800a6ae <UART_WaitOnFlagUntilTimeout+0x30>
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d11b      	bne.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 0201 	bic.w	r2, r2, #1
 800a6cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2220      	movs	r2, #32
 800a6d8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	e00f      	b.n	800a706 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	69da      	ldr	r2, [r3, #28]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	bf0c      	ite	eq
 800a6f6:	2301      	moveq	r3, #1
 800a6f8:	2300      	movne	r3, #0
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	429a      	cmp	r2, r3
 800a702:	d0c5      	beq.n	800a690 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d027      	beq.n	800a77a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	4b2f      	ldr	r3, [pc, #188]	; (800a7f0 <FMC_SDRAM_Init+0xe0>)
 800a734:	4013      	ands	r3, r2
 800a736:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a740:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a746:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a74c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a752:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a758:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a75e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a764:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a76a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e032      	b.n	800a7e0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a786:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a790:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a796:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	4b12      	ldr	r3, [pc, #72]	; (800a7f0 <FMC_SDRAM_Init+0xe0>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7b4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a7ba:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a7c0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a7c6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a7cc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	ffff8000 	.word	0xffff8000

0800a7f4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d02e      	beq.n	800a86c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a81a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	3b01      	subs	r3, #1
 800a828:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a82a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	3b01      	subs	r3, #1
 800a832:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a834:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a83e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	3b01      	subs	r3, #1
 800a846:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a848:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	3b01      	subs	r3, #1
 800a850:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a852:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	3b01      	subs	r3, #1
 800a85a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a85c:	4313      	orrs	r3, r2
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	4313      	orrs	r3, r2
 800a862:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	609a      	str	r2, [r3, #8]
 800a86a:	e039      	b.n	800a8e0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	4b1e      	ldr	r3, [pc, #120]	; (800a8f0 <FMC_SDRAM_Timing_Init+0xfc>)
 800a876:	4013      	ands	r3, r2
 800a878:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	3b01      	subs	r3, #1
 800a880:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	3b01      	subs	r3, #1
 800a888:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a88a:	4313      	orrs	r3, r2
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a89e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8ae:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a8b8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a8c2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	371c      	adds	r7, #28
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	ff0f0fff 	.word	0xff0f0fff

0800a8f4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a90c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	3b01      	subs	r3, #1
 800a914:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a916:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	695a      	ldr	r2, [r3, #20]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	431a      	orrs	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a95c:	b084      	sub	sp, #16
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	f107 001c 	add.w	r0, r7, #28
 800a96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a972:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a974:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a976:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a97a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a97e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a982:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a986:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a988:	68fa      	ldr	r2, [r7, #12]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	4b07      	ldr	r3, [pc, #28]	; (800a9b0 <SDMMC_Init+0x54>)
 800a994:	4013      	ands	r3, r2
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	431a      	orrs	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	b004      	add	sp, #16
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	ffff8100 	.word	0xffff8100

0800a9b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
	...

0800aa08 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aa2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aa32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <SDMMC_SendCommand+0x50>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	fffff000 	.word	0xfffff000

0800aa5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	b2db      	uxtb	r3, r3
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b085      	sub	sp, #20
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	3314      	adds	r3, #20
 800aa88:	461a      	mov	r2, r3
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
}  
 800aa94:	4618      	mov	r0, r3
 800aa96:	3714      	adds	r7, #20
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aac6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aacc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aade:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0

}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab0a:	2310      	movs	r3, #16
 800ab0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0e:	2340      	movs	r3, #64	; 0x40
 800ab10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab12:	2300      	movs	r3, #0
 800ab14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab1a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab1c:	f107 0308 	add.w	r3, r7, #8
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7ff ff70 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ab28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2c:	2110      	movs	r1, #16
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa64 	bl	800affc <SDMMC_GetCmdResp1>
 800ab34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab36:	69fb      	ldr	r3, [r7, #28]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3720      	adds	r7, #32
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b088      	sub	sp, #32
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab52:	2311      	movs	r3, #17
 800ab54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab62:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ff4c 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab74:	2111      	movs	r1, #17
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 fa40 	bl	800affc <SDMMC_GetCmdResp1>
 800ab7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab9a:	2312      	movs	r3, #18
 800ab9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abaa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abac:	f107 0308 	add.w	r3, r7, #8
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ff28 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbc:	2112      	movs	r1, #18
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fa1c 	bl	800affc <SDMMC_GetCmdResp1>
 800abc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc6:	69fb      	ldr	r3, [r7, #28]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800abda:	2300      	movs	r3, #0
 800abdc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800abe2:	2318      	movs	r3, #24
 800abe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe6:	2340      	movs	r3, #64	; 0x40
 800abe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abea:	2300      	movs	r3, #0
 800abec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf4:	f107 0308 	add.w	r3, r7, #8
 800abf8:	4619      	mov	r1, r3
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7ff ff04 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac04:	2118      	movs	r1, #24
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f9f8 	bl	800affc <SDMMC_GetCmdResp1>
 800ac0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac0e:	69fb      	ldr	r3, [r7, #28]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3720      	adds	r7, #32
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac2a:	2319      	movs	r3, #25
 800ac2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac2e:	2340      	movs	r3, #64	; 0x40
 800ac30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac3c:	f107 0308 	add.w	r3, r7, #8
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fee0 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4c:	2119      	movs	r1, #25
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f9d4 	bl	800affc <SDMMC_GetCmdResp1>
 800ac54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac56:	69fb      	ldr	r3, [r7, #28]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3720      	adds	r7, #32
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac70:	230c      	movs	r3, #12
 800ac72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff febd 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ac8e:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <SDMMC_CmdStopTransfer+0x44>)
 800ac90:	210c      	movs	r1, #12
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9b2 	bl	800affc <SDMMC_GetCmdResp1>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	05f5e100 	.word	0x05f5e100

0800aca8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08a      	sub	sp, #40	; 0x28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acb4:	2300      	movs	r3, #0
 800acb6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acbc:	2307      	movs	r3, #7
 800acbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc0:	2340      	movs	r3, #64	; 0x40
 800acc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800accc:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acce:	f107 0310 	add.w	r3, r7, #16
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff fe97 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800acda:	f241 3288 	movw	r2, #5000	; 0x1388
 800acde:	2107      	movs	r1, #7
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f98b 	bl	800affc <SDMMC_GetCmdResp1>
 800ace6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acea:	4618      	mov	r0, r3
 800acec:	3728      	adds	r7, #40	; 0x28
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b088      	sub	sp, #32
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad12:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	4619      	mov	r1, r3
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7ff fe74 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f941 	bl	800afa8 <SDMMC_GetCmdError>
 800ad26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad28:	69fb      	ldr	r3, [r7, #28]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b088      	sub	sp, #32
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad3e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad44:	2308      	movs	r3, #8
 800ad46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad48:	2340      	movs	r3, #64	; 0x40
 800ad4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad54:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad56:	f107 0308 	add.w	r3, r7, #8
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fe53 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fb12 	bl	800b38c <SDMMC_GetCmdResp7>
 800ad68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad6a:	69fb      	ldr	r3, [r7, #28]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad86:	2337      	movs	r3, #55	; 0x37
 800ad88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad8a:	2340      	movs	r3, #64	; 0x40
 800ad8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad96:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad98:	f107 0308 	add.w	r3, r7, #8
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7ff fe32 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ada4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada8:	2137      	movs	r1, #55	; 0x37
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f926 	bl	800affc <SDMMC_GetCmdResp1>
 800adb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adb2:	69fb      	ldr	r3, [r7, #28]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <SDMMC_CmdAppOperCommand+0x48>)
 800adce:	4313      	orrs	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800add2:	2329      	movs	r3, #41	; 0x29
 800add4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff fe0c 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fa29 	bl	800b248 <SDMMC_GetCmdResp3>
 800adf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf8:	69fb      	ldr	r3, [r7, #28]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	80100000 	.word	0x80100000

0800ae08 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae1a:	2306      	movs	r3, #6
 800ae1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae1e:	2340      	movs	r3, #64	; 0x40
 800ae20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae22:	2300      	movs	r3, #0
 800ae24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae2a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae2c:	f107 0308 	add.w	r3, r7, #8
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fde8 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ae38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae3c:	2106      	movs	r1, #6
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f8dc 	bl	800affc <SDMMC_GetCmdResp1>
 800ae44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae60:	2333      	movs	r3, #51	; 0x33
 800ae62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae64:	2340      	movs	r3, #64	; 0x40
 800ae66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae70:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae72:	f107 0308 	add.w	r3, r7, #8
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fdc5 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae82:	2133      	movs	r1, #51	; 0x33
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 f8b9 	bl	800affc <SDMMC_GetCmdResp1>
 800ae8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b088      	sub	sp, #32
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aea6:	2302      	movs	r3, #2
 800aea8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aeaa:	23c0      	movs	r3, #192	; 0xc0
 800aeac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb8:	f107 0308 	add.w	r3, r7, #8
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fda2 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f97f 	bl	800b1c8 <SDMMC_GetCmdResp2>
 800aeca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aecc:	69fb      	ldr	r3, [r7, #28]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3720      	adds	r7, #32
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b088      	sub	sp, #32
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
 800aede:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aee8:	2309      	movs	r3, #9
 800aeea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aeec:	23c0      	movs	r3, #192	; 0xc0
 800aeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef0:	2300      	movs	r3, #0
 800aef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fd81 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f95e 	bl	800b1c8 <SDMMC_GetCmdResp2>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af22:	2300      	movs	r3, #0
 800af24:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af2a:	2303      	movs	r3, #3
 800af2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af2e:	2340      	movs	r3, #64	; 0x40
 800af30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af32:	2300      	movs	r3, #0
 800af34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af3a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3c:	f107 0308 	add.w	r3, r7, #8
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fd60 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	2103      	movs	r1, #3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f9af 	bl	800b2b0 <SDMMC_GetCmdResp6>
 800af52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af68:	2300      	movs	r3, #0
 800af6a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af70:	230d      	movs	r3, #13
 800af72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af78:	2300      	movs	r3, #0
 800af7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fd3d 	bl	800aa08 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800af8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af92:	210d      	movs	r1, #13
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f831 	bl	800affc <SDMMC_GetCmdResp1>
 800af9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af9c:	69fb      	ldr	r3, [r7, #28]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3720      	adds	r7, #32
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800afa8:	b490      	push	{r4, r7}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800afb0:	4b10      	ldr	r3, [pc, #64]	; (800aff4 <SDMMC_GetCmdError+0x4c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a10      	ldr	r2, [pc, #64]	; (800aff8 <SDMMC_GetCmdError+0x50>)
 800afb6:	fba2 2303 	umull	r2, r3, r2, r3
 800afba:	0a5b      	lsrs	r3, r3, #9
 800afbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800afc4:	4623      	mov	r3, r4
 800afc6:	1e5c      	subs	r4, r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afd0:	e00a      	b.n	800afe8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0f2      	beq.n	800afc4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bc90      	pop	{r4, r7}
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	20000064 	.word	0x20000064
 800aff8:	10624dd3 	.word	0x10624dd3

0800affc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800affc:	b590      	push	{r4, r7, lr}
 800affe:	b087      	sub	sp, #28
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	460b      	mov	r3, r1
 800b006:	607a      	str	r2, [r7, #4]
 800b008:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b00a:	4b6c      	ldr	r3, [pc, #432]	; (800b1bc <SDMMC_GetCmdResp1+0x1c0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a6c      	ldr	r2, [pc, #432]	; (800b1c0 <SDMMC_GetCmdResp1+0x1c4>)
 800b010:	fba2 2303 	umull	r2, r3, r2, r3
 800b014:	0a5b      	lsrs	r3, r3, #9
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b01c:	4623      	mov	r3, r4
 800b01e:	1e5c      	subs	r4, r3, #1
 800b020:	2b00      	cmp	r3, #0
 800b022:	d102      	bne.n	800b02a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b028:	e0c3      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0f2      	beq.n	800b01c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b03a:	f003 0304 	and.w	r3, r3, #4
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2204      	movs	r2, #4
 800b046:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b048:	2304      	movs	r3, #4
 800b04a:	e0b2      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b05e:	2301      	movs	r3, #1
 800b060:	e0a7      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fcfa 	bl	800aa5c <SDMMC_GetCommandResponse>
 800b068:	4603      	mov	r3, r0
 800b06a:	461a      	mov	r2, r3
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	4293      	cmp	r3, r2
 800b070:	d001      	beq.n	800b076 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b072:	2301      	movs	r3, #1
 800b074:	e09d      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b07c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b07e:	2100      	movs	r1, #0
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f7ff fcf8 	bl	800aa76 <SDMMC_GetResponse>
 800b086:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	4b4e      	ldr	r3, [pc, #312]	; (800b1c4 <SDMMC_GetCmdResp1+0x1c8>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800b092:	2300      	movs	r3, #0
 800b094:	e08d      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	da02      	bge.n	800b0a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b09c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0a0:	e087      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d001      	beq.n	800b0b0 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	e080      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0ba:	2380      	movs	r3, #128	; 0x80
 800b0bc:	e079      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0cc:	e071      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0dc:	e069      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	e061      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0fc:	e059      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b10c:	e051      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b11c:	e049      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b12c:	e041      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b13c:	e039      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b14c:	e031      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b158:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b15c:	e029      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b168:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b16c:	e021      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b178:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b17c:	e019      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b18c:	e011      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b19c:	e009      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d002      	beq.n	800b1ae <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1ac:	e001      	b.n	800b1b2 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd90      	pop	{r4, r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000064 	.word	0x20000064
 800b1c0:	10624dd3 	.word	0x10624dd3
 800b1c4:	fdffe008 	.word	0xfdffe008

0800b1c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1c8:	b490      	push	{r4, r7}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b1d0:	4b1b      	ldr	r3, [pc, #108]	; (800b240 <SDMMC_GetCmdResp2+0x78>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a1b      	ldr	r2, [pc, #108]	; (800b244 <SDMMC_GetCmdResp2+0x7c>)
 800b1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1da:	0a5b      	lsrs	r3, r3, #9
 800b1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b1e4:	4623      	mov	r3, r4
 800b1e6:	1e5c      	subs	r4, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d102      	bne.n	800b1f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1f0:	e020      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d0f2      	beq.n	800b1e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b202:	f003 0304 	and.w	r3, r3, #4
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2204      	movs	r2, #4
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b210:	2304      	movs	r3, #4
 800b212:	e00f      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b226:	2301      	movs	r3, #1
 800b228:	e004      	b.n	800b234 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b230:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bc90      	pop	{r4, r7}
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	20000064 	.word	0x20000064
 800b244:	10624dd3 	.word	0x10624dd3

0800b248 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b248:	b490      	push	{r4, r7}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b250:	4b15      	ldr	r3, [pc, #84]	; (800b2a8 <SDMMC_GetCmdResp3+0x60>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a15      	ldr	r2, [pc, #84]	; (800b2ac <SDMMC_GetCmdResp3+0x64>)
 800b256:	fba2 2303 	umull	r2, r3, r2, r3
 800b25a:	0a5b      	lsrs	r3, r3, #9
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b264:	4623      	mov	r3, r4
 800b266:	1e5c      	subs	r4, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b270:	e015      	b.n	800b29e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b276:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d0f2      	beq.n	800b264 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b290:	2304      	movs	r3, #4
 800b292:	e004      	b.n	800b29e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bc90      	pop	{r4, r7}
 800b2a6:	4770      	bx	lr
 800b2a8:	20000064 	.word	0x20000064
 800b2ac:	10624dd3 	.word	0x10624dd3

0800b2b0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2b0:	b590      	push	{r4, r7, lr}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b2be:	4b31      	ldr	r3, [pc, #196]	; (800b384 <SDMMC_GetCmdResp6+0xd4>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a31      	ldr	r2, [pc, #196]	; (800b388 <SDMMC_GetCmdResp6+0xd8>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	0a5b      	lsrs	r3, r3, #9
 800b2ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ce:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	1e5c      	subs	r4, r3, #1
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d102      	bne.n	800b2e0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2de:	e04c      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0f2      	beq.n	800b2d2 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d004      	beq.n	800b302 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2204      	movs	r2, #4
 800b2fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2fe:	2304      	movs	r3, #4
 800b300:	e03b      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	f003 0301 	and.w	r3, r3, #1
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d004      	beq.n	800b318 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2201      	movs	r2, #1
 800b312:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b314:	2301      	movs	r3, #1
 800b316:	e030      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f7ff fb9f 	bl	800aa5c <SDMMC_GetCommandResponse>
 800b31e:	4603      	mov	r3, r0
 800b320:	461a      	mov	r2, r3
 800b322:	7afb      	ldrb	r3, [r7, #11]
 800b324:	4293      	cmp	r3, r2
 800b326:	d001      	beq.n	800b32c <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b328:	2301      	movs	r3, #1
 800b32a:	e026      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b334:	2100      	movs	r1, #0
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fb9d 	bl	800aa76 <SDMMC_GetResponse>
 800b33c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d106      	bne.n	800b356 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	0c1b      	lsrs	r3, r3, #16
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b352:	2300      	movs	r3, #0
 800b354:	e011      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b360:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b364:	e009      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b374:	e001      	b.n	800b37a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	371c      	adds	r7, #28
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd90      	pop	{r4, r7, pc}
 800b382:	bf00      	nop
 800b384:	20000064 	.word	0x20000064
 800b388:	10624dd3 	.word	0x10624dd3

0800b38c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b38c:	b490      	push	{r4, r7}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b394:	4b18      	ldr	r3, [pc, #96]	; (800b3f8 <SDMMC_GetCmdResp7+0x6c>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a18      	ldr	r2, [pc, #96]	; (800b3fc <SDMMC_GetCmdResp7+0x70>)
 800b39a:	fba2 2303 	umull	r2, r3, r2, r3
 800b39e:	0a5b      	lsrs	r3, r3, #9
 800b3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	1e5c      	subs	r4, r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b4:	e01a      	b.n	800b3ec <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0f2      	beq.n	800b3a8 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d004      	beq.n	800b3d8 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2240      	movs	r2, #64	; 0x40
 800b3d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3d4:	2304      	movs	r3, #4
 800b3d6:	e009      	b.n	800b3ec <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2240      	movs	r2, #64	; 0x40
 800b3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
  
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc90      	pop	{r4, r7}
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	20000064 	.word	0x20000064
 800b3fc:	10624dd3 	.word	0x10624dd3

0800b400 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b400:	b084      	sub	sp, #16
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	f107 001c 	add.w	r0, r7, #28
 800b40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2b01      	cmp	r3, #1
 800b416:	d120      	bne.n	800b45a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b41c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68da      	ldr	r2, [r3, #12]
 800b428:	4b20      	ldr	r3, [pc, #128]	; (800b4ac <USB_CoreInit+0xac>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d105      	bne.n	800b44e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68db      	ldr	r3, [r3, #12]
 800b446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f942 	bl	800b6d8 <USB_CoreReset>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
 800b458:	e010      	b.n	800b47c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f936 	bl	800b6d8 <USB_CoreReset>
 800b46c:	4603      	mov	r3, r0
 800b46e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d10b      	bne.n	800b49a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f043 0206 	orr.w	r2, r3, #6
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f043 0220 	orr.w	r2, r3, #32
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4a6:	b004      	add	sp, #16
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	ffbdffbf 	.word	0xffbdffbf

0800b4b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	f043 0201 	orr.w	r2, r3, #1
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	370c      	adds	r7, #12
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr

0800b4d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4d2:	b480      	push	{r7}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f023 0201 	bic.w	r2, r3, #1
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d106      	bne.n	800b520 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	60da      	str	r2, [r3, #12]
 800b51e:	e00b      	b.n	800b538 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d106      	bne.n	800b534 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e001      	b.n	800b538 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e003      	b.n	800b540 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b538:	2032      	movs	r0, #50	; 0x32
 800b53a:	f7f5 fb09 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	019b      	lsls	r3, r3, #6
 800b55a:	f043 0220 	orr.w	r2, r3, #32
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3301      	adds	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4a09      	ldr	r2, [pc, #36]	; (800b590 <USB_FlushTxFifo+0x48>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d901      	bls.n	800b574 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e006      	b.n	800b582 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0320 	and.w	r3, r3, #32
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	d0f0      	beq.n	800b562 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	00030d40 	.word	0x00030d40

0800b594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2210      	movs	r2, #16
 800b5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <USB_FlushRxFifo+0x40>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d901      	bls.n	800b5b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e006      	b.n	800b5c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b10      	cmp	r3, #16
 800b5c2:	d0f0      	beq.n	800b5a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	00030d40 	.word	0x00030d40

0800b5d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b089      	sub	sp, #36	; 0x24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	71fb      	strb	r3, [r7, #7]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b5f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d11a      	bne.n	800b634 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5fe:	88bb      	ldrh	r3, [r7, #4]
 800b600:	3303      	adds	r3, #3
 800b602:	089b      	lsrs	r3, r3, #2
 800b604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b606:	2300      	movs	r3, #0
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e00f      	b.n	800b62c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	031a      	lsls	r2, r3, #12
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	4413      	add	r3, r2
 800b614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b618:	461a      	mov	r2, r3
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	3304      	adds	r3, #4
 800b624:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	3301      	adds	r3, #1
 800b62a:	61bb      	str	r3, [r7, #24]
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	429a      	cmp	r2, r3
 800b632:	d3eb      	bcc.n	800b60c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3724      	adds	r7, #36	; 0x24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b642:	b480      	push	{r7}
 800b644:	b089      	sub	sp, #36	; 0x24
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b658:	88fb      	ldrh	r3, [r7, #6]
 800b65a:	3303      	adds	r3, #3
 800b65c:	089b      	lsrs	r3, r3, #2
 800b65e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b660:	2300      	movs	r3, #0
 800b662:	61bb      	str	r3, [r7, #24]
 800b664:	e00b      	b.n	800b67e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	601a      	str	r2, [r3, #0]
    pDest++;
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	3304      	adds	r3, #4
 800b676:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	3301      	adds	r3, #1
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	429a      	cmp	r2, r3
 800b684:	d3ef      	bcc.n	800b666 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b686:	69fb      	ldr	r3, [r7, #28]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3724      	adds	r7, #36	; 0x24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	695b      	ldr	r3, [r3, #20]
 800b6a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
	...

0800b6d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	4a13      	ldr	r2, [pc, #76]	; (800b73c <USB_CoreReset+0x64>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d901      	bls.n	800b6f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	e01b      	b.n	800b72e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	daf2      	bge.n	800b6e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	f043 0201 	orr.w	r2, r3, #1
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3301      	adds	r3, #1
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4a09      	ldr	r2, [pc, #36]	; (800b73c <USB_CoreReset+0x64>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d901      	bls.n	800b720 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e006      	b.n	800b72e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d0f0      	beq.n	800b70e <USB_CoreReset+0x36>

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	00030d40 	.word	0x00030d40

0800b740 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b740:	b084      	sub	sp, #16
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	f107 001c 	add.w	r0, r7, #28
 800b74e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b75c:	461a      	mov	r2, r3
 800b75e:	2300      	movs	r3, #0
 800b760:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b766:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b776:	2b00      	cmp	r3, #0
 800b778:	d018      	beq.n	800b7ac <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d10a      	bne.n	800b796 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b78e:	f043 0304 	orr.w	r3, r3, #4
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	e014      	b.n	800b7c0 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7a4:	f023 0304 	bic.w	r3, r3, #4
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	e009      	b.n	800b7c0 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b7ba:	f023 0304 	bic.w	r3, r3, #4
 800b7be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b7c0:	2110      	movs	r1, #16
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fec0 	bl	800b548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7ff fee3 	bl	800b594 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
 800b7d2:	e015      	b.n	800b800 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	60fb      	str	r3, [r7, #12]
 800b800:	6a3b      	ldr	r3, [r7, #32]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	429a      	cmp	r2, r3
 800b806:	d3e5      	bcc.n	800b7d4 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b808:	2101      	movs	r1, #1
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f8ac 	bl	800b968 <USB_DriveVbus>

  HAL_Delay(200U);
 800b810:	20c8      	movs	r0, #200	; 0xc8
 800b812:	f7f5 f99d 	bl	8000b50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f04f 32ff 	mov.w	r2, #4294967295
 800b822:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00b      	beq.n	800b848 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b836:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a14      	ldr	r2, [pc, #80]	; (800b88c <USB_HostInit+0x14c>)
 800b83c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a13      	ldr	r2, [pc, #76]	; (800b890 <USB_HostInit+0x150>)
 800b842:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b846:	e009      	b.n	800b85c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2280      	movs	r2, #128	; 0x80
 800b84c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a10      	ldr	r2, [pc, #64]	; (800b894 <USB_HostInit+0x154>)
 800b852:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a10      	ldr	r2, [pc, #64]	; (800b898 <USB_HostInit+0x158>)
 800b858:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d105      	bne.n	800b86e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f043 0210 	orr.w	r2, r3, #16
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	699a      	ldr	r2, [r3, #24]
 800b872:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <USB_HostInit+0x15c>)
 800b874:	4313      	orrs	r3, r2
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b886:	b004      	add	sp, #16
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	01000200 	.word	0x01000200
 800b890:	00e00300 	.word	0x00e00300
 800b894:	00600080 	.word	0x00600080
 800b898:	004000e0 	.word	0x004000e0
 800b89c:	a3200008 	.word	0xa3200008

0800b8a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	78fb      	ldrb	r3, [r7, #3]
 800b8ce:	f003 0303 	and.w	r3, r3, #3
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b8dc:	78fb      	ldrb	r3, [r7, #3]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d107      	bne.n	800b8f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b8ee:	6053      	str	r3, [r2, #4]
 800b8f0:	e009      	b.n	800b906 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d106      	bne.n	800b906 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8fe:	461a      	mov	r2, r3
 800b900:	f241 7370 	movw	r3, #6000	; 0x1770
 800b904:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800b906:	2300      	movs	r3, #0
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3714      	adds	r7, #20
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b93e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b942:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b944:	2064      	movs	r0, #100	; 0x64
 800b946:	f7f5 f903 	bl	8000b50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b956:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b958:	200a      	movs	r0, #10
 800b95a:	f7f5 f8f9 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3710      	adds	r7, #16
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b98c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <USB_DriveVbus+0x44>
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d106      	bne.n	800b9ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b9aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b6:	d109      	bne.n	800b9cc <USB_DriveVbus+0x64>
 800b9b8:	78fb      	ldrb	r3, [r7, #3]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b9c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b085      	sub	sp, #20
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	0c5b      	lsrs	r3, r3, #17
 800b9f8:	f003 0303 	and.w	r3, r3, #3
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	b29b      	uxth	r3, r3
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3714      	adds	r7, #20
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
	...

0800ba2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	4608      	mov	r0, r1
 800ba36:	4611      	mov	r1, r2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	70fb      	strb	r3, [r7, #3]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70bb      	strb	r3, [r7, #2]
 800ba42:	4613      	mov	r3, r2
 800ba44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ba4e:	78fb      	ldrb	r3, [r7, #3]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ba62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d87e      	bhi.n	800bb68 <USB_HC_Init+0x13c>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <USB_HC_Init+0x44>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800bb2b 	.word	0x0800bb2b
 800ba78:	0800ba81 	.word	0x0800ba81
 800ba7c:	0800baed 	.word	0x0800baed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	f240 439d 	movw	r3, #1181	; 0x49d
 800ba92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ba94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	da10      	bge.n	800babe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800babc:	e057      	b.n	800bb6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d051      	beq.n	800bb6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800baca:	78fb      	ldrb	r3, [r7, #3]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bae8:	60d3      	str	r3, [r2, #12]
      break;
 800baea:	e040      	b.n	800bb6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800baf8:	461a      	mov	r2, r3
 800bafa:	f240 639d 	movw	r3, #1693	; 0x69d
 800bafe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bb00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	da34      	bge.n	800bb72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bb08:	78fb      	ldrb	r3, [r7, #3]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	78fa      	ldrb	r2, [r7, #3]
 800bb18:	0151      	lsls	r1, r2, #5
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	440a      	add	r2, r1
 800bb1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb26:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bb28:	e023      	b.n	800bb72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bb2a:	78fb      	ldrb	r3, [r7, #3]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb36:	461a      	mov	r2, r3
 800bb38:	f240 2325 	movw	r3, #549	; 0x225
 800bb3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bb3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	da17      	bge.n	800bb76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bb46:	78fb      	ldrb	r3, [r7, #3]
 800bb48:	015a      	lsls	r2, r3, #5
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	78fa      	ldrb	r2, [r7, #3]
 800bb56:	0151      	lsls	r1, r2, #5
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	440a      	add	r2, r1
 800bb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bb60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bb64:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bb66:	e006      	b.n	800bb76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6c:	e004      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb6e:	bf00      	nop
 800bb70:	e002      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb72:	bf00      	nop
 800bb74:	e000      	b.n	800bb78 <USB_HC_Init+0x14c>
      break;
 800bb76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb7e:	699a      	ldr	r2, [r3, #24]
 800bb80:	78fb      	ldrb	r3, [r7, #3]
 800bb82:	f003 030f 	and.w	r3, r3, #15
 800bb86:	2101      	movs	r1, #1
 800bb88:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bb92:	4313      	orrs	r3, r2
 800bb94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	699b      	ldr	r3, [r3, #24]
 800bb9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	da03      	bge.n	800bbb2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bbaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbae:	613b      	str	r3, [r7, #16]
 800bbb0:	e001      	b.n	800bbb6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bbb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d103      	bne.n	800bbc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bbbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e001      	b.n	800bbca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbca:	787b      	ldrb	r3, [r7, #1]
 800bbcc:	059b      	lsls	r3, r3, #22
 800bbce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bbd2:	78bb      	ldrb	r3, [r7, #2]
 800bbd4:	02db      	lsls	r3, r3, #11
 800bbd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bbdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbe0:	049b      	lsls	r3, r3, #18
 800bbe2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bbe6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bbe8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bbea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bbee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	0159      	lsls	r1, r3, #5
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	440b      	add	r3, r1
 800bbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bc06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bc08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc0c:	2b03      	cmp	r3, #3
 800bc0e:	d10f      	bne.n	800bc30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af02      	add	r7, sp, #8
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	785b      	ldrb	r3, [r3, #1]
 800bc56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bc58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bc5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d028      	beq.n	800bcbc <USB_HC_StartXfer+0x7c>
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	791b      	ldrb	r3, [r3, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d124      	bne.n	800bcbc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10b      	bne.n	800bc90 <USB_HC_StartXfer+0x50>
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	795b      	ldrb	r3, [r3, #5]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d107      	bne.n	800bc90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	785b      	ldrb	r3, [r3, #1]
 800bc84:	4619      	mov	r1, r3
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f000 fa2e 	bl	800c0e8 <USB_DoPing>
      return HAL_OK;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	e112      	b.n	800beb6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bc90:	79fb      	ldrb	r3, [r7, #7]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d112      	bne.n	800bcbc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	015a      	lsls	r2, r3, #5
 800bc9a:	6a3b      	ldr	r3, [r7, #32]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	69fa      	ldr	r2, [r7, #28]
 800bca6:	0151      	lsls	r1, r2, #5
 800bca8:	6a3a      	ldr	r2, [r7, #32]
 800bcaa:	440a      	add	r2, r1
 800bcac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcb0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bcb4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d018      	beq.n	800bcf6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	8912      	ldrh	r2, [r2, #8]
 800bccc:	4413      	add	r3, r2
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	68ba      	ldr	r2, [r7, #8]
 800bcd2:	8912      	ldrh	r2, [r2, #8]
 800bcd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcd8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bcda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bcdc:	8b7b      	ldrh	r3, [r7, #26]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d90b      	bls.n	800bcfa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800bce2:	8b7b      	ldrh	r3, [r7, #26]
 800bce4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	8912      	ldrh	r2, [r2, #8]
 800bcec:	fb02 f203 	mul.w	r2, r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	611a      	str	r2, [r3, #16]
 800bcf4:	e001      	b.n	800bcfa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	78db      	ldrb	r3, [r3, #3]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d006      	beq.n	800bd10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bd02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	8912      	ldrh	r2, [r2, #8]
 800bd08:	fb02 f203 	mul.w	r2, r2, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	691b      	ldr	r3, [r3, #16]
 800bd14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd1a:	04d9      	lsls	r1, r3, #19
 800bd1c:	4b68      	ldr	r3, [pc, #416]	; (800bec0 <USB_HC_StartXfer+0x280>)
 800bd1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	7a9b      	ldrb	r3, [r3, #10]
 800bd26:	075b      	lsls	r3, r3, #29
 800bd28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd2c:	69f9      	ldr	r1, [r7, #28]
 800bd2e:	0148      	lsls	r0, r1, #5
 800bd30:	6a39      	ldr	r1, [r7, #32]
 800bd32:	4401      	add	r1, r0
 800bd34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d009      	beq.n	800bd56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	68d9      	ldr	r1, [r3, #12]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	015a      	lsls	r2, r3, #5
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd52:	460a      	mov	r2, r1
 800bd54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	bf0c      	ite	eq
 800bd66:	2301      	moveq	r3, #1
 800bd68:	2300      	movne	r3, #0
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	69fa      	ldr	r2, [r7, #28]
 800bd7e:	0151      	lsls	r1, r2, #5
 800bd80:	6a3a      	ldr	r2, [r7, #32]
 800bd82:	440a      	add	r2, r1
 800bd84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	015a      	lsls	r2, r3, #5
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	4413      	add	r3, r2
 800bd96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	7e7b      	ldrb	r3, [r7, #25]
 800bd9e:	075b      	lsls	r3, r3, #29
 800bda0:	69f9      	ldr	r1, [r7, #28]
 800bda2:	0148      	lsls	r0, r1, #5
 800bda4:	6a39      	ldr	r1, [r7, #32]
 800bda6:	4401      	add	r1, r0
 800bda8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bdac:	4313      	orrs	r3, r2
 800bdae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a41      	ldr	r2, [pc, #260]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdc0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bdc2:	4b40      	ldr	r3, [pc, #256]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdca:	4a3e      	ldr	r2, [pc, #248]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdcc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	78db      	ldrb	r3, [r3, #3]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d006      	beq.n	800bde4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bdd6:	4b3b      	ldr	r3, [pc, #236]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdde:	4a39      	ldr	r2, [pc, #228]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	e005      	b.n	800bdf0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bde4:	4b37      	ldr	r3, [pc, #220]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdec:	4a35      	ldr	r2, [pc, #212]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bdf0:	4b34      	ldr	r3, [pc, #208]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bdf8:	4a32      	ldr	r2, [pc, #200]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800bdfa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	4413      	add	r3, r2
 800be04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be08:	461a      	mov	r2, r3
 800be0a:	4b2e      	ldr	r3, [pc, #184]	; (800bec4 <USB_HC_StartXfer+0x284>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d14e      	bne.n	800beb4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	78db      	ldrb	r3, [r3, #3]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d14a      	bne.n	800beb4 <USB_HC_StartXfer+0x274>
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d046      	beq.n	800beb4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	79db      	ldrb	r3, [r3, #7]
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d830      	bhi.n	800be90 <USB_HC_StartXfer+0x250>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <USB_HC_StartXfer+0x1f4>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be69 	.word	0x0800be69
 800be3c:	0800be45 	.word	0x0800be45
 800be40:	0800be69 	.word	0x0800be69
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	3303      	adds	r3, #3
 800be4a:	089b      	lsrs	r3, r3, #2
 800be4c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800be4e:	8afa      	ldrh	r2, [r7, #22]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	b29b      	uxth	r3, r3
 800be56:	429a      	cmp	r2, r3
 800be58:	d91c      	bls.n	800be94 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	f043 0220 	orr.w	r2, r3, #32
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	619a      	str	r2, [r3, #24]
          }
          break;
 800be66:	e015      	b.n	800be94 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	3303      	adds	r3, #3
 800be6e:	089b      	lsrs	r3, r3, #2
 800be70:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800be72:	8afa      	ldrh	r2, [r7, #22]
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	429a      	cmp	r2, r3
 800be80:	d90a      	bls.n	800be98 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	619a      	str	r2, [r3, #24]
          }
          break;
 800be8e:	e003      	b.n	800be98 <USB_HC_StartXfer+0x258>

        default:
          break;
 800be90:	bf00      	nop
 800be92:	e002      	b.n	800be9a <USB_HC_StartXfer+0x25a>
          break;
 800be94:	bf00      	nop
 800be96:	e000      	b.n	800be9a <USB_HC_StartXfer+0x25a>
          break;
 800be98:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	68d9      	ldr	r1, [r3, #12]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	785a      	ldrb	r2, [r3, #1]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	b298      	uxth	r0, r3
 800bea8:	2300      	movs	r3, #0
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4603      	mov	r3, r0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7ff fb92 	bl	800b5d8 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3728      	adds	r7, #40	; 0x28
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	1ff80000 	.word	0x1ff80000
 800bec4:	20000100 	.word	0x20000100

0800bec8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beda:	695b      	ldr	r3, [r3, #20]
 800bedc:	b29b      	uxth	r3, r3
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800beea:	b480      	push	{r7}
 800beec:	b087      	sub	sp, #28
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
 800bef2:	460b      	mov	r3, r1
 800bef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800befa:	78fb      	ldrb	r3, [r7, #3]
 800befc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800befe:	2300      	movs	r3, #0
 800bf00:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	0c9b      	lsrs	r3, r3, #18
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <USB_HC_Halt+0x3a>
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d16c      	bne.n	800bffe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	0151      	lsls	r1, r2, #5
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	440a      	add	r2, r1
 800bf3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf42:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d143      	bne.n	800bfd8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68fa      	ldr	r2, [r7, #12]
 800bf60:	0151      	lsls	r1, r2, #5
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	440a      	add	r2, r1
 800bf66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	0151      	lsls	r1, r2, #5
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	440a      	add	r2, r1
 800bf86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	015a      	lsls	r2, r3, #5
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	4413      	add	r3, r2
 800bf98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	0151      	lsls	r1, r2, #5
 800bfa2:	693a      	ldr	r2, [r7, #16]
 800bfa4:	440a      	add	r2, r1
 800bfa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfaa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bfae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	617b      	str	r3, [r7, #20]
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfbc:	d81d      	bhi.n	800bffa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bfd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bfd4:	d0ec      	beq.n	800bfb0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bfd6:	e080      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bff6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bff8:	e06f      	b.n	800c0da <USB_HC_Halt+0x1f0>
          break;
 800bffa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800bffc:	e06d      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	015a      	lsls	r2, r3, #5
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	4413      	add	r3, r2
 800c006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	0151      	lsls	r1, r2, #5
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	440a      	add	r2, r1
 800c014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c01c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d143      	bne.n	800c0b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4413      	add	r3, r2
 800c036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	0151      	lsls	r1, r2, #5
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	440a      	add	r2, r1
 800c044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c04c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	015a      	lsls	r2, r3, #5
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	4413      	add	r3, r2
 800c056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	0151      	lsls	r1, r2, #5
 800c060:	693a      	ldr	r2, [r7, #16]
 800c062:	440a      	add	r2, r1
 800c064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c06c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	015a      	lsls	r2, r3, #5
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	4413      	add	r3, r2
 800c076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	0151      	lsls	r1, r2, #5
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	440a      	add	r2, r1
 800c084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c08c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	3301      	adds	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c09a:	d81d      	bhi.n	800c0d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0b2:	d0ec      	beq.n	800c08e <USB_HC_Halt+0x1a4>
 800c0b4:	e011      	b.n	800c0da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	015a      	lsls	r2, r3, #5
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	4413      	add	r3, r2
 800c0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	0151      	lsls	r1, r2, #5
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	440a      	add	r2, r1
 800c0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	e000      	b.n	800c0da <USB_HC_Halt+0x1f0>
          break;
 800c0d8:	bf00      	nop
    }
  }

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	371c      	adds	r7, #28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c0f8:	78fb      	ldrb	r3, [r7, #3]
 800c0fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	04da      	lsls	r2, r3, #19
 800c104:	4b15      	ldr	r3, [pc, #84]	; (800c15c <USB_DoPing+0x74>)
 800c106:	4013      	ands	r3, r2
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	0151      	lsls	r1, r2, #5
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	440a      	add	r2, r1
 800c110:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	4413      	add	r3, r2
 800c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c146:	461a      	mov	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	1ff80000 	.word	0x1ff80000

0800c160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f7ff f9ae 	bl	800b4d2 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c176:	2110      	movs	r1, #16
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7ff f9e5 	bl	800b548 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff fa08 	bl	800b594 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c184:	2300      	movs	r3, #0
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	e01f      	b.n	800c1ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	015a      	lsls	r2, r3, #5
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1be:	461a      	mov	r2, r3
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	613b      	str	r3, [r7, #16]
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	2b0f      	cmp	r3, #15
 800c1ce:	d9dc      	bls.n	800c18a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	613b      	str	r3, [r7, #16]
 800c1d4:	e034      	b.n	800c240 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c20a:	461a      	mov	r2, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	3301      	adds	r3, #1
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c21c:	d80c      	bhi.n	800c238 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	4413      	add	r3, r2
 800c226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c234:	d0ec      	beq.n	800c210 <USB_StopHost+0xb0>
 800c236:	e000      	b.n	800c23a <USB_StopHost+0xda>
        break;
 800c238:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	3301      	adds	r3, #1
 800c23e:	613b      	str	r3, [r7, #16]
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	2b0f      	cmp	r3, #15
 800c244:	d9c7      	bls.n	800c1d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c24c:	461a      	mov	r2, r3
 800c24e:	f04f 33ff 	mov.w	r3, #4294967295
 800c252:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f04f 32ff 	mov.w	r2, #4294967295
 800c25a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f7ff f927 	bl	800b4b0 <USB_EnableGlobalInt>

  return HAL_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}

0800c26c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b089      	sub	sp, #36	; 0x24
 800c270:	af04      	add	r7, sp, #16
 800c272:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800c274:	2302      	movs	r3, #2
 800c276:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800c278:	2301      	movs	r3, #1
 800c27a:	2202      	movs	r2, #2
 800c27c:	2102      	movs	r1, #2
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fc8c 	bl	800cb9c <USBH_FindInterface>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800c288:	7bbb      	ldrb	r3, [r7, #14]
 800c28a:	2bff      	cmp	r3, #255	; 0xff
 800c28c:	f000 812a 	beq.w	800c4e4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fc65 	bl	800cb64 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c2a0:	2050      	movs	r0, #80	; 0x50
 800c2a2:	f013 f86d 	bl	801f380 <malloc>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2b0:	69db      	ldr	r3, [r3, #28]
 800c2b2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	211a      	movs	r1, #26
 800c2ba:	fb01 f303 	mul.w	r3, r1, r3
 800c2be:	4413      	add	r3, r2
 800c2c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da15      	bge.n	800c2f8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c2cc:	7bbb      	ldrb	r3, [r7, #14]
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	211a      	movs	r1, #26
 800c2d2:	fb01 f303 	mul.w	r3, r1, r3
 800c2d6:	4413      	add	r3, r2
 800c2d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c2dc:	781a      	ldrb	r2, [r3, #0]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	211a      	movs	r1, #26
 800c2e8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c2f2:	881a      	ldrh	r2, [r3, #0]
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	785b      	ldrb	r3, [r3, #1]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 ff2f 	bl	800e162 <USBH_AllocPipe>
 800c304:	4603      	mov	r3, r0
 800c306:	461a      	mov	r2, r3
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	7819      	ldrb	r1, [r3, #0]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	7858      	ldrb	r0, [r3, #1]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	8952      	ldrh	r2, [r2, #10]
 800c324:	9202      	str	r2, [sp, #8]
 800c326:	2203      	movs	r2, #3
 800c328:	9201      	str	r2, [sp, #4]
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	4623      	mov	r3, r4
 800c32e:	4602      	mov	r2, r0
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fee7 	bl	800e104 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2200      	movs	r2, #0
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f00c f8a2 	bl	8018488 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800c344:	2300      	movs	r3, #0
 800c346:	2200      	movs	r2, #0
 800c348:	210a      	movs	r1, #10
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fc26 	bl	800cb9c <USBH_FindInterface>
 800c350:	4603      	mov	r3, r0
 800c352:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2bff      	cmp	r3, #255	; 0xff
 800c358:	f000 80c4 	beq.w	800c4e4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	211a      	movs	r1, #26
 800c362:	fb01 f303 	mul.w	r3, r1, r3
 800c366:	4413      	add	r3, r2
 800c368:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	b25b      	sxtb	r3, r3
 800c370:	2b00      	cmp	r3, #0
 800c372:	da16      	bge.n	800c3a2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	211a      	movs	r1, #26
 800c37a:	fb01 f303 	mul.w	r3, r1, r3
 800c37e:	4413      	add	r3, r2
 800c380:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	211a      	movs	r1, #26
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	4413      	add	r3, r2
 800c396:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c39a:	881a      	ldrh	r2, [r3, #0]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	835a      	strh	r2, [r3, #26]
 800c3a0:	e015      	b.n	800c3ce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	211a      	movs	r1, #26
 800c3a8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c3b8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	211a      	movs	r1, #26
 800c3be:	fb01 f303 	mul.w	r3, r1, r3
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c3c8:	881a      	ldrh	r2, [r3, #0]
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	211a      	movs	r1, #26
 800c3d4:	fb01 f303 	mul.w	r3, r1, r3
 800c3d8:	4413      	add	r3, r2
 800c3da:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	da16      	bge.n	800c414 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	211a      	movs	r1, #26
 800c3ec:	fb01 f303 	mul.w	r3, r1, r3
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c3f6:	781a      	ldrb	r2, [r3, #0]
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	211a      	movs	r1, #26
 800c402:	fb01 f303 	mul.w	r3, r1, r3
 800c406:	4413      	add	r3, r2
 800c408:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c40c:	881a      	ldrh	r2, [r3, #0]
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	835a      	strh	r2, [r3, #26]
 800c412:	e015      	b.n	800c440 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	211a      	movs	r1, #26
 800c41a:	fb01 f303 	mul.w	r3, r1, r3
 800c41e:	4413      	add	r3, r2
 800c420:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c424:	781a      	ldrb	r2, [r3, #0]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	211a      	movs	r1, #26
 800c430:	fb01 f303 	mul.w	r3, r1, r3
 800c434:	4413      	add	r3, r2
 800c436:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c43a:	881a      	ldrh	r2, [r3, #0]
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	7b9b      	ldrb	r3, [r3, #14]
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f001 fe8b 	bl	800e162 <USBH_AllocPipe>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	7bdb      	ldrb	r3, [r3, #15]
 800c458:	4619      	mov	r1, r3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f001 fe81 	bl	800e162 <USBH_AllocPipe>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	7b59      	ldrb	r1, [r3, #13]
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	7b98      	ldrb	r0, [r3, #14]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	8b12      	ldrh	r2, [r2, #24]
 800c480:	9202      	str	r2, [sp, #8]
 800c482:	2202      	movs	r2, #2
 800c484:	9201      	str	r2, [sp, #4]
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	4623      	mov	r3, r4
 800c48a:	4602      	mov	r2, r0
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 fe39 	bl	800e104 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	7b19      	ldrb	r1, [r3, #12]
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	7bd8      	ldrb	r0, [r3, #15]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	8b52      	ldrh	r2, [r2, #26]
 800c4aa:	9202      	str	r2, [sp, #8]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	9201      	str	r2, [sp, #4]
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f001 fe24 	bl	800e104 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	7b5b      	ldrb	r3, [r3, #13]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f00b ffdb 	bl	8018488 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	7b1b      	ldrb	r3, [r3, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4619      	mov	r1, r3
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f00b ffd4 	bl	8018488 <USBH_LL_SetToggle>
      status = USBH_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3714      	adds	r7, #20
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd90      	pop	{r4, r7, pc}

0800c4ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00e      	beq.n	800c526 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fe17 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f001 fe3f 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	7b1b      	ldrb	r3, [r3, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00e      	beq.n	800c54c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	7b1b      	ldrb	r3, [r3, #12]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f001 fe04 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	7b1b      	ldrb	r3, [r3, #12]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fe2c 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	7b5b      	ldrb	r3, [r3, #13]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00e      	beq.n	800c572 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	7b5b      	ldrb	r3, [r3, #13]
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f001 fdf1 	bl	800e142 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	7b5b      	ldrb	r3, [r3, #13]
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f001 fe19 	bl	800e19e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c578:	69db      	ldr	r3, [r3, #28]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	4618      	mov	r0, r3
 800c588:	f012 ff02 	bl	801f390 <free>
    phost->pActiveClass->pData = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c592:	2200      	movs	r2, #0
 800c594:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c5b2:	69db      	ldr	r3, [r3, #28]
 800c5b4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	3340      	adds	r3, #64	; 0x40
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 f8b2 	bl	800c726 <GetLineCoding>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d105      	bne.n	800c5d8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c5d2:	2102      	movs	r1, #2
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	4798      	blx	r3
  }
  return status;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c5fa:	69db      	ldr	r3, [r3, #28]
 800c5fc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c604:	2b04      	cmp	r3, #4
 800c606:	d877      	bhi.n	800c6f8 <USBH_CDC_Process+0x114>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <USBH_CDC_Process+0x2c>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c625 	.word	0x0800c625
 800c614:	0800c62b 	.word	0x0800c62b
 800c618:	0800c65b 	.word	0x0800c65b
 800c61c:	0800c6cf 	.word	0x0800c6cf
 800c620:	0800c6dd 	.word	0x0800c6dd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	73fb      	strb	r3, [r7, #15]
    break;
 800c628:	e06d      	b.n	800c706 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f897 	bl	800c764 <SetLineCoding>
 800c636:	4603      	mov	r3, r0
 800c638:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d104      	bne.n	800c64a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	2202      	movs	r2, #2
 800c644:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c648:	e058      	b.n	800c6fc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800c64a:	7bbb      	ldrb	r3, [r7, #14]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d055      	beq.n	800c6fc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2204      	movs	r2, #4
 800c654:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c658:	e050      	b.n	800c6fc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	3340      	adds	r3, #64	; 0x40
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f860 	bl	800c726 <GetLineCoding>
 800c666:	4603      	mov	r3, r0
 800c668:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c66a:	7bbb      	ldrb	r3, [r7, #14]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d126      	bne.n	800c6be <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c682:	791b      	ldrb	r3, [r3, #4]
 800c684:	429a      	cmp	r2, r3
 800c686:	d13b      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c692:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c694:	429a      	cmp	r2, r3
 800c696:	d133      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6a2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d12b      	bne.n	800c700 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d124      	bne.n	800c700 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f984 	bl	800c9c4 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c6bc:	e020      	b.n	800c700 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800c6be:	7bbb      	ldrb	r3, [r7, #14]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d01d      	beq.n	800c700 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	2204      	movs	r2, #4
 800c6c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c6cc:	e018      	b.n	800c700 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f867 	bl	800c7a2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f8f8 	bl	800c8ca <CDC_ProcessReception>
    break;
 800c6da:	e014      	b.n	800c706 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800c6dc:	2100      	movs	r1, #0
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fffa 	bl	800d6d8 <USBH_ClrFeature>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d10a      	bne.n	800c704 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800c6f6:	e005      	b.n	800c704 <USBH_CDC_Process+0x120>

  default:
    break;
 800c6f8:	bf00      	nop
 800c6fa:	e004      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c6fc:	bf00      	nop
 800c6fe:	e002      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c700:	bf00      	nop
 800c702:	e000      	b.n	800c706 <USBH_CDC_Process+0x122>
    break;
 800c704:	bf00      	nop

  }

  return status;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr

0800c726 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b082      	sub	sp, #8
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	22a1      	movs	r2, #161	; 0xa1
 800c734:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2221      	movs	r2, #33	; 0x21
 800c73a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2207      	movs	r2, #7
 800c74c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	2207      	movs	r2, #7
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f001 f99f 	bl	800da98 <USBH_CtlReq>
 800c75a:	4603      	mov	r3, r0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2221      	movs	r2, #33	; 0x21
 800c772:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2220      	movs	r2, #32
 800c778:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2207      	movs	r2, #7
 800c78a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2207      	movs	r2, #7
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f001 f980 	bl	800da98 <USBH_CtlReq>
 800c798:	4603      	mov	r3, r0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b086      	sub	sp, #24
 800c7a6:	af02      	add	r7, sp, #8
 800c7a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c7b0:	69db      	ldr	r3, [r3, #28]
 800c7b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d002      	beq.n	800c7c8 <CDC_ProcessTransmission+0x26>
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d025      	beq.n	800c812 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800c7c6:	e07c      	b.n	800c8c2 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	8b12      	ldrh	r2, [r2, #24]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d90c      	bls.n	800c7ee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	69d9      	ldr	r1, [r3, #28]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8b1a      	ldrh	r2, [r3, #24]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	7b58      	ldrb	r0, [r3, #13]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f001 fc49 	bl	800e07e <USBH_BulkSendData>
 800c7ec:	e00c      	b.n	800c808 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	7b58      	ldrb	r0, [r3, #13]
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	4603      	mov	r3, r0
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fc3b 	bl	800e07e <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2202      	movs	r2, #2
 800c80c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800c810:	e057      	b.n	800c8c2 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	7b5b      	ldrb	r3, [r3, #13]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f00b fe0b 	bl	8018434 <USBH_LL_GetURBState>
 800c81e:	4603      	mov	r3, r0
 800c820:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d136      	bne.n	800c896 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	8b12      	ldrh	r2, [r2, #24]
 800c830:	4293      	cmp	r3, r2
 800c832:	d90e      	bls.n	800c852 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	8b12      	ldrh	r2, [r2, #24]
 800c83c:	1a9a      	subs	r2, r3, r2
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	8b12      	ldrh	r2, [r2, #24]
 800c84a:	441a      	add	r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	61da      	str	r2, [r3, #28]
 800c850:	e002      	b.n	800c858 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c868:	e006      	b.n	800c878 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 f892 	bl	800c99c <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2204      	movs	r2, #4
 800c87c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c88c:	2200      	movs	r2, #0
 800c88e:	4619      	mov	r1, r3
 800c890:	f003 fa76 	bl	800fd80 <osMessagePut>
    break;
 800c894:	e014      	b.n	800c8c0 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800c896:	7afb      	ldrb	r3, [r7, #11]
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d111      	bne.n	800c8c0 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2204      	movs	r2, #4
 800c8a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	f003 fa60 	bl	800fd80 <osMessagePut>
    break;
 800c8c0:	bf00      	nop
  }
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b086      	sub	sp, #24
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8d8:	69db      	ldr	r3, [r3, #28]
 800c8da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	d002      	beq.n	800c8f0 <CDC_ProcessReception+0x26>
 800c8ea:	2b04      	cmp	r3, #4
 800c8ec:	d00e      	beq.n	800c90c <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800c8ee:	e051      	b.n	800c994 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	6a19      	ldr	r1, [r3, #32]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	8b5a      	ldrh	r2, [r3, #26]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	7b1b      	ldrb	r3, [r3, #12]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f001 fbe3 	bl	800e0c8 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2204      	movs	r2, #4
 800c906:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800c90a:	e043      	b.n	800c994 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	7b1b      	ldrb	r3, [r3, #12]
 800c910:	4619      	mov	r1, r3
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f00b fd8e 	bl	8018434 <USBH_LL_GetURBState>
 800c918:	4603      	mov	r3, r0
 800c91a:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800c91c:	7cfb      	ldrb	r3, [r7, #19]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d137      	bne.n	800c992 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	7b1b      	ldrb	r3, [r3, #12]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f00b fcf1 	bl	8018310 <USBH_LL_GetLastXferSize>
 800c92e:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d016      	beq.n	800c968 <CDC_ProcessReception+0x9e>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	8b5b      	ldrh	r3, [r3, #26]
 800c93e:	461a      	mov	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4293      	cmp	r3, r2
 800c944:	d910      	bls.n	800c968 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	1ad2      	subs	r2, r2, r3
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	6a1a      	ldr	r2, [r3, #32]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	441a      	add	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2203      	movs	r2, #3
 800c962:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800c966:	e006      	b.n	800c976 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	2200      	movs	r2, #0
 800c96c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f81d 	bl	800c9b0 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2204      	movs	r2, #4
 800c97a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c98a:	2200      	movs	r2, #0
 800c98c:	4619      	mov	r1, r3
 800c98e:	f003 f9f7 	bl	800fd80 <osMessagePut>
    break;
 800c992:	bf00      	nop
  }
}
 800c994:	bf00      	nop
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]

}
 800c9a4:	bf00      	nop
 800c9a6:	370c      	adds	r7, #12
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr

0800c9b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]

}
 800c9b8:	bf00      	nop
 800c9ba:	370c      	adds	r7, #12
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c2:	4770      	bx	lr

0800c9c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]

}
 800c9cc:	bf00      	nop
 800c9ce:	370c      	adds	r7, #12
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800c9d8:	b5b0      	push	{r4, r5, r7, lr}
 800c9da:	b08c      	sub	sp, #48	; 0x30
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d101      	bne.n	800c9f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e03c      	b.n	800ca6a <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	79fa      	ldrb	r2, [r7, #7]
 800c9f4:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 f837 	bl	800ca7c <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800ca1c:	4a15      	ldr	r2, [pc, #84]	; (800ca74 <USBH_Init+0x9c>)
 800ca1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca26:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800ca2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca2e:	2100      	movs	r1, #0
 800ca30:	4618      	mov	r0, r3
 800ca32:	f003 f992 	bl	800fd5a <osMessageCreate>
 800ca36:	4602      	mov	r2, r0
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800ca3e:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <USBH_Init+0xa0>)
 800ca40:	f107 0414 	add.w	r4, r7, #20
 800ca44:	461d      	mov	r5, r3
 800ca46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca4a:	682b      	ldr	r3, [r5, #0]
 800ca4c:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ca4e:	f107 0314 	add.w	r3, r7, #20
 800ca52:	68f9      	ldr	r1, [r7, #12]
 800ca54:	4618      	mov	r0, r3
 800ca56:	f003 f945 	bl	800fce4 <osThreadCreate>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	f00b fba2 	bl	80181ac <USBH_LL_Init>

  return USBH_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3730      	adds	r7, #48	; 0x30
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bdb0      	pop	{r4, r5, r7, pc}
 800ca72:	bf00      	nop
 800ca74:	080202cc 	.word	0x080202cc
 800ca78:	080202e0 	.word	0x080202e0

0800ca7c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ca88:	e008      	b.n	800ca9c <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	32e0      	adds	r2, #224	; 0xe0
 800ca90:	2100      	movs	r1, #0
 800ca92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	60fb      	str	r3, [r7, #12]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b0e      	cmp	r3, #14
 800caa0:	d9f3      	bls.n	800ca8a <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800caa2:	2300      	movs	r3, #0
 800caa4:	60fb      	str	r3, [r7, #12]
 800caa6:	e009      	b.n	800cabc <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	4413      	add	r3, r2
 800caae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3301      	adds	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac2:	d3f1      	bcc.n	800caa8 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2201      	movs	r2, #1
 800cae2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2240      	movs	r2, #64	; 0x40
 800cae8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b085      	sub	sp, #20
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d017      	beq.n	800cb52 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10f      	bne.n	800cb4c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb32:	1c59      	adds	r1, r3, #1
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	33dc      	adds	r3, #220	; 0xdc
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4413      	add	r3, r2
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]
 800cb4a:	e004      	b.n	800cb56 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	73fb      	strb	r3, [r7, #15]
 800cb50:	e001      	b.n	800cb56 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cb52:	2302      	movs	r3, #2
 800cb54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800cb7a:	78fa      	ldrb	r2, [r7, #3]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d204      	bcs.n	800cb8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	78fa      	ldrb	r2, [r7, #3]
 800cb84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800cb88:	e001      	b.n	800cb8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3714      	adds	r7, #20
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	70fb      	strb	r3, [r7, #3]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	70bb      	strb	r3, [r7, #2]
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800cbc4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cbc6:	e025      	b.n	800cc14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	221a      	movs	r2, #26
 800cbcc:	fb02 f303 	mul.w	r3, r2, r3
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4413      	add	r3, r2
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	795b      	ldrb	r3, [r3, #5]
 800cbde:	78fa      	ldrb	r2, [r7, #3]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d002      	beq.n	800cbea <USBH_FindInterface+0x4e>
 800cbe4:	78fb      	ldrb	r3, [r7, #3]
 800cbe6:	2bff      	cmp	r3, #255	; 0xff
 800cbe8:	d111      	bne.n	800cc0e <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cbee:	78ba      	ldrb	r2, [r7, #2]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d002      	beq.n	800cbfa <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbf4:	78bb      	ldrb	r3, [r7, #2]
 800cbf6:	2bff      	cmp	r3, #255	; 0xff
 800cbf8:	d109      	bne.n	800cc0e <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cbfe:	787a      	ldrb	r2, [r7, #1]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d002      	beq.n	800cc0a <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cc04:	787b      	ldrb	r3, [r7, #1]
 800cc06:	2bff      	cmp	r3, #255	; 0xff
 800cc08:	d101      	bne.n	800cc0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	e006      	b.n	800cc1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cc0e:	7dfb      	ldrb	r3, [r7, #23]
 800cc10:	3301      	adds	r3, #1
 800cc12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cc14:	7dfb      	ldrb	r3, [r7, #23]
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d9d6      	bls.n	800cbc8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cc1a:	23ff      	movs	r3, #255	; 0xff
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	371c      	adds	r7, #28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f00b faf7 	bl	8018224 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800cc36:	2101      	movs	r1, #1
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f00b fc0e 	bl	801845a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af04      	add	r7, sp, #16
 800cc4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cc50:	2302      	movs	r3, #2
 800cc52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fb7e 	bl	800d35a <USBH_IsPortEnabled>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10c      	bne.n	800cc7e <USBH_Process+0x36>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d007      	beq.n	800cc7e <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	2b03      	cmp	r3, #3
 800cc76:	d002      	beq.n	800cc7e <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2203      	movs	r2, #3
 800cc7c:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	2b0b      	cmp	r3, #11
 800cc86:	f200 81ab 	bhi.w	800cfe0 <USBH_Process+0x398>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <USBH_Process+0x48>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800ccc1 	.word	0x0800ccc1
 800cc94:	0800ccff 	.word	0x0800ccff
 800cc98:	0800cd13 	.word	0x0800cd13
 800cc9c:	0800cfbb 	.word	0x0800cfbb
 800cca0:	0800cfe1 	.word	0x0800cfe1
 800cca4:	0800cdbd 	.word	0x0800cdbd
 800cca8:	0800cf55 	.word	0x0800cf55
 800ccac:	0800cded 	.word	0x0800cded
 800ccb0:	0800ce29 	.word	0x0800ce29
 800ccb4:	0800ce63 	.word	0x0800ce63
 800ccb8:	0800ceab 	.word	0x0800ceab
 800ccbc:	0800cfa3 	.word	0x0800cfa3
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f000 818b 	beq.w	800cfe4 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800ccd4:	20c8      	movs	r0, #200	; 0xc8
 800ccd6:	f00b fc0a 	bl	80184ee <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f00b fafd 	bl	80182da <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2201      	movs	r2, #1
 800cce4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	f003 f842 	bl	800fd80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ccfc:	e172      	b.n	800cfe4 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	f040 816f 	bne.w	800cfe8 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800cd10:	e16a      	b.n	800cfe8 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800cd12:	2064      	movs	r0, #100	; 0x64
 800cd14:	f00b fbeb 	bl	80184ee <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f00b fab9 	bl	8018290 <USBH_LL_GetSpeed>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	461a      	mov	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2205      	movs	r2, #5
 800cd2c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800cd2e:	2100      	movs	r1, #0
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 fa16 	bl	800e162 <USBH_AllocPipe>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800cd3e:	2180      	movs	r1, #128	; 0x80
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f001 fa0e 	bl	800e162 <USBH_AllocPipe>
 800cd46:	4603      	mov	r3, r0
 800cd48:	461a      	mov	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	7919      	ldrb	r1, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cd62:	b292      	uxth	r2, r2
 800cd64:	9202      	str	r2, [sp, #8]
 800cd66:	2200      	movs	r2, #0
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2280      	movs	r2, #128	; 0x80
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 f9c7 	bl	800e104 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	7959      	ldrb	r1, [r3, #5]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cd8a:	b292      	uxth	r2, r2
 800cd8c:	9202      	str	r2, [sp, #8]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	9201      	str	r2, [sp, #4]
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	4603      	mov	r3, r0
 800cd96:	2200      	movs	r2, #0
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f001 f9b3 	bl	800e104 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f002 ffe3 	bl	800fd80 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cdba:	e120      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 f923 	bl	800d008 <USBH_HandleEnum>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f040 8111 	bne.w	800cfec <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d103      	bne.n	800cde4 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2208      	movs	r2, #8
 800cde0:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800cde2:	e103      	b.n	800cfec <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2207      	movs	r2, #7
 800cde8:	701a      	strb	r2, [r3, #0]
    break;
 800cdea:	e0ff      	b.n	800cfec <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 80fc 	beq.w	800cff0 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cdfe:	2101      	movs	r1, #1
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2208      	movs	r2, #8
 800ce08:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2205      	movs	r2, #5
 800ce0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce1e:	2200      	movs	r2, #0
 800ce20:	4619      	mov	r1, r3
 800ce22:	f002 ffad 	bl	800fd80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ce26:	e0e3      	b.n	800cff0 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fc09 	bl	800d64a <USBH_SetCfg>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2209      	movs	r2, #9
 800ce42:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce58:	2200      	movs	r2, #0
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	f002 ff90 	bl	800fd80 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800ce60:	e0cd      	b.n	800cffe <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800ce68:	f003 0320 	and.w	r3, r3, #32
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ce70:	2101      	movs	r1, #1
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 fc0c 	bl	800d690 <USBH_SetFeature>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	220a      	movs	r2, #10
 800ce82:	701a      	strb	r2, [r3, #0]
 800ce84:	e002      	b.n	800ce8c <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	220a      	movs	r2, #10
 800ce8a:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cea0:	2200      	movs	r2, #0
 800cea2:	4619      	mov	r1, r3
 800cea4:	f002 ff6c 	bl	800fd80 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cea8:	e0a9      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d040      	beq.n	800cf36 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
 800cec0:	e017      	b.n	800cef2 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	33dc      	adds	r3, #220	; 0xdc
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	791a      	ldrb	r2, [r3, #4]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d108      	bne.n	800ceec <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	33dc      	adds	r3, #220	; 0xdc
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	685a      	ldr	r2, [r3, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ceec:	7bfb      	ldrb	r3, [r7, #15]
 800ceee:	3301      	adds	r3, #1
 800cef0:	73fb      	strb	r3, [r7, #15]
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0e4      	beq.n	800cec2 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d016      	beq.n	800cf30 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	4798      	blx	r3
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d109      	bne.n	800cf28 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2206      	movs	r2, #6
 800cf18:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf20:	2103      	movs	r1, #3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	4798      	blx	r3
 800cf26:	e006      	b.n	800cf36 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	220d      	movs	r2, #13
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	e002      	b.n	800cf36 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	220d      	movs	r2, #13
 800cf34:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2205      	movs	r2, #5
 800cf3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f002 ff17 	bl	800fd80 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cf52:	e054      	b.n	800cffe <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00f      	beq.n	800cf7e <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800cf6e:	7bbb      	ldrb	r3, [r7, #14]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d13e      	bne.n	800cff4 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	220b      	movs	r2, #11
 800cf7a:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800cf7c:	e03a      	b.n	800cff4 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	220d      	movs	r2, #13
 800cf82:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2205      	movs	r2, #5
 800cf88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	f002 fef0 	bl	800fd80 <osMessagePut>
    break;
 800cfa0:	e028      	b.n	800cff4 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d025      	beq.n	800cff8 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	4798      	blx	r3
    }
    break;
 800cfb8:	e01e      	b.n	800cff8 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff fd5e 	bl	800ca7c <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d018      	beq.n	800cffc <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800cfde:	e00d      	b.n	800cffc <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800cfe0:	bf00      	nop
 800cfe2:	e00c      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfe4:	bf00      	nop
 800cfe6:	e00a      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfe8:	bf00      	nop
 800cfea:	e008      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cfec:	bf00      	nop
 800cfee:	e006      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff0:	bf00      	nop
 800cff2:	e004      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff4:	bf00      	nop
 800cff6:	e002      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cff8:	bf00      	nop
 800cffa:	e000      	b.n	800cffe <USBH_Process+0x3b6>
    break;
 800cffc:	bf00      	nop
  }
 return USBH_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af04      	add	r7, sp, #16
 800d00e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	785b      	ldrb	r3, [r3, #1]
 800d018:	2b07      	cmp	r3, #7
 800d01a:	f200 8132 	bhi.w	800d282 <USBH_HandleEnum+0x27a>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <USBH_HandleEnum+0x1c>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d045 	.word	0x0800d045
 800d028:	0800d0b7 	.word	0x0800d0b7
 800d02c:	0800d0cf 	.word	0x0800d0cf
 800d030:	0800d145 	.word	0x0800d145
 800d034:	0800d15d 	.word	0x0800d15d
 800d038:	0800d17b 	.word	0x0800d17b
 800d03c:	0800d1e7 	.word	0x0800d1e7
 800d040:	0800d237 	.word	0x0800d237
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800d044:	2108      	movs	r1, #8
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fa2f 	bl	800d4aa <USBH_Get_DevDesc>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	f040 8119 	bne.w	800d286 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	7919      	ldrb	r1, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d078:	b292      	uxth	r2, r2
 800d07a:	9202      	str	r2, [sp, #8]
 800d07c:	2200      	movs	r2, #0
 800d07e:	9201      	str	r2, [sp, #4]
 800d080:	9300      	str	r3, [sp, #0]
 800d082:	4603      	mov	r3, r0
 800d084:	2280      	movs	r2, #128	; 0x80
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f001 f83c 	bl	800e104 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	7959      	ldrb	r1, [r3, #5]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d0a0:	b292      	uxth	r2, r2
 800d0a2:	9202      	str	r2, [sp, #8]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	9201      	str	r2, [sp, #4]
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 f828 	bl	800e104 <USBH_OpenPipe>

    }
    break;
 800d0b4:	e0e7      	b.n	800d286 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800d0b6:	2112      	movs	r1, #18
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f9f6 	bl	800d4aa <USBH_Get_DevDesc>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f040 80e2 	bne.w	800d28a <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	705a      	strb	r2, [r3, #1]

    }
    break;
 800d0cc:	e0dd      	b.n	800d28a <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800d0ce:	2101      	movs	r1, #1
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa96 	bl	800d602 <USBH_SetAddress>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f040 80d8 	bne.w	800d28e <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800d0de:	2002      	movs	r0, #2
 800d0e0:	f00b fa05 	bl	80184ee <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7919      	ldrb	r1, [r3, #4]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d106:	b292      	uxth	r2, r2
 800d108:	9202      	str	r2, [sp, #8]
 800d10a:	2200      	movs	r2, #0
 800d10c:	9201      	str	r2, [sp, #4]
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	4603      	mov	r3, r0
 800d112:	2280      	movs	r2, #128	; 0x80
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f000 fff5 	bl	800e104 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7959      	ldrb	r1, [r3, #5]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d12e:	b292      	uxth	r2, r2
 800d130:	9202      	str	r2, [sp, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	9201      	str	r2, [sp, #4]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	4603      	mov	r3, r0
 800d13a:	2200      	movs	r2, #0
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 ffe1 	bl	800e104 <USBH_OpenPipe>
    }
    break;
 800d142:	e0a4      	b.n	800d28e <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800d144:	2109      	movs	r1, #9
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f9d7 	bl	800d4fa <USBH_Get_CfgDesc>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 809f 	bne.w	800d292 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2204      	movs	r2, #4
 800d158:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d15a:	e09a      	b.n	800d292 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800d162:	4619      	mov	r1, r3
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f9c8 	bl	800d4fa <USBH_Get_CfgDesc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f040 8092 	bne.w	800d296 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2205      	movs	r2, #5
 800d176:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d178:	e08d      	b.n	800d296 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800d180:	2b00      	cmp	r3, #0
 800d182:	d01e      	beq.n	800d1c2 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d190:	23ff      	movs	r3, #255	; 0xff
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f9d5 	bl	800d542 <USBH_Get_StringDesc>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d17d      	bne.n	800d29a <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2206      	movs	r2, #6
 800d1a2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2205      	movs	r2, #5
 800d1a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f002 fde0 	bl	800fd80 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d1c0:	e06b      	b.n	800d29a <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2206      	movs	r2, #6
 800d1c6:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2205      	movs	r2, #5
 800d1cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4619      	mov	r1, r3
 800d1e0:	f002 fdce 	bl	800fd80 <osMessagePut>
    break;
 800d1e4:	e059      	b.n	800d29a <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d010      	beq.n	800d212 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d1fc:	23ff      	movs	r3, #255	; 0xff
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f99f 	bl	800d542 <USBH_Get_StringDesc>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d149      	bne.n	800d29e <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2207      	movs	r2, #7
 800d20e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d210:	e045      	b.n	800d29e <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2207      	movs	r2, #7
 800d216:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2205      	movs	r2, #5
 800d21c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d22c:	2200      	movs	r2, #0
 800d22e:	4619      	mov	r1, r3
 800d230:	f002 fda6 	bl	800fd80 <osMessagePut>
    break;
 800d234:	e033      	b.n	800d29e <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d00f      	beq.n	800d260 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d24c:	23ff      	movs	r3, #255	; 0xff
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 f977 	bl	800d542 <USBH_Get_StringDesc>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d123      	bne.n	800d2a2 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d25e:	e020      	b.n	800d2a2 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2205      	movs	r2, #5
 800d268:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d278:	2200      	movs	r2, #0
 800d27a:	4619      	mov	r1, r3
 800d27c:	f002 fd80 	bl	800fd80 <osMessagePut>
    break;
 800d280:	e00f      	b.n	800d2a2 <USBH_HandleEnum+0x29a>

  default:
    break;
 800d282:	bf00      	nop
 800d284:	e00e      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d286:	bf00      	nop
 800d288:	e00c      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d28a:	bf00      	nop
 800d28c:	e00a      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d28e:	bf00      	nop
 800d290:	e008      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d292:	bf00      	nop
 800d294:	e006      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d296:	bf00      	nop
 800d298:	e004      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d29a:	bf00      	nop
 800d29c:	e002      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <USBH_HandleEnum+0x29c>
    break;
 800d2a2:	bf00      	nop
  }
  return Status;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop

0800d2b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f804 	bl	800d2f2 <USBH_HandleSof>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b0b      	cmp	r3, #11
 800d302:	d10a      	bne.n	800d31a <USBH_HandleSof+0x28>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d005      	beq.n	800d31a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	4798      	blx	r3
  }
}
 800d31a:	bf00      	nop
 800d31c:	3708      	adds	r7, #8
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800d322:	b480      	push	{r7}
 800d324:	b083      	sub	sp, #12
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d332:	bf00      	nop
}
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800d33e:	b480      	push	{r7}
 800d340:	b083      	sub	sp, #12
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d34e:	bf00      	nop
}
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b083      	sub	sp, #12
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10f      	bne.n	800d3a6 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00e      	beq.n	800d3b6 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d39e:	2104      	movs	r1, #4
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	4798      	blx	r3
 800d3a4:	e007      	b.n	800d3b6 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d102      	bne.n	800d3b6 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f002 fcd7 	bl	800fd80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f00a ff38 	bl	801825a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	791b      	ldrb	r3, [r3, #4]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fed4 	bl	800e19e <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	795b      	ldrb	r3, [r3, #5]
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fece 	bl	800e19e <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d41a:	2105      	movs	r1, #5
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f00a feff 	bl	8018224 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2203      	movs	r2, #3
 800d42a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d440:	2200      	movs	r2, #0
 800d442:	4619      	mov	r1, r3
 800d444:	f002 fc9c 	bl	800fd80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b086      	sub	sp, #24
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800d460:	f107 030c 	add.w	r3, r7, #12
 800d464:	f04f 32ff 	mov.w	r2, #4294967295
 800d468:	4618      	mov	r0, r3
 800d46a:	f002 fcc9 	bl	800fe00 <osMessageGet>
    if(event.status == osEventMessage)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b10      	cmp	r3, #16
 800d472:	d1f2      	bne.n	800d45a <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fbe7 	bl	800cc48 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d47a:	e7ee      	b.n	800d45a <USBH_Process_OS+0x8>

0800d47c <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d498:	2200      	movs	r2, #0
 800d49a:	4619      	mov	r1, r3
 800d49c:	f002 fc70 	bl	800fd80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b086      	sub	sp, #24
 800d4ae:	af02      	add	r7, sp, #8
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	460b      	mov	r3, r1
 800d4b4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d4bc:	78fb      	ldrb	r3, [r7, #3]
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f864 	bl	800d598 <USBH_GetDescriptor>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
 800d4d4:	7bfb      	ldrb	r3, [r7, #15]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d10a      	bne.n	800d4f0 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f203 3022 	addw	r0, r3, #802	; 0x322
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	b292      	uxth	r2, r2
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	f000 f918 	bl	800d720 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b086      	sub	sp, #24
 800d4fe:	af02      	add	r7, sp, #8
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	460b      	mov	r3, r1
 800d504:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	331c      	adds	r3, #28
 800d50a:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800d50c:	887b      	ldrh	r3, [r7, #2]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d516:	2100      	movs	r1, #0
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f83d 	bl	800d598 <USBH_GetDescriptor>
 800d51e:	4603      	mov	r3, r0
 800d520:	72fb      	strb	r3, [r7, #11]
 800d522:	7afb      	ldrb	r3, [r7, #11]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d107      	bne.n	800d538 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d52e:	887a      	ldrh	r2, [r7, #2]
 800d530:	68f9      	ldr	r1, [r7, #12]
 800d532:	4618      	mov	r0, r3
 800d534:	f000 f964 	bl	800d800 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800d538:	7afb      	ldrb	r3, [r7, #11]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3710      	adds	r7, #16
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b088      	sub	sp, #32
 800d546:	af02      	add	r7, sp, #8
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	461a      	mov	r2, r3
 800d54e:	460b      	mov	r3, r1
 800d550:	72fb      	strb	r3, [r7, #11]
 800d552:	4613      	mov	r3, r2
 800d554:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d55e:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d566:	893b      	ldrh	r3, [r7, #8]
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	460b      	mov	r3, r1
 800d56c:	2100      	movs	r1, #0
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 f812 	bl	800d598 <USBH_GetDescriptor>
 800d574:	4603      	mov	r3, r0
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	7dfb      	ldrb	r3, [r7, #23]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d107      	bne.n	800d58e <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d584:	893a      	ldrh	r2, [r7, #8]
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fa37 	bl	800d9fc <USBH_ParseStringDesc>
  }
  return status;
 800d58e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3718      	adds	r7, #24
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	607b      	str	r3, [r7, #4]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	72fb      	strb	r3, [r7, #11]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	789b      	ldrb	r3, [r3, #2]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d11c      	bne.n	800d5ec <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5b8:	b2da      	uxtb	r2, r3
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2206      	movs	r2, #6
 800d5c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	893a      	ldrh	r2, [r7, #8]
 800d5c8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d5ca:	893b      	ldrh	r3, [r7, #8]
 800d5cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d5d4:	d104      	bne.n	800d5e0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f240 4209 	movw	r2, #1033	; 0x409
 800d5dc:	829a      	strh	r2, [r3, #20]
 800d5de:	e002      	b.n	800d5e6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8b3a      	ldrh	r2, [r7, #24]
 800d5ea:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800d5ec:	8b3b      	ldrh	r3, [r7, #24]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	68f8      	ldr	r0, [r7, #12]
 800d5f4:	f000 fa50 	bl	800da98 <USBH_CtlReq>
 800d5f8:	4603      	mov	r3, r0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	460b      	mov	r3, r1
 800d60c:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	789b      	ldrb	r3, [r3, #2]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d10f      	bne.n	800d636 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2205      	movs	r2, #5
 800d620:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d622:	78fb      	ldrb	r3, [r7, #3]
 800d624:	b29a      	uxth	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d636:	2200      	movs	r2, #0
 800d638:	2100      	movs	r1, #0
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fa2c 	bl	800da98 <USBH_CtlReq>
 800d640:	4603      	mov	r3, r0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
 800d652:	460b      	mov	r3, r1
 800d654:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	789b      	ldrb	r3, [r3, #2]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d10e      	bne.n	800d67c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2209      	movs	r2, #9
 800d668:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	887a      	ldrh	r2, [r7, #2]
 800d66e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800d67c:	2200      	movs	r2, #0
 800d67e:	2100      	movs	r1, #0
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 fa09 	bl	800da98 <USBH_CtlReq>
 800d686:	4603      	mov	r3, r0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	789b      	ldrb	r3, [r3, #2]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d10f      	bne.n	800d6c4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f9e5 	bl	800da98 <USBH_CtlReq>
 800d6ce:	4603      	mov	r3, r0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	789b      	ldrb	r3, [r3, #2]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d10f      	bne.n	800d70c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d6fe:	78fb      	ldrb	r3, [r7, #3]
 800d700:	b29a      	uxth	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800d70c:	2200      	movs	r2, #0
 800d70e:	2100      	movs	r1, #0
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f9c1 	bl	800da98 <USBH_CtlReq>
 800d716:	4603      	mov	r3, r0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	4613      	mov	r3, r2
 800d72c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	781a      	ldrb	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	785a      	ldrb	r2, [r3, #1]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	3302      	adds	r3, #2
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	b29a      	uxth	r2, r3
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3303      	adds	r3, #3
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	021b      	lsls	r3, r3, #8
 800d750:	b29b      	uxth	r3, r3
 800d752:	4313      	orrs	r3, r2
 800d754:	b29a      	uxth	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	791a      	ldrb	r2, [r3, #4]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	795a      	ldrb	r2, [r3, #5]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	799a      	ldrb	r2, [r3, #6]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	79da      	ldrb	r2, [r3, #7]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d77a:	88fb      	ldrh	r3, [r7, #6]
 800d77c:	2b08      	cmp	r3, #8
 800d77e:	d939      	bls.n	800d7f4 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	3308      	adds	r3, #8
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	b29a      	uxth	r2, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	3309      	adds	r3, #9
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	b29b      	uxth	r3, r3
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	b29b      	uxth	r3, r3
 800d794:	4313      	orrs	r3, r2
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	330a      	adds	r3, #10
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	330b      	adds	r3, #11
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	021b      	lsls	r3, r3, #8
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	330c      	adds	r3, #12
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	330d      	adds	r3, #13
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	021b      	lsls	r3, r3, #8
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	4313      	orrs	r3, r2
 800d7ce:	b29a      	uxth	r2, r3
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	7b9a      	ldrb	r2, [r3, #14]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	7bda      	ldrb	r2, [r3, #15]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	7c1a      	ldrb	r2, [r3, #16]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	7c5a      	ldrb	r2, [r3, #17]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	745a      	strb	r2, [r3, #17]
  }
}
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08a      	sub	sp, #40	; 0x28
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	4613      	mov	r3, r2
 800d80c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	781a      	ldrb	r2, [r3, #0]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	785a      	ldrb	r2, [r3, #1]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	3302      	adds	r3, #2
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	b29a      	uxth	r2, r3
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	3303      	adds	r3, #3
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	b29b      	uxth	r3, r3
 800d842:	021b      	lsls	r3, r3, #8
 800d844:	b29b      	uxth	r3, r3
 800d846:	4313      	orrs	r3, r2
 800d848:	b29a      	uxth	r2, r3
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	791a      	ldrb	r2, [r3, #4]
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	795a      	ldrb	r2, [r3, #5]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	799a      	ldrb	r2, [r3, #6]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	79da      	ldrb	r2, [r3, #7]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	7a1a      	ldrb	r2, [r3, #8]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d876:	88fb      	ldrh	r3, [r7, #6]
 800d878:	2b09      	cmp	r3, #9
 800d87a:	d95f      	bls.n	800d93c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d87c:	2309      	movs	r3, #9
 800d87e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d880:	2300      	movs	r3, #0
 800d882:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d884:	e051      	b.n	800d92a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d886:	f107 0316 	add.w	r3, r7, #22
 800d88a:	4619      	mov	r1, r3
 800d88c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d88e:	f000 f8e8 	bl	800da62 <USBH_GetNextDesc>
 800d892:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d896:	785b      	ldrb	r3, [r3, #1]
 800d898:	2b04      	cmp	r3, #4
 800d89a:	d146      	bne.n	800d92a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d89c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8a0:	221a      	movs	r2, #26
 800d8a2:	fb02 f303 	mul.w	r3, r2, r3
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800d8b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8b2:	69f8      	ldr	r0, [r7, #28]
 800d8b4:	f000 f846 	bl	800d944 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d8c2:	e022      	b.n	800d90a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800d8c4:	f107 0316 	add.w	r3, r7, #22
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8cc:	f000 f8c9 	bl	800da62 <USBH_GetNextDesc>
 800d8d0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d4:	785b      	ldrb	r3, [r3, #1]
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d117      	bne.n	800d90a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d8da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d8de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d8e2:	3201      	adds	r2, #1
 800d8e4:	00d2      	lsls	r2, r2, #3
 800d8e6:	211a      	movs	r1, #26
 800d8e8:	fb01 f303 	mul.w	r3, r1, r3
 800d8ec:	4413      	add	r3, r2
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800d8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8fa:	69b8      	ldr	r0, [r7, #24]
 800d8fc:	f000 f851 	bl	800d9a2 <USBH_ParseEPDesc>
            ep_ix++;
 800d900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d904:	3301      	adds	r3, #1
 800d906:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	791b      	ldrb	r3, [r3, #4]
 800d90e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d912:	429a      	cmp	r2, r3
 800d914:	d204      	bcs.n	800d920 <USBH_ParseCfgDesc+0x120>
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	885a      	ldrh	r2, [r3, #2]
 800d91a:	8afb      	ldrh	r3, [r7, #22]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d8d1      	bhi.n	800d8c4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d920:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d924:	3301      	adds	r3, #1
 800d926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d92a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d804      	bhi.n	800d93c <USBH_ParseCfgDesc+0x13c>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	885a      	ldrh	r2, [r3, #2]
 800d936:	8afb      	ldrh	r3, [r7, #22]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d8a4      	bhi.n	800d886 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d93c:	bf00      	nop
 800d93e:	3728      	adds	r7, #40	; 0x28
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	785a      	ldrb	r2, [r3, #1]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	789a      	ldrb	r2, [r3, #2]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	78da      	ldrb	r2, [r3, #3]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	791a      	ldrb	r2, [r3, #4]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	795a      	ldrb	r2, [r3, #5]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	799a      	ldrb	r2, [r3, #6]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	79da      	ldrb	r2, [r3, #7]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	7a1a      	ldrb	r2, [r3, #8]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	721a      	strb	r2, [r3, #8]
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	781a      	ldrb	r2, [r3, #0]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	785a      	ldrb	r2, [r3, #1]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	789a      	ldrb	r2, [r3, #2]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	78da      	ldrb	r2, [r3, #3]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	3305      	adds	r3, #5
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	021b      	lsls	r3, r3, #8
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	799a      	ldrb	r2, [r3, #6]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	719a      	strb	r2, [r3, #6]
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b087      	sub	sp, #28
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	4613      	mov	r3, r2
 800da08:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3301      	adds	r3, #1
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b03      	cmp	r3, #3
 800da12:	d120      	bne.n	800da56 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	1e9a      	subs	r2, r3, #2
 800da1a:	88fb      	ldrh	r3, [r7, #6]
 800da1c:	4293      	cmp	r3, r2
 800da1e:	bf28      	it	cs
 800da20:	4613      	movcs	r3, r2
 800da22:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3302      	adds	r3, #2
 800da28:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800da2a:	2300      	movs	r3, #0
 800da2c:	82fb      	strh	r3, [r7, #22]
 800da2e:	e00b      	b.n	800da48 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800da30:	8afb      	ldrh	r3, [r7, #22]
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	3301      	adds	r3, #1
 800da40:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800da42:	8afb      	ldrh	r3, [r7, #22]
 800da44:	3302      	adds	r3, #2
 800da46:	82fb      	strh	r3, [r7, #22]
 800da48:	8afa      	ldrh	r2, [r7, #22]
 800da4a:	8abb      	ldrh	r3, [r7, #20]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d3ef      	bcc.n	800da30 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2200      	movs	r2, #0
 800da54:	701a      	strb	r2, [r3, #0]
  }
}
 800da56:	bf00      	nop
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr

0800da62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800da62:	b480      	push	{r7}
 800da64:	b085      	sub	sp, #20
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
 800da6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	881a      	ldrh	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	b29b      	uxth	r3, r3
 800da76:	4413      	add	r3, r2
 800da78:	b29a      	uxth	r2, r3
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4413      	add	r3, r2
 800da88:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800da8a:	68fb      	ldr	r3, [r7, #12]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b086      	sub	sp, #24
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	4613      	mov	r3, r2
 800daa4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800daa6:	2301      	movs	r3, #1
 800daa8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	789b      	ldrb	r3, [r3, #2]
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d002      	beq.n	800dab8 <USBH_CtlReq+0x20>
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d01d      	beq.n	800daf2 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800dab6:	e042      	b.n	800db3e <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	88fa      	ldrh	r2, [r7, #6]
 800dac2:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2201      	movs	r2, #1
 800dac8:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2202      	movs	r2, #2
 800dace:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800dad0:	2301      	movs	r3, #1
 800dad2:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2203      	movs	r2, #3
 800dad8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dae8:	2200      	movs	r2, #0
 800daea:	4619      	mov	r1, r3
 800daec:	f002 f948 	bl	800fd80 <osMessagePut>
    break;
 800daf0:	e025      	b.n	800db3e <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800daf2:	68f8      	ldr	r0, [r7, #12]
 800daf4:	f000 f828 	bl	800db48 <USBH_HandleControl>
 800daf8:	4603      	mov	r3, r0
 800dafa:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800dafc:	7dfb      	ldrb	r3, [r7, #23]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d108      	bne.n	800db14 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2201      	movs	r2, #1
 800db06:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
    break;
 800db12:	e013      	b.n	800db3c <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b03      	cmp	r3, #3
 800db18:	d108      	bne.n	800db2c <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2201      	movs	r2, #1
 800db1e:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800db26:	2303      	movs	r3, #3
 800db28:	75fb      	strb	r3, [r7, #23]
    break;
 800db2a:	e007      	b.n	800db3c <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d104      	bne.n	800db3c <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2201      	movs	r2, #1
 800db36:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800db38:	2302      	movs	r3, #2
 800db3a:	75fb      	strb	r3, [r7, #23]
    break;
 800db3c:	bf00      	nop
  }
  return status;
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af02      	add	r7, sp, #8
 800db4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800db50:	2301      	movs	r3, #1
 800db52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db54:	2300      	movs	r3, #0
 800db56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7e1b      	ldrb	r3, [r3, #24]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	2b0a      	cmp	r3, #10
 800db60:	f200 821f 	bhi.w	800dfa2 <USBH_HandleControl+0x45a>
 800db64:	a201      	add	r2, pc, #4	; (adr r2, 800db6c <USBH_HandleControl+0x24>)
 800db66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db6a:	bf00      	nop
 800db6c:	0800db99 	.word	0x0800db99
 800db70:	0800dbb3 	.word	0x0800dbb3
 800db74:	0800dc55 	.word	0x0800dc55
 800db78:	0800dc7b 	.word	0x0800dc7b
 800db7c:	0800dd07 	.word	0x0800dd07
 800db80:	0800dd33 	.word	0x0800dd33
 800db84:	0800ddf5 	.word	0x0800ddf5
 800db88:	0800de17 	.word	0x0800de17
 800db8c:	0800dea9 	.word	0x0800dea9
 800db90:	0800ded1 	.word	0x0800ded1
 800db94:	0800df63 	.word	0x0800df63
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f103 0110 	add.w	r1, r3, #16
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	795b      	ldrb	r3, [r3, #5]
 800dba2:	461a      	mov	r2, r3
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fa0d 	bl	800dfc4 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2202      	movs	r2, #2
 800dbae:	761a      	strb	r2, [r3, #24]
    break;
 800dbb0:	e202      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	795b      	ldrb	r3, [r3, #5]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f00a fc3b 	bl	8018434 <USBH_LL_GetURBState>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800dbc2:	7bbb      	ldrb	r3, [r7, #14]
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d12c      	bne.n	800dc22 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7c1b      	ldrb	r3, [r3, #16]
 800dbcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dbd0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	8adb      	ldrh	r3, [r3, #22]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d00a      	beq.n	800dbf0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800dbda:	7b7b      	ldrb	r3, [r7, #13]
 800dbdc:	2b80      	cmp	r3, #128	; 0x80
 800dbde:	d103      	bne.n	800dbe8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2203      	movs	r2, #3
 800dbe4:	761a      	strb	r2, [r3, #24]
 800dbe6:	e00d      	b.n	800dc04 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2205      	movs	r2, #5
 800dbec:	761a      	strb	r2, [r3, #24]
 800dbee:	e009      	b.n	800dc04 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800dbf0:	7b7b      	ldrb	r3, [r7, #13]
 800dbf2:	2b80      	cmp	r3, #128	; 0x80
 800dbf4:	d103      	bne.n	800dbfe <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2209      	movs	r2, #9
 800dbfa:	761a      	strb	r2, [r3, #24]
 800dbfc:	e002      	b.n	800dc04 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2207      	movs	r2, #7
 800dc02:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2203      	movs	r2, #3
 800dc08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc18:	2200      	movs	r2, #0
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f002 f8b0 	bl	800fd80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dc20:	e1c1      	b.n	800dfa6 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dc22:	7bbb      	ldrb	r3, [r7, #14]
 800dc24:	2b04      	cmp	r3, #4
 800dc26:	d003      	beq.n	800dc30 <USBH_HandleControl+0xe8>
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
 800dc2a:	2b02      	cmp	r3, #2
 800dc2c:	f040 81bb 	bne.w	800dfa6 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	220b      	movs	r2, #11
 800dc34:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2203      	movs	r2, #3
 800dc3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	f002 f897 	bl	800fd80 <osMessagePut>
    break;
 800dc52:	e1a8      	b.n	800dfa6 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6899      	ldr	r1, [r3, #8]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	899a      	ldrh	r2, [r3, #12]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	791b      	ldrb	r3, [r3, #4]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f9e8 	bl	800e042 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2204      	movs	r2, #4
 800dc76:	761a      	strb	r2, [r3, #24]
    break;
 800dc78:	e19e      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	791b      	ldrb	r3, [r3, #4]
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f00a fbd7 	bl	8018434 <USBH_LL_GetURBState>
 800dc86:	4603      	mov	r3, r0
 800dc88:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800dc8a:	7bbb      	ldrb	r3, [r7, #14]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d110      	bne.n	800dcb2 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2209      	movs	r2, #9
 800dc94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2203      	movs	r2, #3
 800dc9a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcaa:	2200      	movs	r2, #0
 800dcac:	4619      	mov	r1, r3
 800dcae:	f002 f867 	bl	800fd80 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800dcb2:	7bbb      	ldrb	r3, [r7, #14]
 800dcb4:	2b05      	cmp	r3, #5
 800dcb6:	d110      	bne.n	800dcda <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2203      	movs	r2, #3
 800dcc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	f002 f854 	bl	800fd80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dcd8:	e167      	b.n	800dfaa <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	f040 8164 	bne.w	800dfaa <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	220b      	movs	r2, #11
 800dce6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2203      	movs	r2, #3
 800dcec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f002 f83e 	bl	800fd80 <osMessagePut>
    break;
 800dd04:	e151      	b.n	800dfaa <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6899      	ldr	r1, [r3, #8]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	899a      	ldrh	r2, [r3, #12]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	7958      	ldrb	r0, [r3, #5]
 800dd12:	2301      	movs	r3, #1
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	4603      	mov	r3, r0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f96d 	bl	800dff8 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2206      	movs	r2, #6
 800dd2e:	761a      	strb	r2, [r3, #24]
    break;
 800dd30:	e142      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	795b      	ldrb	r3, [r3, #5]
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f00a fb7b 	bl	8018434 <USBH_LL_GetURBState>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800dd42:	7bbb      	ldrb	r3, [r7, #14]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d111      	bne.n	800dd6c <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2207      	movs	r2, #7
 800dd4c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2203      	movs	r2, #3
 800dd52:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd62:	2200      	movs	r2, #0
 800dd64:	4619      	mov	r1, r3
 800dd66:	f002 f80b 	bl	800fd80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd6a:	e120      	b.n	800dfae <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d113      	bne.n	800dd9a <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	220c      	movs	r2, #12
 800dd76:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2203      	movs	r2, #3
 800dd80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd90:	2200      	movs	r2, #0
 800dd92:	4619      	mov	r1, r3
 800dd94:	f001 fff4 	bl	800fd80 <osMessagePut>
    break;
 800dd98:	e109      	b.n	800dfae <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d111      	bne.n	800ddc4 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2205      	movs	r2, #5
 800dda4:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2203      	movs	r2, #3
 800ddaa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddba:	2200      	movs	r2, #0
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f001 ffdf 	bl	800fd80 <osMessagePut>
    break;
 800ddc2:	e0f4      	b.n	800dfae <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800ddc4:	7bbb      	ldrb	r3, [r7, #14]
 800ddc6:	2b04      	cmp	r3, #4
 800ddc8:	f040 80f1 	bne.w	800dfae <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	220b      	movs	r2, #11
 800ddd0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2203      	movs	r2, #3
 800ddda:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddea:	2200      	movs	r2, #0
 800ddec:	4619      	mov	r1, r3
 800ddee:	f001 ffc7 	bl	800fd80 <osMessagePut>
    break;
 800ddf2:	e0dc      	b.n	800dfae <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	791b      	ldrb	r3, [r3, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f920 	bl	800e042 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800de08:	b29a      	uxth	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2208      	movs	r2, #8
 800de12:	761a      	strb	r2, [r3, #24]

    break;
 800de14:	e0d0      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	791b      	ldrb	r3, [r3, #4]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f00a fb09 	bl	8018434 <USBH_LL_GetURBState>
 800de22:	4603      	mov	r3, r0
 800de24:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800de26:	7bbb      	ldrb	r3, [r7, #14]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d113      	bne.n	800de54 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	220d      	movs	r2, #13
 800de30:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2203      	movs	r2, #3
 800de3a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de4a:	2200      	movs	r2, #0
 800de4c:	4619      	mov	r1, r3
 800de4e:	f001 ff97 	bl	800fd80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800de52:	e0ae      	b.n	800dfb2 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	2b04      	cmp	r3, #4
 800de58:	d111      	bne.n	800de7e <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	220b      	movs	r2, #11
 800de5e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2203      	movs	r2, #3
 800de64:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de74:	2200      	movs	r2, #0
 800de76:	4619      	mov	r1, r3
 800de78:	f001 ff82 	bl	800fd80 <osMessagePut>
    break;
 800de7c:	e099      	b.n	800dfb2 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	2b05      	cmp	r3, #5
 800de82:	f040 8096 	bne.w	800dfb2 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800de86:	2303      	movs	r3, #3
 800de88:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2203      	movs	r2, #3
 800de8e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de9e:	2200      	movs	r2, #0
 800dea0:	4619      	mov	r1, r3
 800dea2:	f001 ff6d 	bl	800fd80 <osMessagePut>
    break;
 800dea6:	e084      	b.n	800dfb2 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	795a      	ldrb	r2, [r3, #5]
 800deac:	2301      	movs	r3, #1
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	4613      	mov	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	2100      	movs	r1, #0
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f89e 	bl	800dff8 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	220a      	movs	r2, #10
 800decc:	761a      	strb	r2, [r3, #24]
    break;
 800dece:	e073      	b.n	800dfb8 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	795b      	ldrb	r3, [r3, #5]
 800ded4:	4619      	mov	r1, r3
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f00a faac 	bl	8018434 <USBH_LL_GetURBState>
 800dedc:	4603      	mov	r3, r0
 800dede:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	2b01      	cmp	r3, #1
 800dee4:	d113      	bne.n	800df0e <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	220d      	movs	r2, #13
 800deee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2203      	movs	r2, #3
 800def4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df04:	2200      	movs	r2, #0
 800df06:	4619      	mov	r1, r3
 800df08:	f001 ff3a 	bl	800fd80 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800df0c:	e053      	b.n	800dfb6 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d111      	bne.n	800df38 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2209      	movs	r2, #9
 800df18:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2203      	movs	r2, #3
 800df1e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df2e:	2200      	movs	r2, #0
 800df30:	4619      	mov	r1, r3
 800df32:	f001 ff25 	bl	800fd80 <osMessagePut>
    break;
 800df36:	e03e      	b.n	800dfb6 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800df38:	7bbb      	ldrb	r3, [r7, #14]
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d13b      	bne.n	800dfb6 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	220b      	movs	r2, #11
 800df42:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2203      	movs	r2, #3
 800df48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df58:	2200      	movs	r2, #0
 800df5a:	4619      	mov	r1, r3
 800df5c:	f001 ff10 	bl	800fd80 <osMessagePut>
    break;
 800df60:	e029      	b.n	800dfb6 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	7e5b      	ldrb	r3, [r3, #25]
 800df66:	3301      	adds	r3, #1
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	765a      	strb	r2, [r3, #25]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	7e5b      	ldrb	r3, [r3, #25]
 800df72:	2b02      	cmp	r3, #2
 800df74:	d809      	bhi.n	800df8a <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f00a f96f 	bl	801825a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2201      	movs	r2, #1
 800df80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800df88:	e016      	b.n	800dfb8 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800df90:	2106      	movs	r1, #6
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800df9c:	2302      	movs	r3, #2
 800df9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dfa0:	e00a      	b.n	800dfb8 <USBH_HandleControl+0x470>

  default:
    break;
 800dfa2:	bf00      	nop
 800dfa4:	e008      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfa6:	bf00      	nop
 800dfa8:	e006      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfaa:	bf00      	nop
 800dfac:	e004      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfae:	bf00      	nop
 800dfb0:	e002      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfb2:	bf00      	nop
 800dfb4:	e000      	b.n	800dfb8 <USBH_HandleControl+0x470>
    break;
 800dfb6:	bf00      	nop
  }
  return status;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop

0800dfc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800dfd2:	79f9      	ldrb	r1, [r7, #7]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	2308      	movs	r3, #8
 800dfda:	9302      	str	r3, [sp, #8]
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	68f8      	ldr	r0, [r7, #12]
 800dfea:	f00a f9f2 	bl	80183d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af04      	add	r7, sp, #16
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	4611      	mov	r1, r2
 800e004:	461a      	mov	r2, r3
 800e006:	460b      	mov	r3, r1
 800e008:	80fb      	strh	r3, [r7, #6]
 800e00a:	4613      	mov	r3, r2
 800e00c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e014:	2b00      	cmp	r3, #0
 800e016:	d001      	beq.n	800e01c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e018:	2300      	movs	r3, #0
 800e01a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e01c:	7979      	ldrb	r1, [r7, #5]
 800e01e:	7e3b      	ldrb	r3, [r7, #24]
 800e020:	9303      	str	r3, [sp, #12]
 800e022:	88fb      	ldrh	r3, [r7, #6]
 800e024:	9302      	str	r3, [sp, #8]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	2301      	movs	r3, #1
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	2300      	movs	r3, #0
 800e030:	2200      	movs	r2, #0
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f00a f9cd 	bl	80183d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b088      	sub	sp, #32
 800e046:	af04      	add	r7, sp, #16
 800e048:	60f8      	str	r0, [r7, #12]
 800e04a:	60b9      	str	r1, [r7, #8]
 800e04c:	4611      	mov	r1, r2
 800e04e:	461a      	mov	r2, r3
 800e050:	460b      	mov	r3, r1
 800e052:	80fb      	strh	r3, [r7, #6]
 800e054:	4613      	mov	r3, r2
 800e056:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e058:	7979      	ldrb	r1, [r7, #5]
 800e05a:	2300      	movs	r3, #0
 800e05c:	9303      	str	r3, [sp, #12]
 800e05e:	88fb      	ldrh	r3, [r7, #6]
 800e060:	9302      	str	r3, [sp, #8]
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	2301      	movs	r3, #1
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	2300      	movs	r3, #0
 800e06c:	2201      	movs	r2, #1
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f00a f9af 	bl	80183d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e074:	2300      	movs	r3, #0

}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800e07e:	b580      	push	{r7, lr}
 800e080:	b088      	sub	sp, #32
 800e082:	af04      	add	r7, sp, #16
 800e084:	60f8      	str	r0, [r7, #12]
 800e086:	60b9      	str	r1, [r7, #8]
 800e088:	4611      	mov	r1, r2
 800e08a:	461a      	mov	r2, r3
 800e08c:	460b      	mov	r3, r1
 800e08e:	80fb      	strh	r3, [r7, #6]
 800e090:	4613      	mov	r3, r2
 800e092:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e0a2:	7979      	ldrb	r1, [r7, #5]
 800e0a4:	7e3b      	ldrb	r3, [r7, #24]
 800e0a6:	9303      	str	r3, [sp, #12]
 800e0a8:	88fb      	ldrh	r3, [r7, #6]
 800e0aa:	9302      	str	r3, [sp, #8]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f00a f98a 	bl	80183d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af04      	add	r7, sp, #16
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	4611      	mov	r1, r2
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	80fb      	strh	r3, [r7, #6]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e0de:	7979      	ldrb	r1, [r7, #5]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	9303      	str	r3, [sp, #12]
 800e0e4:	88fb      	ldrh	r3, [r7, #6]
 800e0e6:	9302      	str	r3, [sp, #8]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f00a f96c 	bl	80183d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3710      	adds	r7, #16
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af04      	add	r7, sp, #16
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	4608      	mov	r0, r1
 800e10e:	4611      	mov	r1, r2
 800e110:	461a      	mov	r2, r3
 800e112:	4603      	mov	r3, r0
 800e114:	70fb      	strb	r3, [r7, #3]
 800e116:	460b      	mov	r3, r1
 800e118:	70bb      	strb	r3, [r7, #2]
 800e11a:	4613      	mov	r3, r2
 800e11c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e11e:	7878      	ldrb	r0, [r7, #1]
 800e120:	78ba      	ldrb	r2, [r7, #2]
 800e122:	78f9      	ldrb	r1, [r7, #3]
 800e124:	8b3b      	ldrh	r3, [r7, #24]
 800e126:	9302      	str	r3, [sp, #8]
 800e128:	7d3b      	ldrb	r3, [r7, #20]
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	7c3b      	ldrb	r3, [r7, #16]
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	4603      	mov	r3, r0
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f00a f8ff 	bl	8018336 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e138:	2300      	movs	r3, #0

}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}

0800e142 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b082      	sub	sp, #8
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	460b      	mov	r3, r1
 800e14c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e14e:	78fb      	ldrb	r3, [r7, #3]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f00a f91e 	bl	8018394 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e158:	2300      	movs	r3, #0

}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
 800e16a:	460b      	mov	r3, r1
 800e16c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 f831 	bl	800e1d6 <USBH_GetFreePipe>
 800e174:	4603      	mov	r3, r0
 800e176:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e178:	89fb      	ldrh	r3, [r7, #14]
 800e17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e17e:	4293      	cmp	r3, r2
 800e180:	d007      	beq.n	800e192 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	89fa      	ldrh	r2, [r7, #14]
 800e186:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	32e0      	adds	r2, #224	; 0xe0
 800e18e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	b2db      	uxtb	r3, r3
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e19e:	b480      	push	{r7}
 800e1a0:	b083      	sub	sp, #12
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	2b0a      	cmp	r3, #10
 800e1ae:	d80b      	bhi.n	800e1c8 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e1b0:	78fa      	ldrb	r2, [r7, #3]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	32e0      	adds	r2, #224	; 0xe0
 800e1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ba:	78fa      	ldrb	r2, [r7, #3]
 800e1bc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	32e0      	adds	r2, #224	; 0xe0
 800e1c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b085      	sub	sp, #20
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
 800e1e6:	e00e      	b.n	800e206 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e1e8:	7bfa      	ldrb	r2, [r7, #15]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	32e0      	adds	r2, #224	; 0xe0
 800e1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d102      	bne.n	800e200 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e1fa:	7bfb      	ldrb	r3, [r7, #15]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	e007      	b.n	800e210 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	3301      	adds	r3, #1
 800e204:	73fb      	strb	r3, [r7, #15]
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2b0a      	cmp	r3, #10
 800e20a:	d9ed      	bls.n	800e1e8 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e20c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e210:	4618      	mov	r0, r3
 800e212:	3714      	adds	r7, #20
 800e214:	46bd      	mov	sp, r7
 800e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21a:	4770      	bx	lr

0800e21c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
    {
 800e224:	4a04      	ldr	r2, [pc, #16]	; (800e238 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	601a      	str	r2, [r3, #0]
    }
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4618      	mov	r0, r3
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	08020904 	.word	0x08020904

0800e23c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
    }
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f7ff ffe9 	bl	800e21c <_ZN8touchgfx15TouchControllerD1Ev>
 800e24a:	2104      	movs	r1, #4
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f011 f81a 	bl	801f286 <_ZdlPvj>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	60f8      	str	r0, [r7, #12]
 800e264:	4608      	mov	r0, r1
 800e266:	4611      	mov	r1, r2
 800e268:	461a      	mov	r2, r3
 800e26a:	4603      	mov	r3, r0
 800e26c:	817b      	strh	r3, [r7, #10]
 800e26e:	460b      	mov	r3, r1
 800e270:	813b      	strh	r3, [r7, #8]
 800e272:	4613      	mov	r3, r2
 800e274:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	897a      	ldrh	r2, [r7, #10]
 800e27a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	893a      	ldrh	r2, [r7, #8]
 800e280:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	88fa      	ldrh	r2, [r7, #6]
 800e286:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	8b3a      	ldrh	r2, [r7, #24]
 800e28c:	80da      	strh	r2, [r3, #6]
    }
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	4413      	add	r3, r2
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	b21b      	sxth	r3, r3
    }
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	4413      	add	r3, r2
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	b21b      	sxth	r3, r3
    }
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	807b      	strh	r3, [r7, #2]
 800e2fc:	4613      	mov	r3, r2
 800e2fe:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800e306:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	db1a      	blt.n	800e344 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7ff ffc4 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e314:	4603      	mov	r3, r0
 800e316:	461a      	mov	r2, r3
 800e318:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e31c:	4293      	cmp	r3, r2
 800e31e:	da11      	bge.n	800e344 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800e326:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	db0a      	blt.n	800e344 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7ff ffc9 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e334:	4603      	mov	r3, r0
 800e336:	461a      	mov	r2, r3
 800e338:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e33c:	4293      	cmp	r3, r2
 800e33e:	da01      	bge.n	800e344 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800e340:	2301      	movs	r3, #1
 800e342:	e000      	b.n	800e346 <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800e344:	2300      	movs	r3, #0
    }
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}

0800e34e <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800e34e:	b590      	push	{r4, r7, lr}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e35e:	6838      	ldr	r0, [r7, #0]
 800e360:	f7ff ff9c 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e364:	4603      	mov	r3, r0
 800e366:	429c      	cmp	r4, r3
 800e368:	da1e      	bge.n	800e3a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ff96 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e370:	4603      	mov	r3, r0
 800e372:	461a      	mov	r2, r3
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	dd14      	ble.n	800e3a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800e384:	6838      	ldr	r0, [r7, #0]
 800e386:	f7ff ff9e 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e38a:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800e38c:	429c      	cmp	r4, r3
 800e38e:	da0b      	bge.n	800e3a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f7ff ff98 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e396:	4603      	mov	r3, r0
 800e398:	461a      	mov	r2, r3
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	dd01      	ble.n	800e3a8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e000      	b.n	800e3aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800e3a8:	2300      	movs	r3, #0
    }
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	370c      	adds	r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd90      	pop	{r4, r7, pc}

0800e3b2 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b084      	sub	sp, #16
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	60f8      	str	r0, [r7, #12]
 800e3ba:	60b9      	str	r1, [r7, #8]
 800e3bc:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	6811      	ldr	r1, [r2, #0]
 800e3c4:	6852      	ldr	r2, [r2, #4]
 800e3c6:	6019      	str	r1, [r3, #0]
 800e3c8:	605a      	str	r2, [r3, #4]
        r &= other;
 800e3ca:	6879      	ldr	r1, [r7, #4]
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f000 f805 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800e3d2:	bf00      	nop
    }
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800e3dc:	b590      	push	{r4, r7, lr}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff ffb0 	bl	800e34e <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d05f      	beq.n	800e4b4 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e400:	429a      	cmp	r2, r3
 800e402:	dd03      	ble.n	800e40c <_ZN8touchgfx4RectaNERKS0_+0x30>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e40a:	e002      	b.n	800e412 <_ZN8touchgfx4RectaNERKS0_+0x36>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e412:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e420:	429a      	cmp	r2, r3
 800e422:	dd04      	ble.n	800e42e <_ZN8touchgfx4RectaNERKS0_+0x52>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3302      	adds	r3, #2
 800e428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e42c:	e002      	b.n	800e434 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e434:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff ff30 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e43c:	4603      	mov	r3, r0
 800e43e:	461c      	mov	r4, r3
 800e440:	6838      	ldr	r0, [r7, #0]
 800e442:	f7ff ff2b 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e446:	4603      	mov	r3, r0
 800e448:	429c      	cmp	r4, r3
 800e44a:	da05      	bge.n	800e458 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff ff25 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e452:	4603      	mov	r3, r0
 800e454:	b29b      	uxth	r3, r3
 800e456:	e004      	b.n	800e462 <_ZN8touchgfx4RectaNERKS0_+0x86>
 800e458:	6838      	ldr	r0, [r7, #0]
 800e45a:	f7ff ff1f 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e45e:	4603      	mov	r3, r0
 800e460:	b29b      	uxth	r3, r3
 800e462:	89fa      	ldrh	r2, [r7, #14]
 800e464:	1a9b      	subs	r3, r3, r2
 800e466:	b29b      	uxth	r3, r3
 800e468:	b21a      	sxth	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff ff29 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e474:	4603      	mov	r3, r0
 800e476:	461c      	mov	r4, r3
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7ff ff24 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e47e:	4603      	mov	r3, r0
 800e480:	429c      	cmp	r4, r3
 800e482:	da05      	bge.n	800e490 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f7ff ff1e 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e48a:	4603      	mov	r3, r0
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	e004      	b.n	800e49a <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800e490:	6838      	ldr	r0, [r7, #0]
 800e492:	f7ff ff18 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e496:	4603      	mov	r3, r0
 800e498:	b29b      	uxth	r3, r3
 800e49a:	89ba      	ldrh	r2, [r7, #12]
 800e49c:	1a9b      	subs	r3, r3, r2
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	b21a      	sxth	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	80da      	strh	r2, [r3, #6]
            x = newX;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	89fa      	ldrh	r2, [r7, #14]
 800e4aa:	801a      	strh	r2, [r3, #0]
            y = newY;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	89ba      	ldrh	r2, [r7, #12]
 800e4b0:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800e4b2:	e00b      	b.n	800e4cc <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	801a      	strh	r2, [r3, #0]
            y = 0;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	805a      	strh	r2, [r3, #2]
            width = 0;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	809a      	strh	r2, [r3, #4]
            height = 0;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	80da      	strh	r2, [r3, #6]
    }
 800e4cc:	bf00      	nop
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd90      	pop	{r4, r7, pc}

0800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800e4d4:	b590      	push	{r4, r7, lr}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800e4de:	6838      	ldr	r0, [r7, #0]
 800e4e0:	f000 f884 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f083 0301 	eor.w	r3, r3, #1
 800e4ea:	b2db      	uxtb	r3, r3
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d079      	beq.n	800e5e4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f87b 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d014      	beq.n	800e526 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800e524:	e05e      	b.n	800e5e4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e532:	429a      	cmp	r2, r3
 800e534:	da03      	bge.n	800e53e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e53c:	e002      	b.n	800e544 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e544:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e552:	429a      	cmp	r2, r3
 800e554:	da04      	bge.n	800e560 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3302      	adds	r3, #2
 800e55a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e55e:	e002      	b.n	800e566 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e566:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7ff fe97 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e56e:	4603      	mov	r3, r0
 800e570:	461c      	mov	r4, r3
 800e572:	6838      	ldr	r0, [r7, #0]
 800e574:	f7ff fe92 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e578:	4603      	mov	r3, r0
 800e57a:	429c      	cmp	r4, r3
 800e57c:	dd04      	ble.n	800e588 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7ff fe8c 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e584:	4603      	mov	r3, r0
 800e586:	e003      	b.n	800e590 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800e588:	6838      	ldr	r0, [r7, #0]
 800e58a:	f7ff fe87 	bl	800e29c <_ZNK8touchgfx4Rect5rightEv>
 800e58e:	4603      	mov	r3, r0
 800e590:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff fe97 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e598:	4603      	mov	r3, r0
 800e59a:	461c      	mov	r4, r3
 800e59c:	6838      	ldr	r0, [r7, #0]
 800e59e:	f7ff fe92 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	dd04      	ble.n	800e5b2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fe8c 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	e003      	b.n	800e5ba <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800e5b2:	6838      	ldr	r0, [r7, #0]
 800e5b4:	f7ff fe87 	bl	800e2c6 <_ZNK8touchgfx4Rect6bottomEv>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	813b      	strh	r3, [r7, #8]
                x = newX;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	89fa      	ldrh	r2, [r7, #14]
 800e5c0:	801a      	strh	r2, [r3, #0]
                y = newY;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	89ba      	ldrh	r2, [r7, #12]
 800e5c6:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800e5c8:	897a      	ldrh	r2, [r7, #10]
 800e5ca:	89fb      	ldrh	r3, [r7, #14]
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	b21a      	sxth	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800e5d6:	893a      	ldrh	r2, [r7, #8]
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	b21a      	sxth	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	80da      	strh	r2, [r3, #6]
    }
 800e5e4:	bf00      	nop
 800e5e6:	3714      	adds	r7, #20
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd90      	pop	{r4, r7, pc}

0800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800e5ec:	b480      	push	{r7}
 800e5ee:	b083      	sub	sp, #12
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800e608:	2301      	movs	r3, #1
 800e60a:	e000      	b.n	800e60e <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800e60c:	2300      	movs	r3, #0
    }
 800e60e:	4618      	mov	r0, r3
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
	...

0800e61c <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	4a04      	ldr	r2, [pc, #16]	; (800e638 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4618      	mov	r0, r3
 800e62e:	370c      	adds	r7, #12
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	08022120 	.word	0x08022120

0800e63c <_ZN8touchgfx8DrawableD0Ev>:
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b082      	sub	sp, #8
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff ffe9 	bl	800e61c <_ZN8touchgfx8DrawableD1Ev>
 800e64a:	2128      	movs	r1, #40	; 0x28
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f010 fe1a 	bl	801f286 <_ZdlPvj>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3304      	adds	r3, #4
    }
 800e668:	4618      	mov	r0, r3
 800e66a:	370c      	adds	r7, #12
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	4608      	mov	r0, r1
 800e67e:	4611      	mov	r1, r2
 800e680:	461a      	mov	r2, r3
 800e682:	4603      	mov	r3, r0
 800e684:	817b      	strh	r3, [r7, #10]
 800e686:	460b      	mov	r3, r1
 800e688:	813b      	strh	r3, [r7, #8]
 800e68a:	4613      	mov	r3, r2
 800e68c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3334      	adds	r3, #52	; 0x34
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e69a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e69e:	68f8      	ldr	r0, [r7, #12]
 800e6a0:	4798      	blx	r3
        setWidth(width);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3338      	adds	r3, #56	; 0x38
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	4798      	blx	r3
        setHeight(height);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	333c      	adds	r3, #60	; 0x3c
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	4798      	blx	r3
    };
 800e6c6:	bf00      	nop
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e6ce:	b480      	push	{r7}
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e6dc:	4618      	mov	r0, r3
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800e702:	b480      	push	{r7}
 800e704:	b083      	sub	sp, #12
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	460b      	mov	r3, r1
 800e70c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	887a      	ldrh	r2, [r7, #2]
 800e712:	809a      	strh	r2, [r3, #4]
    }
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	887a      	ldrh	r2, [r7, #2]
 800e730:	80da      	strh	r2, [r3, #6]
    }
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e73e:	b580      	push	{r7, lr}
 800e740:	b082      	sub	sp, #8
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
 800e746:	460b      	mov	r3, r1
 800e748:	807b      	strh	r3, [r7, #2]
 800e74a:	4613      	mov	r3, r2
 800e74c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	332c      	adds	r3, #44	; 0x2c
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e75a:	4611      	mov	r1, r2
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	4798      	blx	r3
        setY(y);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	3330      	adds	r3, #48	; 0x30
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e76c:	4611      	mov	r1, r2
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	4798      	blx	r3
    }
 800e772:	bf00      	nop
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800e77a:	b480      	push	{r7}
 800e77c:	b083      	sub	sp, #12
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	460b      	mov	r3, r1
 800e784:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	887a      	ldrh	r2, [r7, #2]
 800e78a:	811a      	strh	r2, [r3, #8]
    }
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	887a      	ldrh	r2, [r7, #2]
 800e7a8:	815a      	strh	r2, [r3, #10]
    }
 800e7aa:	bf00      	nop
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800e7b6:	b480      	push	{r7}
 800e7b8:	b083      	sub	sp, #12
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	bf00      	nop
 800e7c0:	370c      	adds	r7, #12
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800e7ca:	b480      	push	{r7}
 800e7cc:	b083      	sub	sp, #12
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr

0800e7e0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
 800e7ea:	bf00      	nop
 800e7ec:	370c      	adds	r7, #12
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	6039      	str	r1, [r7, #0]
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e82e:	4618      	mov	r0, r3
 800e830:	370c      	adds	r7, #12
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e83a:	b480      	push	{r7}
 800e83c:	b083      	sub	sp, #12
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e848:	4618      	mov	r0, r3
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	460b      	mov	r3, r1
 800e85e:	807b      	strh	r3, [r7, #2]
 800e860:	4613      	mov	r3, r2
 800e862:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	3354      	adds	r3, #84	; 0x54
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	8879      	ldrh	r1, [r7, #2]
 800e86e:	687a      	ldr	r2, [r7, #4]
 800e870:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e874:	b292      	uxth	r2, r2
 800e876:	1a8a      	subs	r2, r1, r2
 800e878:	b292      	uxth	r2, r2
 800e87a:	b210      	sxth	r0, r2
 800e87c:	8839      	ldrh	r1, [r7, #0]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e884:	b292      	uxth	r2, r2
 800e886:	1a8a      	subs	r2, r1, r2
 800e888:	b292      	uxth	r2, r2
 800e88a:	b212      	sxth	r2, r2
 800e88c:	4601      	mov	r1, r0
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	4798      	blx	r3
    }
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
	...

0800e89c <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	4a05      	ldr	r2, [pc, #20]	; (800e8bc <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	601a      	str	r2, [r3, #0]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff feb5 	bl	800e61c <_ZN8touchgfx8DrawableD1Ev>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	0802091c 	.word	0x0802091c

0800e8c0 <_ZN8touchgfx9ContainerD0Ev>:
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7ff ffe7 	bl	800e89c <_ZN8touchgfx9ContainerD1Ev>
 800e8ce:	212c      	movs	r1, #44	; 0x2c
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f010 fcd8 	bl	801f286 <_ZdlPvj>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800e8e8:	2312      	movs	r3, #18
    }
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	370c      	adds	r7, #12
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f4:	4770      	bx	lr

0800e8f6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800e8f6:	b480      	push	{r7}
 800e8f8:	b085      	sub	sp, #20
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
 800e8fe:	6039      	str	r1, [r7, #0]
    bool found = false;
 800e900:	2300      	movs	r3, #0
 800e902:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e908:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00d      	beq.n	800e92c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d10a      	bne.n	800e92c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	bf0c      	ite	eq
 800e91e:	2301      	moveq	r3, #1
 800e920:	2300      	movne	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800e92a:	e7ee      	b.n	800e90a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3714      	adds	r7, #20
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d105      	bne.n	800e95a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800e94e:	4b22      	ldr	r3, [pc, #136]	; (800e9d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800e950:	4a22      	ldr	r2, [pc, #136]	; (800e9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e952:	2123      	movs	r1, #35	; 0x23
 800e954:	4822      	ldr	r0, [pc, #136]	; (800e9e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e956:	f010 fcb3 	bl	801f2c0 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d005      	beq.n	800e96e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800e962:	4b20      	ldr	r3, [pc, #128]	; (800e9e4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800e964:	4a1d      	ldr	r2, [pc, #116]	; (800e9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e966:	2124      	movs	r1, #36	; 0x24
 800e968:	481d      	ldr	r0, [pc, #116]	; (800e9e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e96a:	f010 fca9 	bl	801f2c0 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	2200      	movs	r2, #0
 800e978:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d103      	bne.n	800e98a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800e988:	e021      	b.n	800e9ce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e98e:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00d      	beq.n	800e9b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800e998:	68fa      	ldr	r2, [r7, #12]
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d105      	bne.n	800e9ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800e9a0:	4b11      	ldr	r3, [pc, #68]	; (800e9e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800e9a2:	4a0e      	ldr	r2, [pc, #56]	; (800e9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e9a4:	2135      	movs	r1, #53	; 0x35
 800e9a6:	480e      	ldr	r0, [pc, #56]	; (800e9e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e9a8:	f010 fc8a 	bl	801f2c0 <__assert_func>
            head = head->nextSibling;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800e9b2:	e7ed      	b.n	800e990 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800e9b4:	68fa      	ldr	r2, [r7, #12]
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d105      	bne.n	800e9c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800e9bc:	4b0a      	ldr	r3, [pc, #40]	; (800e9e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800e9be:	4a07      	ldr	r2, [pc, #28]	; (800e9dc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800e9c0:	2138      	movs	r1, #56	; 0x38
 800e9c2:	4807      	ldr	r0, [pc, #28]	; (800e9e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800e9c4:	f010 fc7c 	bl	801f2c0 <__assert_func>
        head->nextSibling = &d;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	619a      	str	r2, [r3, #24]
}
 800e9ce:	bf00      	nop
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
 800e9d6:	bf00      	nop
 800e9d8:	080202f4 	.word	0x080202f4
 800e9dc:	080209a4 	.word	0x080209a4
 800e9e0:	08020320 	.word	0x08020320
 800e9e4:	08020378 	.word	0x08020378
 800e9e8:	080203b0 	.word	0x080203b0

0800e9ec <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b085      	sub	sp, #20
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d031      	beq.n	800ea62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea02:	683a      	ldr	r2, [r7, #0]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d112      	bne.n	800ea2e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	699b      	ldr	r3, [r3, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d103      	bne.n	800ea1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2200      	movs	r2, #0
 800ea1a:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800ea1c:	e022      	b.n	800ea64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	699a      	ldr	r2, [r3, #24]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	619a      	str	r2, [r3, #24]
        return;
 800ea2c:	e01a      	b.n	800ea64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea32:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d014      	beq.n	800ea64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d10a      	bne.n	800ea5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	699a      	ldr	r2, [r3, #24]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	2200      	movs	r2, #0
 800ea56:	619a      	str	r2, [r3, #24]
            return;
 800ea58:	e004      	b.n	800ea64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800ea60:	e7e8      	b.n	800ea34 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800ea62:	bf00      	nop
        }
    }
}
 800ea64:	3714      	adds	r7, #20
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00e      	beq.n	800ea9c <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea82:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea88:	699a      	ldr	r2, [r3, #24]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800ea9a:	e7ec      	b.n	800ea76 <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800ea9c:	bf00      	nop
 800ea9e:	3714      	adds	r7, #20
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	629a      	str	r2, [r3, #40]	; 0x28
}
 800eab6:	bf00      	nop
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b088      	sub	sp, #32
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7ff fea6 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ead4:	4603      	mov	r3, r0
 800ead6:	f083 0301 	eor.w	r3, r3, #1
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d103      	bne.n	800eae8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d101      	bne.n	800eaec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800eae8:	2301      	movs	r3, #1
 800eaea:	e000      	b.n	800eaee <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800eaec:	2300      	movs	r3, #0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d14e      	bne.n	800eb90 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	f107 0314 	add.w	r3, r7, #20
 800eaf8:	6810      	ldr	r0, [r2, #0]
 800eafa:	6851      	ldr	r1, [r2, #4]
 800eafc:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb02:	61fb      	str	r3, [r7, #28]
    while (d)
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d043      	beq.n	800eb92 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800eb0a:	69f8      	ldr	r0, [r7, #28]
 800eb0c:	f7ff fe88 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d038      	beq.n	800eb88 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800eb16:	69f8      	ldr	r0, [r7, #28]
 800eb18:	f7ff fda0 	bl	800e65c <_ZNK8touchgfx8Drawable7getRectEv>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	f107 030c 	add.w	r3, r7, #12
 800eb22:	f107 0114 	add.w	r1, r7, #20
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7ff fc43 	bl	800e3b2 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800eb2c:	f107 030c 	add.w	r3, r7, #12
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7ff fd5b 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f083 0301 	eor.w	r3, r3, #1
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d022      	beq.n	800eb88 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800eb42:	69f8      	ldr	r0, [r7, #28]
 800eb44:	f7ff fdc3 	bl	800e6ce <_ZNK8touchgfx8Drawable4getXEv>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	b28b      	uxth	r3, r1
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	b21b      	sxth	r3, r3
 800eb5a:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800eb5c:	69f8      	ldr	r0, [r7, #28]
 800eb5e:	f7ff fdc3 	bl	800e6e8 <_ZNK8touchgfx8Drawable4getYEv>
 800eb62:	4603      	mov	r3, r0
 800eb64:	4619      	mov	r1, r3
 800eb66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	b28b      	uxth	r3, r1
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	b21b      	sxth	r3, r3
 800eb74:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f107 020c 	add.w	r2, r7, #12
 800eb82:	4611      	mov	r1, r2
 800eb84:	69f8      	ldr	r0, [r7, #28]
 800eb86:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	61fb      	str	r3, [r7, #28]
    while (d)
 800eb8e:	e7b9      	b.n	800eb04 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800eb90:	bf00      	nop
    }
}
 800eb92:	3720      	adds	r7, #32
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b087      	sub	sp, #28
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	607b      	str	r3, [r7, #4]
 800eba2:	460b      	mov	r3, r1
 800eba4:	817b      	strh	r3, [r7, #10]
 800eba6:	4613      	mov	r3, r2
 800eba8:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff fe44 	bl	800e83a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	617b      	str	r3, [r7, #20]
    while (d)
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d038      	beq.n	800ec3c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800ebca:	6978      	ldr	r0, [r7, #20]
 800ebcc:	f7ff fe28 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00e      	beq.n	800ebf4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ebd6:	6978      	ldr	r0, [r7, #20]
 800ebd8:	f7ff fd40 	bl	800e65c <_ZNK8touchgfx8Drawable7getRectEv>
 800ebdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ebe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ebe4:	4619      	mov	r1, r3
 800ebe6:	f7ff fb83 	bl	800e2f0 <_ZNK8touchgfx4Rect9intersectEss>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	e000      	b.n	800ebf6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d01c      	beq.n	800ec34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800ebfa:	897c      	ldrh	r4, [r7, #10]
 800ebfc:	6978      	ldr	r0, [r7, #20]
 800ebfe:	f7ff fd66 	bl	800e6ce <_ZNK8touchgfx8Drawable4getXEv>
 800ec02:	4603      	mov	r3, r0
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	1ae3      	subs	r3, r4, r3
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800ec0c:	893c      	ldrh	r4, [r7, #8]
 800ec0e:	6978      	ldr	r0, [r7, #20]
 800ec10:	f7ff fd6a 	bl	800e6e8 <_ZNK8touchgfx8Drawable4getYEv>
 800ec14:	4603      	mov	r3, r0
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	1ae3      	subs	r3, r4, r3
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	331c      	adds	r3, #28
 800ec24:	681c      	ldr	r4, [r3, #0]
 800ec26:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ec2a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6978      	ldr	r0, [r7, #20]
 800ec32:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	617b      	str	r3, [r7, #20]
    while (d)
 800ec3a:	e7c3      	b.n	800ebc4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800ec3c:	bf00      	nop
 800ec3e:	371c      	adds	r7, #28
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd90      	pop	{r4, r7, pc}

0800ec44 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af02      	add	r7, sp, #8
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800ec4e:	2300      	movs	r3, #0
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	2300      	movs	r3, #0
 800ec54:	2200      	movs	r2, #0
 800ec56:	2100      	movs	r1, #0
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7ff faff 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
}
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b086      	sub	sp, #24
 800ec6a:	af02      	add	r7, sp, #8
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec74:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800ec76:	2300      	movs	r3, #0
 800ec78:	9300      	str	r3, [sp, #0]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	2100      	movs	r1, #0
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff faeb 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
    while (d)
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00b      	beq.n	800eca4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f7ff fce5 	bl	800e65c <_ZNK8touchgfx8Drawable7getRectEv>
 800ec92:	4603      	mov	r3, r0
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fc1c 	bl	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	60fb      	str	r3, [r7, #12]
    while (d)
 800eca2:	e7f0      	b.n	800ec86 <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800eca4:	bf00      	nop
}
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b084      	sub	sp, #16
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	807b      	strh	r3, [r7, #2]
 800ecba:	4613      	mov	r3, r2
 800ecbc:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc2:	60fb      	str	r3, [r7, #12]
    while (d)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00d      	beq.n	800ece6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3354      	adds	r3, #84	; 0x54
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ecd6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	4798      	blx	r3
        d = d->nextSibling;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	60fb      	str	r3, [r7, #12]
    while (d)
 800ece4:	e7ee      	b.n	800ecc4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	60fb      	str	r3, [r7, #12]
    while (d)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00a      	beq.n	800ed1a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	3308      	adds	r3, #8
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68f9      	ldr	r1, [r7, #12]
 800ed0e:	6838      	ldr	r0, [r7, #0]
 800ed10:	4798      	blx	r3
        d = d->nextSibling;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	699b      	ldr	r3, [r3, #24]
 800ed16:	60fb      	str	r3, [r7, #12]
    while (d)
 800ed18:	e7f1      	b.n	800ecfe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b086      	sub	sp, #24
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d107      	bne.n	800ed46 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3364      	adds	r3, #100	; 0x64
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6879      	ldr	r1, [r7, #4]
 800ed40:	68f8      	ldr	r0, [r7, #12]
 800ed42:	4798      	blx	r3
        return;
 800ed44:	e026      	b.n	800ed94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d10a      	bne.n	800ed62 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	615a      	str	r2, [r3, #20]
 800ed60:	e018      	b.n	800ed94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed66:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d012      	beq.n	800ed94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d10a      	bne.n	800ed8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	699a      	ldr	r2, [r3, #24]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	687a      	ldr	r2, [r7, #4]
 800ed82:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	615a      	str	r2, [r3, #20]
                return;
 800ed8a:	e003      	b.n	800ed94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ed92:	e7e9      	b.n	800ed68 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b088      	sub	sp, #32
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	60f8      	str	r0, [r7, #12]
 800eda2:	60b9      	str	r1, [r7, #8]
 800eda4:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fd39 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800edae:	4603      	mov	r3, r0
 800edb0:	f083 0301 	eor.w	r3, r3, #1
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d14b      	bne.n	800ee52 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d049      	beq.n	800ee56 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc6:	61fb      	str	r3, [r7, #28]
    while (d)
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d044      	beq.n	800ee58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800edce:	69f8      	ldr	r0, [r7, #28]
 800edd0:	f7ff fd26 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d037      	beq.n	800ee4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800edda:	69f8      	ldr	r0, [r7, #28]
 800eddc:	f7ff fc3e 	bl	800e65c <_ZNK8touchgfx8Drawable7getRectEv>
 800ede0:	4602      	mov	r2, r0
 800ede2:	f107 0314 	add.w	r3, r7, #20
 800ede6:	68b9      	ldr	r1, [r7, #8]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fae2 	bl	800e3b2 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800edee:	f107 0314 	add.w	r3, r7, #20
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff fbfa 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f083 0301 	eor.w	r3, r3, #1
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d022      	beq.n	800ee4a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800ee04:	69f8      	ldr	r0, [r7, #28]
 800ee06:	f7ff fc62 	bl	800e6ce <_ZNK8touchgfx8Drawable4getXEv>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	b28b      	uxth	r3, r1
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	b21b      	sxth	r3, r3
 800ee1c:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800ee1e:	69f8      	ldr	r0, [r7, #28]
 800ee20:	f7ff fc62 	bl	800e6e8 <_ZNK8touchgfx8Drawable4getYEv>
 800ee24:	4603      	mov	r3, r0
 800ee26:	4619      	mov	r1, r3
 800ee28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	b28b      	uxth	r3, r1
 800ee30:	1ad3      	subs	r3, r2, r3
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	b21b      	sxth	r3, r3
 800ee36:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3360      	adds	r3, #96	; 0x60
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f107 0114 	add.w	r1, r7, #20
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	69f8      	ldr	r0, [r7, #28]
 800ee48:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	61fb      	str	r3, [r7, #28]
    while (d)
 800ee50:	e7ba      	b.n	800edc8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800ee52:	bf00      	nop
 800ee54:	e000      	b.n	800ee58 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800ee56:	bf00      	nop
    }
}
 800ee58:	3720      	adds	r7, #32
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800ee5e:	b480      	push	{r7}
 800ee60:	b083      	sub	sp, #12
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
        return rect.width;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
        return rect.height;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
	...

0800ee94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	4a04      	ldr	r2, [pc, #16]	; (800eeb0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4618      	mov	r0, r3
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr
 800eeb0:	080209e8 	.word	0x080209e8

0800eeb4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
    {
    }
 800eebc:	4a04      	ldr	r2, [pc, #16]	; (800eed0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4618      	mov	r0, r3
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	080209e8 	.word	0x080209e8

0800eed4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
    }
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff ffe9 	bl	800eeb4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800eee2:	2104      	movs	r1, #4
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f010 f9ce 	bl	801f286 <_ZdlPvj>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4618      	mov	r0, r3
 800eeee:	3708      	adds	r7, #8
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
        color = col;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	683a      	ldr	r2, [r7, #0]
 800ef02:	601a      	str	r2, [r3, #0]
    }
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2200      	movs	r2, #0
 800ef24:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	80da      	strh	r2, [r3, #6]
    }
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4618      	mov	r0, r3
 800ef36:	370c      	adds	r7, #12
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3e:	4770      	bx	lr

0800ef40 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	807b      	strh	r3, [r7, #2]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	887a      	ldrh	r2, [r7, #2]
 800ef50:	801a      	strh	r2, [r3, #0]
    {
    }
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4618      	mov	r0, r3
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	6078      	str	r0, [r7, #4]
        visible(true)
 800ef68:	4a13      	ldr	r2, [pc, #76]	; (800efb8 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	1d18      	adds	r0, r3, #4
 800ef72:	2300      	movs	r3, #0
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	2300      	movs	r3, #0
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	f7ff f96e 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	330c      	adds	r3, #12
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7ff ffc4 	bl	800ef12 <_ZN8touchgfx4RectC1Ev>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	615a      	str	r2, [r3, #20]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	619a      	str	r2, [r3, #24]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	61da      	str	r2, [r3, #28]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2201      	movs	r2, #1
 800efa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	08022120 	.word	0x08022120

0800efbc <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	78fa      	ldrb	r2, [r7, #3]
 800efcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800efdc:	b480      	push	{r7}
 800efde:	b083      	sub	sp, #12
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efea:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eff2:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800effa:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800effc:	bf00      	nop
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff ffe1 	bl	800efdc <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	601a      	str	r2, [r3, #0]
    }
 800f028:	bf00      	nop
 800f02a:	3710      	adds	r7, #16
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}

0800f030 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7ff ff90 	bl	800ef60 <_ZN8touchgfx8DrawableC1Ev>
 800f040:	4a03      	ldr	r2, [pc, #12]	; (800f050 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	08020a00 	.word	0x08020a00

0800f054 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	4a05      	ldr	r2, [pc, #20]	; (800f074 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	601a      	str	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fad9 	bl	800e61c <_ZN8touchgfx8DrawableD1Ev>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	08020a00 	.word	0x08020a00

0800f078 <_ZN8touchgfx6WidgetD0Ev>:
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7ff ffe7 	bl	800f054 <_ZN8touchgfx6WidgetD1Ev>
 800f086:	2128      	movs	r1, #40	; 0x28
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f010 f8fc 	bl	801f286 <_ZdlPvj>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	607b      	str	r3, [r7, #4]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	817b      	strh	r3, [r7, #10]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff fbb7 	bl	800e820 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d008      	beq.n	800f0ca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7ff fbbd 	bl	800e83a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e000      	b.n	800f0cc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	601a      	str	r2, [r3, #0]
        }
    }
 800f0d6:	bf00      	nop
 800f0d8:	3710      	adds	r7, #16
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd80      	pop	{r7, pc}

0800f0de <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800f0de:	b480      	push	{r7}
 800f0e0:	b083      	sub	sp, #12
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800f0e6:	2301      	movs	r3, #1
    }
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff ff96 	bl	800f030 <_ZN8touchgfx6WidgetC1Ev>
 800f104:	4a0a      	ldr	r2, [pc, #40]	; (800f130 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	22ff      	movs	r2, #255	; 0xff
 800f10e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	3328      	adds	r3, #40	; 0x28
 800f116:	2100      	movs	r1, #0
 800f118:	4618      	mov	r0, r3
 800f11a:	f7ff feeb 	bl	800eef4 <_ZN8touchgfx9colortypeC1Em>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4618      	mov	r0, r3
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	08020b64 	.word	0x08020b64

0800f134 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	4a05      	ldr	r2, [pc, #20]	; (800f154 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff ff85 	bl	800f054 <_ZN8touchgfx6WidgetD1Ev>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	08020b64 	.word	0x08020b64

0800f158 <_ZN8touchgfx3BoxD0Ev>:
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7ff ffe7 	bl	800f134 <_ZN8touchgfx3BoxD1Ev>
 800f166:	2130      	movs	r1, #48	; 0x30
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f010 f88c 	bl	801f286 <_ZdlPvj>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	4a04      	ldr	r2, [pc, #16]	; (800f1b0 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	601a      	str	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	08020a94 	.word	0x08020a94

0800f1b4 <_ZN8touchgfx5EventD0Ev>:
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7ff ffe9 	bl	800f194 <_ZN8touchgfx5EventD1Ev>
 800f1c2:	2104      	movs	r1, #4
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f010 f85e 	bl	801f286 <_ZdlPvj>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3708      	adds	r7, #8
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	4a05      	ldr	r2, [pc, #20]	; (800f1f4 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7ff ffd5 	bl	800f194 <_ZN8touchgfx5EventD1Ev>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3708      	adds	r7, #8
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	08020a80 	.word	0x08020a80

0800f1f8 <_ZN8touchgfx10ClickEventD0Ev>:
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff ffe7 	bl	800f1d4 <_ZN8touchgfx10ClickEventD1Ev>
 800f206:	210c      	movs	r1, #12
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f010 f83c 	bl	801f286 <_ZdlPvj>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	791b      	ldrb	r3, [r3, #4]
    }
 800f224:	4618      	mov	r0, r3
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800f238:	2300      	movs	r3, #0
    }
 800f23a:	4618      	mov	r0, r3
 800f23c:	370c      	adds	r7, #12
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
	...

0800f248 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	4a05      	ldr	r2, [pc, #20]	; (800f268 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	601a      	str	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4618      	mov	r0, r3
 800f25a:	f7ff ff9b 	bl	800f194 <_ZN8touchgfx5EventD1Ev>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	3708      	adds	r7, #8
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}
 800f268:	08020a6c 	.word	0x08020a6c

0800f26c <_ZN8touchgfx9DragEventD0Ev>:
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff ffe7 	bl	800f248 <_ZN8touchgfx9DragEventD1Ev>
 800f27a:	2110      	movs	r1, #16
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f010 f802 	bl	801f286 <_ZdlPvj>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800f294:	2301      	movs	r3, #1
    }
 800f296:	4618      	mov	r0, r3
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
	...

0800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f2a4:	b480      	push	{r7}
 800f2a6:	af00      	add	r7, sp, #0
    {
        return instance;
 800f2a8:	4b03      	ldr	r3, [pc, #12]	; (800f2b8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
    }
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20009b14 	.word	0x20009b14

0800f2bc <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff feb2 	bl	800f030 <_ZN8touchgfx6WidgetC1Ev>
 800f2cc:	4a09      	ldr	r2, [pc, #36]	; (800f2f4 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	601a      	str	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	629a      	str	r2, [r3, #40]	; 0x28
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7ff fe69 	bl	800efbc <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3708      	adds	r7, #8
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	08020af4 	.word	0x08020af4

0800f2f8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	683a      	ldr	r2, [r7, #0]
 800f306:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	4a05      	ldr	r2, [pc, #20]	; (800f334 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff fe95 	bl	800f054 <_ZN8touchgfx6WidgetD1Ev>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	08020af4 	.word	0x08020af4

0800f338 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff ffe7 	bl	800f314 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f346:	2130      	movs	r1, #48	; 0x30
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f00f ff9c 	bl	801f286 <_ZdlPvj>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4618      	mov	r0, r3
 800f364:	f7ff ffaa 	bl	800f2bc <_ZN8touchgfx14AbstractButtonC1Ev>
 800f368:	4a0c      	ldr	r2, [pc, #48]	; (800f39c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	332e      	adds	r3, #46	; 0x2e
 800f372:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fde2 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3330      	adds	r3, #48	; 0x30
 800f380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff fddb 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	22ff      	movs	r2, #255	; 0xff
 800f38e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	08020bd0 	.word	0x08020bd0

0800f3a0 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	4a05      	ldr	r2, [pc, #20]	; (800f3c0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	601a      	str	r2, [r3, #0]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7ff ffaf 	bl	800f314 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	08020bd0 	.word	0x08020bd0

0800f3c4 <_ZN8touchgfx6ButtonD0Ev>:
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ffe7 	bl	800f3a0 <_ZN8touchgfx6ButtonD1Ev>
 800f3d2:	2134      	movs	r1, #52	; 0x34
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f00f ff56 	bl	801f286 <_ZdlPvj>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	4a04      	ldr	r2, [pc, #16]	; (800f400 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	08020aa8 	.word	0x08020aa8

0800f404 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
    }
 800f40c:	4a04      	ldr	r2, [pc, #16]	; (800f420 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	08020aa8 	.word	0x08020aa8

0800f424 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
    }
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff ffe9 	bl	800f404 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f432:	2104      	movs	r1, #4
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f00f ff26 	bl	801f286 <_ZdlPvj>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4618      	mov	r0, r3
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f44c:	4b07      	ldr	r3, [pc, #28]	; (800f46c <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d105      	bne.n	800f460 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800f454:	4b06      	ldr	r3, [pc, #24]	; (800f470 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800f456:	4a07      	ldr	r2, [pc, #28]	; (800f474 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800f458:	2195      	movs	r1, #149	; 0x95
 800f45a:	4807      	ldr	r0, [pc, #28]	; (800f478 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800f45c:	f00f ff30 	bl	801f2c0 <__assert_func>
        return bitmapId;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	881b      	ldrh	r3, [r3, #0]
    }
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20009bac 	.word	0x20009bac
 800f470:	080203e4 	.word	0x080203e4
 800f474:	08020ab8 	.word	0x08020ab8
 800f478:	08020420 	.word	0x08020420

0800f47c <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	601a      	str	r2, [r3, #0]
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4618      	mov	r0, r3
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f498:	b480      	push	{r7}
 800f49a:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800f49c:	4b03      	ldr	r3, [pc, #12]	; (800f4ac <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	689b      	ldr	r3, [r3, #8]
    }
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	20009b14 	.word	0x20009b14

0800f4b0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800f4be:	4618      	mov	r0, r3
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800f4d2:	2302      	movs	r3, #2
    }
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f4f0:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800f4f2:	6838      	ldr	r0, [r7, #0]
 800f4f4:	f7ff fe90 	bl	800f218 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	bf0c      	ite	eq
 800f4fe:	2301      	moveq	r3, #1
 800f500:	2300      	movne	r3, #0
 800f502:	b2da      	uxtb	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f510:	2b00      	cmp	r3, #0
 800f512:	d005      	beq.n	800f520 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	f083 0301 	eor.w	r3, r3, #1
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f526:	f083 0301 	eor.w	r3, r3, #1
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d009      	beq.n	800f544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d006      	beq.n	800f544 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800f536:	687a      	ldr	r2, [r7, #4]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3314      	adds	r3, #20
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4610      	mov	r0, r2
 800f542:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800f544:	7bfb      	ldrb	r3, [r7, #15]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d00b      	beq.n	800f562 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f54a:	6838      	ldr	r0, [r7, #0]
 800f54c:	f7ff fe64 	bl	800f218 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f550:	4603      	mov	r3, r0
 800f552:	2b01      	cmp	r3, #1
 800f554:	d105      	bne.n	800f562 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f55e:	2301      	movs	r3, #1
 800f560:	e000      	b.n	800f564 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800f562:	2300      	movs	r3, #0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d015      	beq.n	800f594 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	330c      	adds	r3, #12
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4610      	mov	r0, r2
 800f578:	4798      	blx	r3
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d009      	beq.n	800f594 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	3308      	adds	r3, #8
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	6879      	ldr	r1, [r7, #4]
 800f590:	4610      	mov	r0, r2
 800f592:	4798      	blx	r3
        }
    }
}
 800f594:	bf00      	nop
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800f5a4:	2304      	movs	r3, #4
    }
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr

0800f5b2 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/widgets/Box.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af02      	add	r7, sp, #8
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7fe fe48 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d104      	bne.n	800f5e0 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f5dc:	2bff      	cmp	r3, #255	; 0xff
 800f5de:	d109      	bne.n	800f5f4 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800f5f4:	bf00      	nop
}
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 800f5fe:	b590      	push	{r4, r7, lr}
 800f600:	b085      	sub	sp, #20
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
 800f606:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 800f608:	683a      	ldr	r2, [r7, #0]
 800f60a:	f107 0308 	add.w	r3, r7, #8
 800f60e:	6810      	ldr	r0, [r2, #0]
 800f610:	6851      	ldr	r1, [r2, #4]
 800f612:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 800f614:	687a      	ldr	r2, [r7, #4]
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3324      	adds	r3, #36	; 0x24
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f107 0108 	add.w	r1, r7, #8
 800f622:	4610      	mov	r0, r2
 800f624:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800f626:	f7ff ff37 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 800f62a:	6803      	ldr	r3, [r0, #0]
 800f62c:	331c      	adds	r3, #28
 800f62e:	681c      	ldr	r4, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f636:	687a      	ldr	r2, [r7, #4]
 800f638:	f107 0108 	add.w	r1, r7, #8
 800f63c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800f63e:	47a0      	blx	r4
}
 800f640:	bf00      	nop
 800f642:	3714      	adds	r7, #20
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}

0800f648 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800f648:	b480      	push	{r7}
 800f64a:	b083      	sub	sp, #12
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 800f650:	2305      	movs	r3, #5
    }
 800f652:	4618      	mov	r0, r3
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/widgets/Button.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 800f65e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f660:	b08d      	sub	sp, #52	; 0x34
 800f662:	af04      	add	r7, sp, #16
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	3330      	adds	r3, #48	; 0x30
 800f676:	e001      	b.n	800f67c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	332e      	adds	r3, #46	; 0x2e
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 800f680:	f107 031c 	add.w	r3, r7, #28
 800f684:	4618      	mov	r0, r3
 800f686:	f00d fd2f 	bl	801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f68a:	4603      	mov	r3, r0
 800f68c:	b21c      	sxth	r4, r3
 800f68e:	f107 031c 	add.w	r3, r7, #28
 800f692:	4618      	mov	r0, r3
 800f694:	f00d fd60 	bl	801d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f698:	4603      	mov	r3, r0
 800f69a:	b21b      	sxth	r3, r3
 800f69c:	f107 0014 	add.w	r0, r7, #20
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	4623      	mov	r3, r4
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	f7fe fdd8 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 800f6ac:	f107 0314 	add.w	r3, r7, #20
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe fe92 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800f6b8:	f107 031c 	add.w	r3, r7, #28
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7ff fec1 	bl	800f444 <_ZNK8touchgfx6Bitmap5getIdEv>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d00c      	beq.n	800f6e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800f6ce:	f107 0314 	add.w	r3, r7, #20
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7fe ff8a 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	f083 0301 	eor.w	r3, r3, #1
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d001      	beq.n	800f6e8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e000      	b.n	800f6ea <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d024      	beq.n	800f738 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 800f6ee:	f107 030c 	add.w	r3, r7, #12
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7ff fc0d 	bl	800ef12 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 800f6f8:	687a      	ldr	r2, [r7, #4]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3324      	adds	r3, #36	; 0x24
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f107 010c 	add.w	r1, r7, #12
 800f706:	4610      	mov	r0, r2
 800f708:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 800f70a:	f7ff fec5 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 800f70e:	6803      	ldr	r3, [r0, #0]
 800f710:	330c      	adds	r3, #12
 800f712:	681c      	ldr	r4, [r3, #0]
 800f714:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 800f718:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f722:	f107 011c 	add.w	r1, r7, #28
 800f726:	2201      	movs	r2, #1
 800f728:	9202      	str	r2, [sp, #8]
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	f107 0314 	add.w	r3, r7, #20
 800f730:	9300      	str	r3, [sp, #0]
 800f732:	4633      	mov	r3, r6
 800f734:	462a      	mov	r2, r5
 800f736:	47a0      	blx	r4
    }
}
 800f738:	bf00      	nop
 800f73a:	3724      	adds	r7, #36	; 0x24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f740 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 800f740:	b590      	push	{r4, r7, lr}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68ba      	ldr	r2, [r7, #8]
 800f750:	8812      	ldrh	r2, [r2, #0]
 800f752:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	8812      	ldrh	r2, [r2, #0]
 800f75a:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 800f75c:	68fc      	ldr	r4, [r7, #12]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	3330      	adds	r3, #48	; 0x30
 800f762:	4618      	mov	r0, r3
 800f764:	f00d fcc0 	bl	801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f768:	4603      	mov	r3, r0
 800f76a:	b21b      	sxth	r3, r3
 800f76c:	4619      	mov	r1, r3
 800f76e:	4620      	mov	r0, r4
 800f770:	f7ff f803 	bl	800e77a <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 800f774:	68fc      	ldr	r4, [r7, #12]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3330      	adds	r3, #48	; 0x30
 800f77a:	4618      	mov	r0, r3
 800f77c:	f00d fcec 	bl	801d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f780:	4603      	mov	r3, r0
 800f782:	b21b      	sxth	r3, r3
 800f784:	4619      	mov	r1, r3
 800f786:	4620      	mov	r0, r4
 800f788:	f7ff f806 	bl	800e798 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800f78c:	bf00      	nop
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	bd90      	pop	{r4, r7, pc}

0800f794 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af02      	add	r7, sp, #8
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f7a4:	2bff      	cmp	r3, #255	; 0xff
 800f7a6:	d008      	beq.n	800f7ba <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	9300      	str	r3, [sp, #0]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2100      	movs	r1, #0
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7fe fd52 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
 800f7b8:	e015      	b.n	800f7e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d008      	beq.n	800f7d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f00d fcfa 	bl	801d1c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f7d4:	e007      	b.n	800f7e6 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4611      	mov	r1, r2
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f00d fcf1 	bl	801d1c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}

0800f7ee <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 800f7f6:	230c      	movs	r3, #12
    }
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	370c      	adds	r7, #12
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <_ZN8touchgfx14SnapshotWidgetC1Ev>:

#include <touchgfx/widgets/SnapshotWidget.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), fbCopy(0), alpha(255)
 800f804:	b580      	push	{r7, lr}
 800f806:	b082      	sub	sp, #8
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	4618      	mov	r0, r3
 800f810:	f7ff fc0e 	bl	800f030 <_ZN8touchgfx6WidgetC1Ev>
 800f814:	4a07      	ldr	r2, [pc, #28]	; (800f834 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	629a      	str	r2, [r3, #40]	; 0x28
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	22ff      	movs	r2, #255	; 0xff
 800f824:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
{
}
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4618      	mov	r0, r3
 800f82c:	3708      	adds	r7, #8
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	08020c44 	.word	0x08020c44

0800f838 <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	4a05      	ldr	r2, [pc, #20]	; (800f858 <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	601a      	str	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fc03 	bl	800f054 <_ZN8touchgfx6WidgetD1Ev>
{
}
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	4618      	mov	r0, r3
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	08020c44 	.word	0x08020c44

0800f85c <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
}
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff ffe7 	bl	800f838 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 800f86a:	2130      	movs	r1, #48	; 0x30
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f00f fd0a 	bl	801f286 <_ZdlPvj>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 800f87c:	b5b0      	push	{r4, r5, r7, lr}
 800f87e:	b086      	sub	sp, #24
 800f880:	af02      	add	r7, sp, #8
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
    if (!fbCopy)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d028      	beq.n	800f8e0 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x64>
    {
        return;
    }

    Rect absRect;
 800f88e:	f107 0308 	add.w	r3, r7, #8
 800f892:	4618      	mov	r0, r3
 800f894:	f7ff fb3d 	bl	800ef12 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(absRect);
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3324      	adds	r3, #36	; 0x24
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f107 0108 	add.w	r1, r7, #8
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	4798      	blx	r3
    absRect.width = rect.width;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f8b0:	81bb      	strh	r3, [r7, #12]
    absRect.height = rect.height;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f8b8:	81fb      	strh	r3, [r7, #14]
    HAL::lcd().blitCopy(fbCopy, absRect, invalidatedArea, alpha, false);
 800f8ba:	f7ff fded 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 800f8be:	6803      	ldr	r3, [r0, #0]
 800f8c0:	3310      	adds	r3, #16
 800f8c2:	681c      	ldr	r4, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8ce:	f107 0508 	add.w	r5, r7, #8
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	9201      	str	r2, [sp, #4]
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	462a      	mov	r2, r5
 800f8dc:	47a0      	blx	r4
 800f8de:	e000      	b.n	800f8e2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x66>
        return;
 800f8e0:	bf00      	nop
}
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bdb0      	pop	{r4, r5, r7, pc}

0800f8e8 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 800f8e8:	b590      	push	{r4, r7, lr}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af02      	add	r7, sp, #8
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f8f8:	2bff      	cmp	r3, #255	; 0xff
 800f8fa:	d008      	beq.n	800f90e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	2300      	movs	r3, #0
 800f902:	2200      	movs	r2, #0
 800f904:	2100      	movs	r1, #0
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f7fe fca8 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
 800f90c:	e01e      	b.n	800f94c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }

    if (!fbCopy)
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f912:	2b00      	cmp	r3, #0
 800f914:	d108      	bne.n	800f928 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x40>
    {
        return Rect(0, 0, 0, 0);
 800f916:	2300      	movs	r3, #0
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	2300      	movs	r3, #0
 800f91c:	2200      	movs	r2, #0
 800f91e:	2100      	movs	r1, #0
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7fe fc9b 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
 800f926:	e011      	b.n	800f94c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7ff fa97 	bl	800ee5e <_ZNK8touchgfx8Drawable8getWidthEv>
 800f930:	4603      	mov	r3, r0
 800f932:	461c      	mov	r4, r3
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	4618      	mov	r0, r3
 800f938:	f7ff fa9e 	bl	800ee78 <_ZNK8touchgfx8Drawable9getHeightEv>
 800f93c:	4603      	mov	r3, r0
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	4623      	mov	r3, r4
 800f942:	2200      	movs	r2, #0
 800f944:	2100      	movs	r1, #0
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f7fe fc88 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
    }
}
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	370c      	adds	r7, #12
 800f950:	46bd      	mov	sp, r7
 800f952:	bd90      	pop	{r4, r7, pc}

0800f954 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b082      	sub	sp, #8
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect));
 800f95c:	f7ff fd9c 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 800f960:	6803      	ldr	r3, [r0, #0]
 800f962:	3318      	adds	r3, #24
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	1d11      	adds	r1, r2, #4
 800f96a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f96e:	4798      	blx	r3
 800f970:	4602      	mov	r2, r0
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b082      	sub	sp, #8
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	460b      	mov	r3, r1
 800f988:	807b      	strh	r3, [r7, #2]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect, bmp));
 800f98a:	f7ff fd85 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 800f98e:	6803      	ldr	r3, [r0, #0]
 800f990:	3318      	adds	r3, #24
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	1d11      	adds	r1, r2, #4
 800f998:	887a      	ldrh	r2, [r7, #2]
 800f99a:	4798      	blx	r3
 800f99c:	4602      	mov	r2, r0
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f9a2:	bf00      	nop
 800f9a4:	3708      	adds	r7, #8
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800f9aa:	b480      	push	{r7}
 800f9ac:	b083      	sub	sp, #12
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	b29b      	uxth	r3, r3
    }
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
        return color;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
    }
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 800f9e0:	2203      	movs	r2, #3
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	f000 fb9d 	bl	8010124 <xQueueGenericCreate>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	4b0b      	ldr	r3, [pc, #44]	; (800fa1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	4b0a      	ldr	r3, [pc, #40]	; (800fa1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d006      	beq.n	800fa06 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 800f9f8:	4b08      	ldr	r3, [pc, #32]	; (800fa1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 800f9fa:	6818      	ldr	r0, [r3, #0]
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	2200      	movs	r2, #0
 800fa00:	2100      	movs	r1, #0
 800fa02:	f000 fbe9 	bl	80101d8 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 800fa06:	2200      	movs	r2, #0
 800fa08:	2101      	movs	r1, #1
 800fa0a:	2001      	movs	r0, #1
 800fa0c:	f000 fb8a 	bl	8010124 <xQueueGenericCreate>
 800fa10:	4602      	mov	r2, r0
 800fa12:	4b03      	ldr	r3, [pc, #12]	; (800fa20 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800fa14:	601a      	str	r2, [r3, #0]
}
 800fa16:	bf00      	nop
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	20000104 	.word	0x20000104
 800fa20:	20000108 	.word	0x20000108

0800fa24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 800fa28:	4b04      	ldr	r3, [pc, #16]	; (800fa3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f04f 31ff 	mov.w	r1, #4294967295
 800fa30:	4618      	mov	r0, r3
 800fa32:	f000 fee3 	bl	80107fc <xQueueSemaphoreTake>
}
 800fa36:	bf00      	nop
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	20000104 	.word	0x20000104

0800fa40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 800fa44:	4b04      	ldr	r3, [pc, #16]	; (800fa58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 800fa46:	6818      	ldr	r0, [r3, #0]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	f000 fbc3 	bl	80101d8 <xQueueGenericSend>
}
 800fa52:	bf00      	nop
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	20000104 	.word	0x20000104

0800fa5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 800fa60:	4b03      	ldr	r3, [pc, #12]	; (800fa70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	2100      	movs	r1, #0
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 fec8 	bl	80107fc <xQueueSemaphoreTake>
}
 800fa6c:	bf00      	nop
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	20000104 	.word	0x20000104

0800fa74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 800fa7e:	4b0b      	ldr	r3, [pc, #44]	; (800faac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	1d3a      	adds	r2, r7, #4
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f000 fd44 	bl	8010514 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d007      	beq.n	800faa2 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 800fa92:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 800fa94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa98:	601a      	str	r2, [r3, #0]
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	f3bf 8f6f 	isb	sy
}
 800faa2:	bf00      	nop
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	20000104 	.word	0x20000104
 800fab0:	e000ed04 	.word	0xe000ed04

0800fab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
    if (vsync_q)
 800faba:	4b0e      	ldr	r3, [pc, #56]	; (800faf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d013      	beq.n	800faea <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 800fac2:	2300      	movs	r3, #0
 800fac4:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 800fac6:	4b0b      	ldr	r3, [pc, #44]	; (800faf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 800fac8:	6818      	ldr	r0, [r3, #0]
 800faca:	1d3a      	adds	r2, r7, #4
 800facc:	2300      	movs	r3, #0
 800face:	490a      	ldr	r1, [pc, #40]	; (800faf8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 800fad0:	f000 fc84 	bl	80103dc <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d007      	beq.n	800faea <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 800fada:	4b08      	ldr	r3, [pc, #32]	; (800fafc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 800fadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae0:	601a      	str	r2, [r3, #0]
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	f3bf 8f6f 	isb	sy
    }
}
 800faea:	bf00      	nop
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	20000108 	.word	0x20000108
 800faf8:	2000004c 	.word	0x2000004c
 800fafc:	e000ed04 	.word	0xe000ed04

0800fb00 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 800fb04:	4b08      	ldr	r3, [pc, #32]	; (800fb28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	4908      	ldr	r1, [pc, #32]	; (800fb2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f000 fd93 	bl	8010638 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 800fb12:	4b05      	ldr	r3, [pc, #20]	; (800fb28 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f04f 32ff 	mov.w	r2, #4294967295
 800fb1a:	4904      	ldr	r1, [pc, #16]	; (800fb2c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f000 fd8b 	bl	8010638 <xQueueReceive>
}
 800fb22:	bf00      	nop
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	20000108 	.word	0x20000108
 800fb2c:	2000004c 	.word	0x2000004c

0800fb30 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d007      	beq.n	800fb4e <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 800fb3e:	f7ff fbb1 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2101      	movs	r1, #1
 800fb46:	4618      	mov	r0, r3
 800fb48:	f00b fd40 	bl	801b5cc <_ZN8touchgfx3HAL12setMCUActiveEb>
 800fb4c:	e006      	b.n	800fb5c <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 800fb4e:	f7ff fba9 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2100      	movs	r1, #0
 800fb56:	4618      	mov	r0, r3
 800fb58:	f00b fd38 	bl	801b5cc <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 800fb5c:	2301      	movs	r3, #1
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 800fb66:	b480      	push	{r7}
 800fb68:	b083      	sub	sp, #12
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
        while (1);
 800fb70:	e7fe      	b.n	800fb70 <vApplicationStackOverflowHook+0xa>

0800fb72 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 800fb72:	b480      	push	{r7}
 800fb74:	b083      	sub	sp, #12
 800fb76:	af00      	add	r7, sp, #0
 800fb78:	6078      	str	r0, [r7, #4]
 800fb7a:	6039      	str	r1, [r7, #0]
        while (1);
 800fb7c:	e7fe      	b.n	800fb7c <vApplicationMallocFailedHook+0xa>
	...

0800fb80 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 800fb80:	b580      	push	{r7, lr}
 800fb82:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 800fb84:	4902      	ldr	r1, [pc, #8]	; (800fb90 <vApplicationIdleHook+0x10>)
 800fb86:	2000      	movs	r0, #0
 800fb88:	f001 fc36 	bl	80113f8 <vTaskSetApplicationTaskTag>
    }
 800fb8c:	bf00      	nop
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	0800fb31 	.word	0x0800fb31

0800fb94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fba2:	2301      	movs	r3, #1
 800fba4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fbaa:	4b1f      	ldr	r3, [pc, #124]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbac:	7a5b      	ldrb	r3, [r3, #9]
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d131      	bne.n	800fc18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fbb4:	4b1c      	ldr	r3, [pc, #112]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbb6:	7a5b      	ldrb	r3, [r3, #9]
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b1a      	ldr	r3, [pc, #104]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbbe:	2100      	movs	r1, #0
 800fbc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fbc2:	4b19      	ldr	r3, [pc, #100]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbc4:	7a5b      	ldrb	r3, [r3, #9]
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	4a17      	ldr	r2, [pc, #92]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fbd2:	4b15      	ldr	r3, [pc, #84]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbd4:	7a5b      	ldrb	r3, [r3, #9]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4b13      	ldr	r3, [pc, #76]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbdc:	4413      	add	r3, r2
 800fbde:	79fa      	ldrb	r2, [r7, #7]
 800fbe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fbe2:	4b11      	ldr	r3, [pc, #68]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbe4:	7a5b      	ldrb	r3, [r3, #9]
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	1c5a      	adds	r2, r3, #1
 800fbea:	b2d1      	uxtb	r1, r2
 800fbec:	4a0e      	ldr	r2, [pc, #56]	; (800fc28 <FATFS_LinkDriverEx+0x94>)
 800fbee:	7251      	strb	r1, [r2, #9]
 800fbf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fbf2:	7dbb      	ldrb	r3, [r7, #22]
 800fbf4:	3330      	adds	r3, #48	; 0x30
 800fbf6:	b2da      	uxtb	r2, r3
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	223a      	movs	r2, #58	; 0x3a
 800fc02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	3302      	adds	r3, #2
 800fc08:	222f      	movs	r2, #47	; 0x2f
 800fc0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	3303      	adds	r3, #3
 800fc10:	2200      	movs	r2, #0
 800fc12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	371c      	adds	r7, #28
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	2000010c 	.word	0x2000010c

0800fc2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fc36:	2200      	movs	r2, #0
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff ffaa 	bl	800fb94 <FATFS_LinkDriverEx>
 800fc40:	4603      	mov	r3, r0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fc4a:	b480      	push	{r7}
 800fc4c:	b085      	sub	sp, #20
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	4603      	mov	r3, r0
 800fc52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fc58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc5c:	2b84      	cmp	r3, #132	; 0x84
 800fc5e:	d005      	beq.n	800fc6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fc60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	4413      	add	r3, r2
 800fc68:	3303      	adds	r3, #3
 800fc6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3714      	adds	r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b083      	sub	sp, #12
 800fc7e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc80:	f3ef 8305 	mrs	r3, IPSR
 800fc84:	607b      	str	r3, [r7, #4]
  return(result);
 800fc86:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	bf14      	ite	ne
 800fc8c:	2301      	movne	r3, #1
 800fc8e:	2300      	moveq	r3, #0
 800fc90:	b2db      	uxtb	r3, r3
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fca2:	f001 f9d3 	bl	801104c <vTaskStartScheduler>
  
  return osOK;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	bd80      	pop	{r7, pc}

0800fcac <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fcb0:	f001 fe3a 	bl	8011928 <xTaskGetSchedulerState>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b01      	cmp	r3, #1
 800fcb8:	d101      	bne.n	800fcbe <osKernelRunning+0x12>
    return 0;
 800fcba:	2300      	movs	r3, #0
 800fcbc:	e000      	b.n	800fcc0 <osKernelRunning+0x14>
  else
    return 1;
 800fcbe:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	bd80      	pop	{r7, pc}

0800fcc4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fcc8:	f7ff ffd7 	bl	800fc7a <inHandlerMode>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fcd2:	f001 fac1 	bl	8011258 <xTaskGetTickCountFromISR>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	e002      	b.n	800fce0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fcda:	f001 faad 	bl	8011238 <xTaskGetTickCount>
 800fcde:	4603      	mov	r3, r0
  }
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fce6:	b087      	sub	sp, #28
 800fce8:	af02      	add	r7, sp, #8
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	685c      	ldr	r4, [r3, #4]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fcfa:	b29e      	uxth	r6, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7ff ffa1 	bl	800fc4a <makeFreeRtosPriority>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	f107 030c 	add.w	r3, r7, #12
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	9200      	str	r2, [sp, #0]
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	4632      	mov	r2, r6
 800fd16:	4629      	mov	r1, r5
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f001 f82a 	bl	8010d72 <xTaskCreate>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d001      	beq.n	800fd28 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	e000      	b.n	800fd2a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800fd28:	68fb      	ldr	r3, [r7, #12]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3714      	adds	r7, #20
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b084      	sub	sp, #16
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <osDelay+0x16>
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	e000      	b.n	800fd4a <osDelay+0x18>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f001 f948 	bl	8010fe0 <vTaskDelay>
  
  return osOK;
 800fd50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fd5a:	b580      	push	{r7, lr}
 800fd5c:	b082      	sub	sp, #8
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
 800fd62:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	6818      	ldr	r0, [r3, #0]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4619      	mov	r1, r3
 800fd70:	f000 f9d8 	bl	8010124 <xQueueGenericCreate>
 800fd74:	4603      	mov	r3, r0
#endif
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
	...

0800fd80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d101      	bne.n	800fd9e <osMessagePut+0x1e>
    ticks = 1;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fd9e:	f7ff ff6c 	bl	800fc7a <inHandlerMode>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d018      	beq.n	800fdda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fda8:	f107 0210 	add.w	r2, r7, #16
 800fdac:	f107 0108 	add.w	r1, r7, #8
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f000 fb12 	bl	80103dc <xQueueGenericSendFromISR>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d001      	beq.n	800fdc2 <osMessagePut+0x42>
      return osErrorOS;
 800fdbe:	23ff      	movs	r3, #255	; 0xff
 800fdc0:	e018      	b.n	800fdf4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d014      	beq.n	800fdf2 <osMessagePut+0x72>
 800fdc8:	4b0c      	ldr	r3, [pc, #48]	; (800fdfc <osMessagePut+0x7c>)
 800fdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdce:	601a      	str	r2, [r3, #0]
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	e00b      	b.n	800fdf2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fdda:	f107 0108 	add.w	r1, r7, #8
 800fdde:	2300      	movs	r3, #0
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f000 f9f8 	bl	80101d8 <xQueueGenericSend>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d001      	beq.n	800fdf2 <osMessagePut+0x72>
      return osErrorOS;
 800fdee:	23ff      	movs	r3, #255	; 0xff
 800fdf0:	e000      	b.n	800fdf4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3718      	adds	r7, #24
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	e000ed04 	.word	0xe000ed04

0800fe00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fe00:	b590      	push	{r4, r7, lr}
 800fe02:	b08b      	sub	sp, #44	; 0x2c
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d10a      	bne.n	800fe30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fe1a:	2380      	movs	r3, #128	; 0x80
 800fe1c:	617b      	str	r3, [r7, #20]
    return event;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	461c      	mov	r4, r3
 800fe22:	f107 0314 	add.w	r3, r7, #20
 800fe26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe2e:	e054      	b.n	800feda <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fe30:	2300      	movs	r3, #0
 800fe32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe3e:	d103      	bne.n	800fe48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fe40:	f04f 33ff 	mov.w	r3, #4294967295
 800fe44:	627b      	str	r3, [r7, #36]	; 0x24
 800fe46:	e009      	b.n	800fe5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d006      	beq.n	800fe5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d101      	bne.n	800fe5c <osMessageGet+0x5c>
      ticks = 1;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fe5c:	f7ff ff0d 	bl	800fc7a <inHandlerMode>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d01c      	beq.n	800fea0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fe66:	f107 0220 	add.w	r2, r7, #32
 800fe6a:	f107 0314 	add.w	r3, r7, #20
 800fe6e:	3304      	adds	r3, #4
 800fe70:	4619      	mov	r1, r3
 800fe72:	68b8      	ldr	r0, [r7, #8]
 800fe74:	f000 fdd2 	bl	8010a1c <xQueueReceiveFromISR>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d102      	bne.n	800fe84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fe7e:	2310      	movs	r3, #16
 800fe80:	617b      	str	r3, [r7, #20]
 800fe82:	e001      	b.n	800fe88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d01d      	beq.n	800feca <osMessageGet+0xca>
 800fe8e:	4b15      	ldr	r3, [pc, #84]	; (800fee4 <osMessageGet+0xe4>)
 800fe90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe94:	601a      	str	r2, [r3, #0]
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	e014      	b.n	800feca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fea0:	f107 0314 	add.w	r3, r7, #20
 800fea4:	3304      	adds	r3, #4
 800fea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fea8:	4619      	mov	r1, r3
 800feaa:	68b8      	ldr	r0, [r7, #8]
 800feac:	f000 fbc4 	bl	8010638 <xQueueReceive>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d102      	bne.n	800febc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800feb6:	2310      	movs	r3, #16
 800feb8:	617b      	str	r3, [r7, #20]
 800feba:	e006      	b.n	800feca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800febc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d101      	bne.n	800fec6 <osMessageGet+0xc6>
 800fec2:	2300      	movs	r3, #0
 800fec4:	e000      	b.n	800fec8 <osMessageGet+0xc8>
 800fec6:	2340      	movs	r3, #64	; 0x40
 800fec8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	461c      	mov	r4, r3
 800fece:	f107 0314 	add.w	r3, r7, #20
 800fed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	372c      	adds	r7, #44	; 0x2c
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	e000ed04 	.word	0xe000ed04

0800fee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f103 0208 	add.w	r2, r3, #8
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f04f 32ff 	mov.w	r2, #4294967295
 800ff00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f103 0208 	add.w	r2, r3, #8
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f103 0208 	add.w	r2, r3, #8
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2200      	movs	r2, #0
 800ff1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff28:	b480      	push	{r7}
 800ff2a:	b083      	sub	sp, #12
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff36:	bf00      	nop
 800ff38:	370c      	adds	r7, #12
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr

0800ff42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff42:	b480      	push	{r7}
 800ff44:	b085      	sub	sp, #20
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
 800ff4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689a      	ldr	r2, [r3, #8]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	1c5a      	adds	r2, r3, #1
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	601a      	str	r2, [r3, #0]
}
 800ff7e:	bf00      	nop
 800ff80:	3714      	adds	r7, #20
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr

0800ff8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff8a:	b480      	push	{r7}
 800ff8c:	b085      	sub	sp, #20
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
 800ff92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa0:	d103      	bne.n	800ffaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	691b      	ldr	r3, [r3, #16]
 800ffa6:	60fb      	str	r3, [r7, #12]
 800ffa8:	e00c      	b.n	800ffc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	3308      	adds	r3, #8
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	e002      	b.n	800ffb8 <vListInsert+0x2e>
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	60fb      	str	r3, [r7, #12]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	68ba      	ldr	r2, [r7, #8]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d2f6      	bcs.n	800ffb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	683a      	ldr	r2, [r7, #0]
 800ffde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	1c5a      	adds	r2, r3, #1
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	601a      	str	r2, [r3, #0]
}
 800fff0:	bf00      	nop
 800fff2:	3714      	adds	r7, #20
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	691b      	ldr	r3, [r3, #16]
 8010008:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	6892      	ldr	r2, [r2, #8]
 8010012:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	687a      	ldr	r2, [r7, #4]
 801001a:	6852      	ldr	r2, [r2, #4]
 801001c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	687a      	ldr	r2, [r7, #4]
 8010024:	429a      	cmp	r2, r3
 8010026:	d103      	bne.n	8010030 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	689a      	ldr	r2, [r3, #8]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2200      	movs	r2, #0
 8010034:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	1e5a      	subs	r2, r3, #1
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10b      	bne.n	801007c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010068:	b672      	cpsid	i
 801006a:	f383 8811 	msr	BASEPRI, r3
 801006e:	f3bf 8f6f 	isb	sy
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	b662      	cpsie	i
 8010078:	60bb      	str	r3, [r7, #8]
 801007a:	e7fe      	b.n	801007a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801007c:	f001 ffa4 	bl	8011fc8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010088:	68f9      	ldr	r1, [r7, #12]
 801008a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801008c:	fb01 f303 	mul.w	r3, r1, r3
 8010090:	441a      	add	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100ac:	3b01      	subs	r3, #1
 80100ae:	68f9      	ldr	r1, [r7, #12]
 80100b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100b2:	fb01 f303 	mul.w	r3, r1, r3
 80100b6:	441a      	add	r2, r3
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	22ff      	movs	r2, #255	; 0xff
 80100c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	22ff      	movs	r2, #255	; 0xff
 80100c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d114      	bne.n	80100fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d01a      	beq.n	8010110 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3310      	adds	r3, #16
 80100de:	4618      	mov	r0, r3
 80100e0:	f001 fa7c 	bl	80115dc <xTaskRemoveFromEventList>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d012      	beq.n	8010110 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80100ea:	4b0d      	ldr	r3, [pc, #52]	; (8010120 <xQueueGenericReset+0xd0>)
 80100ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100f0:	601a      	str	r2, [r3, #0]
 80100f2:	f3bf 8f4f 	dsb	sy
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	e009      	b.n	8010110 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3310      	adds	r3, #16
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fef1 	bl	800fee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	3324      	adds	r3, #36	; 0x24
 801010a:	4618      	mov	r0, r3
 801010c:	f7ff feec 	bl	800fee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010110:	f001 ff8c 	bl	801202c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010114:	2301      	movs	r3, #1
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	e000ed04 	.word	0xe000ed04

08010124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08a      	sub	sp, #40	; 0x28
 8010128:	af02      	add	r7, sp, #8
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	4613      	mov	r3, r2
 8010130:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10b      	bne.n	8010150 <xQueueGenericCreate+0x2c>
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	b672      	cpsid	i
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	b662      	cpsie	i
 801014c:	613b      	str	r3, [r7, #16]
 801014e:	e7fe      	b.n	801014e <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d102      	bne.n	801015c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010156:	2300      	movs	r3, #0
 8010158:	61fb      	str	r3, [r7, #28]
 801015a:	e004      	b.n	8010166 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	fb02 f303 	mul.w	r3, r2, r3
 8010164:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	3348      	adds	r3, #72	; 0x48
 801016a:	4618      	mov	r0, r3
 801016c:	f002 f84e 	bl	801220c <pvPortMalloc>
 8010170:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00b      	beq.n	8010190 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	3348      	adds	r3, #72	; 0x48
 801017c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801017e:	79fa      	ldrb	r2, [r7, #7]
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	4613      	mov	r3, r2
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	68b9      	ldr	r1, [r7, #8]
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f000 f805 	bl	801019a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010190:	69bb      	ldr	r3, [r7, #24]
	}
 8010192:	4618      	mov	r0, r3
 8010194:	3720      	adds	r7, #32
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	60f8      	str	r0, [r7, #12]
 80101a2:	60b9      	str	r1, [r7, #8]
 80101a4:	607a      	str	r2, [r7, #4]
 80101a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d103      	bne.n	80101b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	69ba      	ldr	r2, [r7, #24]
 80101b2:	601a      	str	r2, [r3, #0]
 80101b4:	e002      	b.n	80101bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80101c8:	2101      	movs	r1, #1
 80101ca:	69b8      	ldr	r0, [r7, #24]
 80101cc:	f7ff ff40 	bl	8010050 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80101d0:	bf00      	nop
 80101d2:	3710      	adds	r7, #16
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08e      	sub	sp, #56	; 0x38
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	607a      	str	r2, [r7, #4]
 80101e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80101e6:	2300      	movs	r3, #0
 80101e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80101ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10b      	bne.n	801020c <xQueueGenericSend+0x34>
 80101f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f8:	b672      	cpsid	i
 80101fa:	f383 8811 	msr	BASEPRI, r3
 80101fe:	f3bf 8f6f 	isb	sy
 8010202:	f3bf 8f4f 	dsb	sy
 8010206:	b662      	cpsie	i
 8010208:	62bb      	str	r3, [r7, #40]	; 0x28
 801020a:	e7fe      	b.n	801020a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d103      	bne.n	801021a <xQueueGenericSend+0x42>
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <xQueueGenericSend+0x46>
 801021a:	2301      	movs	r3, #1
 801021c:	e000      	b.n	8010220 <xQueueGenericSend+0x48>
 801021e:	2300      	movs	r3, #0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d10b      	bne.n	801023c <xQueueGenericSend+0x64>
 8010224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010228:	b672      	cpsid	i
 801022a:	f383 8811 	msr	BASEPRI, r3
 801022e:	f3bf 8f6f 	isb	sy
 8010232:	f3bf 8f4f 	dsb	sy
 8010236:	b662      	cpsie	i
 8010238:	627b      	str	r3, [r7, #36]	; 0x24
 801023a:	e7fe      	b.n	801023a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d103      	bne.n	801024a <xQueueGenericSend+0x72>
 8010242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010246:	2b01      	cmp	r3, #1
 8010248:	d101      	bne.n	801024e <xQueueGenericSend+0x76>
 801024a:	2301      	movs	r3, #1
 801024c:	e000      	b.n	8010250 <xQueueGenericSend+0x78>
 801024e:	2300      	movs	r3, #0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d10b      	bne.n	801026c <xQueueGenericSend+0x94>
 8010254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010258:	b672      	cpsid	i
 801025a:	f383 8811 	msr	BASEPRI, r3
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	f3bf 8f4f 	dsb	sy
 8010266:	b662      	cpsie	i
 8010268:	623b      	str	r3, [r7, #32]
 801026a:	e7fe      	b.n	801026a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801026c:	f001 fb5c 	bl	8011928 <xTaskGetSchedulerState>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <xQueueGenericSend+0xa4>
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d101      	bne.n	8010280 <xQueueGenericSend+0xa8>
 801027c:	2301      	movs	r3, #1
 801027e:	e000      	b.n	8010282 <xQueueGenericSend+0xaa>
 8010280:	2300      	movs	r3, #0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d10b      	bne.n	801029e <xQueueGenericSend+0xc6>
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	b672      	cpsid	i
 801028c:	f383 8811 	msr	BASEPRI, r3
 8010290:	f3bf 8f6f 	isb	sy
 8010294:	f3bf 8f4f 	dsb	sy
 8010298:	b662      	cpsie	i
 801029a:	61fb      	str	r3, [r7, #28]
 801029c:	e7fe      	b.n	801029c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801029e:	f001 fe93 	bl	8011fc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80102a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d302      	bcc.n	80102b4 <xQueueGenericSend+0xdc>
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b02      	cmp	r3, #2
 80102b2:	d129      	bne.n	8010308 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	68b9      	ldr	r1, [r7, #8]
 80102b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ba:	f000 fc4a 	bl	8010b52 <prvCopyDataToQueue>
 80102be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d010      	beq.n	80102ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ca:	3324      	adds	r3, #36	; 0x24
 80102cc:	4618      	mov	r0, r3
 80102ce:	f001 f985 	bl	80115dc <xTaskRemoveFromEventList>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d013      	beq.n	8010300 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80102d8:	4b3f      	ldr	r3, [pc, #252]	; (80103d8 <xQueueGenericSend+0x200>)
 80102da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	f3bf 8f6f 	isb	sy
 80102e8:	e00a      	b.n	8010300 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d007      	beq.n	8010300 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80102f0:	4b39      	ldr	r3, [pc, #228]	; (80103d8 <xQueueGenericSend+0x200>)
 80102f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102f6:	601a      	str	r2, [r3, #0]
 80102f8:	f3bf 8f4f 	dsb	sy
 80102fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010300:	f001 fe94 	bl	801202c <vPortExitCritical>
				return pdPASS;
 8010304:	2301      	movs	r3, #1
 8010306:	e063      	b.n	80103d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d103      	bne.n	8010316 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801030e:	f001 fe8d 	bl	801202c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010312:	2300      	movs	r3, #0
 8010314:	e05c      	b.n	80103d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010318:	2b00      	cmp	r3, #0
 801031a:	d106      	bne.n	801032a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801031c:	f107 0314 	add.w	r3, r7, #20
 8010320:	4618      	mov	r0, r3
 8010322:	f001 f9bf 	bl	80116a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010326:	2301      	movs	r3, #1
 8010328:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801032a:	f001 fe7f 	bl	801202c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801032e:	f000 fed7 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010332:	f001 fe49 	bl	8011fc8 <vPortEnterCritical>
 8010336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801033c:	b25b      	sxtb	r3, r3
 801033e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010342:	d103      	bne.n	801034c <xQueueGenericSend+0x174>
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	2200      	movs	r2, #0
 8010348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010352:	b25b      	sxtb	r3, r3
 8010354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010358:	d103      	bne.n	8010362 <xQueueGenericSend+0x18a>
 801035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035c:	2200      	movs	r2, #0
 801035e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010362:	f001 fe63 	bl	801202c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010366:	1d3a      	adds	r2, r7, #4
 8010368:	f107 0314 	add.w	r3, r7, #20
 801036c:	4611      	mov	r1, r2
 801036e:	4618      	mov	r0, r3
 8010370:	f001 f9ae 	bl	80116d0 <xTaskCheckForTimeOut>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d124      	bne.n	80103c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801037a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801037c:	f000 fce1 	bl	8010d42 <prvIsQueueFull>
 8010380:	4603      	mov	r3, r0
 8010382:	2b00      	cmp	r3, #0
 8010384:	d018      	beq.n	80103b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	3310      	adds	r3, #16
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	4611      	mov	r1, r2
 801038e:	4618      	mov	r0, r3
 8010390:	f001 f8fe 	bl	8011590 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010396:	f000 fc6c 	bl	8010c72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801039a:	f000 feaf 	bl	80110fc <xTaskResumeAll>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f47f af7c 	bne.w	801029e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80103a6:	4b0c      	ldr	r3, [pc, #48]	; (80103d8 <xQueueGenericSend+0x200>)
 80103a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	f3bf 8f4f 	dsb	sy
 80103b2:	f3bf 8f6f 	isb	sy
 80103b6:	e772      	b.n	801029e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80103b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ba:	f000 fc5a 	bl	8010c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103be:	f000 fe9d 	bl	80110fc <xTaskResumeAll>
 80103c2:	e76c      	b.n	801029e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80103c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103c6:	f000 fc54 	bl	8010c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103ca:	f000 fe97 	bl	80110fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80103ce:	2300      	movs	r3, #0
		}
	}
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3738      	adds	r7, #56	; 0x38
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	e000ed04 	.word	0xe000ed04

080103dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b08e      	sub	sp, #56	; 0x38
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
 80103e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10b      	bne.n	801040c <xQueueGenericSendFromISR+0x30>
 80103f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f8:	b672      	cpsid	i
 80103fa:	f383 8811 	msr	BASEPRI, r3
 80103fe:	f3bf 8f6f 	isb	sy
 8010402:	f3bf 8f4f 	dsb	sy
 8010406:	b662      	cpsie	i
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
 801040a:	e7fe      	b.n	801040a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d103      	bne.n	801041a <xQueueGenericSendFromISR+0x3e>
 8010412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010416:	2b00      	cmp	r3, #0
 8010418:	d101      	bne.n	801041e <xQueueGenericSendFromISR+0x42>
 801041a:	2301      	movs	r3, #1
 801041c:	e000      	b.n	8010420 <xQueueGenericSendFromISR+0x44>
 801041e:	2300      	movs	r3, #0
 8010420:	2b00      	cmp	r3, #0
 8010422:	d10b      	bne.n	801043c <xQueueGenericSendFromISR+0x60>
 8010424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010428:	b672      	cpsid	i
 801042a:	f383 8811 	msr	BASEPRI, r3
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	b662      	cpsie	i
 8010438:	623b      	str	r3, [r7, #32]
 801043a:	e7fe      	b.n	801043a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	2b02      	cmp	r3, #2
 8010440:	d103      	bne.n	801044a <xQueueGenericSendFromISR+0x6e>
 8010442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010446:	2b01      	cmp	r3, #1
 8010448:	d101      	bne.n	801044e <xQueueGenericSendFromISR+0x72>
 801044a:	2301      	movs	r3, #1
 801044c:	e000      	b.n	8010450 <xQueueGenericSendFromISR+0x74>
 801044e:	2300      	movs	r3, #0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10b      	bne.n	801046c <xQueueGenericSendFromISR+0x90>
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	b672      	cpsid	i
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	b662      	cpsie	i
 8010468:	61fb      	str	r3, [r7, #28]
 801046a:	e7fe      	b.n	801046a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801046c:	f001 fe8c 	bl	8012188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010470:	f3ef 8211 	mrs	r2, BASEPRI
 8010474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010478:	b672      	cpsid	i
 801047a:	f383 8811 	msr	BASEPRI, r3
 801047e:	f3bf 8f6f 	isb	sy
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	b662      	cpsie	i
 8010488:	61ba      	str	r2, [r7, #24]
 801048a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801048c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801048e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010498:	429a      	cmp	r2, r3
 801049a:	d302      	bcc.n	80104a2 <xQueueGenericSendFromISR+0xc6>
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	2b02      	cmp	r3, #2
 80104a0:	d12c      	bne.n	80104fc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80104a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	68b9      	ldr	r1, [r7, #8]
 80104b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104b2:	f000 fb4e 	bl	8010b52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80104b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80104ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104be:	d112      	bne.n	80104e6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80104c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d016      	beq.n	80104f6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	3324      	adds	r3, #36	; 0x24
 80104cc:	4618      	mov	r0, r3
 80104ce:	f001 f885 	bl	80115dc <xTaskRemoveFromEventList>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00e      	beq.n	80104f6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d00b      	beq.n	80104f6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2201      	movs	r2, #1
 80104e2:	601a      	str	r2, [r3, #0]
 80104e4:	e007      	b.n	80104f6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80104e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80104ea:	3301      	adds	r3, #1
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	b25a      	sxtb	r2, r3
 80104f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80104f6:	2301      	movs	r3, #1
 80104f8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80104fa:	e001      	b.n	8010500 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80104fc:	2300      	movs	r3, #0
 80104fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801050c:	4618      	mov	r0, r3
 801050e:	3738      	adds	r7, #56	; 0x38
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08e      	sub	sp, #56	; 0x38
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010524:	2b00      	cmp	r3, #0
 8010526:	d10b      	bne.n	8010540 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052c:	b672      	cpsid	i
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	b662      	cpsie	i
 801053c:	623b      	str	r3, [r7, #32]
 801053e:	e7fe      	b.n	801053e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00b      	beq.n	8010560 <xQueueGiveFromISR+0x4c>
 8010548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054c:	b672      	cpsid	i
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	b662      	cpsie	i
 801055c:	61fb      	str	r3, [r7, #28]
 801055e:	e7fe      	b.n	801055e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d103      	bne.n	8010570 <xQueueGiveFromISR+0x5c>
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d101      	bne.n	8010574 <xQueueGiveFromISR+0x60>
 8010570:	2301      	movs	r3, #1
 8010572:	e000      	b.n	8010576 <xQueueGiveFromISR+0x62>
 8010574:	2300      	movs	r3, #0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d10b      	bne.n	8010592 <xQueueGiveFromISR+0x7e>
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	b672      	cpsid	i
 8010580:	f383 8811 	msr	BASEPRI, r3
 8010584:	f3bf 8f6f 	isb	sy
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	b662      	cpsie	i
 801058e:	61bb      	str	r3, [r7, #24]
 8010590:	e7fe      	b.n	8010590 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010592:	f001 fdf9 	bl	8012188 <vPortValidateInterruptPriority>
	__asm volatile
 8010596:	f3ef 8211 	mrs	r2, BASEPRI
 801059a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801059e:	b672      	cpsid	i
 80105a0:	f383 8811 	msr	BASEPRI, r3
 80105a4:	f3bf 8f6f 	isb	sy
 80105a8:	f3bf 8f4f 	dsb	sy
 80105ac:	b662      	cpsie	i
 80105ae:	617a      	str	r2, [r7, #20]
 80105b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80105b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80105b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d22b      	bcs.n	801061e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d2:	1c5a      	adds	r2, r3, #1
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80105d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80105dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105e0:	d112      	bne.n	8010608 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d016      	beq.n	8010618 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ec:	3324      	adds	r3, #36	; 0x24
 80105ee:	4618      	mov	r0, r3
 80105f0:	f000 fff4 	bl	80115dc <xTaskRemoveFromEventList>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00e      	beq.n	8010618 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	2201      	movs	r2, #1
 8010604:	601a      	str	r2, [r3, #0]
 8010606:	e007      	b.n	8010618 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060c:	3301      	adds	r3, #1
 801060e:	b2db      	uxtb	r3, r3
 8010610:	b25a      	sxtb	r2, r3
 8010612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010618:	2301      	movs	r3, #1
 801061a:	637b      	str	r3, [r7, #52]	; 0x34
 801061c:	e001      	b.n	8010622 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801061e:	2300      	movs	r3, #0
 8010620:	637b      	str	r3, [r7, #52]	; 0x34
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801062c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801062e:	4618      	mov	r0, r3
 8010630:	3738      	adds	r7, #56	; 0x38
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
	...

08010638 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08c      	sub	sp, #48	; 0x30
 801063c:	af00      	add	r7, sp, #0
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010644:	2300      	movs	r3, #0
 8010646:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10b      	bne.n	801066a <xQueueReceive+0x32>
	__asm volatile
 8010652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010656:	b672      	cpsid	i
 8010658:	f383 8811 	msr	BASEPRI, r3
 801065c:	f3bf 8f6f 	isb	sy
 8010660:	f3bf 8f4f 	dsb	sy
 8010664:	b662      	cpsie	i
 8010666:	623b      	str	r3, [r7, #32]
 8010668:	e7fe      	b.n	8010668 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d103      	bne.n	8010678 <xQueueReceive+0x40>
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010674:	2b00      	cmp	r3, #0
 8010676:	d101      	bne.n	801067c <xQueueReceive+0x44>
 8010678:	2301      	movs	r3, #1
 801067a:	e000      	b.n	801067e <xQueueReceive+0x46>
 801067c:	2300      	movs	r3, #0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d10b      	bne.n	801069a <xQueueReceive+0x62>
 8010682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010686:	b672      	cpsid	i
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	b662      	cpsie	i
 8010696:	61fb      	str	r3, [r7, #28]
 8010698:	e7fe      	b.n	8010698 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801069a:	f001 f945 	bl	8011928 <xTaskGetSchedulerState>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d102      	bne.n	80106aa <xQueueReceive+0x72>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d101      	bne.n	80106ae <xQueueReceive+0x76>
 80106aa:	2301      	movs	r3, #1
 80106ac:	e000      	b.n	80106b0 <xQueueReceive+0x78>
 80106ae:	2300      	movs	r3, #0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d10b      	bne.n	80106cc <xQueueReceive+0x94>
 80106b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b8:	b672      	cpsid	i
 80106ba:	f383 8811 	msr	BASEPRI, r3
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	f3bf 8f4f 	dsb	sy
 80106c6:	b662      	cpsie	i
 80106c8:	61bb      	str	r3, [r7, #24]
 80106ca:	e7fe      	b.n	80106ca <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80106cc:	f001 fc7c 	bl	8011fc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d01f      	beq.n	801071c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106dc:	68b9      	ldr	r1, [r7, #8]
 80106de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106e0:	f000 faa1 	bl	8010c26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	1e5a      	subs	r2, r3, #1
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00f      	beq.n	8010714 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f6:	3310      	adds	r3, #16
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 ff6f 	bl	80115dc <xTaskRemoveFromEventList>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d007      	beq.n	8010714 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010704:	4b3c      	ldr	r3, [pc, #240]	; (80107f8 <xQueueReceive+0x1c0>)
 8010706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801070a:	601a      	str	r2, [r3, #0]
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010714:	f001 fc8a 	bl	801202c <vPortExitCritical>
				return pdPASS;
 8010718:	2301      	movs	r3, #1
 801071a:	e069      	b.n	80107f0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d103      	bne.n	801072a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010722:	f001 fc83 	bl	801202c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010726:	2300      	movs	r3, #0
 8010728:	e062      	b.n	80107f0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	2b00      	cmp	r3, #0
 801072e:	d106      	bne.n	801073e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010730:	f107 0310 	add.w	r3, r7, #16
 8010734:	4618      	mov	r0, r3
 8010736:	f000 ffb5 	bl	80116a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801073a:	2301      	movs	r3, #1
 801073c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801073e:	f001 fc75 	bl	801202c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010742:	f000 fccd 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010746:	f001 fc3f 	bl	8011fc8 <vPortEnterCritical>
 801074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010750:	b25b      	sxtb	r3, r3
 8010752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010756:	d103      	bne.n	8010760 <xQueueReceive+0x128>
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	2200      	movs	r2, #0
 801075c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010766:	b25b      	sxtb	r3, r3
 8010768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801076c:	d103      	bne.n	8010776 <xQueueReceive+0x13e>
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	2200      	movs	r2, #0
 8010772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010776:	f001 fc59 	bl	801202c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801077a:	1d3a      	adds	r2, r7, #4
 801077c:	f107 0310 	add.w	r3, r7, #16
 8010780:	4611      	mov	r1, r2
 8010782:	4618      	mov	r0, r3
 8010784:	f000 ffa4 	bl	80116d0 <xTaskCheckForTimeOut>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d123      	bne.n	80107d6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801078e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010790:	f000 fac1 	bl	8010d16 <prvIsQueueEmpty>
 8010794:	4603      	mov	r3, r0
 8010796:	2b00      	cmp	r3, #0
 8010798:	d017      	beq.n	80107ca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	3324      	adds	r3, #36	; 0x24
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	4611      	mov	r1, r2
 80107a2:	4618      	mov	r0, r3
 80107a4:	f000 fef4 	bl	8011590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80107a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107aa:	f000 fa62 	bl	8010c72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80107ae:	f000 fca5 	bl	80110fc <xTaskResumeAll>
 80107b2:	4603      	mov	r3, r0
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d189      	bne.n	80106cc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80107b8:	4b0f      	ldr	r3, [pc, #60]	; (80107f8 <xQueueReceive+0x1c0>)
 80107ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	f3bf 8f4f 	dsb	sy
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	e780      	b.n	80106cc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80107ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107cc:	f000 fa51 	bl	8010c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107d0:	f000 fc94 	bl	80110fc <xTaskResumeAll>
 80107d4:	e77a      	b.n	80106cc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80107d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107d8:	f000 fa4b 	bl	8010c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107dc:	f000 fc8e 	bl	80110fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107e2:	f000 fa98 	bl	8010d16 <prvIsQueueEmpty>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f43f af6f 	beq.w	80106cc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80107ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3730      	adds	r7, #48	; 0x30
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b08e      	sub	sp, #56	; 0x38
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010806:	2300      	movs	r3, #0
 8010808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801080e:	2300      	movs	r3, #0
 8010810:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10b      	bne.n	8010830 <xQueueSemaphoreTake+0x34>
 8010818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081c:	b672      	cpsid	i
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	b662      	cpsie	i
 801082c:	623b      	str	r3, [r7, #32]
 801082e:	e7fe      	b.n	801082e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00b      	beq.n	8010850 <xQueueSemaphoreTake+0x54>
 8010838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083c:	b672      	cpsid	i
 801083e:	f383 8811 	msr	BASEPRI, r3
 8010842:	f3bf 8f6f 	isb	sy
 8010846:	f3bf 8f4f 	dsb	sy
 801084a:	b662      	cpsie	i
 801084c:	61fb      	str	r3, [r7, #28]
 801084e:	e7fe      	b.n	801084e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010850:	f001 f86a 	bl	8011928 <xTaskGetSchedulerState>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d102      	bne.n	8010860 <xQueueSemaphoreTake+0x64>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d101      	bne.n	8010864 <xQueueSemaphoreTake+0x68>
 8010860:	2301      	movs	r3, #1
 8010862:	e000      	b.n	8010866 <xQueueSemaphoreTake+0x6a>
 8010864:	2300      	movs	r3, #0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d10b      	bne.n	8010882 <xQueueSemaphoreTake+0x86>
 801086a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086e:	b672      	cpsid	i
 8010870:	f383 8811 	msr	BASEPRI, r3
 8010874:	f3bf 8f6f 	isb	sy
 8010878:	f3bf 8f4f 	dsb	sy
 801087c:	b662      	cpsie	i
 801087e:	61bb      	str	r3, [r7, #24]
 8010880:	e7fe      	b.n	8010880 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010882:	f001 fba1 	bl	8011fc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801088a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801088e:	2b00      	cmp	r3, #0
 8010890:	d024      	beq.n	80108dc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010894:	1e5a      	subs	r2, r3, #1
 8010896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010898:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801089a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d104      	bne.n	80108ac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80108a2:	f001 fa0f 	bl	8011cc4 <pvTaskIncrementMutexHeldCount>
 80108a6:	4602      	mov	r2, r0
 80108a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108aa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	691b      	ldr	r3, [r3, #16]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00f      	beq.n	80108d4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b6:	3310      	adds	r3, #16
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 fe8f 	bl	80115dc <xTaskRemoveFromEventList>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d007      	beq.n	80108d4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80108c4:	4b54      	ldr	r3, [pc, #336]	; (8010a18 <xQueueSemaphoreTake+0x21c>)
 80108c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	f3bf 8f4f 	dsb	sy
 80108d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80108d4:	f001 fbaa 	bl	801202c <vPortExitCritical>
				return pdPASS;
 80108d8:	2301      	movs	r3, #1
 80108da:	e098      	b.n	8010a0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d112      	bne.n	8010908 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80108e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d00b      	beq.n	8010900 <xQueueSemaphoreTake+0x104>
 80108e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ec:	b672      	cpsid	i
 80108ee:	f383 8811 	msr	BASEPRI, r3
 80108f2:	f3bf 8f6f 	isb	sy
 80108f6:	f3bf 8f4f 	dsb	sy
 80108fa:	b662      	cpsie	i
 80108fc:	617b      	str	r3, [r7, #20]
 80108fe:	e7fe      	b.n	80108fe <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010900:	f001 fb94 	bl	801202c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010904:	2300      	movs	r3, #0
 8010906:	e082      	b.n	8010a0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801090a:	2b00      	cmp	r3, #0
 801090c:	d106      	bne.n	801091c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801090e:	f107 030c 	add.w	r3, r7, #12
 8010912:	4618      	mov	r0, r3
 8010914:	f000 fec6 	bl	80116a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010918:	2301      	movs	r3, #1
 801091a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801091c:	f001 fb86 	bl	801202c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010920:	f000 fbde 	bl	80110e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010924:	f001 fb50 	bl	8011fc8 <vPortEnterCritical>
 8010928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801092e:	b25b      	sxtb	r3, r3
 8010930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010934:	d103      	bne.n	801093e <xQueueSemaphoreTake+0x142>
 8010936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010944:	b25b      	sxtb	r3, r3
 8010946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801094a:	d103      	bne.n	8010954 <xQueueSemaphoreTake+0x158>
 801094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801094e:	2200      	movs	r2, #0
 8010950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010954:	f001 fb6a 	bl	801202c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010958:	463a      	mov	r2, r7
 801095a:	f107 030c 	add.w	r3, r7, #12
 801095e:	4611      	mov	r1, r2
 8010960:	4618      	mov	r0, r3
 8010962:	f000 feb5 	bl	80116d0 <xTaskCheckForTimeOut>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d132      	bne.n	80109d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801096c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801096e:	f000 f9d2 	bl	8010d16 <prvIsQueueEmpty>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d026      	beq.n	80109c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d109      	bne.n	8010994 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010980:	f001 fb22 	bl	8011fc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	f000 ffeb 	bl	8011964 <xTaskPriorityInherit>
 801098e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010990:	f001 fb4c 	bl	801202c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010996:	3324      	adds	r3, #36	; 0x24
 8010998:	683a      	ldr	r2, [r7, #0]
 801099a:	4611      	mov	r1, r2
 801099c:	4618      	mov	r0, r3
 801099e:	f000 fdf7 	bl	8011590 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80109a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109a4:	f000 f965 	bl	8010c72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80109a8:	f000 fba8 	bl	80110fc <xTaskResumeAll>
 80109ac:	4603      	mov	r3, r0
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	f47f af67 	bne.w	8010882 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80109b4:	4b18      	ldr	r3, [pc, #96]	; (8010a18 <xQueueSemaphoreTake+0x21c>)
 80109b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	f3bf 8f4f 	dsb	sy
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	e75d      	b.n	8010882 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80109c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109c8:	f000 f953 	bl	8010c72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109cc:	f000 fb96 	bl	80110fc <xTaskResumeAll>
 80109d0:	e757      	b.n	8010882 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80109d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109d4:	f000 f94d 	bl	8010c72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109d8:	f000 fb90 	bl	80110fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109de:	f000 f99a 	bl	8010d16 <prvIsQueueEmpty>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f43f af4c 	beq.w	8010882 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00d      	beq.n	8010a0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80109f0:	f001 faea 	bl	8011fc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80109f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109f6:	f000 f894 	bl	8010b22 <prvGetDisinheritPriorityAfterTimeout>
 80109fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80109fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a02:	4618      	mov	r0, r3
 8010a04:	f001 f8bc 	bl	8011b80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010a08:	f001 fb10 	bl	801202c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3738      	adds	r7, #56	; 0x38
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	e000ed04 	.word	0xe000ed04

08010a1c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b08e      	sub	sp, #56	; 0x38
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10b      	bne.n	8010a4a <xQueueReceiveFromISR+0x2e>
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	b672      	cpsid	i
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	b662      	cpsie	i
 8010a46:	623b      	str	r3, [r7, #32]
 8010a48:	e7fe      	b.n	8010a48 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d103      	bne.n	8010a58 <xQueueReceiveFromISR+0x3c>
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d101      	bne.n	8010a5c <xQueueReceiveFromISR+0x40>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e000      	b.n	8010a5e <xQueueReceiveFromISR+0x42>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d10b      	bne.n	8010a7a <xQueueReceiveFromISR+0x5e>
 8010a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a66:	b672      	cpsid	i
 8010a68:	f383 8811 	msr	BASEPRI, r3
 8010a6c:	f3bf 8f6f 	isb	sy
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	b662      	cpsie	i
 8010a76:	61fb      	str	r3, [r7, #28]
 8010a78:	e7fe      	b.n	8010a78 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a7a:	f001 fb85 	bl	8012188 <vPortValidateInterruptPriority>
	__asm volatile
 8010a7e:	f3ef 8211 	mrs	r2, BASEPRI
 8010a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a86:	b672      	cpsid	i
 8010a88:	f383 8811 	msr	BASEPRI, r3
 8010a8c:	f3bf 8f6f 	isb	sy
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	b662      	cpsie	i
 8010a96:	61ba      	str	r2, [r7, #24]
 8010a98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010a9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d02f      	beq.n	8010b0a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ab4:	68b9      	ldr	r1, [r7, #8]
 8010ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ab8:	f000 f8b5 	bl	8010c26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	1e5a      	subs	r2, r3, #1
 8010ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010ac4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010acc:	d112      	bne.n	8010af4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d016      	beq.n	8010b04 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	3310      	adds	r3, #16
 8010ada:	4618      	mov	r0, r3
 8010adc:	f000 fd7e 	bl	80115dc <xTaskRemoveFromEventList>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d00e      	beq.n	8010b04 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d00b      	beq.n	8010b04 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	601a      	str	r2, [r3, #0]
 8010af2:	e007      	b.n	8010b04 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010af8:	3301      	adds	r3, #1
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	b25a      	sxtb	r2, r3
 8010afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010b04:	2301      	movs	r3, #1
 8010b06:	637b      	str	r3, [r7, #52]	; 0x34
 8010b08:	e001      	b.n	8010b0e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3738      	adds	r7, #56	; 0x38
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010b22:	b480      	push	{r7}
 8010b24:	b085      	sub	sp, #20
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d006      	beq.n	8010b40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f1c3 0307 	rsb	r3, r3, #7
 8010b3c:	60fb      	str	r3, [r7, #12]
 8010b3e:	e001      	b.n	8010b44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010b40:	2300      	movs	r3, #0
 8010b42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010b44:	68fb      	ldr	r3, [r7, #12]
	}
 8010b46:	4618      	mov	r0, r3
 8010b48:	3714      	adds	r7, #20
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b50:	4770      	bx	lr

08010b52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010b52:	b580      	push	{r7, lr}
 8010b54:	b086      	sub	sp, #24
 8010b56:	af00      	add	r7, sp, #0
 8010b58:	60f8      	str	r0, [r7, #12]
 8010b5a:	60b9      	str	r1, [r7, #8]
 8010b5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10d      	bne.n	8010b8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d14d      	bne.n	8010c14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 ff77 	bl	8011a70 <xTaskPriorityDisinherit>
 8010b82:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	2200      	movs	r2, #0
 8010b88:	605a      	str	r2, [r3, #4]
 8010b8a:	e043      	b.n	8010c14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d119      	bne.n	8010bc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	6898      	ldr	r0, [r3, #8]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	68b9      	ldr	r1, [r7, #8]
 8010b9e:	f00e fbff 	bl	801f3a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	689a      	ldr	r2, [r3, #8]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010baa:	441a      	add	r2, r3
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	689a      	ldr	r2, [r3, #8]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d32b      	bcc.n	8010c14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	609a      	str	r2, [r3, #8]
 8010bc4:	e026      	b.n	8010c14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	68d8      	ldr	r0, [r3, #12]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bce:	461a      	mov	r2, r3
 8010bd0:	68b9      	ldr	r1, [r7, #8]
 8010bd2:	f00e fbe5 	bl	801f3a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	68da      	ldr	r2, [r3, #12]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bde:	425b      	negs	r3, r3
 8010be0:	441a      	add	r2, r3
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	68da      	ldr	r2, [r3, #12]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d207      	bcs.n	8010c02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	685a      	ldr	r2, [r3, #4]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bfa:	425b      	negs	r3, r3
 8010bfc:	441a      	add	r2, r3
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d105      	bne.n	8010c14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d002      	beq.n	8010c14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	1c5a      	adds	r2, r3, #1
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010c1c:	697b      	ldr	r3, [r7, #20]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3718      	adds	r7, #24
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}

08010c26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b082      	sub	sp, #8
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d018      	beq.n	8010c6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	68da      	ldr	r2, [r3, #12]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c40:	441a      	add	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d303      	bcc.n	8010c5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	68d9      	ldr	r1, [r3, #12]
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c62:	461a      	mov	r2, r3
 8010c64:	6838      	ldr	r0, [r7, #0]
 8010c66:	f00e fb9b 	bl	801f3a0 <memcpy>
	}
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b084      	sub	sp, #16
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010c7a:	f001 f9a5 	bl	8011fc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010c86:	e011      	b.n	8010cac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d012      	beq.n	8010cb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	3324      	adds	r3, #36	; 0x24
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 fca1 	bl	80115dc <xTaskRemoveFromEventList>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010ca0:	f000 fd7a 	bl	8011798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	dce9      	bgt.n	8010c88 <prvUnlockQueue+0x16>
 8010cb4:	e000      	b.n	8010cb8 <prvUnlockQueue+0x46>
					break;
 8010cb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	22ff      	movs	r2, #255	; 0xff
 8010cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010cc0:	f001 f9b4 	bl	801202c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010cc4:	f001 f980 	bl	8011fc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cd0:	e011      	b.n	8010cf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d012      	beq.n	8010d00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	3310      	adds	r3, #16
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f000 fc7c 	bl	80115dc <xTaskRemoveFromEventList>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010cea:	f000 fd55 	bl	8011798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010cee:	7bbb      	ldrb	r3, [r7, #14]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	b2db      	uxtb	r3, r3
 8010cf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	dce9      	bgt.n	8010cd2 <prvUnlockQueue+0x60>
 8010cfe:	e000      	b.n	8010d02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010d00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	22ff      	movs	r2, #255	; 0xff
 8010d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010d0a:	f001 f98f 	bl	801202c <vPortExitCritical>
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}

08010d16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b084      	sub	sp, #16
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d1e:	f001 f953 	bl	8011fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d102      	bne.n	8010d30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	60fb      	str	r3, [r7, #12]
 8010d2e:	e001      	b.n	8010d34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d30:	2300      	movs	r3, #0
 8010d32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d34:	f001 f97a 	bl	801202c <vPortExitCritical>

	return xReturn;
 8010d38:	68fb      	ldr	r3, [r7, #12]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}

08010d42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d42:	b580      	push	{r7, lr}
 8010d44:	b084      	sub	sp, #16
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d4a:	f001 f93d 	bl	8011fc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d102      	bne.n	8010d60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	60fb      	str	r3, [r7, #12]
 8010d5e:	e001      	b.n	8010d64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010d60:	2300      	movs	r3, #0
 8010d62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d64:	f001 f962 	bl	801202c <vPortExitCritical>

	return xReturn;
 8010d68:	68fb      	ldr	r3, [r7, #12]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b08c      	sub	sp, #48	; 0x30
 8010d76:	af04      	add	r7, sp, #16
 8010d78:	60f8      	str	r0, [r7, #12]
 8010d7a:	60b9      	str	r1, [r7, #8]
 8010d7c:	603b      	str	r3, [r7, #0]
 8010d7e:	4613      	mov	r3, r2
 8010d80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d82:	88fb      	ldrh	r3, [r7, #6]
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4618      	mov	r0, r3
 8010d88:	f001 fa40 	bl	801220c <pvPortMalloc>
 8010d8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00e      	beq.n	8010db2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010d94:	2058      	movs	r0, #88	; 0x58
 8010d96:	f001 fa39 	bl	801220c <pvPortMalloc>
 8010d9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d003      	beq.n	8010daa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	697a      	ldr	r2, [r7, #20]
 8010da6:	631a      	str	r2, [r3, #48]	; 0x30
 8010da8:	e005      	b.n	8010db6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010daa:	6978      	ldr	r0, [r7, #20]
 8010dac:	f001 fafa 	bl	80123a4 <vPortFree>
 8010db0:	e001      	b.n	8010db6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010db2:	2300      	movs	r3, #0
 8010db4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010db6:	69fb      	ldr	r3, [r7, #28]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d013      	beq.n	8010de4 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010dbc:	88fa      	ldrh	r2, [r7, #6]
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	9303      	str	r3, [sp, #12]
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	9302      	str	r3, [sp, #8]
 8010dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc8:	9301      	str	r3, [sp, #4]
 8010dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dcc:	9300      	str	r3, [sp, #0]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	68b9      	ldr	r1, [r7, #8]
 8010dd2:	68f8      	ldr	r0, [r7, #12]
 8010dd4:	f000 f80e 	bl	8010df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dd8:	69f8      	ldr	r0, [r7, #28]
 8010dda:	f000 f897 	bl	8010f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010dde:	2301      	movs	r3, #1
 8010de0:	61bb      	str	r3, [r7, #24]
 8010de2:	e002      	b.n	8010dea <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010de4:	f04f 33ff 	mov.w	r3, #4294967295
 8010de8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010dea:	69bb      	ldr	r3, [r7, #24]
	}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3720      	adds	r7, #32
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b088      	sub	sp, #32
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
 8010e00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	009b      	lsls	r3, r3, #2
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	21a5      	movs	r1, #165	; 0xa5
 8010e0e:	f00e fad2 	bl	801f3b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010e1c:	440b      	add	r3, r1
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4413      	add	r3, r2
 8010e22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	f023 0307 	bic.w	r3, r3, #7
 8010e2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	f003 0307 	and.w	r3, r3, #7
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00b      	beq.n	8010e4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3a:	b672      	cpsid	i
 8010e3c:	f383 8811 	msr	BASEPRI, r3
 8010e40:	f3bf 8f6f 	isb	sy
 8010e44:	f3bf 8f4f 	dsb	sy
 8010e48:	b662      	cpsie	i
 8010e4a:	617b      	str	r3, [r7, #20]
 8010e4c:	e7fe      	b.n	8010e4c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e4e:	2300      	movs	r3, #0
 8010e50:	61fb      	str	r3, [r7, #28]
 8010e52:	e012      	b.n	8010e7a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e54:	68ba      	ldr	r2, [r7, #8]
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	4413      	add	r3, r2
 8010e5a:	7819      	ldrb	r1, [r3, #0]
 8010e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5e:	69fb      	ldr	r3, [r7, #28]
 8010e60:	4413      	add	r3, r2
 8010e62:	3334      	adds	r3, #52	; 0x34
 8010e64:	460a      	mov	r2, r1
 8010e66:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010e68:	68ba      	ldr	r2, [r7, #8]
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d006      	beq.n	8010e82 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	3301      	adds	r3, #1
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	2b0f      	cmp	r3, #15
 8010e7e:	d9e9      	bls.n	8010e54 <prvInitialiseNewTask+0x60>
 8010e80:	e000      	b.n	8010e84 <prvInitialiseNewTask+0x90>
		{
			break;
 8010e82:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8e:	2b06      	cmp	r3, #6
 8010e90:	d901      	bls.n	8010e96 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e92:	2306      	movs	r3, #6
 8010e94:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ea0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eaa:	3304      	adds	r3, #4
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff f83b 	bl	800ff28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb4:	3318      	adds	r3, #24
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff f836 	bl	800ff28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ec0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec4:	f1c3 0207 	rsb	r2, r3, #7
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ed0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eda:	2200      	movs	r2, #0
 8010edc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	68f9      	ldr	r1, [r7, #12]
 8010eea:	69b8      	ldr	r0, [r7, #24]
 8010eec:	f000 ff64 	bl	8011db8 <pxPortInitialiseStack>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8010ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f02:	bf00      	nop
 8010f04:	3720      	adds	r7, #32
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
	...

08010f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f14:	f001 f858 	bl	8011fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f18:	4b2a      	ldr	r3, [pc, #168]	; (8010fc4 <prvAddNewTaskToReadyList+0xb8>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	4a29      	ldr	r2, [pc, #164]	; (8010fc4 <prvAddNewTaskToReadyList+0xb8>)
 8010f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f22:	4b29      	ldr	r3, [pc, #164]	; (8010fc8 <prvAddNewTaskToReadyList+0xbc>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d109      	bne.n	8010f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f2a:	4a27      	ldr	r2, [pc, #156]	; (8010fc8 <prvAddNewTaskToReadyList+0xbc>)
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f30:	4b24      	ldr	r3, [pc, #144]	; (8010fc4 <prvAddNewTaskToReadyList+0xb8>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d110      	bne.n	8010f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f38:	f000 fc54 	bl	80117e4 <prvInitialiseTaskLists>
 8010f3c:	e00d      	b.n	8010f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f3e:	4b23      	ldr	r3, [pc, #140]	; (8010fcc <prvAddNewTaskToReadyList+0xc0>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d109      	bne.n	8010f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f46:	4b20      	ldr	r3, [pc, #128]	; (8010fc8 <prvAddNewTaskToReadyList+0xbc>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d802      	bhi.n	8010f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f54:	4a1c      	ldr	r2, [pc, #112]	; (8010fc8 <prvAddNewTaskToReadyList+0xbc>)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f5a:	4b1d      	ldr	r3, [pc, #116]	; (8010fd0 <prvAddNewTaskToReadyList+0xc4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	4a1b      	ldr	r2, [pc, #108]	; (8010fd0 <prvAddNewTaskToReadyList+0xc4>)
 8010f62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f68:	2201      	movs	r2, #1
 8010f6a:	409a      	lsls	r2, r3
 8010f6c:	4b19      	ldr	r3, [pc, #100]	; (8010fd4 <prvAddNewTaskToReadyList+0xc8>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	4313      	orrs	r3, r2
 8010f72:	4a18      	ldr	r2, [pc, #96]	; (8010fd4 <prvAddNewTaskToReadyList+0xc8>)
 8010f74:	6013      	str	r3, [r2, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f7a:	4613      	mov	r3, r2
 8010f7c:	009b      	lsls	r3, r3, #2
 8010f7e:	4413      	add	r3, r2
 8010f80:	009b      	lsls	r3, r3, #2
 8010f82:	4a15      	ldr	r2, [pc, #84]	; (8010fd8 <prvAddNewTaskToReadyList+0xcc>)
 8010f84:	441a      	add	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	4610      	mov	r0, r2
 8010f8e:	f7fe ffd8 	bl	800ff42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f92:	f001 f84b 	bl	801202c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f96:	4b0d      	ldr	r3, [pc, #52]	; (8010fcc <prvAddNewTaskToReadyList+0xc0>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00e      	beq.n	8010fbc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f9e:	4b0a      	ldr	r3, [pc, #40]	; (8010fc8 <prvAddNewTaskToReadyList+0xbc>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d207      	bcs.n	8010fbc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010fac:	4b0b      	ldr	r3, [pc, #44]	; (8010fdc <prvAddNewTaskToReadyList+0xd0>)
 8010fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fb2:	601a      	str	r2, [r3, #0]
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fbc:	bf00      	nop
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	20000218 	.word	0x20000218
 8010fc8:	20000118 	.word	0x20000118
 8010fcc:	20000224 	.word	0x20000224
 8010fd0:	20000234 	.word	0x20000234
 8010fd4:	20000220 	.word	0x20000220
 8010fd8:	2000011c 	.word	0x2000011c
 8010fdc:	e000ed04 	.word	0xe000ed04

08010fe0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d018      	beq.n	8011024 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010ff2:	4b14      	ldr	r3, [pc, #80]	; (8011044 <vTaskDelay+0x64>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <vTaskDelay+0x32>
 8010ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ffe:	b672      	cpsid	i
 8011000:	f383 8811 	msr	BASEPRI, r3
 8011004:	f3bf 8f6f 	isb	sy
 8011008:	f3bf 8f4f 	dsb	sy
 801100c:	b662      	cpsie	i
 801100e:	60bb      	str	r3, [r7, #8]
 8011010:	e7fe      	b.n	8011010 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011012:	f000 f865 	bl	80110e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011016:	2100      	movs	r1, #0
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 fe67 	bl	8011cec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801101e:	f000 f86d 	bl	80110fc <xTaskResumeAll>
 8011022:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d107      	bne.n	801103a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801102a:	4b07      	ldr	r3, [pc, #28]	; (8011048 <vTaskDelay+0x68>)
 801102c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011030:	601a      	str	r2, [r3, #0]
 8011032:	f3bf 8f4f 	dsb	sy
 8011036:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	20000240 	.word	0x20000240
 8011048:	e000ed04 	.word	0xe000ed04

0801104c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b086      	sub	sp, #24
 8011050:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8011052:	4b1d      	ldr	r3, [pc, #116]	; (80110c8 <vTaskStartScheduler+0x7c>)
 8011054:	9301      	str	r3, [sp, #4]
 8011056:	2300      	movs	r3, #0
 8011058:	9300      	str	r3, [sp, #0]
 801105a:	2300      	movs	r3, #0
 801105c:	2280      	movs	r2, #128	; 0x80
 801105e:	491b      	ldr	r1, [pc, #108]	; (80110cc <vTaskStartScheduler+0x80>)
 8011060:	481b      	ldr	r0, [pc, #108]	; (80110d0 <vTaskStartScheduler+0x84>)
 8011062:	f7ff fe86 	bl	8010d72 <xTaskCreate>
 8011066:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2b01      	cmp	r3, #1
 801106c:	d117      	bne.n	801109e <vTaskStartScheduler+0x52>
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	b672      	cpsid	i
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	b662      	cpsie	i
 8011082:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011084:	4b13      	ldr	r3, [pc, #76]	; (80110d4 <vTaskStartScheduler+0x88>)
 8011086:	f04f 32ff 	mov.w	r2, #4294967295
 801108a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801108c:	4b12      	ldr	r3, [pc, #72]	; (80110d8 <vTaskStartScheduler+0x8c>)
 801108e:	2201      	movs	r2, #1
 8011090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011092:	4b12      	ldr	r3, [pc, #72]	; (80110dc <vTaskStartScheduler+0x90>)
 8011094:	2200      	movs	r2, #0
 8011096:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011098:	f000 ff1a 	bl	8011ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801109c:	e00f      	b.n	80110be <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110a4:	d10b      	bne.n	80110be <vTaskStartScheduler+0x72>
 80110a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110aa:	b672      	cpsid	i
 80110ac:	f383 8811 	msr	BASEPRI, r3
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	b662      	cpsie	i
 80110ba:	607b      	str	r3, [r7, #4]
 80110bc:	e7fe      	b.n	80110bc <vTaskStartScheduler+0x70>
}
 80110be:	bf00      	nop
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	2000023c 	.word	0x2000023c
 80110cc:	08020598 	.word	0x08020598
 80110d0:	080117b1 	.word	0x080117b1
 80110d4:	20000238 	.word	0x20000238
 80110d8:	20000224 	.word	0x20000224
 80110dc:	2000021c 	.word	0x2000021c

080110e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110e0:	b480      	push	{r7}
 80110e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80110e4:	4b04      	ldr	r3, [pc, #16]	; (80110f8 <vTaskSuspendAll+0x18>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3301      	adds	r3, #1
 80110ea:	4a03      	ldr	r2, [pc, #12]	; (80110f8 <vTaskSuspendAll+0x18>)
 80110ec:	6013      	str	r3, [r2, #0]
}
 80110ee:	bf00      	nop
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	20000240 	.word	0x20000240

080110fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011102:	2300      	movs	r3, #0
 8011104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011106:	2300      	movs	r3, #0
 8011108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801110a:	4b42      	ldr	r3, [pc, #264]	; (8011214 <xTaskResumeAll+0x118>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10b      	bne.n	801112a <xTaskResumeAll+0x2e>
 8011112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011116:	b672      	cpsid	i
 8011118:	f383 8811 	msr	BASEPRI, r3
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	b662      	cpsie	i
 8011126:	603b      	str	r3, [r7, #0]
 8011128:	e7fe      	b.n	8011128 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801112a:	f000 ff4d 	bl	8011fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801112e:	4b39      	ldr	r3, [pc, #228]	; (8011214 <xTaskResumeAll+0x118>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	3b01      	subs	r3, #1
 8011134:	4a37      	ldr	r2, [pc, #220]	; (8011214 <xTaskResumeAll+0x118>)
 8011136:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011138:	4b36      	ldr	r3, [pc, #216]	; (8011214 <xTaskResumeAll+0x118>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d161      	bne.n	8011204 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011140:	4b35      	ldr	r3, [pc, #212]	; (8011218 <xTaskResumeAll+0x11c>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d05d      	beq.n	8011204 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011148:	e02e      	b.n	80111a8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801114a:	4b34      	ldr	r3, [pc, #208]	; (801121c <xTaskResumeAll+0x120>)
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3318      	adds	r3, #24
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe ff50 	bl	800fffc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	3304      	adds	r3, #4
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe ff4b 	bl	800fffc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116a:	2201      	movs	r2, #1
 801116c:	409a      	lsls	r2, r3
 801116e:	4b2c      	ldr	r3, [pc, #176]	; (8011220 <xTaskResumeAll+0x124>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4313      	orrs	r3, r2
 8011174:	4a2a      	ldr	r2, [pc, #168]	; (8011220 <xTaskResumeAll+0x124>)
 8011176:	6013      	str	r3, [r2, #0]
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801117c:	4613      	mov	r3, r2
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	4413      	add	r3, r2
 8011182:	009b      	lsls	r3, r3, #2
 8011184:	4a27      	ldr	r2, [pc, #156]	; (8011224 <xTaskResumeAll+0x128>)
 8011186:	441a      	add	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	3304      	adds	r3, #4
 801118c:	4619      	mov	r1, r3
 801118e:	4610      	mov	r0, r2
 8011190:	f7fe fed7 	bl	800ff42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011198:	4b23      	ldr	r3, [pc, #140]	; (8011228 <xTaskResumeAll+0x12c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801119e:	429a      	cmp	r2, r3
 80111a0:	d302      	bcc.n	80111a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111a2:	4b22      	ldr	r3, [pc, #136]	; (801122c <xTaskResumeAll+0x130>)
 80111a4:	2201      	movs	r2, #1
 80111a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111a8:	4b1c      	ldr	r3, [pc, #112]	; (801121c <xTaskResumeAll+0x120>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d1cc      	bne.n	801114a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d001      	beq.n	80111ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111b6:	f000 fb91 	bl	80118dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80111ba:	4b1d      	ldr	r3, [pc, #116]	; (8011230 <xTaskResumeAll+0x134>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d010      	beq.n	80111e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111c6:	f000 f859 	bl	801127c <xTaskIncrementTick>
 80111ca:	4603      	mov	r3, r0
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d002      	beq.n	80111d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111d0:	4b16      	ldr	r3, [pc, #88]	; (801122c <xTaskResumeAll+0x130>)
 80111d2:	2201      	movs	r2, #1
 80111d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3b01      	subs	r3, #1
 80111da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1f1      	bne.n	80111c6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80111e2:	4b13      	ldr	r3, [pc, #76]	; (8011230 <xTaskResumeAll+0x134>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111e8:	4b10      	ldr	r3, [pc, #64]	; (801122c <xTaskResumeAll+0x130>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d009      	beq.n	8011204 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111f0:	2301      	movs	r3, #1
 80111f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111f4:	4b0f      	ldr	r3, [pc, #60]	; (8011234 <xTaskResumeAll+0x138>)
 80111f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111fa:	601a      	str	r2, [r3, #0]
 80111fc:	f3bf 8f4f 	dsb	sy
 8011200:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011204:	f000 ff12 	bl	801202c <vPortExitCritical>

	return xAlreadyYielded;
 8011208:	68bb      	ldr	r3, [r7, #8]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20000240 	.word	0x20000240
 8011218:	20000218 	.word	0x20000218
 801121c:	200001d8 	.word	0x200001d8
 8011220:	20000220 	.word	0x20000220
 8011224:	2000011c 	.word	0x2000011c
 8011228:	20000118 	.word	0x20000118
 801122c:	2000022c 	.word	0x2000022c
 8011230:	20000228 	.word	0x20000228
 8011234:	e000ed04 	.word	0xe000ed04

08011238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801123e:	4b05      	ldr	r3, [pc, #20]	; (8011254 <xTaskGetTickCount+0x1c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011244:	687b      	ldr	r3, [r7, #4]
}
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop
 8011254:	2000021c 	.word	0x2000021c

08011258 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801125e:	f000 ff93 	bl	8012188 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011262:	2300      	movs	r3, #0
 8011264:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011266:	4b04      	ldr	r3, [pc, #16]	; (8011278 <xTaskGetTickCountFromISR+0x20>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801126c:	683b      	ldr	r3, [r7, #0]
}
 801126e:	4618      	mov	r0, r3
 8011270:	3708      	adds	r7, #8
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	2000021c 	.word	0x2000021c

0801127c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b086      	sub	sp, #24
 8011280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011286:	4b51      	ldr	r3, [pc, #324]	; (80113cc <xTaskIncrementTick+0x150>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	f040 808e 	bne.w	80113ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011290:	4b4f      	ldr	r3, [pc, #316]	; (80113d0 <xTaskIncrementTick+0x154>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011298:	4a4d      	ldr	r2, [pc, #308]	; (80113d0 <xTaskIncrementTick+0x154>)
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d121      	bne.n	80112e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80112a4:	4b4b      	ldr	r3, [pc, #300]	; (80113d4 <xTaskIncrementTick+0x158>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00b      	beq.n	80112c6 <xTaskIncrementTick+0x4a>
 80112ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b2:	b672      	cpsid	i
 80112b4:	f383 8811 	msr	BASEPRI, r3
 80112b8:	f3bf 8f6f 	isb	sy
 80112bc:	f3bf 8f4f 	dsb	sy
 80112c0:	b662      	cpsie	i
 80112c2:	603b      	str	r3, [r7, #0]
 80112c4:	e7fe      	b.n	80112c4 <xTaskIncrementTick+0x48>
 80112c6:	4b43      	ldr	r3, [pc, #268]	; (80113d4 <xTaskIncrementTick+0x158>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	60fb      	str	r3, [r7, #12]
 80112cc:	4b42      	ldr	r3, [pc, #264]	; (80113d8 <xTaskIncrementTick+0x15c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a40      	ldr	r2, [pc, #256]	; (80113d4 <xTaskIncrementTick+0x158>)
 80112d2:	6013      	str	r3, [r2, #0]
 80112d4:	4a40      	ldr	r2, [pc, #256]	; (80113d8 <xTaskIncrementTick+0x15c>)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6013      	str	r3, [r2, #0]
 80112da:	4b40      	ldr	r3, [pc, #256]	; (80113dc <xTaskIncrementTick+0x160>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	3301      	adds	r3, #1
 80112e0:	4a3e      	ldr	r2, [pc, #248]	; (80113dc <xTaskIncrementTick+0x160>)
 80112e2:	6013      	str	r3, [r2, #0]
 80112e4:	f000 fafa 	bl	80118dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112e8:	4b3d      	ldr	r3, [pc, #244]	; (80113e0 <xTaskIncrementTick+0x164>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	693a      	ldr	r2, [r7, #16]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d34d      	bcc.n	801138e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112f2:	4b38      	ldr	r3, [pc, #224]	; (80113d4 <xTaskIncrementTick+0x158>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <xTaskIncrementTick+0x84>
 80112fc:	2301      	movs	r3, #1
 80112fe:	e000      	b.n	8011302 <xTaskIncrementTick+0x86>
 8011300:	2300      	movs	r3, #0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d004      	beq.n	8011310 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011306:	4b36      	ldr	r3, [pc, #216]	; (80113e0 <xTaskIncrementTick+0x164>)
 8011308:	f04f 32ff 	mov.w	r2, #4294967295
 801130c:	601a      	str	r2, [r3, #0]
					break;
 801130e:	e03e      	b.n	801138e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011310:	4b30      	ldr	r3, [pc, #192]	; (80113d4 <xTaskIncrementTick+0x158>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	68db      	ldr	r3, [r3, #12]
 8011318:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011320:	693a      	ldr	r2, [r7, #16]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	429a      	cmp	r2, r3
 8011326:	d203      	bcs.n	8011330 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011328:	4a2d      	ldr	r2, [pc, #180]	; (80113e0 <xTaskIncrementTick+0x164>)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6013      	str	r3, [r2, #0]
						break;
 801132e:	e02e      	b.n	801138e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	3304      	adds	r3, #4
 8011334:	4618      	mov	r0, r3
 8011336:	f7fe fe61 	bl	800fffc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133e:	2b00      	cmp	r3, #0
 8011340:	d004      	beq.n	801134c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	3318      	adds	r3, #24
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe fe58 	bl	800fffc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011350:	2201      	movs	r2, #1
 8011352:	409a      	lsls	r2, r3
 8011354:	4b23      	ldr	r3, [pc, #140]	; (80113e4 <xTaskIncrementTick+0x168>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	4313      	orrs	r3, r2
 801135a:	4a22      	ldr	r2, [pc, #136]	; (80113e4 <xTaskIncrementTick+0x168>)
 801135c:	6013      	str	r3, [r2, #0]
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011362:	4613      	mov	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4413      	add	r3, r2
 8011368:	009b      	lsls	r3, r3, #2
 801136a:	4a1f      	ldr	r2, [pc, #124]	; (80113e8 <xTaskIncrementTick+0x16c>)
 801136c:	441a      	add	r2, r3
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3304      	adds	r3, #4
 8011372:	4619      	mov	r1, r3
 8011374:	4610      	mov	r0, r2
 8011376:	f7fe fde4 	bl	800ff42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137e:	4b1b      	ldr	r3, [pc, #108]	; (80113ec <xTaskIncrementTick+0x170>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d3b4      	bcc.n	80112f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011388:	2301      	movs	r3, #1
 801138a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801138c:	e7b1      	b.n	80112f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801138e:	4b17      	ldr	r3, [pc, #92]	; (80113ec <xTaskIncrementTick+0x170>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011394:	4914      	ldr	r1, [pc, #80]	; (80113e8 <xTaskIncrementTick+0x16c>)
 8011396:	4613      	mov	r3, r2
 8011398:	009b      	lsls	r3, r3, #2
 801139a:	4413      	add	r3, r2
 801139c:	009b      	lsls	r3, r3, #2
 801139e:	440b      	add	r3, r1
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	d907      	bls.n	80113b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	617b      	str	r3, [r7, #20]
 80113aa:	e004      	b.n	80113b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80113ac:	4b10      	ldr	r3, [pc, #64]	; (80113f0 <xTaskIncrementTick+0x174>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3301      	adds	r3, #1
 80113b2:	4a0f      	ldr	r2, [pc, #60]	; (80113f0 <xTaskIncrementTick+0x174>)
 80113b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80113b6:	4b0f      	ldr	r3, [pc, #60]	; (80113f4 <xTaskIncrementTick+0x178>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d001      	beq.n	80113c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80113be:	2301      	movs	r3, #1
 80113c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80113c2:	697b      	ldr	r3, [r7, #20]
}
 80113c4:	4618      	mov	r0, r3
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	20000240 	.word	0x20000240
 80113d0:	2000021c 	.word	0x2000021c
 80113d4:	200001d0 	.word	0x200001d0
 80113d8:	200001d4 	.word	0x200001d4
 80113dc:	20000230 	.word	0x20000230
 80113e0:	20000238 	.word	0x20000238
 80113e4:	20000220 	.word	0x20000220
 80113e8:	2000011c 	.word	0x2000011c
 80113ec:	20000118 	.word	0x20000118
 80113f0:	20000228 	.word	0x20000228
 80113f4:	2000022c 	.word	0x2000022c

080113f8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d103      	bne.n	8011410 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011408:	4b08      	ldr	r3, [pc, #32]	; (801142c <vTaskSetApplicationTaskTag+0x34>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	60fb      	str	r3, [r7, #12]
 801140e:	e001      	b.n	8011414 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8011414:	f000 fdd8 	bl	8011fc8 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	683a      	ldr	r2, [r7, #0]
 801141c:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 801141e:	f000 fe05 	bl	801202c <vPortExitCritical>
	}
 8011422:	bf00      	nop
 8011424:	3710      	adds	r7, #16
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	20000118 	.word	0x20000118

08011430 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d103      	bne.n	8011448 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011440:	4b0b      	ldr	r3, [pc, #44]	; (8011470 <xTaskCallApplicationTaskHook+0x40>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	60fb      	str	r3, [r7, #12]
 8011446:	e001      	b.n	801144c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011450:	2b00      	cmp	r3, #0
 8011452:	d005      	beq.n	8011460 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011458:	6838      	ldr	r0, [r7, #0]
 801145a:	4798      	blx	r3
 801145c:	60b8      	str	r0, [r7, #8]
 801145e:	e001      	b.n	8011464 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8011460:	2300      	movs	r3, #0
 8011462:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8011464:	68bb      	ldr	r3, [r7, #8]
	}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20000118 	.word	0x20000118

08011474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b088      	sub	sp, #32
 8011478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801147a:	4b40      	ldr	r3, [pc, #256]	; (801157c <vTaskSwitchContext+0x108>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d003      	beq.n	801148a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011482:	4b3f      	ldr	r3, [pc, #252]	; (8011580 <vTaskSwitchContext+0x10c>)
 8011484:	2201      	movs	r2, #1
 8011486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011488:	e073      	b.n	8011572 <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 801148a:	4b3d      	ldr	r3, [pc, #244]	; (8011580 <vTaskSwitchContext+0x10c>)
 801148c:	2200      	movs	r2, #0
 801148e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8011490:	4b3c      	ldr	r3, [pc, #240]	; (8011584 <vTaskSwitchContext+0x110>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2101      	movs	r1, #1
 8011496:	4618      	mov	r0, r3
 8011498:	f7ff ffca 	bl	8011430 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 801149c:	4b39      	ldr	r3, [pc, #228]	; (8011584 <vTaskSwitchContext+0x110>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114a2:	61fb      	str	r3, [r7, #28]
 80114a4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80114a8:	61bb      	str	r3, [r7, #24]
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	69ba      	ldr	r2, [r7, #24]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d111      	bne.n	80114d8 <vTaskSwitchContext+0x64>
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	3304      	adds	r3, #4
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	69ba      	ldr	r2, [r7, #24]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d10b      	bne.n	80114d8 <vTaskSwitchContext+0x64>
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	3308      	adds	r3, #8
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	69ba      	ldr	r2, [r7, #24]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d105      	bne.n	80114d8 <vTaskSwitchContext+0x64>
 80114cc:	69fb      	ldr	r3, [r7, #28]
 80114ce:	330c      	adds	r3, #12
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	69ba      	ldr	r2, [r7, #24]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	d008      	beq.n	80114ea <vTaskSwitchContext+0x76>
 80114d8:	4b2a      	ldr	r3, [pc, #168]	; (8011584 <vTaskSwitchContext+0x110>)
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	4b29      	ldr	r3, [pc, #164]	; (8011584 <vTaskSwitchContext+0x110>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3334      	adds	r3, #52	; 0x34
 80114e2:	4619      	mov	r1, r3
 80114e4:	4610      	mov	r0, r2
 80114e6:	f7fe fb3e 	bl	800fb66 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80114ea:	4b27      	ldr	r3, [pc, #156]	; (8011588 <vTaskSwitchContext+0x114>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	fab3 f383 	clz	r3, r3
 80114f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80114f8:	7afb      	ldrb	r3, [r7, #11]
 80114fa:	f1c3 031f 	rsb	r3, r3, #31
 80114fe:	617b      	str	r3, [r7, #20]
 8011500:	4922      	ldr	r1, [pc, #136]	; (801158c <vTaskSwitchContext+0x118>)
 8011502:	697a      	ldr	r2, [r7, #20]
 8011504:	4613      	mov	r3, r2
 8011506:	009b      	lsls	r3, r3, #2
 8011508:	4413      	add	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	440b      	add	r3, r1
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d10b      	bne.n	801152c <vTaskSwitchContext+0xb8>
	__asm volatile
 8011514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011518:	b672      	cpsid	i
 801151a:	f383 8811 	msr	BASEPRI, r3
 801151e:	f3bf 8f6f 	isb	sy
 8011522:	f3bf 8f4f 	dsb	sy
 8011526:	b662      	cpsie	i
 8011528:	607b      	str	r3, [r7, #4]
 801152a:	e7fe      	b.n	801152a <vTaskSwitchContext+0xb6>
 801152c:	697a      	ldr	r2, [r7, #20]
 801152e:	4613      	mov	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	4413      	add	r3, r2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	4a15      	ldr	r2, [pc, #84]	; (801158c <vTaskSwitchContext+0x118>)
 8011538:	4413      	add	r3, r2
 801153a:	613b      	str	r3, [r7, #16]
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	685a      	ldr	r2, [r3, #4]
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	605a      	str	r2, [r3, #4]
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	685a      	ldr	r2, [r3, #4]
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	3308      	adds	r3, #8
 801154e:	429a      	cmp	r2, r3
 8011550:	d104      	bne.n	801155c <vTaskSwitchContext+0xe8>
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	685a      	ldr	r2, [r3, #4]
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	605a      	str	r2, [r3, #4]
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	4a08      	ldr	r2, [pc, #32]	; (8011584 <vTaskSwitchContext+0x110>)
 8011564:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8011566:	4b07      	ldr	r3, [pc, #28]	; (8011584 <vTaskSwitchContext+0x110>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2100      	movs	r1, #0
 801156c:	4618      	mov	r0, r3
 801156e:	f7ff ff5f 	bl	8011430 <xTaskCallApplicationTaskHook>
}
 8011572:	bf00      	nop
 8011574:	3720      	adds	r7, #32
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20000240 	.word	0x20000240
 8011580:	2000022c 	.word	0x2000022c
 8011584:	20000118 	.word	0x20000118
 8011588:	20000220 	.word	0x20000220
 801158c:	2000011c 	.word	0x2000011c

08011590 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d10b      	bne.n	80115b8 <vTaskPlaceOnEventList+0x28>
 80115a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a4:	b672      	cpsid	i
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	b662      	cpsie	i
 80115b4:	60fb      	str	r3, [r7, #12]
 80115b6:	e7fe      	b.n	80115b6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80115b8:	4b07      	ldr	r3, [pc, #28]	; (80115d8 <vTaskPlaceOnEventList+0x48>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3318      	adds	r3, #24
 80115be:	4619      	mov	r1, r3
 80115c0:	6878      	ldr	r0, [r7, #4]
 80115c2:	f7fe fce2 	bl	800ff8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80115c6:	2101      	movs	r1, #1
 80115c8:	6838      	ldr	r0, [r7, #0]
 80115ca:	f000 fb8f 	bl	8011cec <prvAddCurrentTaskToDelayedList>
}
 80115ce:	bf00      	nop
 80115d0:	3710      	adds	r7, #16
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	20000118 	.word	0x20000118

080115dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b086      	sub	sp, #24
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	68db      	ldr	r3, [r3, #12]
 80115ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10b      	bne.n	801160a <xTaskRemoveFromEventList+0x2e>
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	b672      	cpsid	i
 80115f8:	f383 8811 	msr	BASEPRI, r3
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	b662      	cpsie	i
 8011606:	60fb      	str	r3, [r7, #12]
 8011608:	e7fe      	b.n	8011608 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	3318      	adds	r3, #24
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe fcf4 	bl	800fffc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011614:	4b1d      	ldr	r3, [pc, #116]	; (801168c <xTaskRemoveFromEventList+0xb0>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d11c      	bne.n	8011656 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	3304      	adds	r3, #4
 8011620:	4618      	mov	r0, r3
 8011622:	f7fe fceb 	bl	800fffc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801162a:	2201      	movs	r2, #1
 801162c:	409a      	lsls	r2, r3
 801162e:	4b18      	ldr	r3, [pc, #96]	; (8011690 <xTaskRemoveFromEventList+0xb4>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4313      	orrs	r3, r2
 8011634:	4a16      	ldr	r2, [pc, #88]	; (8011690 <xTaskRemoveFromEventList+0xb4>)
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801163c:	4613      	mov	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	4413      	add	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4a13      	ldr	r2, [pc, #76]	; (8011694 <xTaskRemoveFromEventList+0xb8>)
 8011646:	441a      	add	r2, r3
 8011648:	693b      	ldr	r3, [r7, #16]
 801164a:	3304      	adds	r3, #4
 801164c:	4619      	mov	r1, r3
 801164e:	4610      	mov	r0, r2
 8011650:	f7fe fc77 	bl	800ff42 <vListInsertEnd>
 8011654:	e005      	b.n	8011662 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	3318      	adds	r3, #24
 801165a:	4619      	mov	r1, r3
 801165c:	480e      	ldr	r0, [pc, #56]	; (8011698 <xTaskRemoveFromEventList+0xbc>)
 801165e:	f7fe fc70 	bl	800ff42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011666:	4b0d      	ldr	r3, [pc, #52]	; (801169c <xTaskRemoveFromEventList+0xc0>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166c:	429a      	cmp	r2, r3
 801166e:	d905      	bls.n	801167c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011670:	2301      	movs	r3, #1
 8011672:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011674:	4b0a      	ldr	r3, [pc, #40]	; (80116a0 <xTaskRemoveFromEventList+0xc4>)
 8011676:	2201      	movs	r2, #1
 8011678:	601a      	str	r2, [r3, #0]
 801167a:	e001      	b.n	8011680 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801167c:	2300      	movs	r3, #0
 801167e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011680:	697b      	ldr	r3, [r7, #20]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3718      	adds	r7, #24
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20000240 	.word	0x20000240
 8011690:	20000220 	.word	0x20000220
 8011694:	2000011c 	.word	0x2000011c
 8011698:	200001d8 	.word	0x200001d8
 801169c:	20000118 	.word	0x20000118
 80116a0:	2000022c 	.word	0x2000022c

080116a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116a4:	b480      	push	{r7}
 80116a6:	b083      	sub	sp, #12
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116ac:	4b06      	ldr	r3, [pc, #24]	; (80116c8 <vTaskInternalSetTimeOutState+0x24>)
 80116ae:	681a      	ldr	r2, [r3, #0]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116b4:	4b05      	ldr	r3, [pc, #20]	; (80116cc <vTaskInternalSetTimeOutState+0x28>)
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	605a      	str	r2, [r3, #4]
}
 80116bc:	bf00      	nop
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	20000230 	.word	0x20000230
 80116cc:	2000021c 	.word	0x2000021c

080116d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b088      	sub	sp, #32
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10b      	bne.n	80116f8 <xTaskCheckForTimeOut+0x28>
 80116e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e4:	b672      	cpsid	i
 80116e6:	f383 8811 	msr	BASEPRI, r3
 80116ea:	f3bf 8f6f 	isb	sy
 80116ee:	f3bf 8f4f 	dsb	sy
 80116f2:	b662      	cpsie	i
 80116f4:	613b      	str	r3, [r7, #16]
 80116f6:	e7fe      	b.n	80116f6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10b      	bne.n	8011716 <xTaskCheckForTimeOut+0x46>
 80116fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011702:	b672      	cpsid	i
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	b662      	cpsie	i
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	e7fe      	b.n	8011714 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011716:	f000 fc57 	bl	8011fc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801171a:	4b1d      	ldr	r3, [pc, #116]	; (8011790 <xTaskCheckForTimeOut+0xc0>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	69ba      	ldr	r2, [r7, #24]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011732:	d102      	bne.n	801173a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011734:	2300      	movs	r3, #0
 8011736:	61fb      	str	r3, [r7, #28]
 8011738:	e023      	b.n	8011782 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	4b15      	ldr	r3, [pc, #84]	; (8011794 <xTaskCheckForTimeOut+0xc4>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	429a      	cmp	r2, r3
 8011744:	d007      	beq.n	8011756 <xTaskCheckForTimeOut+0x86>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	429a      	cmp	r2, r3
 801174e:	d302      	bcc.n	8011756 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011750:	2301      	movs	r3, #1
 8011752:	61fb      	str	r3, [r7, #28]
 8011754:	e015      	b.n	8011782 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	429a      	cmp	r2, r3
 801175e:	d20b      	bcs.n	8011778 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	1ad2      	subs	r2, r2, r3
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7ff ff99 	bl	80116a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011772:	2300      	movs	r3, #0
 8011774:	61fb      	str	r3, [r7, #28]
 8011776:	e004      	b.n	8011782 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	2200      	movs	r2, #0
 801177c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801177e:	2301      	movs	r3, #1
 8011780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011782:	f000 fc53 	bl	801202c <vPortExitCritical>

	return xReturn;
 8011786:	69fb      	ldr	r3, [r7, #28]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3720      	adds	r7, #32
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	2000021c 	.word	0x2000021c
 8011794:	20000230 	.word	0x20000230

08011798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011798:	b480      	push	{r7}
 801179a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801179c:	4b03      	ldr	r3, [pc, #12]	; (80117ac <vTaskMissedYield+0x14>)
 801179e:	2201      	movs	r2, #1
 80117a0:	601a      	str	r2, [r3, #0]
}
 80117a2:	bf00      	nop
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	2000022c 	.word	0x2000022c

080117b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117b8:	f000 f854 	bl	8011864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117bc:	4b07      	ldr	r3, [pc, #28]	; (80117dc <prvIdleTask+0x2c>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d907      	bls.n	80117d4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80117c4:	4b06      	ldr	r3, [pc, #24]	; (80117e0 <prvIdleTask+0x30>)
 80117c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80117d4:	f7fe f9d4 	bl	800fb80 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80117d8:	e7ee      	b.n	80117b8 <prvIdleTask+0x8>
 80117da:	bf00      	nop
 80117dc:	2000011c 	.word	0x2000011c
 80117e0:	e000ed04 	.word	0xe000ed04

080117e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117ea:	2300      	movs	r3, #0
 80117ec:	607b      	str	r3, [r7, #4]
 80117ee:	e00c      	b.n	801180a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	4613      	mov	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4a12      	ldr	r2, [pc, #72]	; (8011844 <prvInitialiseTaskLists+0x60>)
 80117fc:	4413      	add	r3, r2
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fe fb72 	bl	800fee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3301      	adds	r3, #1
 8011808:	607b      	str	r3, [r7, #4]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b06      	cmp	r3, #6
 801180e:	d9ef      	bls.n	80117f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011810:	480d      	ldr	r0, [pc, #52]	; (8011848 <prvInitialiseTaskLists+0x64>)
 8011812:	f7fe fb69 	bl	800fee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011816:	480d      	ldr	r0, [pc, #52]	; (801184c <prvInitialiseTaskLists+0x68>)
 8011818:	f7fe fb66 	bl	800fee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801181c:	480c      	ldr	r0, [pc, #48]	; (8011850 <prvInitialiseTaskLists+0x6c>)
 801181e:	f7fe fb63 	bl	800fee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011822:	480c      	ldr	r0, [pc, #48]	; (8011854 <prvInitialiseTaskLists+0x70>)
 8011824:	f7fe fb60 	bl	800fee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011828:	480b      	ldr	r0, [pc, #44]	; (8011858 <prvInitialiseTaskLists+0x74>)
 801182a:	f7fe fb5d 	bl	800fee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801182e:	4b0b      	ldr	r3, [pc, #44]	; (801185c <prvInitialiseTaskLists+0x78>)
 8011830:	4a05      	ldr	r2, [pc, #20]	; (8011848 <prvInitialiseTaskLists+0x64>)
 8011832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011834:	4b0a      	ldr	r3, [pc, #40]	; (8011860 <prvInitialiseTaskLists+0x7c>)
 8011836:	4a05      	ldr	r2, [pc, #20]	; (801184c <prvInitialiseTaskLists+0x68>)
 8011838:	601a      	str	r2, [r3, #0]
}
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	2000011c 	.word	0x2000011c
 8011848:	200001a8 	.word	0x200001a8
 801184c:	200001bc 	.word	0x200001bc
 8011850:	200001d8 	.word	0x200001d8
 8011854:	200001ec 	.word	0x200001ec
 8011858:	20000204 	.word	0x20000204
 801185c:	200001d0 	.word	0x200001d0
 8011860:	200001d4 	.word	0x200001d4

08011864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801186a:	e019      	b.n	80118a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801186c:	f000 fbac 	bl	8011fc8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011870:	4b0f      	ldr	r3, [pc, #60]	; (80118b0 <prvCheckTasksWaitingTermination+0x4c>)
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	3304      	adds	r3, #4
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe fbbd 	bl	800fffc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011882:	4b0c      	ldr	r3, [pc, #48]	; (80118b4 <prvCheckTasksWaitingTermination+0x50>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3b01      	subs	r3, #1
 8011888:	4a0a      	ldr	r2, [pc, #40]	; (80118b4 <prvCheckTasksWaitingTermination+0x50>)
 801188a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801188c:	4b0a      	ldr	r3, [pc, #40]	; (80118b8 <prvCheckTasksWaitingTermination+0x54>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3b01      	subs	r3, #1
 8011892:	4a09      	ldr	r2, [pc, #36]	; (80118b8 <prvCheckTasksWaitingTermination+0x54>)
 8011894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011896:	f000 fbc9 	bl	801202c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f80e 	bl	80118bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118a0:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <prvCheckTasksWaitingTermination+0x54>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d1e1      	bne.n	801186c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	200001ec 	.word	0x200001ec
 80118b4:	20000218 	.word	0x20000218
 80118b8:	20000200 	.word	0x20000200

080118bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 fd6b 	bl	80123a4 <vPortFree>
			vPortFree( pxTCB );
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	f000 fd68 	bl	80123a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118d4:	bf00      	nop
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118e2:	4b0f      	ldr	r3, [pc, #60]	; (8011920 <prvResetNextTaskUnblockTime+0x44>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d101      	bne.n	80118f0 <prvResetNextTaskUnblockTime+0x14>
 80118ec:	2301      	movs	r3, #1
 80118ee:	e000      	b.n	80118f2 <prvResetNextTaskUnblockTime+0x16>
 80118f0:	2300      	movs	r3, #0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d004      	beq.n	8011900 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118f6:	4b0b      	ldr	r3, [pc, #44]	; (8011924 <prvResetNextTaskUnblockTime+0x48>)
 80118f8:	f04f 32ff 	mov.w	r2, #4294967295
 80118fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118fe:	e008      	b.n	8011912 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011900:	4b07      	ldr	r3, [pc, #28]	; (8011920 <prvResetNextTaskUnblockTime+0x44>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68db      	ldr	r3, [r3, #12]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	4a05      	ldr	r2, [pc, #20]	; (8011924 <prvResetNextTaskUnblockTime+0x48>)
 8011910:	6013      	str	r3, [r2, #0]
}
 8011912:	bf00      	nop
 8011914:	370c      	adds	r7, #12
 8011916:	46bd      	mov	sp, r7
 8011918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	200001d0 	.word	0x200001d0
 8011924:	20000238 	.word	0x20000238

08011928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801192e:	4b0b      	ldr	r3, [pc, #44]	; (801195c <xTaskGetSchedulerState+0x34>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d102      	bne.n	801193c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011936:	2301      	movs	r3, #1
 8011938:	607b      	str	r3, [r7, #4]
 801193a:	e008      	b.n	801194e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801193c:	4b08      	ldr	r3, [pc, #32]	; (8011960 <xTaskGetSchedulerState+0x38>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d102      	bne.n	801194a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011944:	2302      	movs	r3, #2
 8011946:	607b      	str	r3, [r7, #4]
 8011948:	e001      	b.n	801194e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801194a:	2300      	movs	r3, #0
 801194c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801194e:	687b      	ldr	r3, [r7, #4]
	}
 8011950:	4618      	mov	r0, r3
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	20000224 	.word	0x20000224
 8011960:	20000240 	.word	0x20000240

08011964 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011970:	2300      	movs	r3, #0
 8011972:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d06e      	beq.n	8011a58 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801197e:	4b39      	ldr	r3, [pc, #228]	; (8011a64 <xTaskPriorityInherit+0x100>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011984:	429a      	cmp	r2, r3
 8011986:	d25e      	bcs.n	8011a46 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	2b00      	cmp	r3, #0
 801198e:	db06      	blt.n	801199e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011990:	4b34      	ldr	r3, [pc, #208]	; (8011a64 <xTaskPriorityInherit+0x100>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011996:	f1c3 0207 	rsb	r2, r3, #7
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	6959      	ldr	r1, [r3, #20]
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a6:	4613      	mov	r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	4413      	add	r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	4a2e      	ldr	r2, [pc, #184]	; (8011a68 <xTaskPriorityInherit+0x104>)
 80119b0:	4413      	add	r3, r2
 80119b2:	4299      	cmp	r1, r3
 80119b4:	d101      	bne.n	80119ba <xTaskPriorityInherit+0x56>
 80119b6:	2301      	movs	r3, #1
 80119b8:	e000      	b.n	80119bc <xTaskPriorityInherit+0x58>
 80119ba:	2300      	movs	r3, #0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d03a      	beq.n	8011a36 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	3304      	adds	r3, #4
 80119c4:	4618      	mov	r0, r3
 80119c6:	f7fe fb19 	bl	800fffc <uxListRemove>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d115      	bne.n	80119fc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119d4:	4924      	ldr	r1, [pc, #144]	; (8011a68 <xTaskPriorityInherit+0x104>)
 80119d6:	4613      	mov	r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	4413      	add	r3, r2
 80119dc:	009b      	lsls	r3, r3, #2
 80119de:	440b      	add	r3, r1
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10a      	bne.n	80119fc <xTaskPriorityInherit+0x98>
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ea:	2201      	movs	r2, #1
 80119ec:	fa02 f303 	lsl.w	r3, r2, r3
 80119f0:	43da      	mvns	r2, r3
 80119f2:	4b1e      	ldr	r3, [pc, #120]	; (8011a6c <xTaskPriorityInherit+0x108>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	4013      	ands	r3, r2
 80119f8:	4a1c      	ldr	r2, [pc, #112]	; (8011a6c <xTaskPriorityInherit+0x108>)
 80119fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119fc:	4b19      	ldr	r3, [pc, #100]	; (8011a64 <xTaskPriorityInherit+0x100>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	409a      	lsls	r2, r3
 8011a0e:	4b17      	ldr	r3, [pc, #92]	; (8011a6c <xTaskPriorityInherit+0x108>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	4313      	orrs	r3, r2
 8011a14:	4a15      	ldr	r2, [pc, #84]	; (8011a6c <xTaskPriorityInherit+0x108>)
 8011a16:	6013      	str	r3, [r2, #0]
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4a10      	ldr	r2, [pc, #64]	; (8011a68 <xTaskPriorityInherit+0x104>)
 8011a26:	441a      	add	r2, r3
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4610      	mov	r0, r2
 8011a30:	f7fe fa87 	bl	800ff42 <vListInsertEnd>
 8011a34:	e004      	b.n	8011a40 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a36:	4b0b      	ldr	r3, [pc, #44]	; (8011a64 <xTaskPriorityInherit+0x100>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a40:	2301      	movs	r3, #1
 8011a42:	60fb      	str	r3, [r7, #12]
 8011a44:	e008      	b.n	8011a58 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a4a:	4b06      	ldr	r3, [pc, #24]	; (8011a64 <xTaskPriorityInherit+0x100>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d201      	bcs.n	8011a58 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a54:	2301      	movs	r3, #1
 8011a56:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a58:	68fb      	ldr	r3, [r7, #12]
	}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3710      	adds	r7, #16
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	20000118 	.word	0x20000118
 8011a68:	2000011c 	.word	0x2000011c
 8011a6c:	20000220 	.word	0x20000220

08011a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d070      	beq.n	8011b68 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a86:	4b3b      	ldr	r3, [pc, #236]	; (8011b74 <xTaskPriorityDisinherit+0x104>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	693a      	ldr	r2, [r7, #16]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d00b      	beq.n	8011aa8 <xTaskPriorityDisinherit+0x38>
 8011a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a94:	b672      	cpsid	i
 8011a96:	f383 8811 	msr	BASEPRI, r3
 8011a9a:	f3bf 8f6f 	isb	sy
 8011a9e:	f3bf 8f4f 	dsb	sy
 8011aa2:	b662      	cpsie	i
 8011aa4:	60fb      	str	r3, [r7, #12]
 8011aa6:	e7fe      	b.n	8011aa6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d10b      	bne.n	8011ac8 <xTaskPriorityDisinherit+0x58>
 8011ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab4:	b672      	cpsid	i
 8011ab6:	f383 8811 	msr	BASEPRI, r3
 8011aba:	f3bf 8f6f 	isb	sy
 8011abe:	f3bf 8f4f 	dsb	sy
 8011ac2:	b662      	cpsie	i
 8011ac4:	60bb      	str	r3, [r7, #8]
 8011ac6:	e7fe      	b.n	8011ac6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011acc:	1e5a      	subs	r2, r3, #1
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d044      	beq.n	8011b68 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d140      	bne.n	8011b68 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fe fa86 	bl	800fffc <uxListRemove>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d115      	bne.n	8011b22 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011afa:	491f      	ldr	r1, [pc, #124]	; (8011b78 <xTaskPriorityDisinherit+0x108>)
 8011afc:	4613      	mov	r3, r2
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	4413      	add	r3, r2
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	440b      	add	r3, r1
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10a      	bne.n	8011b22 <xTaskPriorityDisinherit+0xb2>
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b10:	2201      	movs	r2, #1
 8011b12:	fa02 f303 	lsl.w	r3, r2, r3
 8011b16:	43da      	mvns	r2, r3
 8011b18:	4b18      	ldr	r3, [pc, #96]	; (8011b7c <xTaskPriorityDisinherit+0x10c>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	4a17      	ldr	r2, [pc, #92]	; (8011b7c <xTaskPriorityDisinherit+0x10c>)
 8011b20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b2e:	f1c3 0207 	rsb	r2, r3, #7
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	409a      	lsls	r2, r3
 8011b3e:	4b0f      	ldr	r3, [pc, #60]	; (8011b7c <xTaskPriorityDisinherit+0x10c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	4a0d      	ldr	r2, [pc, #52]	; (8011b7c <xTaskPriorityDisinherit+0x10c>)
 8011b46:	6013      	str	r3, [r2, #0]
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4a08      	ldr	r2, [pc, #32]	; (8011b78 <xTaskPriorityDisinherit+0x108>)
 8011b56:	441a      	add	r2, r3
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4610      	mov	r0, r2
 8011b60:	f7fe f9ef 	bl	800ff42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b64:	2301      	movs	r3, #1
 8011b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b68:	697b      	ldr	r3, [r7, #20]
	}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	20000118 	.word	0x20000118
 8011b78:	2000011c 	.word	0x2000011c
 8011b7c:	20000220 	.word	0x20000220

08011b80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b088      	sub	sp, #32
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
 8011b88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f000 808a 	beq.w	8011cae <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d10b      	bne.n	8011bba <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba6:	b672      	cpsid	i
 8011ba8:	f383 8811 	msr	BASEPRI, r3
 8011bac:	f3bf 8f6f 	isb	sy
 8011bb0:	f3bf 8f4f 	dsb	sy
 8011bb4:	b662      	cpsie	i
 8011bb6:	60fb      	str	r3, [r7, #12]
 8011bb8:	e7fe      	b.n	8011bb8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bbe:	683a      	ldr	r2, [r7, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d902      	bls.n	8011bca <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	61fb      	str	r3, [r7, #28]
 8011bc8:	e002      	b.n	8011bd0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011bca:	69bb      	ldr	r3, [r7, #24]
 8011bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd4:	69fa      	ldr	r2, [r7, #28]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d069      	beq.n	8011cae <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bde:	697a      	ldr	r2, [r7, #20]
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d164      	bne.n	8011cae <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011be4:	4b34      	ldr	r3, [pc, #208]	; (8011cb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	69ba      	ldr	r2, [r7, #24]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d10b      	bne.n	8011c06 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf2:	b672      	cpsid	i
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	b662      	cpsie	i
 8011c02:	60bb      	str	r3, [r7, #8]
 8011c04:	e7fe      	b.n	8011c04 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	db04      	blt.n	8011c24 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	f1c3 0207 	rsb	r2, r3, #7
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	6959      	ldr	r1, [r3, #20]
 8011c28:	693a      	ldr	r2, [r7, #16]
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	4413      	add	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4a22      	ldr	r2, [pc, #136]	; (8011cbc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011c34:	4413      	add	r3, r2
 8011c36:	4299      	cmp	r1, r3
 8011c38:	d101      	bne.n	8011c3e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e000      	b.n	8011c40 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d034      	beq.n	8011cae <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	3304      	adds	r3, #4
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fe f9d7 	bl	800fffc <uxListRemove>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d115      	bne.n	8011c80 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c54:	69bb      	ldr	r3, [r7, #24]
 8011c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c58:	4918      	ldr	r1, [pc, #96]	; (8011cbc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	009b      	lsls	r3, r3, #2
 8011c5e:	4413      	add	r3, r2
 8011c60:	009b      	lsls	r3, r3, #2
 8011c62:	440b      	add	r3, r1
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d10a      	bne.n	8011c80 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6e:	2201      	movs	r2, #1
 8011c70:	fa02 f303 	lsl.w	r3, r2, r3
 8011c74:	43da      	mvns	r2, r3
 8011c76:	4b12      	ldr	r3, [pc, #72]	; (8011cc0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	4a10      	ldr	r2, [pc, #64]	; (8011cc0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011c7e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c84:	2201      	movs	r2, #1
 8011c86:	409a      	lsls	r2, r3
 8011c88:	4b0d      	ldr	r3, [pc, #52]	; (8011cc0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	4a0c      	ldr	r2, [pc, #48]	; (8011cc0 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011c90:	6013      	str	r3, [r2, #0]
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c96:	4613      	mov	r3, r2
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	4413      	add	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4a07      	ldr	r2, [pc, #28]	; (8011cbc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011ca0:	441a      	add	r2, r3
 8011ca2:	69bb      	ldr	r3, [r7, #24]
 8011ca4:	3304      	adds	r3, #4
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	4610      	mov	r0, r2
 8011caa:	f7fe f94a 	bl	800ff42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011cae:	bf00      	nop
 8011cb0:	3720      	adds	r7, #32
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20000118 	.word	0x20000118
 8011cbc:	2000011c 	.word	0x2000011c
 8011cc0:	20000220 	.word	0x20000220

08011cc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011cc4:	b480      	push	{r7}
 8011cc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011cc8:	4b07      	ldr	r3, [pc, #28]	; (8011ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d004      	beq.n	8011cda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011cd0:	4b05      	ldr	r3, [pc, #20]	; (8011ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011cd6:	3201      	adds	r2, #1
 8011cd8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011cda:	4b03      	ldr	r3, [pc, #12]	; (8011ce8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
	}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce6:	4770      	bx	lr
 8011ce8:	20000118 	.word	0x20000118

08011cec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b084      	sub	sp, #16
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011cf6:	4b29      	ldr	r3, [pc, #164]	; (8011d9c <prvAddCurrentTaskToDelayedList+0xb0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cfc:	4b28      	ldr	r3, [pc, #160]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7fe f97a 	bl	800fffc <uxListRemove>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10b      	bne.n	8011d26 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011d0e:	4b24      	ldr	r3, [pc, #144]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d14:	2201      	movs	r2, #1
 8011d16:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1a:	43da      	mvns	r2, r3
 8011d1c:	4b21      	ldr	r3, [pc, #132]	; (8011da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	4013      	ands	r3, r2
 8011d22:	4a20      	ldr	r2, [pc, #128]	; (8011da4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d24:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2c:	d10a      	bne.n	8011d44 <prvAddCurrentTaskToDelayedList+0x58>
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d007      	beq.n	8011d44 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d34:	4b1a      	ldr	r3, [pc, #104]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3304      	adds	r3, #4
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	481a      	ldr	r0, [pc, #104]	; (8011da8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011d3e:	f7fe f900 	bl	800ff42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d42:	e026      	b.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	4413      	add	r3, r2
 8011d4a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d4c:	4b14      	ldr	r3, [pc, #80]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68ba      	ldr	r2, [r7, #8]
 8011d52:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d209      	bcs.n	8011d70 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d5c:	4b13      	ldr	r3, [pc, #76]	; (8011dac <prvAddCurrentTaskToDelayedList+0xc0>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	4b0f      	ldr	r3, [pc, #60]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	3304      	adds	r3, #4
 8011d66:	4619      	mov	r1, r3
 8011d68:	4610      	mov	r0, r2
 8011d6a:	f7fe f90e 	bl	800ff8a <vListInsert>
}
 8011d6e:	e010      	b.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d70:	4b0f      	ldr	r3, [pc, #60]	; (8011db0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	4b0a      	ldr	r3, [pc, #40]	; (8011da0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3304      	adds	r3, #4
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	4610      	mov	r0, r2
 8011d7e:	f7fe f904 	bl	800ff8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d82:	4b0c      	ldr	r3, [pc, #48]	; (8011db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d202      	bcs.n	8011d92 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011d8c:	4a09      	ldr	r2, [pc, #36]	; (8011db4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	6013      	str	r3, [r2, #0]
}
 8011d92:	bf00      	nop
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	2000021c 	.word	0x2000021c
 8011da0:	20000118 	.word	0x20000118
 8011da4:	20000220 	.word	0x20000220
 8011da8:	20000204 	.word	0x20000204
 8011dac:	200001d4 	.word	0x200001d4
 8011db0:	200001d0 	.word	0x200001d0
 8011db4:	20000238 	.word	0x20000238

08011db8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011db8:	b480      	push	{r7}
 8011dba:	b085      	sub	sp, #20
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	3b04      	subs	r3, #4
 8011dc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	3b04      	subs	r3, #4
 8011dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	f023 0201 	bic.w	r2, r3, #1
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	3b04      	subs	r3, #4
 8011de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011de8:	4a0c      	ldr	r2, [pc, #48]	; (8011e1c <pxPortInitialiseStack+0x64>)
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	3b14      	subs	r3, #20
 8011df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3b04      	subs	r3, #4
 8011dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f06f 0202 	mvn.w	r2, #2
 8011e06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	3b20      	subs	r3, #32
 8011e0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3714      	adds	r7, #20
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr
 8011e1c:	08011e21 	.word	0x08011e21

08011e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e20:	b480      	push	{r7}
 8011e22:	b085      	sub	sp, #20
 8011e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011e2a:	4b13      	ldr	r3, [pc, #76]	; (8011e78 <prvTaskExitError+0x58>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e32:	d00b      	beq.n	8011e4c <prvTaskExitError+0x2c>
 8011e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e38:	b672      	cpsid	i
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	b662      	cpsie	i
 8011e48:	60fb      	str	r3, [r7, #12]
 8011e4a:	e7fe      	b.n	8011e4a <prvTaskExitError+0x2a>
 8011e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e50:	b672      	cpsid	i
 8011e52:	f383 8811 	msr	BASEPRI, r3
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	f3bf 8f4f 	dsb	sy
 8011e5e:	b662      	cpsie	i
 8011e60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011e62:	bf00      	nop
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d0fc      	beq.n	8011e64 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011e6a:	bf00      	nop
 8011e6c:	3714      	adds	r7, #20
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr
 8011e76:	bf00      	nop
 8011e78:	20000050 	.word	0x20000050
 8011e7c:	00000000 	.word	0x00000000

08011e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011e80:	4b07      	ldr	r3, [pc, #28]	; (8011ea0 <pxCurrentTCBConst2>)
 8011e82:	6819      	ldr	r1, [r3, #0]
 8011e84:	6808      	ldr	r0, [r1, #0]
 8011e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e8a:	f380 8809 	msr	PSP, r0
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f04f 0000 	mov.w	r0, #0
 8011e96:	f380 8811 	msr	BASEPRI, r0
 8011e9a:	4770      	bx	lr
 8011e9c:	f3af 8000 	nop.w

08011ea0 <pxCurrentTCBConst2>:
 8011ea0:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011ea4:	bf00      	nop
 8011ea6:	bf00      	nop

08011ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011ea8:	4808      	ldr	r0, [pc, #32]	; (8011ecc <prvPortStartFirstTask+0x24>)
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	6800      	ldr	r0, [r0, #0]
 8011eae:	f380 8808 	msr	MSP, r0
 8011eb2:	f04f 0000 	mov.w	r0, #0
 8011eb6:	f380 8814 	msr	CONTROL, r0
 8011eba:	b662      	cpsie	i
 8011ebc:	b661      	cpsie	f
 8011ebe:	f3bf 8f4f 	dsb	sy
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	df00      	svc	0
 8011ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011eca:	bf00      	nop
 8011ecc:	e000ed08 	.word	0xe000ed08

08011ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011ed6:	4b36      	ldr	r3, [pc, #216]	; (8011fb0 <xPortStartScheduler+0xe0>)
 8011ed8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	22ff      	movs	r2, #255	; 0xff
 8011ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	b2db      	uxtb	r3, r3
 8011eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011ef0:	78fb      	ldrb	r3, [r7, #3]
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	4b2e      	ldr	r3, [pc, #184]	; (8011fb4 <xPortStartScheduler+0xe4>)
 8011efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011efe:	4b2e      	ldr	r3, [pc, #184]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f00:	2207      	movs	r2, #7
 8011f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f04:	e009      	b.n	8011f1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011f06:	4b2c      	ldr	r3, [pc, #176]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	4a2a      	ldr	r2, [pc, #168]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f10:	78fb      	ldrb	r3, [r7, #3]
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	b2db      	uxtb	r3, r3
 8011f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f1a:	78fb      	ldrb	r3, [r7, #3]
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f22:	2b80      	cmp	r3, #128	; 0x80
 8011f24:	d0ef      	beq.n	8011f06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011f26:	4b24      	ldr	r3, [pc, #144]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	f1c3 0307 	rsb	r3, r3, #7
 8011f2e:	2b04      	cmp	r3, #4
 8011f30:	d00b      	beq.n	8011f4a <xPortStartScheduler+0x7a>
 8011f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f36:	b672      	cpsid	i
 8011f38:	f383 8811 	msr	BASEPRI, r3
 8011f3c:	f3bf 8f6f 	isb	sy
 8011f40:	f3bf 8f4f 	dsb	sy
 8011f44:	b662      	cpsie	i
 8011f46:	60bb      	str	r3, [r7, #8]
 8011f48:	e7fe      	b.n	8011f48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011f4a:	4b1b      	ldr	r3, [pc, #108]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	021b      	lsls	r3, r3, #8
 8011f50:	4a19      	ldr	r2, [pc, #100]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011f54:	4b18      	ldr	r3, [pc, #96]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011f5c:	4a16      	ldr	r2, [pc, #88]	; (8011fb8 <xPortStartScheduler+0xe8>)
 8011f5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	b2da      	uxtb	r2, r3
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011f68:	4b14      	ldr	r3, [pc, #80]	; (8011fbc <xPortStartScheduler+0xec>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a13      	ldr	r2, [pc, #76]	; (8011fbc <xPortStartScheduler+0xec>)
 8011f6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011f72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011f74:	4b11      	ldr	r3, [pc, #68]	; (8011fbc <xPortStartScheduler+0xec>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a10      	ldr	r2, [pc, #64]	; (8011fbc <xPortStartScheduler+0xec>)
 8011f7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011f7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011f80:	f000 f8d4 	bl	801212c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011f84:	4b0e      	ldr	r3, [pc, #56]	; (8011fc0 <xPortStartScheduler+0xf0>)
 8011f86:	2200      	movs	r2, #0
 8011f88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011f8a:	f000 f8f3 	bl	8012174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011f8e:	4b0d      	ldr	r3, [pc, #52]	; (8011fc4 <xPortStartScheduler+0xf4>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	4a0c      	ldr	r2, [pc, #48]	; (8011fc4 <xPortStartScheduler+0xf4>)
 8011f94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011f98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011f9a:	f7ff ff85 	bl	8011ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011f9e:	f7ff fa69 	bl	8011474 <vTaskSwitchContext>
	prvTaskExitError();
 8011fa2:	f7ff ff3d 	bl	8011e20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3710      	adds	r7, #16
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	e000e400 	.word	0xe000e400
 8011fb4:	20000244 	.word	0x20000244
 8011fb8:	20000248 	.word	0x20000248
 8011fbc:	e000ed20 	.word	0xe000ed20
 8011fc0:	20000050 	.word	0x20000050
 8011fc4:	e000ef34 	.word	0xe000ef34

08011fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd2:	b672      	cpsid	i
 8011fd4:	f383 8811 	msr	BASEPRI, r3
 8011fd8:	f3bf 8f6f 	isb	sy
 8011fdc:	f3bf 8f4f 	dsb	sy
 8011fe0:	b662      	cpsie	i
 8011fe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011fe4:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <vPortEnterCritical+0x5c>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	3301      	adds	r3, #1
 8011fea:	4a0e      	ldr	r2, [pc, #56]	; (8012024 <vPortEnterCritical+0x5c>)
 8011fec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011fee:	4b0d      	ldr	r3, [pc, #52]	; (8012024 <vPortEnterCritical+0x5c>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b01      	cmp	r3, #1
 8011ff4:	d110      	bne.n	8012018 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ff6:	4b0c      	ldr	r3, [pc, #48]	; (8012028 <vPortEnterCritical+0x60>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d00b      	beq.n	8012018 <vPortEnterCritical+0x50>
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	b672      	cpsid	i
 8012006:	f383 8811 	msr	BASEPRI, r3
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	b662      	cpsie	i
 8012014:	603b      	str	r3, [r7, #0]
 8012016:	e7fe      	b.n	8012016 <vPortEnterCritical+0x4e>
	}
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr
 8012024:	20000050 	.word	0x20000050
 8012028:	e000ed04 	.word	0xe000ed04

0801202c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801202c:	b480      	push	{r7}
 801202e:	b083      	sub	sp, #12
 8012030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012032:	4b12      	ldr	r3, [pc, #72]	; (801207c <vPortExitCritical+0x50>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10b      	bne.n	8012052 <vPortExitCritical+0x26>
 801203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203e:	b672      	cpsid	i
 8012040:	f383 8811 	msr	BASEPRI, r3
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	f3bf 8f4f 	dsb	sy
 801204c:	b662      	cpsie	i
 801204e:	607b      	str	r3, [r7, #4]
 8012050:	e7fe      	b.n	8012050 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012052:	4b0a      	ldr	r3, [pc, #40]	; (801207c <vPortExitCritical+0x50>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	3b01      	subs	r3, #1
 8012058:	4a08      	ldr	r2, [pc, #32]	; (801207c <vPortExitCritical+0x50>)
 801205a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801205c:	4b07      	ldr	r3, [pc, #28]	; (801207c <vPortExitCritical+0x50>)
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d104      	bne.n	801206e <vPortExitCritical+0x42>
 8012064:	2300      	movs	r3, #0
 8012066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801206e:	bf00      	nop
 8012070:	370c      	adds	r7, #12
 8012072:	46bd      	mov	sp, r7
 8012074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012078:	4770      	bx	lr
 801207a:	bf00      	nop
 801207c:	20000050 	.word	0x20000050

08012080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012080:	f3ef 8009 	mrs	r0, PSP
 8012084:	f3bf 8f6f 	isb	sy
 8012088:	4b15      	ldr	r3, [pc, #84]	; (80120e0 <pxCurrentTCBConst>)
 801208a:	681a      	ldr	r2, [r3, #0]
 801208c:	f01e 0f10 	tst.w	lr, #16
 8012090:	bf08      	it	eq
 8012092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209a:	6010      	str	r0, [r2, #0]
 801209c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80120a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80120a4:	b672      	cpsid	i
 80120a6:	f380 8811 	msr	BASEPRI, r0
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	f3bf 8f6f 	isb	sy
 80120b2:	b662      	cpsie	i
 80120b4:	f7ff f9de 	bl	8011474 <vTaskSwitchContext>
 80120b8:	f04f 0000 	mov.w	r0, #0
 80120bc:	f380 8811 	msr	BASEPRI, r0
 80120c0:	bc09      	pop	{r0, r3}
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	6808      	ldr	r0, [r1, #0]
 80120c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ca:	f01e 0f10 	tst.w	lr, #16
 80120ce:	bf08      	it	eq
 80120d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80120d4:	f380 8809 	msr	PSP, r0
 80120d8:	f3bf 8f6f 	isb	sy
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop

080120e0 <pxCurrentTCBConst>:
 80120e0:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80120e4:	bf00      	nop
 80120e6:	bf00      	nop

080120e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
	__asm volatile
 80120ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f2:	b672      	cpsid	i
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	b662      	cpsie	i
 8012102:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012104:	f7ff f8ba 	bl	801127c <xTaskIncrementTick>
 8012108:	4603      	mov	r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	d003      	beq.n	8012116 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801210e:	4b06      	ldr	r3, [pc, #24]	; (8012128 <SysTick_Handler+0x40>)
 8012110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	2300      	movs	r3, #0
 8012118:	603b      	str	r3, [r7, #0]
	__asm volatile
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012120:	bf00      	nop
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801212c:	b480      	push	{r7}
 801212e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012130:	4b0b      	ldr	r3, [pc, #44]	; (8012160 <vPortSetupTimerInterrupt+0x34>)
 8012132:	2200      	movs	r2, #0
 8012134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012136:	4b0b      	ldr	r3, [pc, #44]	; (8012164 <vPortSetupTimerInterrupt+0x38>)
 8012138:	2200      	movs	r2, #0
 801213a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801213c:	4b0a      	ldr	r3, [pc, #40]	; (8012168 <vPortSetupTimerInterrupt+0x3c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4a0a      	ldr	r2, [pc, #40]	; (801216c <vPortSetupTimerInterrupt+0x40>)
 8012142:	fba2 2303 	umull	r2, r3, r2, r3
 8012146:	099b      	lsrs	r3, r3, #6
 8012148:	4a09      	ldr	r2, [pc, #36]	; (8012170 <vPortSetupTimerInterrupt+0x44>)
 801214a:	3b01      	subs	r3, #1
 801214c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801214e:	4b04      	ldr	r3, [pc, #16]	; (8012160 <vPortSetupTimerInterrupt+0x34>)
 8012150:	2207      	movs	r2, #7
 8012152:	601a      	str	r2, [r3, #0]
}
 8012154:	bf00      	nop
 8012156:	46bd      	mov	sp, r7
 8012158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop
 8012160:	e000e010 	.word	0xe000e010
 8012164:	e000e018 	.word	0xe000e018
 8012168:	20000064 	.word	0x20000064
 801216c:	10624dd3 	.word	0x10624dd3
 8012170:	e000e014 	.word	0xe000e014

08012174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012184 <vPortEnableVFP+0x10>
 8012178:	6801      	ldr	r1, [r0, #0]
 801217a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801217e:	6001      	str	r1, [r0, #0]
 8012180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012182:	bf00      	nop
 8012184:	e000ed88 	.word	0xe000ed88

08012188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801218e:	f3ef 8305 	mrs	r3, IPSR
 8012192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2b0f      	cmp	r3, #15
 8012198:	d915      	bls.n	80121c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801219a:	4a18      	ldr	r2, [pc, #96]	; (80121fc <vPortValidateInterruptPriority+0x74>)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	4413      	add	r3, r2
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80121a4:	4b16      	ldr	r3, [pc, #88]	; (8012200 <vPortValidateInterruptPriority+0x78>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	7afa      	ldrb	r2, [r7, #11]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d20b      	bcs.n	80121c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80121ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b2:	b672      	cpsid	i
 80121b4:	f383 8811 	msr	BASEPRI, r3
 80121b8:	f3bf 8f6f 	isb	sy
 80121bc:	f3bf 8f4f 	dsb	sy
 80121c0:	b662      	cpsie	i
 80121c2:	607b      	str	r3, [r7, #4]
 80121c4:	e7fe      	b.n	80121c4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80121c6:	4b0f      	ldr	r3, [pc, #60]	; (8012204 <vPortValidateInterruptPriority+0x7c>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80121ce:	4b0e      	ldr	r3, [pc, #56]	; (8012208 <vPortValidateInterruptPriority+0x80>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d90b      	bls.n	80121ee <vPortValidateInterruptPriority+0x66>
 80121d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121da:	b672      	cpsid	i
 80121dc:	f383 8811 	msr	BASEPRI, r3
 80121e0:	f3bf 8f6f 	isb	sy
 80121e4:	f3bf 8f4f 	dsb	sy
 80121e8:	b662      	cpsie	i
 80121ea:	603b      	str	r3, [r7, #0]
 80121ec:	e7fe      	b.n	80121ec <vPortValidateInterruptPriority+0x64>
	}
 80121ee:	bf00      	nop
 80121f0:	3714      	adds	r7, #20
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	e000e3f0 	.word	0xe000e3f0
 8012200:	20000244 	.word	0x20000244
 8012204:	e000ed0c 	.word	0xe000ed0c
 8012208:	20000248 	.word	0x20000248

0801220c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b08a      	sub	sp, #40	; 0x28
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012214:	2300      	movs	r3, #0
 8012216:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012218:	f7fe ff62 	bl	80110e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801221c:	4b5c      	ldr	r3, [pc, #368]	; (8012390 <pvPortMalloc+0x184>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d101      	bne.n	8012228 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012224:	f000 f91a 	bl	801245c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012228:	4b5a      	ldr	r3, [pc, #360]	; (8012394 <pvPortMalloc+0x188>)
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	4013      	ands	r3, r2
 8012230:	2b00      	cmp	r3, #0
 8012232:	f040 8090 	bne.w	8012356 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d01e      	beq.n	801227a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801223c:	2208      	movs	r2, #8
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	4413      	add	r3, r2
 8012242:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f003 0307 	and.w	r3, r3, #7
 801224a:	2b00      	cmp	r3, #0
 801224c:	d015      	beq.n	801227a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f023 0307 	bic.w	r3, r3, #7
 8012254:	3308      	adds	r3, #8
 8012256:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f003 0307 	and.w	r3, r3, #7
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00b      	beq.n	801227a <pvPortMalloc+0x6e>
 8012262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012266:	b672      	cpsid	i
 8012268:	f383 8811 	msr	BASEPRI, r3
 801226c:	f3bf 8f6f 	isb	sy
 8012270:	f3bf 8f4f 	dsb	sy
 8012274:	b662      	cpsie	i
 8012276:	617b      	str	r3, [r7, #20]
 8012278:	e7fe      	b.n	8012278 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d06a      	beq.n	8012356 <pvPortMalloc+0x14a>
 8012280:	4b45      	ldr	r3, [pc, #276]	; (8012398 <pvPortMalloc+0x18c>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	429a      	cmp	r2, r3
 8012288:	d865      	bhi.n	8012356 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801228a:	4b44      	ldr	r3, [pc, #272]	; (801239c <pvPortMalloc+0x190>)
 801228c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801228e:	4b43      	ldr	r3, [pc, #268]	; (801239c <pvPortMalloc+0x190>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012294:	e004      	b.n	80122a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012298:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80122a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d903      	bls.n	80122b2 <pvPortMalloc+0xa6>
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d1f1      	bne.n	8012296 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80122b2:	4b37      	ldr	r3, [pc, #220]	; (8012390 <pvPortMalloc+0x184>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d04c      	beq.n	8012356 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80122bc:	6a3b      	ldr	r3, [r7, #32]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2208      	movs	r2, #8
 80122c2:	4413      	add	r3, r2
 80122c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80122c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	6a3b      	ldr	r3, [r7, #32]
 80122cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80122ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	1ad2      	subs	r2, r2, r3
 80122d6:	2308      	movs	r3, #8
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	429a      	cmp	r2, r3
 80122dc:	d920      	bls.n	8012320 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80122de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	4413      	add	r3, r2
 80122e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	f003 0307 	and.w	r3, r3, #7
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00b      	beq.n	8012308 <pvPortMalloc+0xfc>
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	b672      	cpsid	i
 80122f6:	f383 8811 	msr	BASEPRI, r3
 80122fa:	f3bf 8f6f 	isb	sy
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	b662      	cpsie	i
 8012304:	613b      	str	r3, [r7, #16]
 8012306:	e7fe      	b.n	8012306 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	1ad2      	subs	r2, r2, r3
 8012310:	69bb      	ldr	r3, [r7, #24]
 8012312:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801231a:	69b8      	ldr	r0, [r7, #24]
 801231c:	f000 f900 	bl	8012520 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012320:	4b1d      	ldr	r3, [pc, #116]	; (8012398 <pvPortMalloc+0x18c>)
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	4a1b      	ldr	r2, [pc, #108]	; (8012398 <pvPortMalloc+0x18c>)
 801232c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801232e:	4b1a      	ldr	r3, [pc, #104]	; (8012398 <pvPortMalloc+0x18c>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	4b1b      	ldr	r3, [pc, #108]	; (80123a0 <pvPortMalloc+0x194>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	429a      	cmp	r2, r3
 8012338:	d203      	bcs.n	8012342 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801233a:	4b17      	ldr	r3, [pc, #92]	; (8012398 <pvPortMalloc+0x18c>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	4a18      	ldr	r2, [pc, #96]	; (80123a0 <pvPortMalloc+0x194>)
 8012340:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	4b13      	ldr	r3, [pc, #76]	; (8012394 <pvPortMalloc+0x188>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	431a      	orrs	r2, r3
 801234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	2200      	movs	r2, #0
 8012354:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012356:	f7fe fed1 	bl	80110fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d101      	bne.n	8012364 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012360:	f7fd fc07 	bl	800fb72 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	f003 0307 	and.w	r3, r3, #7
 801236a:	2b00      	cmp	r3, #0
 801236c:	d00b      	beq.n	8012386 <pvPortMalloc+0x17a>
 801236e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012372:	b672      	cpsid	i
 8012374:	f383 8811 	msr	BASEPRI, r3
 8012378:	f3bf 8f6f 	isb	sy
 801237c:	f3bf 8f4f 	dsb	sy
 8012380:	b662      	cpsie	i
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	e7fe      	b.n	8012384 <pvPortMalloc+0x178>
	return pvReturn;
 8012386:	69fb      	ldr	r3, [r7, #28]
}
 8012388:	4618      	mov	r0, r3
 801238a:	3728      	adds	r7, #40	; 0x28
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}
 8012390:	20008254 	.word	0x20008254
 8012394:	20008260 	.word	0x20008260
 8012398:	20008258 	.word	0x20008258
 801239c:	2000824c 	.word	0x2000824c
 80123a0:	2000825c 	.word	0x2000825c

080123a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b086      	sub	sp, #24
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d04a      	beq.n	801244c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80123b6:	2308      	movs	r3, #8
 80123b8:	425b      	negs	r3, r3
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	4413      	add	r3, r2
 80123be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	685a      	ldr	r2, [r3, #4]
 80123c8:	4b22      	ldr	r3, [pc, #136]	; (8012454 <vPortFree+0xb0>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	4013      	ands	r3, r2
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10b      	bne.n	80123ea <vPortFree+0x46>
 80123d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d6:	b672      	cpsid	i
 80123d8:	f383 8811 	msr	BASEPRI, r3
 80123dc:	f3bf 8f6f 	isb	sy
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	b662      	cpsie	i
 80123e6:	60fb      	str	r3, [r7, #12]
 80123e8:	e7fe      	b.n	80123e8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d00b      	beq.n	801240a <vPortFree+0x66>
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	b672      	cpsid	i
 80123f8:	f383 8811 	msr	BASEPRI, r3
 80123fc:	f3bf 8f6f 	isb	sy
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	b662      	cpsie	i
 8012406:	60bb      	str	r3, [r7, #8]
 8012408:	e7fe      	b.n	8012408 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	4b11      	ldr	r3, [pc, #68]	; (8012454 <vPortFree+0xb0>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	4013      	ands	r3, r2
 8012414:	2b00      	cmp	r3, #0
 8012416:	d019      	beq.n	801244c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d115      	bne.n	801244c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	685a      	ldr	r2, [r3, #4]
 8012424:	4b0b      	ldr	r3, [pc, #44]	; (8012454 <vPortFree+0xb0>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	43db      	mvns	r3, r3
 801242a:	401a      	ands	r2, r3
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012430:	f7fe fe56 	bl	80110e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	685a      	ldr	r2, [r3, #4]
 8012438:	4b07      	ldr	r3, [pc, #28]	; (8012458 <vPortFree+0xb4>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	4413      	add	r3, r2
 801243e:	4a06      	ldr	r2, [pc, #24]	; (8012458 <vPortFree+0xb4>)
 8012440:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012442:	6938      	ldr	r0, [r7, #16]
 8012444:	f000 f86c 	bl	8012520 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012448:	f7fe fe58 	bl	80110fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801244c:	bf00      	nop
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	20008260 	.word	0x20008260
 8012458:	20008258 	.word	0x20008258

0801245c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801245c:	b480      	push	{r7}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012466:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012468:	4b27      	ldr	r3, [pc, #156]	; (8012508 <prvHeapInit+0xac>)
 801246a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f003 0307 	and.w	r3, r3, #7
 8012472:	2b00      	cmp	r3, #0
 8012474:	d00c      	beq.n	8012490 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	3307      	adds	r3, #7
 801247a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	f023 0307 	bic.w	r3, r3, #7
 8012482:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012484:	68ba      	ldr	r2, [r7, #8]
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	1ad3      	subs	r3, r2, r3
 801248a:	4a1f      	ldr	r2, [pc, #124]	; (8012508 <prvHeapInit+0xac>)
 801248c:	4413      	add	r3, r2
 801248e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012494:	4a1d      	ldr	r2, [pc, #116]	; (801250c <prvHeapInit+0xb0>)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801249a:	4b1c      	ldr	r3, [pc, #112]	; (801250c <prvHeapInit+0xb0>)
 801249c:	2200      	movs	r2, #0
 801249e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	68ba      	ldr	r2, [r7, #8]
 80124a4:	4413      	add	r3, r2
 80124a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80124a8:	2208      	movs	r2, #8
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	1a9b      	subs	r3, r3, r2
 80124ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f023 0307 	bic.w	r3, r3, #7
 80124b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	4a15      	ldr	r2, [pc, #84]	; (8012510 <prvHeapInit+0xb4>)
 80124bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80124be:	4b14      	ldr	r3, [pc, #80]	; (8012510 <prvHeapInit+0xb4>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2200      	movs	r2, #0
 80124c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80124c6:	4b12      	ldr	r3, [pc, #72]	; (8012510 <prvHeapInit+0xb4>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2200      	movs	r2, #0
 80124cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	1ad2      	subs	r2, r2, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80124dc:	4b0c      	ldr	r3, [pc, #48]	; (8012510 <prvHeapInit+0xb4>)
 80124de:	681a      	ldr	r2, [r3, #0]
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	4a0a      	ldr	r2, [pc, #40]	; (8012514 <prvHeapInit+0xb8>)
 80124ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	4a09      	ldr	r2, [pc, #36]	; (8012518 <prvHeapInit+0xbc>)
 80124f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80124f4:	4b09      	ldr	r3, [pc, #36]	; (801251c <prvHeapInit+0xc0>)
 80124f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80124fa:	601a      	str	r2, [r3, #0]
}
 80124fc:	bf00      	nop
 80124fe:	3714      	adds	r7, #20
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr
 8012508:	2000024c 	.word	0x2000024c
 801250c:	2000824c 	.word	0x2000824c
 8012510:	20008254 	.word	0x20008254
 8012514:	2000825c 	.word	0x2000825c
 8012518:	20008258 	.word	0x20008258
 801251c:	20008260 	.word	0x20008260

08012520 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012528:	4b28      	ldr	r3, [pc, #160]	; (80125cc <prvInsertBlockIntoFreeList+0xac>)
 801252a:	60fb      	str	r3, [r7, #12]
 801252c:	e002      	b.n	8012534 <prvInsertBlockIntoFreeList+0x14>
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	60fb      	str	r3, [r7, #12]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	429a      	cmp	r2, r3
 801253c:	d8f7      	bhi.n	801252e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	4413      	add	r3, r2
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	429a      	cmp	r2, r3
 801254e:	d108      	bne.n	8012562 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	685a      	ldr	r2, [r3, #4]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	685b      	ldr	r3, [r3, #4]
 8012558:	441a      	add	r2, r3
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	441a      	add	r2, r3
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	429a      	cmp	r2, r3
 8012574:	d118      	bne.n	80125a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <prvInsertBlockIntoFreeList+0xb0>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	429a      	cmp	r2, r3
 8012580:	d00d      	beq.n	801259e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685a      	ldr	r2, [r3, #4]
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	441a      	add	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	601a      	str	r2, [r3, #0]
 801259c:	e008      	b.n	80125b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801259e:	4b0c      	ldr	r3, [pc, #48]	; (80125d0 <prvInsertBlockIntoFreeList+0xb0>)
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	601a      	str	r2, [r3, #0]
 80125a6:	e003      	b.n	80125b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d002      	beq.n	80125be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80125be:	bf00      	nop
 80125c0:	3714      	adds	r7, #20
 80125c2:	46bd      	mov	sp, r7
 80125c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c8:	4770      	bx	lr
 80125ca:	bf00      	nop
 80125cc:	2000824c 	.word	0x2000824c
 80125d0:	20008254 	.word	0x20008254

080125d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b08c      	sub	sp, #48	; 0x30
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	4a51      	ldr	r2, [pc, #324]	; (8012724 <I2Cx_MspInit+0x150>)
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d14d      	bne.n	8012680 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80125e4:	4b50      	ldr	r3, [pc, #320]	; (8012728 <I2Cx_MspInit+0x154>)
 80125e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125e8:	4a4f      	ldr	r2, [pc, #316]	; (8012728 <I2Cx_MspInit+0x154>)
 80125ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ee:	6313      	str	r3, [r2, #48]	; 0x30
 80125f0:	4b4d      	ldr	r3, [pc, #308]	; (8012728 <I2Cx_MspInit+0x154>)
 80125f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125f8:	61bb      	str	r3, [r7, #24]
 80125fa:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80125fc:	2380      	movs	r3, #128	; 0x80
 80125fe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8012600:	2312      	movs	r3, #18
 8012602:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8012604:	2300      	movs	r3, #0
 8012606:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8012608:	2302      	movs	r3, #2
 801260a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 801260c:	2304      	movs	r3, #4
 801260e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8012610:	f107 031c 	add.w	r3, r7, #28
 8012614:	4619      	mov	r1, r3
 8012616:	4845      	ldr	r0, [pc, #276]	; (801272c <I2Cx_MspInit+0x158>)
 8012618:	f7f0 f89a 	bl	8002750 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 801261c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8012622:	f107 031c 	add.w	r3, r7, #28
 8012626:	4619      	mov	r1, r3
 8012628:	4840      	ldr	r0, [pc, #256]	; (801272c <I2Cx_MspInit+0x158>)
 801262a:	f7f0 f891 	bl	8002750 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 801262e:	4b3e      	ldr	r3, [pc, #248]	; (8012728 <I2Cx_MspInit+0x154>)
 8012630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012632:	4a3d      	ldr	r2, [pc, #244]	; (8012728 <I2Cx_MspInit+0x154>)
 8012634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012638:	6413      	str	r3, [r2, #64]	; 0x40
 801263a:	4b3b      	ldr	r3, [pc, #236]	; (8012728 <I2Cx_MspInit+0x154>)
 801263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801263e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012642:	617b      	str	r3, [r7, #20]
 8012644:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8012646:	4b38      	ldr	r3, [pc, #224]	; (8012728 <I2Cx_MspInit+0x154>)
 8012648:	6a1b      	ldr	r3, [r3, #32]
 801264a:	4a37      	ldr	r2, [pc, #220]	; (8012728 <I2Cx_MspInit+0x154>)
 801264c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012650:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8012652:	4b35      	ldr	r3, [pc, #212]	; (8012728 <I2Cx_MspInit+0x154>)
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	4a34      	ldr	r2, [pc, #208]	; (8012728 <I2Cx_MspInit+0x154>)
 8012658:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801265c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 801265e:	2200      	movs	r2, #0
 8012660:	210f      	movs	r1, #15
 8012662:	2048      	movs	r0, #72	; 0x48
 8012664:	f7ee fde2 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8012668:	2048      	movs	r0, #72	; 0x48
 801266a:	f7ee fdfb 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 801266e:	2200      	movs	r2, #0
 8012670:	210f      	movs	r1, #15
 8012672:	2049      	movs	r0, #73	; 0x49
 8012674:	f7ee fdda 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8012678:	2049      	movs	r0, #73	; 0x49
 801267a:	f7ee fdf3 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 801267e:	e04d      	b.n	801271c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8012680:	4b29      	ldr	r3, [pc, #164]	; (8012728 <I2Cx_MspInit+0x154>)
 8012682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012684:	4a28      	ldr	r2, [pc, #160]	; (8012728 <I2Cx_MspInit+0x154>)
 8012686:	f043 0302 	orr.w	r3, r3, #2
 801268a:	6313      	str	r3, [r2, #48]	; 0x30
 801268c:	4b26      	ldr	r3, [pc, #152]	; (8012728 <I2Cx_MspInit+0x154>)
 801268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012690:	f003 0302 	and.w	r3, r3, #2
 8012694:	613b      	str	r3, [r7, #16]
 8012696:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8012698:	f44f 7380 	mov.w	r3, #256	; 0x100
 801269c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 801269e:	2312      	movs	r3, #18
 80126a0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80126a2:	2300      	movs	r3, #0
 80126a4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80126a6:	2302      	movs	r3, #2
 80126a8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80126aa:	2304      	movs	r3, #4
 80126ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80126ae:	f107 031c 	add.w	r3, r7, #28
 80126b2:	4619      	mov	r1, r3
 80126b4:	481e      	ldr	r0, [pc, #120]	; (8012730 <I2Cx_MspInit+0x15c>)
 80126b6:	f7f0 f84b 	bl	8002750 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80126ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80126c0:	f107 031c 	add.w	r3, r7, #28
 80126c4:	4619      	mov	r1, r3
 80126c6:	481a      	ldr	r0, [pc, #104]	; (8012730 <I2Cx_MspInit+0x15c>)
 80126c8:	f7f0 f842 	bl	8002750 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80126cc:	4b16      	ldr	r3, [pc, #88]	; (8012728 <I2Cx_MspInit+0x154>)
 80126ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d0:	4a15      	ldr	r2, [pc, #84]	; (8012728 <I2Cx_MspInit+0x154>)
 80126d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80126d6:	6413      	str	r3, [r2, #64]	; 0x40
 80126d8:	4b13      	ldr	r3, [pc, #76]	; (8012728 <I2Cx_MspInit+0x154>)
 80126da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126e0:	60fb      	str	r3, [r7, #12]
 80126e2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80126e4:	4b10      	ldr	r3, [pc, #64]	; (8012728 <I2Cx_MspInit+0x154>)
 80126e6:	6a1b      	ldr	r3, [r3, #32]
 80126e8:	4a0f      	ldr	r2, [pc, #60]	; (8012728 <I2Cx_MspInit+0x154>)
 80126ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80126ee:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80126f0:	4b0d      	ldr	r3, [pc, #52]	; (8012728 <I2Cx_MspInit+0x154>)
 80126f2:	6a1b      	ldr	r3, [r3, #32]
 80126f4:	4a0c      	ldr	r2, [pc, #48]	; (8012728 <I2Cx_MspInit+0x154>)
 80126f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80126fa:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80126fc:	2200      	movs	r2, #0
 80126fe:	210f      	movs	r1, #15
 8012700:	201f      	movs	r0, #31
 8012702:	f7ee fd93 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8012706:	201f      	movs	r0, #31
 8012708:	f7ee fdac 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 801270c:	2200      	movs	r2, #0
 801270e:	210f      	movs	r1, #15
 8012710:	2020      	movs	r0, #32
 8012712:	f7ee fd8b 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8012716:	2020      	movs	r0, #32
 8012718:	f7ee fda4 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 801271c:	bf00      	nop
 801271e:	3730      	adds	r7, #48	; 0x30
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	20008264 	.word	0x20008264
 8012728:	40023800 	.word	0x40023800
 801272c:	40021c00 	.word	0x40021c00
 8012730:	40020400 	.word	0x40020400

08012734 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7f2 fa35 	bl	8004bac <HAL_I2C_GetState>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d125      	bne.n	8012794 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4a14      	ldr	r2, [pc, #80]	; (801279c <I2Cx_Init+0x68>)
 801274c:	4293      	cmp	r3, r2
 801274e:	d103      	bne.n	8012758 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	4a13      	ldr	r2, [pc, #76]	; (80127a0 <I2Cx_Init+0x6c>)
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	e002      	b.n	801275e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a12      	ldr	r2, [pc, #72]	; (80127a4 <I2Cx_Init+0x70>)
 801275c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4a11      	ldr	r2, [pc, #68]	; (80127a8 <I2Cx_Init+0x74>)
 8012762:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2200      	movs	r2, #0
 8012768:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2201      	movs	r2, #1
 801276e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2200      	movs	r2, #0
 8012774:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2200      	movs	r2, #0
 801277a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2200      	movs	r2, #0
 8012780:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f7ff ff23 	bl	80125d4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7f1 ff1e 	bl	80045d0 <HAL_I2C_Init>
  }
}
 8012794:	bf00      	nop
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20008264 	.word	0x20008264
 80127a0:	40005c00 	.word	0x40005c00
 80127a4:	40005400 	.word	0x40005400
 80127a8:	40912732 	.word	0x40912732

080127ac <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b08a      	sub	sp, #40	; 0x28
 80127b0:	af04      	add	r7, sp, #16
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	4608      	mov	r0, r1
 80127b6:	4611      	mov	r1, r2
 80127b8:	461a      	mov	r2, r3
 80127ba:	4603      	mov	r3, r0
 80127bc:	72fb      	strb	r3, [r7, #11]
 80127be:	460b      	mov	r3, r1
 80127c0:	813b      	strh	r3, [r7, #8]
 80127c2:	4613      	mov	r3, r2
 80127c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80127ca:	7afb      	ldrb	r3, [r7, #11]
 80127cc:	b299      	uxth	r1, r3
 80127ce:	88f8      	ldrh	r0, [r7, #6]
 80127d0:	893a      	ldrh	r2, [r7, #8]
 80127d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80127d6:	9302      	str	r3, [sp, #8]
 80127d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	6a3b      	ldr	r3, [r7, #32]
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	4603      	mov	r3, r0
 80127e2:	68f8      	ldr	r0, [r7, #12]
 80127e4:	f7f2 f8c8 	bl	8004978 <HAL_I2C_Mem_Read>
 80127e8:	4603      	mov	r3, r0
 80127ea:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d004      	beq.n	80127fc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80127f2:	7afb      	ldrb	r3, [r7, #11]
 80127f4:	4619      	mov	r1, r3
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f000 f832 	bl	8012860 <I2Cx_Error>
  }
  return status;    
 80127fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3718      	adds	r7, #24
 8012802:	46bd      	mov	sp, r7
 8012804:	bd80      	pop	{r7, pc}

08012806 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8012806:	b580      	push	{r7, lr}
 8012808:	b08a      	sub	sp, #40	; 0x28
 801280a:	af04      	add	r7, sp, #16
 801280c:	60f8      	str	r0, [r7, #12]
 801280e:	4608      	mov	r0, r1
 8012810:	4611      	mov	r1, r2
 8012812:	461a      	mov	r2, r3
 8012814:	4603      	mov	r3, r0
 8012816:	72fb      	strb	r3, [r7, #11]
 8012818:	460b      	mov	r3, r1
 801281a:	813b      	strh	r3, [r7, #8]
 801281c:	4613      	mov	r3, r2
 801281e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8012820:	2300      	movs	r3, #0
 8012822:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8012824:	7afb      	ldrb	r3, [r7, #11]
 8012826:	b299      	uxth	r1, r3
 8012828:	88f8      	ldrh	r0, [r7, #6]
 801282a:	893a      	ldrh	r2, [r7, #8]
 801282c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012830:	9302      	str	r3, [sp, #8]
 8012832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012834:	9301      	str	r3, [sp, #4]
 8012836:	6a3b      	ldr	r3, [r7, #32]
 8012838:	9300      	str	r3, [sp, #0]
 801283a:	4603      	mov	r3, r0
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7f1 ff87 	bl	8004750 <HAL_I2C_Mem_Write>
 8012842:	4603      	mov	r3, r0
 8012844:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8012846:	7dfb      	ldrb	r3, [r7, #23]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d004      	beq.n	8012856 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 801284c:	7afb      	ldrb	r3, [r7, #11]
 801284e:	4619      	mov	r1, r3
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 f805 	bl	8012860 <I2Cx_Error>
  }
  return status;
 8012856:	7dfb      	ldrb	r3, [r7, #23]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3718      	adds	r7, #24
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	460b      	mov	r3, r1
 801286a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f7f1 ff3f 	bl	80046f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7ff ff5e 	bl	8012734 <I2Cx_Init>
}
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8012880:	b580      	push	{r7, lr}
 8012882:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8012884:	4802      	ldr	r0, [pc, #8]	; (8012890 <TS_IO_Init+0x10>)
 8012886:	f7ff ff55 	bl	8012734 <I2Cx_Init>
}
 801288a:	bf00      	nop
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	20008264 	.word	0x20008264

08012894 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af02      	add	r7, sp, #8
 801289a:	4603      	mov	r3, r0
 801289c:	71fb      	strb	r3, [r7, #7]
 801289e:	460b      	mov	r3, r1
 80128a0:	71bb      	strb	r3, [r7, #6]
 80128a2:	4613      	mov	r3, r2
 80128a4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80128a6:	79bb      	ldrb	r3, [r7, #6]
 80128a8:	b29a      	uxth	r2, r3
 80128aa:	79f9      	ldrb	r1, [r7, #7]
 80128ac:	2301      	movs	r3, #1
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	1d7b      	adds	r3, r7, #5
 80128b2:	9300      	str	r3, [sp, #0]
 80128b4:	2301      	movs	r3, #1
 80128b6:	4803      	ldr	r0, [pc, #12]	; (80128c4 <TS_IO_Write+0x30>)
 80128b8:	f7ff ffa5 	bl	8012806 <I2Cx_WriteMultiple>
}
 80128bc:	bf00      	nop
 80128be:	3708      	adds	r7, #8
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	20008264 	.word	0x20008264

080128c8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af02      	add	r7, sp, #8
 80128ce:	4603      	mov	r3, r0
 80128d0:	460a      	mov	r2, r1
 80128d2:	71fb      	strb	r3, [r7, #7]
 80128d4:	4613      	mov	r3, r2
 80128d6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80128dc:	79bb      	ldrb	r3, [r7, #6]
 80128de:	b29a      	uxth	r2, r3
 80128e0:	79f9      	ldrb	r1, [r7, #7]
 80128e2:	2301      	movs	r3, #1
 80128e4:	9301      	str	r3, [sp, #4]
 80128e6:	f107 030f 	add.w	r3, r7, #15
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	2301      	movs	r3, #1
 80128ee:	4804      	ldr	r0, [pc, #16]	; (8012900 <TS_IO_Read+0x38>)
 80128f0:	f7ff ff5c 	bl	80127ac <I2Cx_ReadMultiple>

  return read_value;
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	20008264 	.word	0x20008264

08012904 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ee f91f 	bl	8000b50 <HAL_Delay>
}
 8012912:	bf00      	nop
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
	...

0801291c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af00      	add	r7, sp, #0
 8012922:	4603      	mov	r3, r0
 8012924:	460a      	mov	r2, r1
 8012926:	80fb      	strh	r3, [r7, #6]
 8012928:	4613      	mov	r3, r2
 801292a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 801292c:	2300      	movs	r3, #0
 801292e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8012930:	4a14      	ldr	r2, [pc, #80]	; (8012984 <BSP_TS_Init+0x68>)
 8012932:	88fb      	ldrh	r3, [r7, #6]
 8012934:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8012936:	4a14      	ldr	r2, [pc, #80]	; (8012988 <BSP_TS_Init+0x6c>)
 8012938:	88bb      	ldrh	r3, [r7, #4]
 801293a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801293c:	4b13      	ldr	r3, [pc, #76]	; (801298c <BSP_TS_Init+0x70>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2070      	movs	r0, #112	; 0x70
 8012942:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8012944:	4b11      	ldr	r3, [pc, #68]	; (801298c <BSP_TS_Init+0x70>)
 8012946:	685b      	ldr	r3, [r3, #4]
 8012948:	2070      	movs	r0, #112	; 0x70
 801294a:	4798      	blx	r3
 801294c:	4603      	mov	r3, r0
 801294e:	2b51      	cmp	r3, #81	; 0x51
 8012950:	d111      	bne.n	8012976 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8012952:	4b0f      	ldr	r3, [pc, #60]	; (8012990 <BSP_TS_Init+0x74>)
 8012954:	4a0d      	ldr	r2, [pc, #52]	; (801298c <BSP_TS_Init+0x70>)
 8012956:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8012958:	4b0e      	ldr	r3, [pc, #56]	; (8012994 <BSP_TS_Init+0x78>)
 801295a:	2270      	movs	r2, #112	; 0x70
 801295c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 801295e:	4b0e      	ldr	r3, [pc, #56]	; (8012998 <BSP_TS_Init+0x7c>)
 8012960:	2208      	movs	r2, #8
 8012962:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8012964:	4b0a      	ldr	r3, [pc, #40]	; (8012990 <BSP_TS_Init+0x74>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	68db      	ldr	r3, [r3, #12]
 801296a:	4a0a      	ldr	r2, [pc, #40]	; (8012994 <BSP_TS_Init+0x78>)
 801296c:	7812      	ldrb	r2, [r2, #0]
 801296e:	b292      	uxth	r2, r2
 8012970:	4610      	mov	r0, r2
 8012972:	4798      	blx	r3
 8012974:	e001      	b.n	801297a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8012976:	2303      	movs	r3, #3
 8012978:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801297a:	7bfb      	ldrb	r3, [r7, #15]
}
 801297c:	4618      	mov	r0, r3
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	200082b4 	.word	0x200082b4
 8012988:	200082b6 	.word	0x200082b6
 801298c:	20000000 	.word	0x20000000
 8012990:	200082b0 	.word	0x200082b0
 8012994:	200082b9 	.word	0x200082b9
 8012998:	200082b8 	.word	0x200082b8

0801299c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 801299c:	b590      	push	{r4, r7, lr}
 801299e:	b097      	sub	sp, #92	; 0x5c
 80129a0:	af02      	add	r7, sp, #8
 80129a2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80129ae:	2300      	movs	r3, #0
 80129b0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80129b6:	4b97      	ldr	r3, [pc, #604]	; (8012c14 <BSP_TS_GetState+0x278>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	691b      	ldr	r3, [r3, #16]
 80129bc:	4a96      	ldr	r2, [pc, #600]	; (8012c18 <BSP_TS_GetState+0x27c>)
 80129be:	7812      	ldrb	r2, [r2, #0]
 80129c0:	b292      	uxth	r2, r2
 80129c2:	4610      	mov	r0, r2
 80129c4:	4798      	blx	r3
 80129c6:	4603      	mov	r3, r0
 80129c8:	461a      	mov	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f000 81a8 	beq.w	8012d28 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80129d8:	2300      	movs	r3, #0
 80129da:	64bb      	str	r3, [r7, #72]	; 0x48
 80129dc:	e197      	b.n	8012d0e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80129de:	4b8d      	ldr	r3, [pc, #564]	; (8012c14 <BSP_TS_GetState+0x278>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	695b      	ldr	r3, [r3, #20]
 80129e4:	4a8c      	ldr	r2, [pc, #560]	; (8012c18 <BSP_TS_GetState+0x27c>)
 80129e6:	7812      	ldrb	r2, [r2, #0]
 80129e8:	b290      	uxth	r0, r2
 80129ea:	f107 0120 	add.w	r1, r7, #32
 80129ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129f0:	0052      	lsls	r2, r2, #1
 80129f2:	188c      	adds	r4, r1, r2
 80129f4:	f107 0114 	add.w	r1, r7, #20
 80129f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129fa:	0052      	lsls	r2, r2, #1
 80129fc:	440a      	add	r2, r1
 80129fe:	4621      	mov	r1, r4
 8012a00:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8012a02:	4b86      	ldr	r3, [pc, #536]	; (8012c1c <BSP_TS_GetState+0x280>)
 8012a04:	781b      	ldrb	r3, [r3, #0]
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d11b      	bne.n	8012a42 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8012a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012a12:	4413      	add	r3, r2
 8012a14:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8012a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a1a:	005b      	lsls	r3, r3, #1
 8012a1c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012a20:	440b      	add	r3, r1
 8012a22:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8012a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012a2e:	4413      	add	r3, r2
 8012a30:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8012a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a36:	005b      	lsls	r3, r3, #1
 8012a38:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012a3c:	440b      	add	r3, r1
 8012a3e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8012a42:	4b76      	ldr	r3, [pc, #472]	; (8012c1c <BSP_TS_GetState+0x280>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	f003 0302 	and.w	r3, r3, #2
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d010      	beq.n	8012a70 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8012a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a50:	005b      	lsls	r3, r3, #1
 8012a52:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012a56:	4413      	add	r3, r2
 8012a58:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8012a5c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a64:	005b      	lsls	r3, r3, #1
 8012a66:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012a6a:	440b      	add	r3, r1
 8012a6c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8012a70:	4b6a      	ldr	r3, [pc, #424]	; (8012c1c <BSP_TS_GetState+0x280>)
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d010      	beq.n	8012a9e <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8012a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a7e:	005b      	lsls	r3, r3, #1
 8012a80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012a84:	4413      	add	r3, r2
 8012a86:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8012a8a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a92:	005b      	lsls	r3, r3, #1
 8012a94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012a98:	440b      	add	r3, r1
 8012a9a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8012a9e:	4b5f      	ldr	r3, [pc, #380]	; (8012c1c <BSP_TS_GetState+0x280>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	f003 0308 	and.w	r3, r3, #8
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d01b      	beq.n	8012ae2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8012aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aac:	005b      	lsls	r3, r3, #1
 8012aae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8012ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aba:	005b      	lsls	r3, r3, #1
 8012abc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012ac0:	440b      	add	r3, r1
 8012ac2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8012ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012ace:	4413      	add	r3, r2
 8012ad0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8012ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ad6:	005b      	lsls	r3, r3, #1
 8012ad8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012adc:	440b      	add	r3, r1
 8012ade:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8012ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012aea:	4413      	add	r3, r2
 8012aec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8012af0:	4619      	mov	r1, r3
 8012af2:	4a4b      	ldr	r2, [pc, #300]	; (8012c20 <BSP_TS_GetState+0x284>)
 8012af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012afa:	4299      	cmp	r1, r3
 8012afc:	d90e      	bls.n	8012b1c <BSP_TS_GetState+0x180>
 8012afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012b06:	4413      	add	r3, r2
 8012b08:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8012b0c:	4944      	ldr	r1, [pc, #272]	; (8012c20 <BSP_TS_GetState+0x284>)
 8012b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	e00d      	b.n	8012b38 <BSP_TS_GetState+0x19c>
 8012b1c:	4a40      	ldr	r2, [pc, #256]	; (8012c20 <BSP_TS_GetState+0x284>)
 8012b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b24:	b29a      	uxth	r2, r3
 8012b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b28:	005b      	lsls	r3, r3, #1
 8012b2a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012b2e:	440b      	add	r3, r1
 8012b30:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8012b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b3e:	005b      	lsls	r3, r3, #1
 8012b40:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012b44:	4413      	add	r3, r2
 8012b46:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4a35      	ldr	r2, [pc, #212]	; (8012c24 <BSP_TS_GetState+0x288>)
 8012b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b54:	4299      	cmp	r1, r3
 8012b56:	d90e      	bls.n	8012b76 <BSP_TS_GetState+0x1da>
 8012b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b5a:	005b      	lsls	r3, r3, #1
 8012b5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012b60:	4413      	add	r3, r2
 8012b62:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8012b66:	492f      	ldr	r1, [pc, #188]	; (8012c24 <BSP_TS_GetState+0x288>)
 8012b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	1ad3      	subs	r3, r2, r3
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	e00d      	b.n	8012b92 <BSP_TS_GetState+0x1f6>
 8012b76:	4a2b      	ldr	r2, [pc, #172]	; (8012c24 <BSP_TS_GetState+0x288>)
 8012b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b7e:	b29a      	uxth	r2, r3
 8012b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b82:	005b      	lsls	r3, r3, #1
 8012b84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012b88:	440b      	add	r3, r1
 8012b8a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8012b8e:	1ad3      	subs	r3, r2, r3
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8012b96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012b9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b9e:	4413      	add	r3, r2
 8012ba0:	2b05      	cmp	r3, #5
 8012ba2:	dd17      	ble.n	8012bd4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8012ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ba6:	005b      	lsls	r3, r3, #1
 8012ba8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012bac:	4413      	add	r3, r2
 8012bae:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	4a1a      	ldr	r2, [pc, #104]	; (8012c20 <BSP_TS_GetState+0x284>)
 8012bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8012bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bbe:	005b      	lsls	r3, r3, #1
 8012bc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8012bca:	4619      	mov	r1, r3
 8012bcc:	4a15      	ldr	r2, [pc, #84]	; (8012c24 <BSP_TS_GetState+0x288>)
 8012bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8012bd4:	4b10      	ldr	r3, [pc, #64]	; (8012c18 <BSP_TS_GetState+0x27c>)
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	2b70      	cmp	r3, #112	; 0x70
 8012bda:	d125      	bne.n	8012c28 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8012bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bde:	005b      	lsls	r3, r3, #1
 8012be0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012be4:	4413      	add	r3, r2
 8012be6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8012bea:	687a      	ldr	r2, [r7, #4]
 8012bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	4413      	add	r3, r2
 8012bf2:	460a      	mov	r2, r1
 8012bf4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8012bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8012bfe:	4413      	add	r3, r2
 8012c00:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c08:	3304      	adds	r3, #4
 8012c0a:	005b      	lsls	r3, r3, #1
 8012c0c:	4413      	add	r3, r2
 8012c0e:	460a      	mov	r2, r1
 8012c10:	809a      	strh	r2, [r3, #4]
 8012c12:	e02c      	b.n	8012c6e <BSP_TS_GetState+0x2d2>
 8012c14:	200082b0 	.word	0x200082b0
 8012c18:	200082b9 	.word	0x200082b9
 8012c1c:	200082b8 	.word	0x200082b8
 8012c20:	200082bc 	.word	0x200082bc
 8012c24:	200082d0 	.word	0x200082d0
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8012c28:	4b42      	ldr	r3, [pc, #264]	; (8012d34 <BSP_TS_GetState+0x398>)
 8012c2a:	881b      	ldrh	r3, [r3, #0]
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4a42      	ldr	r2, [pc, #264]	; (8012d38 <BSP_TS_GetState+0x39c>)
 8012c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c36:	fb03 f301 	mul.w	r3, r3, r1
 8012c3a:	0b1b      	lsrs	r3, r3, #12
 8012c3c:	b299      	uxth	r1, r3
 8012c3e:	687a      	ldr	r2, [r7, #4]
 8012c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	460a      	mov	r2, r1
 8012c48:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8012c4a:	4b3c      	ldr	r3, [pc, #240]	; (8012d3c <BSP_TS_GetState+0x3a0>)
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	4619      	mov	r1, r3
 8012c50:	4a3b      	ldr	r2, [pc, #236]	; (8012d40 <BSP_TS_GetState+0x3a4>)
 8012c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c58:	fb03 f301 	mul.w	r3, r3, r1
 8012c5c:	0b1b      	lsrs	r3, r3, #12
 8012c5e:	b299      	uxth	r1, r3
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c64:	3304      	adds	r3, #4
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	4413      	add	r3, r2
 8012c6a:	460a      	mov	r2, r1
 8012c6c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8012c6e:	4b35      	ldr	r3, [pc, #212]	; (8012d44 <BSP_TS_GetState+0x3a8>)
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	b298      	uxth	r0, r3
 8012c74:	f107 010c 	add.w	r1, r7, #12
 8012c78:	f107 0210 	add.w	r2, r7, #16
 8012c7c:	f107 0308 	add.w	r3, r7, #8
 8012c80:	9300      	str	r3, [sp, #0]
 8012c82:	460b      	mov	r3, r1
 8012c84:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012c86:	f7ed fe5d 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	b2d9      	uxtb	r1, r3
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c92:	4413      	add	r3, r2
 8012c94:	3316      	adds	r3, #22
 8012c96:	460a      	mov	r2, r1
 8012c98:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	b2d9      	uxtb	r1, r3
 8012c9e:	687a      	ldr	r2, [r7, #4]
 8012ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ca2:	4413      	add	r3, r2
 8012ca4:	3320      	adds	r3, #32
 8012ca6:	460a      	mov	r2, r1
 8012ca8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	2b03      	cmp	r3, #3
 8012cae:	d827      	bhi.n	8012d00 <BSP_TS_GetState+0x364>
 8012cb0:	a201      	add	r2, pc, #4	; (adr r2, 8012cb8 <BSP_TS_GetState+0x31c>)
 8012cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cb6:	bf00      	nop
 8012cb8:	08012cc9 	.word	0x08012cc9
 8012cbc:	08012cd7 	.word	0x08012cd7
 8012cc0:	08012ce5 	.word	0x08012ce5
 8012cc4:	08012cf3 	.word	0x08012cf3
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ccc:	4413      	add	r3, r2
 8012cce:	331b      	adds	r3, #27
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	701a      	strb	r2, [r3, #0]
          break;
 8012cd4:	e018      	b.n	8012d08 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cda:	4413      	add	r3, r2
 8012cdc:	331b      	adds	r3, #27
 8012cde:	2202      	movs	r2, #2
 8012ce0:	701a      	strb	r2, [r3, #0]
          break;
 8012ce2:	e011      	b.n	8012d08 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ce8:	4413      	add	r3, r2
 8012cea:	331b      	adds	r3, #27
 8012cec:	2203      	movs	r2, #3
 8012cee:	701a      	strb	r2, [r3, #0]
          break;
 8012cf0:	e00a      	b.n	8012d08 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cf6:	4413      	add	r3, r2
 8012cf8:	331b      	adds	r3, #27
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	701a      	strb	r2, [r3, #0]
          break;
 8012cfe:	e003      	b.n	8012d08 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8012d00:	2301      	movs	r3, #1
 8012d02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8012d06:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8012d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	461a      	mov	r2, r3
 8012d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d16:	4293      	cmp	r3, r2
 8012d18:	f4ff ae61 	bcc.w	80129de <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 f813 	bl	8012d48 <BSP_TS_Get_GestureId>
 8012d22:	4603      	mov	r3, r0
 8012d24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8012d28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3754      	adds	r7, #84	; 0x54
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd90      	pop	{r4, r7, pc}
 8012d34:	200082b4 	.word	0x200082b4
 8012d38:	200082bc 	.word	0x200082bc
 8012d3c:	200082b6 	.word	0x200082b6
 8012d40:	200082d0 	.word	0x200082d0
 8012d44:	200082b9 	.word	0x200082b9

08012d48 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8012d50:	2300      	movs	r3, #0
 8012d52:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8012d54:	2300      	movs	r3, #0
 8012d56:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8012d58:	4b1f      	ldr	r3, [pc, #124]	; (8012dd8 <BSP_TS_Get_GestureId+0x90>)
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	f107 0208 	add.w	r2, r7, #8
 8012d62:	4611      	mov	r1, r2
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ed fdd4 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	2b18      	cmp	r3, #24
 8012d6e:	d01b      	beq.n	8012da8 <BSP_TS_Get_GestureId+0x60>
 8012d70:	2b18      	cmp	r3, #24
 8012d72:	d806      	bhi.n	8012d82 <BSP_TS_Get_GestureId+0x3a>
 8012d74:	2b10      	cmp	r3, #16
 8012d76:	d00f      	beq.n	8012d98 <BSP_TS_Get_GestureId+0x50>
 8012d78:	2b14      	cmp	r3, #20
 8012d7a:	d011      	beq.n	8012da0 <BSP_TS_Get_GestureId+0x58>
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d007      	beq.n	8012d90 <BSP_TS_Get_GestureId+0x48>
 8012d80:	e022      	b.n	8012dc8 <BSP_TS_Get_GestureId+0x80>
 8012d82:	2b40      	cmp	r3, #64	; 0x40
 8012d84:	d018      	beq.n	8012db8 <BSP_TS_Get_GestureId+0x70>
 8012d86:	2b49      	cmp	r3, #73	; 0x49
 8012d88:	d01a      	beq.n	8012dc0 <BSP_TS_Get_GestureId+0x78>
 8012d8a:	2b1c      	cmp	r3, #28
 8012d8c:	d010      	beq.n	8012db0 <BSP_TS_Get_GestureId+0x68>
 8012d8e:	e01b      	b.n	8012dc8 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2200      	movs	r2, #0
 8012d94:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012d96:	e01a      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2201      	movs	r2, #1
 8012d9c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012d9e:	e016      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2202      	movs	r2, #2
 8012da4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012da6:	e012      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2203      	movs	r2, #3
 8012dac:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012dae:	e00e      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2204      	movs	r2, #4
 8012db4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012db6:	e00a      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2205      	movs	r2, #5
 8012dbc:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012dbe:	e006      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2206      	movs	r2, #6
 8012dc4:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8012dc6:	e002      	b.n	8012dce <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	73fb      	strb	r3, [r7, #15]
      break;
 8012dcc:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3710      	adds	r7, #16
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	200082b9 	.word	0x200082b9

08012ddc <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012ddc:	b480      	push	{r7}
 8012dde:	b083      	sub	sp, #12
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	6039      	str	r1, [r7, #0]
    {
    }
 8012de6:	bf00      	nop
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr

08012df2 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8012df2:	b480      	push	{r7}
 8012df4:	b083      	sub	sp, #12
 8012df6:	af00      	add	r7, sp, #0
 8012df8:	6078      	str	r0, [r7, #4]
 8012dfa:	6039      	str	r1, [r7, #0]
    {
    }
 8012dfc:	bf00      	nop
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr

08012e08 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
    {
    }
 8012e12:	bf00      	nop
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8012e1e:	b480      	push	{r7}
 8012e20:	b083      	sub	sp, #12
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	6078      	str	r0, [r7, #4]
 8012e26:	460b      	mov	r3, r1
 8012e28:	70fb      	strb	r3, [r7, #3]
    {
    }
 8012e2a:	bf00      	nop
 8012e2c:	370c      	adds	r7, #12
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8012e36:	b480      	push	{r7}
 8012e38:	b083      	sub	sp, #12
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
    {
    }
 8012e3e:	bf00      	nop
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr

08012e4a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8012e4a:	b480      	push	{r7}
 8012e4c:	b083      	sub	sp, #12
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
    {
    }
 8012e52:	bf00      	nop
 8012e54:	370c      	adds	r7, #12
 8012e56:	46bd      	mov	sp, r7
 8012e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5c:	4770      	bx	lr
	...

08012e60 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
    {
 8012e68:	4a04      	ldr	r2, [pc, #16]	; (8012e7c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	601a      	str	r2, [r3, #0]
    }
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4618      	mov	r0, r3
 8012e72:	370c      	adds	r7, #12
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	08020ee0 	.word	0x08020ee0

08012e80 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
    }
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f7ff ffe9 	bl	8012e60 <_ZN8touchgfx15UIEventListenerD1Ev>
 8012e8e:	2104      	movs	r1, #4
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f00c f9f8 	bl	801f286 <_ZdlPvj>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	801a      	strh	r2, [r3, #0]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	805a      	strh	r2, [r3, #2]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	809a      	strh	r2, [r3, #4]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	80da      	strh	r2, [r3, #6]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	811a      	strh	r2, [r3, #8]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	815a      	strh	r2, [r3, #10]
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	819a      	strh	r2, [r3, #12]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	739a      	strb	r2, [r3, #14]
        {
        }
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	4618      	mov	r0, r3
 8012edc:	370c      	adds	r7, #12
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee4:	4770      	bx	lr

08012ee6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8012ee6:	b580      	push	{r7, lr}
 8012ee8:	b082      	sub	sp, #8
 8012eea:	af00      	add	r7, sp, #0
 8012eec:	6078      	str	r0, [r7, #4]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7ff ffd5 	bl	8012ea0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	611a      	str	r2, [r3, #16]
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2200      	movs	r2, #0
 8012f00:	829a      	strh	r2, [r3, #20]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	4618      	mov	r0, r3
 8012f06:	3708      	adds	r7, #8
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 8012f0c:	b480      	push	{r7}
 8012f0e:	b083      	sub	sp, #12
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8012f14:	4a07      	ldr	r2, [pc, #28]	; (8012f34 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	605a      	str	r2, [r3, #4]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	609a      	str	r2, [r3, #8]
    {
    }
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	370c      	adds	r7, #12
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f32:	4770      	bx	lr
 8012f34:	08020eb8 	.word	0x08020eb8

08012f38 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8012f38:	b480      	push	{r7}
 8012f3a:	b083      	sub	sp, #12
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	4a04      	ldr	r2, [pc, #16]	; (8012f54 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	601a      	str	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	370c      	adds	r7, #12
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr
 8012f54:	08020eb8 	.word	0x08020eb8

08012f58 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff ffe9 	bl	8012f38 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8012f66:	210c      	movs	r1, #12
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f00c f98c 	bl	801f286 <_ZdlPvj>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	4618      	mov	r0, r3
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 8012f84:	78fb      	ldrb	r3, [r7, #3]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d011      	beq.n	8012fae <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	3310      	adds	r3, #16
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	4798      	blx	r3
 8012f96:	4602      	mov	r2, r0
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	689b      	ldr	r3, [r3, #8]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685a      	ldr	r2, [r3, #4]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	441a      	add	r2, r3
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8012fac:	e008      	b.n	8012fc0 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	3310      	adds	r3, #16
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	4798      	blx	r3
 8012fba:	4602      	mov	r2, r0
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	609a      	str	r2, [r3, #8]
    }
 8012fc0:	bf00      	nop
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}

08012fc8 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8012fc8:	b480      	push	{r7}
 8012fca:	b083      	sub	sp, #12
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685b      	ldr	r3, [r3, #4]
    }
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	370c      	adds	r7, #12
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8012fe0:	b480      	push	{r7}
 8012fe2:	b083      	sub	sp, #12
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	605a      	str	r2, [r3, #4]
    }
 8012ff0:	bf00      	nop
 8012ff2:	370c      	adds	r7, #12
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffa:	4770      	bx	lr

08012ffc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
 8013008:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801300a:	4a3e      	ldr	r2, [pc, #248]	; (8013104 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	601a      	str	r2, [r3, #0]
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	605a      	str	r2, [r3, #4]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	609a      	str	r2, [r3, #8]
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	683a      	ldr	r2, [r7, #0]
 8013020:	60da      	str	r2, [r3, #12]
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2200      	movs	r2, #0
 8013026:	611a      	str	r2, [r3, #16]
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	2200      	movs	r2, #0
 801302c:	615a      	str	r2, [r3, #20]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	3318      	adds	r3, #24
 8013032:	4618      	mov	r0, r3
 8013034:	f7ff ff57 	bl	8012ee6 <_ZN8touchgfx8GesturesC1Ev>
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2200      	movs	r2, #0
 801303c:	635a      	str	r2, [r3, #52]	; 0x34
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2200      	movs	r2, #0
 8013042:	639a      	str	r2, [r3, #56]	; 0x38
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2200      	movs	r2, #0
 8013048:	63da      	str	r2, [r3, #60]	; 0x3c
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2200      	movs	r2, #0
 801304e:	641a      	str	r2, [r3, #64]	; 0x40
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2200      	movs	r2, #0
 8013054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	2201      	movs	r2, #1
 801305c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2201      	movs	r2, #1
 8013064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2201      	movs	r2, #1
 801306c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2200      	movs	r2, #0
 801307c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2201      	movs	r2, #1
 8013084:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2200      	movs	r2, #0
 801308c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2200      	movs	r2, #0
 8013094:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2200      	movs	r2, #0
 801309c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2200      	movs	r2, #0
 80130a4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2200      	movs	r2, #0
 80130b4:	661a      	str	r2, [r3, #96]	; 0x60
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2200      	movs	r2, #0
 80130ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 80130be:	4a12      	ldr	r2, [pc, #72]	; (8013108 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 80130c4:	4a11      	ldr	r2, [pc, #68]	; (801310c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 80130c6:	8b3b      	ldrh	r3, [r7, #24]
 80130c8:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 80130ca:	4a11      	ldr	r2, [pc, #68]	; (8013110 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 80130cc:	8bbb      	ldrh	r3, [r7, #28]
 80130ce:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 80130d0:	4b10      	ldr	r3, [pc, #64]	; (8013114 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 80130d2:	2200      	movs	r2, #0
 80130d4:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 80130d6:	4b0d      	ldr	r3, [pc, #52]	; (801310c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 80130d8:	881a      	ldrh	r2, [r3, #0]
 80130da:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 80130dc:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 80130de:	4b0c      	ldr	r3, [pc, #48]	; (8013110 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 80130e0:	881a      	ldrh	r2, [r3, #0]
 80130e2:	4b0e      	ldr	r3, [pc, #56]	; (801311c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 80130e4:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80130e6:	8b3a      	ldrh	r2, [r7, #24]
 80130e8:	8bbb      	ldrh	r3, [r7, #28]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d301      	bcc.n	80130f2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 80130ee:	2200      	movs	r2, #0
 80130f0:	e000      	b.n	80130f4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 80130f2:	2201      	movs	r2, #1
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	4618      	mov	r0, r3
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	08021abc 	.word	0x08021abc
 8013108:	20009b14 	.word	0x20009b14
 801310c:	20009b08 	.word	0x20009b08
 8013110:	20009b0a 	.word	0x20009b0a
 8013114:	20009b0c 	.word	0x20009b0c
 8013118:	20009b0e 	.word	0x20009b0e
 801311c:	20009b10 	.word	0x20009b10

08013120 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 8013120:	b480      	push	{r7}
 8013122:	b083      	sub	sp, #12
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	4a04      	ldr	r2, [pc, #16]	; (801313c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	601a      	str	r2, [r3, #0]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	4618      	mov	r0, r3
 8013132:	370c      	adds	r7, #12
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr
 801313c:	08021abc 	.word	0x08021abc

08013140 <_ZN8touchgfx3HALD0Ev>:
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7ff ffe9 	bl	8013120 <_ZN8touchgfx3HALD1Ev>
 801314e:	2168      	movs	r1, #104	; 0x68
 8013150:	6878      	ldr	r0, [r7, #4]
 8013152:	f00c f898 	bl	801f286 <_ZdlPvj>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	4618      	mov	r0, r3
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	460b      	mov	r3, r1
 801316a:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	78fa      	ldrb	r2, [r7, #3]
 8013170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 8013174:	bf00      	nop
 8013176:	370c      	adds	r7, #12
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 8013180:	b480      	push	{r7}
 8013182:	b083      	sub	sp, #12
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	460b      	mov	r3, r1
 801318a:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	78fa      	ldrb	r2, [r7, #3]
 8013190:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 8013194:	bf00      	nop
 8013196:	370c      	adds	r7, #12
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 80131a0:	b480      	push	{r7}
 80131a2:	b083      	sub	sp, #12
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
 80131a8:	460b      	mov	r3, r1
 80131aa:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 80131ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	dd03      	ble.n	80131bc <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	78fa      	ldrb	r2, [r7, #3]
 80131b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 80131bc:	bf00      	nop
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 80131c8:	b480      	push	{r7}
 80131ca:	b083      	sub	sp, #12
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	683a      	ldr	r2, [r7, #0]
 80131d6:	611a      	str	r2, [r3, #16]
    }
 80131d8:	bf00      	nop
 80131da:	370c      	adds	r7, #12
 80131dc:	46bd      	mov	sp, r7
 80131de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e2:	4770      	bx	lr

080131e4 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	78fa      	ldrb	r2, [r7, #3]
 80131f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 80131f8:	bf00      	nop
 80131fa:	370c      	adds	r7, #12
 80131fc:	46bd      	mov	sp, r7
 80131fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013202:	4770      	bx	lr

08013204 <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	460b      	mov	r3, r1
 801320e:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	78fa      	ldrb	r2, [r7, #3]
 8013214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8013218:	bf00      	nop
 801321a:	370c      	adds	r7, #12
 801321c:	46bd      	mov	sp, r7
 801321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013222:	4770      	bx	lr

08013224 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     *
     *        Registers an array of texts.
     *
     * @param t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 801322c:	4a04      	ldr	r2, [pc, #16]	; (8013240 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6013      	str	r3, [r2, #0]
    }
 8013232:	bf00      	nop
 8013234:	370c      	adds	r7, #12
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
 801323e:	bf00      	nop
 8013240:	20009b80 	.word	0x20009b80

08013244 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
    {
 801324c:	4a04      	ldr	r2, [pc, #16]	; (8013260 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	601a      	str	r2, [r3, #0]
    }
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	4618      	mov	r0, r3
 8013256:	370c      	adds	r7, #12
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr
 8013260:	08020ea4 	.word	0x08020ea4

08013264 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
    }
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ffe9 	bl	8013244 <_ZN8touchgfx12FontProviderD1Ev>
 8013272:	2104      	movs	r1, #4
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f00c f806 	bl	801f286 <_ZdlPvj>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013284:	b480      	push	{r7}
 8013286:	b085      	sub	sp, #20
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8013292:	4a0b      	ldr	r2, [pc, #44]	; (80132c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	601a      	str	r2, [r3, #0]
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	68ba      	ldr	r2, [r7, #8]
 801329c:	605a      	str	r2, [r3, #4]
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	687a      	ldr	r2, [r7, #4]
 80132a2:	609a      	str	r2, [r3, #8]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	683a      	ldr	r2, [r7, #0]
 80132a8:	60da      	str	r2, [r3, #12]
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	69ba      	ldr	r2, [r7, #24]
 80132ae:	611a      	str	r2, [r3, #16]
    {
    }
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4618      	mov	r0, r3
 80132b4:	3714      	adds	r7, #20
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	08020e94 	.word	0x08020e94

080132c4 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 80132c4:	b480      	push	{r7}
 80132c6:	b083      	sub	sp, #12
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
    {
 80132cc:	4a04      	ldr	r2, [pc, #16]	; (80132e0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	601a      	str	r2, [r3, #0]
    }
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr
 80132e0:	08020e94 	.word	0x08020e94

080132e4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
    }
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f7ff ffe9 	bl	80132c4 <_ZN8touchgfx7MVPHeapD1Ev>
 80132f2:	2114      	movs	r1, #20
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f00b ffc6 	bl	801f286 <_ZdlPvj>
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	4618      	mov	r0, r3
 80132fe:	3708      	adds	r7, #8
 8013300:	46bd      	mov	sp, r7
 8013302:	bd80      	pop	{r7, pc}

08013304 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD() { }
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	4a04      	ldr	r2, [pc, #16]	; (8013320 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	4618      	mov	r0, r3
 8013316:	370c      	adds	r7, #12
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	08020e60 	.word	0x08020e60

08013324 <_ZN8touchgfx3LCDD0Ev>:
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ff ffe9 	bl	8013304 <_ZN8touchgfx3LCDD1Ev>
 8013332:	2104      	movs	r1, #4
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f00b ffa6 	bl	801f286 <_ZdlPvj>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	4618      	mov	r0, r3
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <_ZN8touchgfx3LCD4initEv>:
     *
     * @brief Performs initialization.
     *
     *        Performs initialization.
     */
    virtual void init() { }
 8013344:	b480      	push	{r7}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	bf00      	nop
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr

08013358 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8013358:	b480      	push	{r7}
 801335a:	b083      	sub	sp, #12
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013364:	bf00      	nop
 8013366:	370c      	adds	r7, #12
 8013368:	46bd      	mov	sp, r7
 801336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336e:	4770      	bx	lr

08013370 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8013370:	b480      	push	{r7}
 8013372:	b083      	sub	sp, #12
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
    {
 8013378:	4a04      	ldr	r2, [pc, #16]	; (801338c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
    }
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	4618      	mov	r0, r3
 8013382:	370c      	adds	r7, #12
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr
 801338c:	08020e48 	.word	0x08020e48

08013390 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013390:	b580      	push	{r7, lr}
 8013392:	b082      	sub	sp, #8
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
    }
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f7ff ffe9 	bl	8013370 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801339e:	2104      	movs	r1, #4
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f00b ff70 	bl	801f286 <_ZdlPvj>
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	4618      	mov	r0, r3
 80133aa:	3708      	adds	r7, #8
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	4a05      	ldr	r2, [pc, #20]	; (80133d0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	601a      	str	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff fd4d 	bl	8012e60 <_ZN8touchgfx15UIEventListenerD1Ev>
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	4618      	mov	r0, r3
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}
 80133d0:	08021ff0 	.word	0x08021ff0

080133d4 <_ZN8touchgfx11ApplicationD0Ev>:
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b082      	sub	sp, #8
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7ff ffe7 	bl	80133b0 <_ZN8touchgfx11ApplicationD1Ev>
 80133e2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f00b ff4d 	bl	801f286 <_ZdlPvj>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	4618      	mov	r0, r3
 80133f0:	3708      	adds	r7, #8
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
	...

080133f8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	4a05      	ldr	r2, [pc, #20]	; (8013418 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	601a      	str	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	f7ff ffd1 	bl	80133b0 <_ZN8touchgfx11ApplicationD1Ev>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	08020e0c 	.word	0x08020e0c

0801341c <_ZN8touchgfx14MVPApplicationD0Ev>:
 801341c:	b580      	push	{r7, lr}
 801341e:	b082      	sub	sp, #8
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7ff ffe7 	bl	80133f8 <_ZN8touchgfx14MVPApplicationD1Ev>
 801342a:	f44f 719c 	mov.w	r1, #312	; 0x138
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f00b ff29 	bl	801f286 <_ZdlPvj>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	4618      	mov	r0, r3
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}

0801343e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 801343e:	b580      	push	{r7, lr}
 8013440:	b082      	sub	sp, #8
 8013442:	af00      	add	r7, sp, #0
 8013444:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 f804 	bl	8013454 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 801344c:	bf00      	nop
 801344e:	3708      	adds	r7, #8
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013462:	2b00      	cmp	r3, #0
 8013464:	d00f      	beq.n	8013486 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	330c      	adds	r3, #12
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4610      	mov	r0, r2
 801347a:	4798      	blx	r3
 801347c:	4603      	mov	r3, r0
 801347e:	2b00      	cmp	r3, #0
 8013480:	d001      	beq.n	8013486 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013482:	2301      	movs	r3, #1
 8013484:	e000      	b.n	8013488 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8013486:	2300      	movs	r3, #0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00e      	beq.n	80134aa <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	3308      	adds	r3, #8
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4610      	mov	r0, r2
 80134a0:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 80134aa:	bf00      	nop
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
	...

080134b4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
 80134bc:	4a08      	ldr	r2, [pc, #32]	; (80134e0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	601a      	str	r2, [r3, #0]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80134c8:	4618      	mov	r0, r3
 80134ca:	f000 fbeb 	bl	8013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7ff ff91 	bl	80133f8 <_ZN8touchgfx14MVPApplicationD1Ev>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	08020db8 	.word	0x08020db8

080134e4 <_ZN23FrontendApplicationBaseD0Ev>:
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b082      	sub	sp, #8
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ff ffe1 	bl	80134b4 <_ZN23FrontendApplicationBaseD1Ev>
 80134f2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f00b fec5 	bl	801f286 <_ZdlPvj>
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	4618      	mov	r0, r3
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
	...

08013508 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
 8013510:	4a05      	ldr	r2, [pc, #20]	; (8013528 <_ZN19FrontendApplicationD1Ev+0x20>)
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	601a      	str	r2, [r3, #0]
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff ffcb 	bl	80134b4 <_ZN23FrontendApplicationBaseD1Ev>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	3708      	adds	r7, #8
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	08020d7c 	.word	0x08020d7c

0801352c <_ZN19FrontendApplicationD0Ev>:
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff ffe7 	bl	8013508 <_ZN19FrontendApplicationD1Ev>
 801353a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f00b fea1 	bl	801f286 <_ZdlPvj>
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	4618      	mov	r0, r3
 8013548:	3708      	adds	r7, #8
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}

0801354e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801354e:	b580      	push	{r7, lr}
 8013550:	b082      	sub	sp, #8
 8013552:	af00      	add	r7, sp, #0
 8013554:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801355c:	4618      	mov	r0, r3
 801355e:	f007 f9eb 	bl	801a938 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	4618      	mov	r0, r3
 8013566:	f008 fad1 	bl	801bb0c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801356a:	bf00      	nop
 801356c:	3708      	adds	r7, #8
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013572:	b580      	push	{r7, lr}
 8013574:	b082      	sub	sp, #8
 8013576:	af00      	add	r7, sp, #0
 8013578:	6078      	str	r0, [r7, #4]
 801357a:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	4618      	mov	r0, r3
 8013580:	f005 fb28 	bl	8018bd4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8013584:	bf00      	nop
 8013586:	3708      	adds	r7, #8
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}

0801358c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 801358c:	b580      	push	{r7, lr}
 801358e:	b086      	sub	sp, #24
 8013590:	af02      	add	r7, sp, #8
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	68b9      	ldr	r1, [r7, #8]
 80135a6:	f7ff fe6d 	bl	8013284 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80135aa:	4a04      	ldr	r2, [pc, #16]	; (80135bc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	601a      	str	r2, [r3, #0]
    {

    }
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	4618      	mov	r0, r3
 80135b4:	3710      	adds	r7, #16
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	08020d68 	.word	0x08020d68

080135c0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80135c0:	b580      	push	{r7, lr}
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	4801      	ldr	r0, [pc, #4]	; (80135cc <__tcf_0+0xc>)
 80135c6:	f000 fab3 	bl	8013b30 <_ZN12FrontendHeapD1Ev>
 80135ca:	bd80      	pop	{r7, pc}
 80135cc:	200082e4 	.word	0x200082e4

080135d0 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80135d0:	b580      	push	{r7, lr}
 80135d2:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80135d4:	4b08      	ldr	r3, [pc, #32]	; (80135f8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	f003 0301 	and.w	r3, r3, #1
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d108      	bne.n	80135f2 <_ZN12FrontendHeap11getInstanceEv+0x22>
 80135e0:	4806      	ldr	r0, [pc, #24]	; (80135fc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 80135e2:	f000 f831 	bl	8013648 <_ZN12FrontendHeapC1Ev>
 80135e6:	4b04      	ldr	r3, [pc, #16]	; (80135f8 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 80135e8:	2201      	movs	r2, #1
 80135ea:	601a      	str	r2, [r3, #0]
 80135ec:	4804      	ldr	r0, [pc, #16]	; (8013600 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 80135ee:	f00b fe85 	bl	801f2fc <atexit>
        return instance;
 80135f2:	4b02      	ldr	r3, [pc, #8]	; (80135fc <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 80135f4:	4618      	mov	r0, r3
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	20008580 	.word	0x20008580
 80135fc:	200082e4 	.word	0x200082e4
 8013600:	080135c1 	.word	0x080135c1

08013604 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	4a05      	ldr	r2, [pc, #20]	; (8013624 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	601a      	str	r2, [r3, #0]
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4618      	mov	r0, r3
 8013616:	f7ff fe55 	bl	80132c4 <_ZN8touchgfx7MVPHeapD1Ev>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}
 8013624:	08020d68 	.word	0x08020d68

08013628 <_ZN16FrontendHeapBaseD0Ev>:
 8013628:	b580      	push	{r7, lr}
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f7ff ffe7 	bl	8013604 <_ZN16FrontendHeapBaseD1Ev>
 8013636:	2114      	movs	r1, #20
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f00b fe24 	bl	801f286 <_ZdlPvj>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	4618      	mov	r0, r3
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013648:	b590      	push	{r4, r7, lr}
 801364a:	b085      	sub	sp, #20
 801364c:	af02      	add	r7, sp, #8
 801364e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f103 0114 	add.w	r1, r3, #20
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	4623      	mov	r3, r4
 801366e:	f7ff ff8d 	bl	801358c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013672:	4a17      	ldr	r2, [pc, #92]	; (80136d0 <_ZN12FrontendHeapC1Ev+0x88>)
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3314      	adds	r3, #20
 801367c:	4618      	mov	r0, r3
 801367e:	f000 f925 	bl	80138cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	332c      	adds	r3, #44	; 0x2c
 8013686:	4618      	mov	r0, r3
 8013688:	f000 f954 	bl	8013934 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	33e8      	adds	r3, #232	; 0xe8
 8013690:	4618      	mov	r0, r3
 8013692:	f000 f983 	bl	801399c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	4619      	mov	r1, r3
 80136a6:	f007 f923 	bl	801a8f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80136b0:	4618      	mov	r0, r3
 80136b2:	f007 f933 	bl	801a91c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80136be:	4619      	mov	r1, r3
 80136c0:	4610      	mov	r0, r2
 80136c2:	f7ff ff56 	bl	8013572 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	4618      	mov	r0, r3
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd90      	pop	{r4, r7, pc}
 80136d0:	08020cb8 	.word	0x08020cb8

080136d4 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	4a05      	ldr	r2, [pc, #20]	; (80136f4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	601a      	str	r2, [r3, #0]
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7ff fe0d 	bl	8013304 <_ZN8touchgfx3LCDD1Ev>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	4618      	mov	r0, r3
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	08022644 	.word	0x08022644

080136f8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b082      	sub	sp, #8
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7ff ffe7 	bl	80136d4 <_ZN8touchgfx8LCD16bppD1Ev>
 8013706:	2104      	movs	r1, #4
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f00b fdbc 	bl	801f286 <_ZdlPvj>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	4618      	mov	r0, r3
 8013712:	3708      	adds	r7, #8
 8013714:	46bd      	mov	sp, r7
 8013716:	bd80      	pop	{r7, pc}

08013718 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8013718:	b580      	push	{r7, lr}
 801371a:	b086      	sub	sp, #24
 801371c:	af02      	add	r7, sp, #8
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	603b      	str	r3, [r7, #0]
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	8bbb      	ldrh	r3, [r7, #28]
 801372a:	9301      	str	r3, [sp, #4]
 801372c:	8b3b      	ldrh	r3, [r7, #24]
 801372e:	9300      	str	r3, [sp, #0]
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	68b9      	ldr	r1, [r7, #8]
 8013736:	f7ff fc61 	bl	8012ffc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801373a:	4a04      	ldr	r2, [pc, #16]	; (801374c <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	601a      	str	r2, [r3, #0]
    {
    }
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	4618      	mov	r0, r3
 8013744:	3710      	adds	r7, #16
 8013746:	46bd      	mov	sp, r7
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	08020f78 	.word	0x08020f78

08013750 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013750:	b480      	push	{r7}
 8013752:	b083      	sub	sp, #12
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	4a04      	ldr	r2, [pc, #16]	; (801376c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4618      	mov	r0, r3
 8013762:	370c      	adds	r7, #12
 8013764:	46bd      	mov	sp, r7
 8013766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801376a:	4770      	bx	lr
 801376c:	08020904 	.word	0x08020904

08013770 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	4618      	mov	r0, r3
 801377c:	f7ff ffe8 	bl	8013750 <_ZN8touchgfx15TouchControllerC1Ev>
 8013780:	4a03      	ldr	r2, [pc, #12]	; (8013790 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	080210ec 	.word	0x080210ec

08013794 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 8013794:	b480      	push	{r7}
 8013796:	af00      	add	r7, sp, #0
  return 480;
 8013798:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 801379c:	4618      	mov	r0, r3
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr

080137a6 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 80137a6:	b480      	push	{r7}
 80137a8:	af00      	add	r7, sp, #0
  return 272;
 80137aa:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 80137ae:	4618      	mov	r0, r3
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr

080137b8 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 80137bc:	f000 fc72 	bl	80140a4 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 80137c0:	f000 fcc6 	bl	8014150 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 80137c4:	f000 fbde 	bl	8013f84 <_Z11MX_LCD_Initv>
    GPIO::init();
 80137c8:	f000 fbb4 	bl	8013f34 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80137cc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80137d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80137d4:	601a      	str	r2, [r3, #0]
}
 80137d6:	bf00      	nop
 80137d8:	bd80      	pop	{r7, pc}
	...

080137dc <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7ff fb90 	bl	8012f0c <_ZN8touchgfx18MCUInstrumentationC1Ev>
 80137ec:	4a03      	ldr	r2, [pc, #12]	; (80137fc <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	080210c4 	.word	0x080210c4

08013800 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 8013800:	b590      	push	{r4, r7, lr}
 8013802:	b087      	sub	sp, #28
 8013804:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 8013806:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801380a:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 801380c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8013810:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 8013812:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8013816:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801381a:	2200      	movs	r2, #0
 801381c:	9203      	str	r2, [sp, #12]
 801381e:	2200      	movs	r2, #0
 8013820:	9202      	str	r2, [sp, #8]
 8013822:	2200      	movs	r2, #0
 8013824:	9201      	str	r2, [sp, #4]
 8013826:	9300      	str	r3, [sp, #0]
 8013828:	460b      	mov	r3, r1
 801382a:	4a19      	ldr	r2, [pc, #100]	; (8013890 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 801382c:	4919      	ldr	r1, [pc, #100]	; (8013894 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 801382e:	481a      	ldr	r0, [pc, #104]	; (8013898 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 8013830:	f000 f8e8 	bl	8013a04 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 8013834:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	3374      	adds	r3, #116	; 0x74
 801383c:	681c      	ldr	r4, [r3, #0]
 801383e:	4b17      	ldr	r3, [pc, #92]	; (801389c <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4619      	mov	r1, r3
 8013844:	4b16      	ldr	r3, [pc, #88]	; (80138a0 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 8013846:	881a      	ldrh	r2, [r3, #0]
 8013848:	2301      	movs	r3, #1
 801384a:	9300      	str	r3, [sp, #0]
 801384c:	2301      	movs	r3, #1
 801384e:	6838      	ldr	r0, [r7, #0]
 8013850:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 8013852:	2102      	movs	r1, #2
 8013854:	6838      	ldr	r0, [r7, #0]
 8013856:	f7ff fca3 	bl	80131a0 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 801385a:	2101      	movs	r1, #1
 801385c:	6838      	ldr	r0, [r7, #0]
 801385e:	f7ff fcd1 	bl	8013204 <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 8013862:	2100      	movs	r1, #0
 8013864:	6838      	ldr	r0, [r7, #0]
 8013866:	f7ff fc8b 	bl	8013180 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801386a:	2100      	movs	r1, #0
 801386c:	6838      	ldr	r0, [r7, #0]
 801386e:	f7ff fc77 	bl	8013160 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 8013872:	480c      	ldr	r0, [pc, #48]	; (80138a4 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8013874:	f001 fe04 	bl	8015480 <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8013878:	490a      	ldr	r1, [pc, #40]	; (80138a4 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801387a:	6838      	ldr	r0, [r7, #0]
 801387c:	f7ff fca4 	bl	80131c8 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 8013880:	2101      	movs	r1, #1
 8013882:	6838      	ldr	r0, [r7, #0]
 8013884:	f7ff fcae 	bl	80131e4 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8013888:	bf00      	nop
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	bd90      	pop	{r4, r7, pc}
 8013890:	20009028 	.word	0x20009028
 8013894:	2000005c 	.word	0x2000005c
 8013898:	20008588 	.word	0x20008588
 801389c:	20000058 	.word	0x20000058
 80138a0:	20000060 	.word	0x20000060
 80138a4:	2000902c 	.word	0x2000902c

080138a8 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 80138ac:	f7ff ffa8 	bl	8013800 <_ZN8touchgfx13touchgfx_initEv>
}
 80138b0:	bf00      	nop
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 80138b8:	f7fb fcf4 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 80138bc:	4602      	mov	r2, r0
 80138be:	6813      	ldr	r3, [r2, #0]
 80138c0:	330c      	adds	r3, #12
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4610      	mov	r0, r2
 80138c6:	4798      	blx	r3
}
 80138c8:	bf00      	nop
 80138ca:	bd80      	pop	{r7, pc}

080138cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f007 faa0 	bl	801ae1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80138dc:	4a03      	ldr	r2, [pc, #12]	; (80138ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	601a      	str	r2, [r3, #0]
    {
    }
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	4618      	mov	r0, r3
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	08020d34 	.word	0x08020d34

080138f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
    {
    }
 80138f8:	4a05      	ldr	r2, [pc, #20]	; (8013910 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	601a      	str	r2, [r3, #0]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	4618      	mov	r0, r3
 8013902:	f007 fa89 	bl	801ae18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	3708      	adds	r7, #8
 801390c:	46bd      	mov	sp, r7
 801390e:	bd80      	pop	{r7, pc}
 8013910:	08020d34 	.word	0x08020d34

08013914 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8013914:	b580      	push	{r7, lr}
 8013916:	b082      	sub	sp, #8
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
    }
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7ff ffe7 	bl	80138f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013922:	2118      	movs	r1, #24
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f00b fcae 	bl	801f286 <_ZdlPvj>
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	4618      	mov	r0, r3
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	4618      	mov	r0, r3
 8013940:	f007 fa6c 	bl	801ae1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013944:	4a03      	ldr	r2, [pc, #12]	; (8013954 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	601a      	str	r2, [r3, #0]
    }
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	4618      	mov	r0, r3
 801394e:	3708      	adds	r7, #8
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	08020d00 	.word	0x08020d00

08013958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8013958:	b580      	push	{r7, lr}
 801395a:	b082      	sub	sp, #8
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
    }
 8013960:	4a05      	ldr	r2, [pc, #20]	; (8013978 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	601a      	str	r2, [r3, #0]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	4618      	mov	r0, r3
 801396a:	f007 fa55 	bl	801ae18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	4618      	mov	r0, r3
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	08020d00 	.word	0x08020d00

0801397c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801397c:	b580      	push	{r7, lr}
 801397e:	b082      	sub	sp, #8
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
    }
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7ff ffe7 	bl	8013958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801398a:	21bc      	movs	r1, #188	; 0xbc
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f00b fc7a 	bl	801f286 <_ZdlPvj>
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	4618      	mov	r0, r3
 8013996:	3708      	adds	r7, #8
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	4618      	mov	r0, r3
 80139a8:	f007 fa38 	bl	801ae1c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80139ac:	4a03      	ldr	r2, [pc, #12]	; (80139bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	601a      	str	r2, [r3, #0]
    }
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4618      	mov	r0, r3
 80139b6:	3708      	adds	r7, #8
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}
 80139bc:	08020ccc 	.word	0x08020ccc

080139c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
    }
 80139c8:	4a05      	ldr	r2, [pc, #20]	; (80139e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f007 fa21 	bl	801ae18 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	4618      	mov	r0, r3
 80139da:	3708      	adds	r7, #8
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	08020ccc 	.word	0x08020ccc

080139e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
    }
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff ffe7 	bl	80139c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80139f2:	2160      	movs	r1, #96	; 0x60
 80139f4:	6878      	ldr	r0, [r7, #4]
 80139f6:	f00b fc46 	bl	801f286 <_ZdlPvj>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4618      	mov	r0, r3
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8013a04:	b590      	push	{r4, r7, lr}
 8013a06:	b089      	sub	sp, #36	; 0x24
 8013a08:	af02      	add	r7, sp, #8
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8013a12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013a16:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	68b9      	ldr	r1, [r7, #8]
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f000 f85c 	bl	8013ae0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 8013a28:	6178      	str	r0, [r7, #20]
    hal.initialize();
 8013a2a:	6978      	ldr	r0, [r7, #20]
 8013a2c:	f007 fbc8 	bl	801b1c0 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8013a30:	f006 fea2 	bl	801a778 <_ZN14BitmapDatabase11getInstanceEv>
 8013a34:	4604      	mov	r4, r0
 8013a36:	f006 fea9 	bl	801a78c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	4619      	mov	r1, r3
 8013a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a40:	9300      	str	r3, [sp, #0]
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a46:	4620      	mov	r0, r4
 8013a48:	f009 fb3a 	bl	801d0c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8013a4c:	480d      	ldr	r0, [pc, #52]	; (8013a84 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 8013a4e:	f7ff fbe9 	bl	8013224 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013a52:	2000      	movs	r0, #0
 8013a54:	f006 febe 	bl	801a7d4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8013a58:	480b      	ldr	r0, [pc, #44]	; (8013a88 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8013a5a:	f009 fa9b 	bl	801cf94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013a5e:	f7ff fdb7 	bl	80135d0 <_ZN12FrontendHeap11getInstanceEv>
 8013a62:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	3350      	adds	r3, #80	; 0x50
 8013a6a:	681c      	ldr	r4, [r3, #0]
 8013a6c:	f008 f918 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 8013a70:	4603      	mov	r3, r0
 8013a72:	4619      	mov	r1, r3
 8013a74:	6978      	ldr	r0, [r7, #20]
 8013a76:	47a0      	blx	r4

    return hal;
 8013a78:	697b      	ldr	r3, [r7, #20]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	371c      	adds	r7, #28
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd90      	pop	{r4, r7, pc}
 8013a82:	bf00      	nop
 8013a84:	20008584 	.word	0x20008584
 8013a88:	20000054 	.word	0x20000054

08013a8c <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	4a05      	ldr	r2, [pc, #20]	; (8013aac <_ZN10STM32F7HALD1Ev+0x20>)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	601a      	str	r2, [r3, #0]
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7ff fb3f 	bl	8013120 <_ZN8touchgfx3HALD1Ev>
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	08020f78 	.word	0x08020f78

08013ab0 <_ZN10STM32F7HALD0Ev>:
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff ffe7 	bl	8013a8c <_ZN10STM32F7HALD1Ev>
 8013abe:	2168      	movs	r1, #104	; 0x68
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f00b fbe0 	bl	801f286 <_ZdlPvj>
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3708      	adds	r7, #8
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	4801      	ldr	r0, [pc, #4]	; (8013adc <__tcf_1+0xc>)
 8013ad6:	f7ff ffd9 	bl	8013a8c <_ZN10STM32F7HALD1Ev>
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	2000903c 	.word	0x2000903c

08013ae0 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b086      	sub	sp, #24
 8013ae4:	af02      	add	r7, sp, #8
 8013ae6:	60f8      	str	r0, [r7, #12]
 8013ae8:	60b9      	str	r1, [r7, #8]
 8013aea:	607a      	str	r2, [r7, #4]
 8013aec:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8013aee:	4b0d      	ldr	r3, [pc, #52]	; (8013b24 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	f003 0301 	and.w	r3, r3, #1
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d10f      	bne.n	8013b1a <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 8013afa:	887b      	ldrh	r3, [r7, #2]
 8013afc:	8b3a      	ldrh	r2, [r7, #24]
 8013afe:	9201      	str	r2, [sp, #4]
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	68ba      	ldr	r2, [r7, #8]
 8013b06:	68f9      	ldr	r1, [r7, #12]
 8013b08:	4807      	ldr	r0, [pc, #28]	; (8013b28 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 8013b0a:	f7ff fe05 	bl	8013718 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013b0e:	4b05      	ldr	r3, [pc, #20]	; (8013b24 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8013b10:	2201      	movs	r2, #1
 8013b12:	601a      	str	r2, [r3, #0]
 8013b14:	4805      	ldr	r0, [pc, #20]	; (8013b2c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 8013b16:	f00b fbf1 	bl	801f2fc <atexit>
    return hal;
 8013b1a:	4b03      	ldr	r3, [pc, #12]	; (8013b28 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	200090a4 	.word	0x200090a4
 8013b28:	2000903c 	.word	0x2000903c
 8013b2c:	08013ad1 	.word	0x08013ad1

08013b30 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	4a10      	ldr	r2, [pc, #64]	; (8013b7c <_ZN12FrontendHeapD1Ev+0x4c>)
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	601a      	str	r2, [r3, #0]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7ff fcdf 	bl	8013508 <_ZN19FrontendApplicationD1Ev>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	33e8      	adds	r3, #232	; 0xe8
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff ff36 	bl	80139c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	332c      	adds	r3, #44	; 0x2c
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7ff fefd 	bl	8013958 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	3314      	adds	r3, #20
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7ff fec4 	bl	80138f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7ff fd4a 	bl	8013604 <_ZN16FrontendHeapBaseD1Ev>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4618      	mov	r0, r3
 8013b74:	3708      	adds	r7, #8
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	08020cb8 	.word	0x08020cb8

08013b80 <_ZN12FrontendHeapD0Ev>:
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b082      	sub	sp, #8
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	6878      	ldr	r0, [r7, #4]
 8013b8a:	f7ff ffd1 	bl	8013b30 <_ZN12FrontendHeapD1Ev>
 8013b8e:	f44f 7127 	mov.w	r1, #668	; 0x29c
 8013b92:	6878      	ldr	r0, [r7, #4]
 8013b94:	f00b fb77 	bl	801f286 <_ZdlPvj>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3708      	adds	r7, #8
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
	...

08013ba4 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	4a05      	ldr	r2, [pc, #20]	; (8013bc4 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	601a      	str	r2, [r3, #0]
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7ff f9bf 	bl	8012f38 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}
 8013bc4:	080210c4 	.word	0x080210c4

08013bc8 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff ffe7 	bl	8013ba4 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 8013bd6:	2110      	movs	r1, #16
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f00b fb54 	bl	801f286 <_ZdlPvj>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}

08013be8 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	4a05      	ldr	r2, [pc, #20]	; (8013c08 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	601a      	str	r2, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fa fb0f 	bl	800e21c <_ZN8touchgfx15TouchControllerD1Ev>
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	080210ec 	.word	0x080210ec

08013c0c <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f7ff ffe7 	bl	8013be8 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 8013c1a:	2104      	movs	r1, #4
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f00b fb32 	bl	801f286 <_ZdlPvj>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <_Z41__static_initialization_and_destruction_0ii>:
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d10d      	bne.n	8013c58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d108      	bne.n	8013c58 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 8013c46:	4812      	ldr	r0, [pc, #72]	; (8013c90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8013c48:	f000 fde0 	bl	801480c <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 8013c4c:	4811      	ldr	r0, [pc, #68]	; (8013c94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013c4e:	f7ff fd8f 	bl	8013770 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 8013c52:	4811      	ldr	r0, [pc, #68]	; (8013c98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8013c54:	f7ff fdc2 	bl	80137dc <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d113      	bne.n	8013c86 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c64:	4293      	cmp	r3, r2
 8013c66:	d10e      	bne.n	8013c86 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8013c68:	480c      	ldr	r0, [pc, #48]	; (8013c9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8013c6a:	f7ff fd33 	bl	80136d4 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 8013c6e:	480a      	ldr	r0, [pc, #40]	; (8013c98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8013c70:	f7ff ff98 	bl	8013ba4 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 8013c74:	4807      	ldr	r0, [pc, #28]	; (8013c94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8013c76:	f7ff ffb7 	bl	8013be8 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 8013c7a:	4805      	ldr	r0, [pc, #20]	; (8013c90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8013c7c:	f000 fdf0 	bl	8014860 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 8013c80:	4807      	ldr	r0, [pc, #28]	; (8013ca0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8013c82:	f000 f831 	bl	8013ce8 <_ZN23ApplicationFontProviderD1Ev>
}
 8013c86:	bf00      	nop
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	20008588 	.word	0x20008588
 8013c94:	20009028 	.word	0x20009028
 8013c98:	2000902c 	.word	0x2000902c
 8013c9c:	2000005c 	.word	0x2000005c
 8013ca0:	20000054 	.word	0x20000054

08013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	4a05      	ldr	r2, [pc, #20]	; (8013cc4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff fb5b 	bl	8013370 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	08020df4 	.word	0x08020df4

08013cc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f7ff ffe7 	bl	8013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013cd6:	2110      	movs	r1, #16
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f00b fad4 	bl	801f286 <_ZdlPvj>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3708      	adds	r7, #8
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	4a05      	ldr	r2, [pc, #20]	; (8013d08 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff faa3 	bl	8013244 <_ZN8touchgfx12FontProviderD1Ev>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4618      	mov	r0, r3
 8013d02:	3708      	adds	r7, #8
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	08021130 	.word	0x08021130

08013d0c <_ZN23ApplicationFontProviderD0Ev>:
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7ff ffe7 	bl	8013ce8 <_ZN23ApplicationFontProviderD1Ev>
 8013d1a:	2104      	movs	r1, #4
 8013d1c:	6878      	ldr	r0, [r7, #4]
 8013d1e:	f00b fab2 	bl	801f286 <_ZdlPvj>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8013d2c:	b480      	push	{r7}
 8013d2e:	b083      	sub	sp, #12
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013d34:	2301      	movs	r3, #1
    }
 8013d36:	4618      	mov	r0, r3
 8013d38:	370c      	adds	r7, #12
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr

08013d42 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8013d42:	b480      	push	{r7}
 8013d44:	b083      	sub	sp, #12
 8013d46:	af00      	add	r7, sp, #0
 8013d48:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013d4a:	2358      	movs	r3, #88	; 0x58
    }
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	370c      	adds	r7, #12
 8013d50:	46bd      	mov	sp, r7
 8013d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d56:	4770      	bx	lr

08013d58 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013d64:	887b      	ldrh	r3, [r7, #2]
 8013d66:	2258      	movs	r2, #88	; 0x58
 8013d68:	fb02 f303 	mul.w	r3, r2, r3
 8013d6c:	3308      	adds	r3, #8
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	4413      	add	r3, r2
    }
 8013d72:	4618      	mov	r0, r3
 8013d74:	370c      	adds	r7, #12
 8013d76:	46bd      	mov	sp, r7
 8013d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7c:	4770      	bx	lr

08013d7e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 8013d7e:	b480      	push	{r7}
 8013d80:	b083      	sub	sp, #12
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	460b      	mov	r3, r1
 8013d88:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013d8a:	887b      	ldrh	r3, [r7, #2]
 8013d8c:	2258      	movs	r2, #88	; 0x58
 8013d8e:	fb02 f303 	mul.w	r3, r2, r3
 8013d92:	3308      	adds	r3, #8
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	4413      	add	r3, r2
    }
 8013d98:	4618      	mov	r0, r3
 8013d9a:	370c      	adds	r7, #12
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013dac:	2301      	movs	r3, #1
    }
 8013dae:	4618      	mov	r0, r3
 8013db0:	370c      	adds	r7, #12
 8013db2:	46bd      	mov	sp, r7
 8013db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db8:	4770      	bx	lr

08013dba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013dba:	b480      	push	{r7}
 8013dbc:	b083      	sub	sp, #12
 8013dbe:	af00      	add	r7, sp, #0
 8013dc0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013dc2:	23b4      	movs	r3, #180	; 0xb4
    }
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ddc:	887b      	ldrh	r3, [r7, #2]
 8013dde:	22b4      	movs	r2, #180	; 0xb4
 8013de0:	fb02 f303 	mul.w	r3, r2, r3
 8013de4:	3308      	adds	r3, #8
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	4413      	add	r3, r2
    }
 8013dea:	4618      	mov	r0, r3
 8013dec:	370c      	adds	r7, #12
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr

08013df6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013df6:	b480      	push	{r7}
 8013df8:	b083      	sub	sp, #12
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
 8013dfe:	460b      	mov	r3, r1
 8013e00:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e02:	887b      	ldrh	r3, [r7, #2]
 8013e04:	22b4      	movs	r2, #180	; 0xb4
 8013e06:	fb02 f303 	mul.w	r3, r2, r3
 8013e0a:	3308      	adds	r3, #8
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4413      	add	r3, r2
    }
 8013e10:	4618      	mov	r0, r3
 8013e12:	370c      	adds	r7, #12
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013e24:	2301      	movs	r3, #1
    }
 8013e26:	4618      	mov	r0, r3
 8013e28:	370c      	adds	r7, #12
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e30:	4770      	bx	lr

08013e32 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013e32:	b480      	push	{r7}
 8013e34:	b083      	sub	sp, #12
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013e3a:	2310      	movs	r3, #16
    }
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	460b      	mov	r3, r1
 8013e52:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e54:	887b      	ldrh	r3, [r7, #2]
 8013e56:	011b      	lsls	r3, r3, #4
 8013e58:	3308      	adds	r3, #8
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	4413      	add	r3, r2
    }
 8013e5e:	4618      	mov	r0, r3
 8013e60:	370c      	adds	r7, #12
 8013e62:	46bd      	mov	sp, r7
 8013e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e68:	4770      	bx	lr

08013e6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013e6a:	b480      	push	{r7}
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	460b      	mov	r3, r1
 8013e74:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e76:	887b      	ldrh	r3, [r7, #2]
 8013e78:	011b      	lsls	r3, r3, #4
 8013e7a:	3308      	adds	r3, #8
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	4413      	add	r3, r2
    }
 8013e80:	4618      	mov	r0, r3
 8013e82:	370c      	adds	r7, #12
 8013e84:	46bd      	mov	sp, r7
 8013e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8a:	4770      	bx	lr

08013e8c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	68d2      	ldr	r2, [r2, #12]
 8013e9c:	1052      	asrs	r2, r2, #1
 8013e9e:	1899      	adds	r1, r3, r2
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	68db      	ldr	r3, [r3, #12]
 8013ea4:	f003 0301 	and.w	r3, r3, #1
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d102      	bne.n	8013eb2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	689b      	ldr	r3, [r3, #8]
 8013eb0:	e00a      	b.n	8013ec8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	685b      	ldr	r3, [r3, #4]
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	68d2      	ldr	r2, [r2, #12]
 8013eba:	1052      	asrs	r2, r2, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	6892      	ldr	r2, [r2, #8]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4608      	mov	r0, r1
 8013eca:	4798      	blx	r3
    }
 8013ecc:	bf00      	nop
 8013ece:	3708      	adds	r7, #8
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8013ed4:	b480      	push	{r7}
 8013ed6:	b083      	sub	sp, #12
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d010      	beq.n	8013f06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	689b      	ldr	r3, [r3, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d107      	bne.n	8013efc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	f003 0301 	and.w	r3, r3, #1
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d101      	bne.n	8013efc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8013ef8:	2301      	movs	r3, #1
 8013efa:	e000      	b.n	8013efe <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8013efc:	2300      	movs	r3, #0
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	d001      	beq.n	8013f06 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8013f02:	2301      	movs	r3, #1
 8013f04:	e000      	b.n	8013f08 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8013f06:	2300      	movs	r3, #0
    }
 8013f08:	4618      	mov	r0, r3
 8013f0a:	370c      	adds	r7, #12
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <_GLOBAL__sub_I_LCD_GetXSize>:
 8013f14:	b580      	push	{r7, lr}
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013f1c:	2001      	movs	r0, #1
 8013f1e:	f7ff fe85 	bl	8013c2c <_Z41__static_initialization_and_destruction_0ii>
 8013f22:	bd80      	pop	{r7, pc}

08013f24 <_GLOBAL__sub_D_LCD_GetXSize>:
 8013f24:	b580      	push	{r7, lr}
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	f7ff fe7d 	bl	8013c2c <_Z41__static_initialization_and_destruction_0ii>
 8013f32:	bd80      	pop	{r7, pc}

08013f34 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8013f34:	b480      	push	{r7}
 8013f36:	af00      	add	r7, sp, #0
}
 8013f38:	bf00      	nop
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f40:	4770      	bx	lr

08013f42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 8013f42:	b480      	push	{r7}
 8013f44:	b083      	sub	sp, #12
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	4603      	mov	r3, r0
 8013f4a:	71fb      	strb	r3, [r7, #7]
}
 8013f4c:	bf00      	nop
 8013f4e:	370c      	adds	r7, #12
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	4603      	mov	r3, r0
 8013f60:	71fb      	strb	r3, [r7, #7]
}
 8013f62:	bf00      	nop
 8013f64:	370c      	adds	r7, #12
 8013f66:	46bd      	mov	sp, r7
 8013f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f6c:	4770      	bx	lr

08013f6e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 8013f6e:	b480      	push	{r7}
 8013f70:	b083      	sub	sp, #12
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	4603      	mov	r3, r0
 8013f76:	71fb      	strb	r3, [r7, #7]
}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b08e      	sub	sp, #56	; 0x38
 8013f88:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 8013f8a:	4844      	ldr	r0, [pc, #272]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013f8c:	f7f1 f9a0 	bl	80052d0 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8013f90:	4b42      	ldr	r3, [pc, #264]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013f92:	4a43      	ldr	r2, [pc, #268]	; (80140a0 <_Z11MX_LCD_Initv+0x11c>)
 8013f94:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8013f96:	4b41      	ldr	r3, [pc, #260]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013f98:	2200      	movs	r2, #0
 8013f9a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8013f9c:	4b3f      	ldr	r3, [pc, #252]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8013fa2:	4b3e      	ldr	r3, [pc, #248]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8013fa8:	4b3c      	ldr	r3, [pc, #240]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8013fae:	4b3b      	ldr	r3, [pc, #236]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fb0:	2228      	movs	r2, #40	; 0x28
 8013fb2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8013fb4:	4b39      	ldr	r3, [pc, #228]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fb6:	2209      	movs	r2, #9
 8013fb8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8013fba:	4b38      	ldr	r3, [pc, #224]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fbc:	2235      	movs	r2, #53	; 0x35
 8013fbe:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8013fc0:	4b36      	ldr	r3, [pc, #216]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fc2:	220b      	movs	r2, #11
 8013fc4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8013fc6:	4b35      	ldr	r3, [pc, #212]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fc8:	f240 2215 	movw	r2, #533	; 0x215
 8013fcc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8013fce:	4b33      	ldr	r3, [pc, #204]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fd0:	f240 121b 	movw	r2, #283	; 0x11b
 8013fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8013fd6:	4b31      	ldr	r3, [pc, #196]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fd8:	f240 2235 	movw	r2, #565	; 0x235
 8013fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8013fde:	4b2f      	ldr	r3, [pc, #188]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fe0:	f240 121d 	movw	r2, #285	; 0x11d
 8013fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8013fe6:	4b2d      	ldr	r3, [pc, #180]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013fe8:	2200      	movs	r2, #0
 8013fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8013fee:	4b2b      	ldr	r3, [pc, #172]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8013ff6:	4b29      	ldr	r3, [pc, #164]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8013ffe:	4827      	ldr	r0, [pc, #156]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 8014000:	f7f1 f896 	bl	8005130 <HAL_LTDC_Init>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	bf14      	ite	ne
 801400a:	2301      	movne	r3, #1
 801400c:	2300      	moveq	r3, #0
 801400e:	b2db      	uxtb	r3, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	d001      	beq.n	8014018 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 8014014:	f002 fdaa 	bl	8016b6c <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801401c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014020:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8014026:	f44f 7388 	mov.w	r3, #272	; 0x110
 801402a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801402c:	2302      	movs	r3, #2
 801402e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8014030:	23ff      	movs	r3, #255	; 0xff
 8014032:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8014034:	2300      	movs	r3, #0
 8014036:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8014038:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801403c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801403e:	2307      	movs	r3, #7
 8014040:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8014042:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8014046:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8014048:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801404c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 801404e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014052:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8014054:	2300      	movs	r3, #0
 8014056:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 801405a:	2300      	movs	r3, #0
 801405c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8014060:	2300      	movs	r3, #0
 8014062:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8014066:	1d3b      	adds	r3, r7, #4
 8014068:	2200      	movs	r2, #0
 801406a:	4619      	mov	r1, r3
 801406c:	480b      	ldr	r0, [pc, #44]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 801406e:	f7f1 f9ff 	bl	8005470 <HAL_LTDC_ConfigLayer>
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	bf14      	ite	ne
 8014078:	2301      	movne	r3, #1
 801407a:	2300      	moveq	r3, #0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 8014082:	f002 fd73 	bl	8016b6c <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8014086:	2200      	movs	r2, #0
 8014088:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801408c:	4803      	ldr	r0, [pc, #12]	; (801409c <_Z11MX_LCD_Initv+0x118>)
 801408e:	f7f1 fa2d 	bl	80054ec <HAL_LTDC_SetPitch>

}
 8014092:	bf00      	nop
 8014094:	3738      	adds	r7, #56	; 0x38
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	200090a8 	.word	0x200090a8
 80140a0:	40016800 	.word	0x40016800

080140a4 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b088      	sub	sp, #32
 80140a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80140aa:	1d3b      	adds	r3, r7, #4
 80140ac:	2200      	movs	r2, #0
 80140ae:	601a      	str	r2, [r3, #0]
 80140b0:	605a      	str	r2, [r3, #4]
 80140b2:	609a      	str	r2, [r3, #8]
 80140b4:	60da      	str	r2, [r3, #12]
 80140b6:	611a      	str	r2, [r3, #16]
 80140b8:	615a      	str	r2, [r3, #20]
 80140ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80140bc:	4b22      	ldr	r3, [pc, #136]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140be:	4a23      	ldr	r2, [pc, #140]	; (801414c <_Z11MX_FMC_Initv+0xa8>)
 80140c0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80140c2:	4b21      	ldr	r3, [pc, #132]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140c4:	2200      	movs	r2, #0
 80140c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80140c8:	4b1f      	ldr	r3, [pc, #124]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140ca:	2200      	movs	r2, #0
 80140cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80140ce:	4b1e      	ldr	r3, [pc, #120]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140d0:	2204      	movs	r2, #4
 80140d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80140d4:	4b1c      	ldr	r3, [pc, #112]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140d6:	2210      	movs	r2, #16
 80140d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80140da:	4b1b      	ldr	r3, [pc, #108]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140dc:	2240      	movs	r2, #64	; 0x40
 80140de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80140e0:	4b19      	ldr	r3, [pc, #100]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140e2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80140e6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80140e8:	4b17      	ldr	r3, [pc, #92]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140ea:	2200      	movs	r2, #0
 80140ec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80140ee:	4b16      	ldr	r3, [pc, #88]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80140f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80140f6:	4b14      	ldr	r3, [pc, #80]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 80140f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80140fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80140fe:	4b12      	ldr	r3, [pc, #72]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 8014100:	2200      	movs	r2, #0
 8014102:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8014104:	2302      	movs	r3, #2
 8014106:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8014108:	2307      	movs	r3, #7
 801410a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 801410c:	2304      	movs	r3, #4
 801410e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8014110:	2307      	movs	r3, #7
 8014112:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8014114:	2303      	movs	r3, #3
 8014116:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8014118:	2302      	movs	r3, #2
 801411a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 801411c:	2302      	movs	r3, #2
 801411e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8014120:	1d3b      	adds	r3, r7, #4
 8014122:	4619      	mov	r1, r3
 8014124:	4808      	ldr	r0, [pc, #32]	; (8014148 <_Z11MX_FMC_Initv+0xa4>)
 8014126:	f7f4 fd25 	bl	8008b74 <HAL_SDRAM_Init>
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	bf14      	ite	ne
 8014130:	2301      	movne	r3, #1
 8014132:	2300      	moveq	r3, #0
 8014134:	b2db      	uxtb	r3, r3
 8014136:	2b00      	cmp	r3, #0
 8014138:	d001      	beq.n	801413e <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 801413a:	f002 fd17 	bl	8016b6c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801413e:	bf00      	nop
 8014140:	3720      	adds	r7, #32
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	20009190 	.word	0x20009190
 801414c:	a0000140 	.word	0xa0000140

08014150 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8014156:	2300      	movs	r3, #0
 8014158:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801415a:	4b2b      	ldr	r3, [pc, #172]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 801415c:	2201      	movs	r2, #1
 801415e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8014160:	4b29      	ldr	r3, [pc, #164]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014162:	2210      	movs	r2, #16
 8014164:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014166:	4b28      	ldr	r3, [pc, #160]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014168:	2201      	movs	r2, #1
 801416a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 801416c:	4b26      	ldr	r3, [pc, #152]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 801416e:	2200      	movs	r2, #0
 8014170:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8014172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014176:	4924      	ldr	r1, [pc, #144]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014178:	4824      	ldr	r0, [pc, #144]	; (801420c <_Z15MX_SDRAM_InitExv+0xbc>)
 801417a:	f7f4 fd2f 	bl	8008bdc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 801417e:	2001      	movs	r0, #1
 8014180:	f7ec fce6 	bl	8000b50 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8014184:	4b20      	ldr	r3, [pc, #128]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014186:	2202      	movs	r2, #2
 8014188:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801418a:	4b1f      	ldr	r3, [pc, #124]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 801418c:	2210      	movs	r2, #16
 801418e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8014190:	4b1d      	ldr	r3, [pc, #116]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014192:	2201      	movs	r2, #1
 8014194:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8014196:	4b1c      	ldr	r3, [pc, #112]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 8014198:	2200      	movs	r2, #0
 801419a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801419c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141a0:	4919      	ldr	r1, [pc, #100]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141a2:	481a      	ldr	r0, [pc, #104]	; (801420c <_Z15MX_SDRAM_InitExv+0xbc>)
 80141a4:	f7f4 fd1a 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80141a8:	4b17      	ldr	r3, [pc, #92]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141aa:	2203      	movs	r2, #3
 80141ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80141ae:	4b16      	ldr	r3, [pc, #88]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141b0:	2210      	movs	r2, #16
 80141b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80141b4:	4b14      	ldr	r3, [pc, #80]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141b6:	2208      	movs	r2, #8
 80141b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80141ba:	4b13      	ldr	r3, [pc, #76]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141bc:	2200      	movs	r2, #0
 80141be:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80141c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141c4:	4910      	ldr	r1, [pc, #64]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141c6:	4811      	ldr	r0, [pc, #68]	; (801420c <_Z15MX_SDRAM_InitExv+0xbc>)
 80141c8:	f7f4 fd08 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80141cc:	f44f 730c 	mov.w	r3, #560	; 0x230
 80141d0:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80141d2:	4b0d      	ldr	r3, [pc, #52]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141d4:	2204      	movs	r2, #4
 80141d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80141d8:	4b0b      	ldr	r3, [pc, #44]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141da:	2210      	movs	r2, #16
 80141dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80141de:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141e0:	2201      	movs	r2, #1
 80141e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4a08      	ldr	r2, [pc, #32]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141e8:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80141ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141ee:	4906      	ldr	r1, [pc, #24]	; (8014208 <_Z15MX_SDRAM_InitExv+0xb8>)
 80141f0:	4806      	ldr	r0, [pc, #24]	; (801420c <_Z15MX_SDRAM_InitExv+0xbc>)
 80141f2:	f7f4 fcf3 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 80141f6:	f240 6173 	movw	r1, #1651	; 0x673
 80141fa:	4804      	ldr	r0, [pc, #16]	; (801420c <_Z15MX_SDRAM_InitExv+0xbc>)
 80141fc:	f7f4 fd19 	bl	8008c32 <HAL_SDRAM_ProgramRefreshRate>
}
 8014200:	bf00      	nop
 8014202:	3708      	adds	r7, #8
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}
 8014208:	200091c4 	.word	0x200091c4
 801420c:	20009190 	.word	0x20009190

08014210 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b08e      	sub	sp, #56	; 0x38
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801421c:	2200      	movs	r2, #0
 801421e:	601a      	str	r2, [r3, #0]
 8014220:	605a      	str	r2, [r3, #4]
 8014222:	609a      	str	r2, [r3, #8]
 8014224:	60da      	str	r2, [r3, #12]
 8014226:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	4a55      	ldr	r2, [pc, #340]	; (8014384 <HAL_LTDC_MspInit+0x174>)
 801422e:	4293      	cmp	r3, r2
 8014230:	f040 80a3 	bne.w	801437a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8014234:	4b54      	ldr	r3, [pc, #336]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014238:	4a53      	ldr	r2, [pc, #332]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801423a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801423e:	6453      	str	r3, [r2, #68]	; 0x44
 8014240:	4b51      	ldr	r3, [pc, #324]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014248:	623b      	str	r3, [r7, #32]
 801424a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801424c:	4b4e      	ldr	r3, [pc, #312]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014250:	4a4d      	ldr	r2, [pc, #308]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014252:	f043 0310 	orr.w	r3, r3, #16
 8014256:	6313      	str	r3, [r2, #48]	; 0x30
 8014258:	4b4b      	ldr	r3, [pc, #300]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801425c:	f003 0310 	and.w	r3, r3, #16
 8014260:	61fb      	str	r3, [r7, #28]
 8014262:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014264:	4b48      	ldr	r3, [pc, #288]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014268:	4a47      	ldr	r2, [pc, #284]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801426a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801426e:	6313      	str	r3, [r2, #48]	; 0x30
 8014270:	4b45      	ldr	r3, [pc, #276]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014278:	61bb      	str	r3, [r7, #24]
 801427a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 801427c:	4b42      	ldr	r3, [pc, #264]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801427e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014280:	4a41      	ldr	r2, [pc, #260]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014286:	6313      	str	r3, [r2, #48]	; 0x30
 8014288:	4b3f      	ldr	r3, [pc, #252]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801428c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014290:	617b      	str	r3, [r7, #20]
 8014292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014294:	4b3c      	ldr	r3, [pc, #240]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 8014296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014298:	4a3b      	ldr	r2, [pc, #236]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 801429a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801429e:	6313      	str	r3, [r2, #48]	; 0x30
 80142a0:	4b39      	ldr	r3, [pc, #228]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 80142a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142a8:	613b      	str	r3, [r7, #16]
 80142aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80142ac:	4b36      	ldr	r3, [pc, #216]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 80142ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142b0:	4a35      	ldr	r2, [pc, #212]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 80142b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80142b6:	6313      	str	r3, [r2, #48]	; 0x30
 80142b8:	4b33      	ldr	r3, [pc, #204]	; (8014388 <HAL_LTDC_MspInit+0x178>)
 80142ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142c0:	60fb      	str	r3, [r7, #12]
 80142c2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80142c4:	2310      	movs	r3, #16
 80142c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142c8:	2302      	movs	r3, #2
 80142ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142cc:	2300      	movs	r3, #0
 80142ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142d0:	2300      	movs	r3, #0
 80142d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80142d4:	230e      	movs	r3, #14
 80142d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80142d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142dc:	4619      	mov	r1, r3
 80142de:	482b      	ldr	r0, [pc, #172]	; (801438c <HAL_LTDC_MspInit+0x17c>)
 80142e0:	f7ee fa36 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80142e4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80142e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80142ea:	2302      	movs	r3, #2
 80142ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80142f2:	2300      	movs	r3, #0
 80142f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80142f6:	230e      	movs	r3, #14
 80142f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80142fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142fe:	4619      	mov	r1, r3
 8014300:	4823      	ldr	r0, [pc, #140]	; (8014390 <HAL_LTDC_MspInit+0x180>)
 8014302:	f7ee fa25 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8014306:	23f7      	movs	r3, #247	; 0xf7
 8014308:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801430a:	2302      	movs	r3, #2
 801430c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801430e:	2300      	movs	r3, #0
 8014310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014312:	2300      	movs	r3, #0
 8014314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014316:	230e      	movs	r3, #14
 8014318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801431e:	4619      	mov	r1, r3
 8014320:	481c      	ldr	r0, [pc, #112]	; (8014394 <HAL_LTDC_MspInit+0x184>)
 8014322:	f7ee fa15 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8014326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801432a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801432c:	2302      	movs	r3, #2
 801432e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014330:	2300      	movs	r3, #0
 8014332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014334:	2300      	movs	r3, #0
 8014336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8014338:	2309      	movs	r3, #9
 801433a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 801433c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014340:	4619      	mov	r1, r3
 8014342:	4815      	ldr	r0, [pc, #84]	; (8014398 <HAL_LTDC_MspInit+0x188>)
 8014344:	f7ee fa04 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8014348:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 801434c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801434e:	2302      	movs	r3, #2
 8014350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014352:	2300      	movs	r3, #0
 8014354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014356:	2300      	movs	r3, #0
 8014358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801435a:	230e      	movs	r3, #14
 801435c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801435e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014362:	4619      	mov	r1, r3
 8014364:	480d      	ldr	r0, [pc, #52]	; (801439c <HAL_LTDC_MspInit+0x18c>)
 8014366:	f7ee f9f3 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801436a:	2200      	movs	r2, #0
 801436c:	2105      	movs	r1, #5
 801436e:	2058      	movs	r0, #88	; 0x58
 8014370:	f7ec ff5c 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8014374:	2058      	movs	r0, #88	; 0x58
 8014376:	f7ec ff75 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 801437a:	bf00      	nop
 801437c:	3738      	adds	r7, #56	; 0x38
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop
 8014384:	40016800 	.word	0x40016800
 8014388:	40023800 	.word	0x40023800
 801438c:	40021000 	.word	0x40021000
 8014390:	40022400 	.word	0x40022400
 8014394:	40022800 	.word	0x40022800
 8014398:	40021800 	.word	0x40021800
 801439c:	40022000 	.word	0x40022000

080143a0 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4a13      	ldr	r2, [pc, #76]	; (80143fc <HAL_LTDC_MspDeInit+0x5c>)
 80143ae:	4293      	cmp	r3, r2
 80143b0:	d11f      	bne.n	80143f2 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 80143b2:	4b13      	ldr	r3, [pc, #76]	; (8014400 <HAL_LTDC_MspDeInit+0x60>)
 80143b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143b6:	4a12      	ldr	r2, [pc, #72]	; (8014400 <HAL_LTDC_MspDeInit+0x60>)
 80143b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80143bc:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 80143be:	2110      	movs	r1, #16
 80143c0:	4810      	ldr	r0, [pc, #64]	; (8014404 <HAL_LTDC_MspDeInit+0x64>)
 80143c2:	f7ee fb6f 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80143c6:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80143ca:	480f      	ldr	r0, [pc, #60]	; (8014408 <HAL_LTDC_MspDeInit+0x68>)
 80143cc:	f7ee fb6a 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80143d0:	21f7      	movs	r1, #247	; 0xf7
 80143d2:	480e      	ldr	r0, [pc, #56]	; (801440c <HAL_LTDC_MspDeInit+0x6c>)
 80143d4:	f7ee fb66 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 80143d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80143dc:	480c      	ldr	r0, [pc, #48]	; (8014410 <HAL_LTDC_MspDeInit+0x70>)
 80143de:	f7ee fb61 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 80143e2:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 80143e6:	480b      	ldr	r0, [pc, #44]	; (8014414 <HAL_LTDC_MspDeInit+0x74>)
 80143e8:	f7ee fb5c 	bl	8002aa4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 80143ec:	2058      	movs	r0, #88	; 0x58
 80143ee:	f7ec ff47 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 80143f2:	bf00      	nop
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
 80143fa:	bf00      	nop
 80143fc:	40016800 	.word	0x40016800
 8014400:	40023800 	.word	0x40023800
 8014404:	40021000 	.word	0x40021000
 8014408:	40022400 	.word	0x40022400
 801440c:	40022800 	.word	0x40022800
 8014410:	40021800 	.word	0x40021800
 8014414:	40022000 	.word	0x40022000

08014418 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8014418:	b580      	push	{r7, lr}
 801441a:	b086      	sub	sp, #24
 801441c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 801441e:	1d3b      	adds	r3, r7, #4
 8014420:	2200      	movs	r2, #0
 8014422:	601a      	str	r2, [r3, #0]
 8014424:	605a      	str	r2, [r3, #4]
 8014426:	609a      	str	r2, [r3, #8]
 8014428:	60da      	str	r2, [r3, #12]
 801442a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 801442c:	4b3a      	ldr	r3, [pc, #232]	; (8014518 <_ZL15HAL_FMC_MspInitv+0x100>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d16d      	bne.n	8014510 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8014434:	4b38      	ldr	r3, [pc, #224]	; (8014518 <_ZL15HAL_FMC_MspInitv+0x100>)
 8014436:	2201      	movs	r2, #1
 8014438:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 801443a:	4b38      	ldr	r3, [pc, #224]	; (801451c <_ZL15HAL_FMC_MspInitv+0x104>)
 801443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443e:	4a37      	ldr	r2, [pc, #220]	; (801451c <_ZL15HAL_FMC_MspInitv+0x104>)
 8014440:	f043 0301 	orr.w	r3, r3, #1
 8014444:	6393      	str	r3, [r2, #56]	; 0x38
 8014446:	4b35      	ldr	r3, [pc, #212]	; (801451c <_ZL15HAL_FMC_MspInitv+0x104>)
 8014448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801444a:	f003 0301 	and.w	r3, r3, #1
 801444e:	603b      	str	r3, [r7, #0]
 8014450:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8014452:	f64f 7383 	movw	r3, #65411	; 0xff83
 8014456:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014458:	2302      	movs	r3, #2
 801445a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801445c:	2300      	movs	r3, #0
 801445e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014460:	2303      	movs	r3, #3
 8014462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014464:	230c      	movs	r3, #12
 8014466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014468:	1d3b      	adds	r3, r7, #4
 801446a:	4619      	mov	r1, r3
 801446c:	482c      	ldr	r0, [pc, #176]	; (8014520 <_ZL15HAL_FMC_MspInitv+0x108>)
 801446e:	f7ee f96f 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8014472:	f248 1333 	movw	r3, #33075	; 0x8133
 8014476:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014478:	2302      	movs	r3, #2
 801447a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801447c:	2300      	movs	r3, #0
 801447e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014480:	2303      	movs	r3, #3
 8014482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014484:	230c      	movs	r3, #12
 8014486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014488:	1d3b      	adds	r3, r7, #4
 801448a:	4619      	mov	r1, r3
 801448c:	4825      	ldr	r0, [pc, #148]	; (8014524 <_ZL15HAL_FMC_MspInitv+0x10c>)
 801448e:	f7ee f95f 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8014492:	f24c 7303 	movw	r3, #50947	; 0xc703
 8014496:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014498:	2302      	movs	r3, #2
 801449a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801449c:	2300      	movs	r3, #0
 801449e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144a0:	2303      	movs	r3, #3
 80144a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80144a4:	230c      	movs	r3, #12
 80144a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80144a8:	1d3b      	adds	r3, r7, #4
 80144aa:	4619      	mov	r1, r3
 80144ac:	481e      	ldr	r0, [pc, #120]	; (8014528 <_ZL15HAL_FMC_MspInitv+0x110>)
 80144ae:	f7ee f94f 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80144b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80144b6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144b8:	2302      	movs	r3, #2
 80144ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144bc:	2300      	movs	r3, #0
 80144be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144c0:	2303      	movs	r3, #3
 80144c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80144c4:	230c      	movs	r3, #12
 80144c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80144c8:	1d3b      	adds	r3, r7, #4
 80144ca:	4619      	mov	r1, r3
 80144cc:	4817      	ldr	r0, [pc, #92]	; (801452c <_ZL15HAL_FMC_MspInitv+0x114>)
 80144ce:	f7ee f93f 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80144d2:	2328      	movs	r3, #40	; 0x28
 80144d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144d6:	2302      	movs	r3, #2
 80144d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144da:	2300      	movs	r3, #0
 80144dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144de:	2303      	movs	r3, #3
 80144e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80144e2:	230c      	movs	r3, #12
 80144e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80144e6:	1d3b      	adds	r3, r7, #4
 80144e8:	4619      	mov	r1, r3
 80144ea:	4811      	ldr	r0, [pc, #68]	; (8014530 <_ZL15HAL_FMC_MspInitv+0x118>)
 80144ec:	f7ee f930 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80144f0:	2308      	movs	r3, #8
 80144f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144f4:	2302      	movs	r3, #2
 80144f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144f8:	2300      	movs	r3, #0
 80144fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144fc:	2303      	movs	r3, #3
 80144fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8014500:	230c      	movs	r3, #12
 8014502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8014504:	1d3b      	adds	r3, r7, #4
 8014506:	4619      	mov	r1, r3
 8014508:	480a      	ldr	r0, [pc, #40]	; (8014534 <_ZL15HAL_FMC_MspInitv+0x11c>)
 801450a:	f7ee f921 	bl	8002750 <HAL_GPIO_Init>
 801450e:	e000      	b.n	8014512 <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 8014510:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	200091d4 	.word	0x200091d4
 801451c:	40023800 	.word	0x40023800
 8014520:	40021000 	.word	0x40021000
 8014524:	40021800 	.word	0x40021800
 8014528:	40020c00 	.word	0x40020c00
 801452c:	40021400 	.word	0x40021400
 8014530:	40021c00 	.word	0x40021c00
 8014534:	40020800 	.word	0x40020800

08014538 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8014540:	f7ff ff6a 	bl	8014418 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8014544:	bf00      	nop
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b084      	sub	sp, #16
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a0d      	ldr	r2, [pc, #52]	; (8014590 <HAL_DMA2D_MspInit+0x44>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d113      	bne.n	8014586 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801455e:	4b0d      	ldr	r3, [pc, #52]	; (8014594 <HAL_DMA2D_MspInit+0x48>)
 8014560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014562:	4a0c      	ldr	r2, [pc, #48]	; (8014594 <HAL_DMA2D_MspInit+0x48>)
 8014564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014568:	6313      	str	r3, [r2, #48]	; 0x30
 801456a:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <HAL_DMA2D_MspInit+0x48>)
 801456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801456e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8014576:	2200      	movs	r2, #0
 8014578:	2105      	movs	r1, #5
 801457a:	205a      	movs	r0, #90	; 0x5a
 801457c:	f7ec fe56 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8014580:	205a      	movs	r0, #90	; 0x5a
 8014582:	f7ec fe6f 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8014586:	bf00      	nop
 8014588:	3710      	adds	r7, #16
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
 801458e:	bf00      	nop
 8014590:	4002b000 	.word	0x4002b000
 8014594:	40023800 	.word	0x40023800

08014598 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	4a07      	ldr	r2, [pc, #28]	; (80145c4 <HAL_DMA2D_MspDeInit+0x2c>)
 80145a6:	4293      	cmp	r3, r2
 80145a8:	d108      	bne.n	80145bc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80145aa:	4b07      	ldr	r3, [pc, #28]	; (80145c8 <HAL_DMA2D_MspDeInit+0x30>)
 80145ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145ae:	4a06      	ldr	r2, [pc, #24]	; (80145c8 <HAL_DMA2D_MspDeInit+0x30>)
 80145b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80145b4:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80145b6:	205a      	movs	r0, #90	; 0x5a
 80145b8:	f7ec fe62 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}
 80145c4:	4002b000 	.word	0x4002b000
 80145c8:	40023800 	.word	0x40023800

080145cc <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 80145cc:	b480      	push	{r7}
 80145ce:	b083      	sub	sp, #12
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
    {
 80145d4:	4a04      	ldr	r2, [pc, #16]	; (80145e8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	601a      	str	r2, [r3, #0]
    }
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4618      	mov	r0, r3
 80145de:	370c      	adds	r7, #12
 80145e0:	46bd      	mov	sp, r7
 80145e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e6:	4770      	bx	lr
 80145e8:	08020f54 	.word	0x08020f54

080145ec <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
    }
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7ff ffe9 	bl	80145cc <_ZN8touchgfx9DMA_QueueD1Ev>
 80145fa:	2104      	movs	r1, #4
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f00a fe42 	bl	801f286 <_ZdlPvj>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	3340      	adds	r3, #64	; 0x40
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	4798      	blx	r3
    }
 8014620:	bf00      	nop
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}

08014628 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8014628:	b480      	push	{r7}
 801462a:	b083      	sub	sp, #12
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
    {
 8014630:	4a04      	ldr	r2, [pc, #16]	; (8014644 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	601a      	str	r2, [r3, #0]
    }
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	4618      	mov	r0, r3
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr
 8014644:	08021e44 	.word	0x08021e44

08014648 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8014648:	b580      	push	{r7, lr}
 801464a:	b082      	sub	sp, #8
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
    }
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ff ffe9 	bl	8014628 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8014656:	210c      	movs	r1, #12
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f00a fe14 	bl	801f286 <_ZdlPvj>
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	4618      	mov	r0, r3
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8014668:	b480      	push	{r7}
 801466a:	b083      	sub	sp, #12
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
 8014670:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8014672:	4a09      	ldr	r2, [pc, #36]	; (8014698 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	601a      	str	r2, [r3, #0]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	683a      	ldr	r2, [r7, #0]
 801467c:	605a      	str	r2, [r3, #4]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2200      	movs	r2, #0
 8014682:	721a      	strb	r2, [r3, #8]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2200      	movs	r2, #0
 8014688:	725a      	strb	r2, [r3, #9]
    {
    }
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	4618      	mov	r0, r3
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr
 8014698:	08021e44 	.word	0x08021e44

0801469c <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	685a      	ldr	r2, [r3, #4]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	3314      	adds	r3, #20
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4610      	mov	r0, r2
 80146b4:	4798      	blx	r3
    }
 80146b6:	bf00      	nop
 80146b8:	3708      	adds	r7, #8
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}

080146be <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80146be:	b580      	push	{r7, lr}
 80146c0:	b082      	sub	sp, #8
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	3324      	adds	r3, #36	; 0x24
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	4610      	mov	r0, r2
 80146d2:	4798      	blx	r3
    }
 80146d4:	bf00      	nop
 80146d6:	3708      	adds	r7, #8
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <__NVIC_EnableIRQ>:
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	4603      	mov	r3, r0
 80146e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80146e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	db0d      	blt.n	801470a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80146ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	f003 021f 	and.w	r2, r3, #31
 80146f8:	4907      	ldr	r1, [pc, #28]	; (8014718 <__NVIC_EnableIRQ+0x3c>)
 80146fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80146fe:	095b      	lsrs	r3, r3, #5
 8014700:	2001      	movs	r0, #1
 8014702:	fa00 f202 	lsl.w	r2, r0, r2
 8014706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801470a:	bf00      	nop
 801470c:	370c      	adds	r7, #12
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	e000e100 	.word	0xe000e100

0801471c <__NVIC_DisableIRQ>:
{
 801471c:	b480      	push	{r7}
 801471e:	b083      	sub	sp, #12
 8014720:	af00      	add	r7, sp, #0
 8014722:	4603      	mov	r3, r0
 8014724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801472a:	2b00      	cmp	r3, #0
 801472c:	db12      	blt.n	8014754 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801472e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014732:	b2db      	uxtb	r3, r3
 8014734:	f003 021f 	and.w	r2, r3, #31
 8014738:	4909      	ldr	r1, [pc, #36]	; (8014760 <__NVIC_DisableIRQ+0x44>)
 801473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801473e:	095b      	lsrs	r3, r3, #5
 8014740:	2001      	movs	r0, #1
 8014742:	fa00 f202 	lsl.w	r2, r0, r2
 8014746:	3320      	adds	r3, #32
 8014748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801474c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014750:	f3bf 8f6f 	isb	sy
}
 8014754:	bf00      	nop
 8014756:	370c      	adds	r7, #12
 8014758:	46bd      	mov	sp, r7
 801475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475e:	4770      	bx	lr
 8014760:	e000e100 	.word	0xe000e100

08014764 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8014764:	b480      	push	{r7}
 8014766:	b085      	sub	sp, #20
 8014768:	af00      	add	r7, sp, #0
 801476a:	60f8      	str	r0, [r7, #12]
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801477c:	68ba      	ldr	r2, [r7, #8]
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	430a      	orrs	r2, r1
 8014784:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801478c:	f023 0107 	bic.w	r1, r3, #7
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	430a      	orrs	r2, r1
 8014798:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80147a0:	4b06      	ldr	r3, [pc, #24]	; (80147bc <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 80147a2:	4013      	ands	r3, r2
 80147a4:	6839      	ldr	r1, [r7, #0]
 80147a6:	68fa      	ldr	r2, [r7, #12]
 80147a8:	6812      	ldr	r2, [r2, #0]
 80147aa:	430b      	orrs	r3, r1
 80147ac:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 80147ae:	2300      	movs	r3, #0
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	3714      	adds	r7, #20
 80147b4:	46bd      	mov	sp, r7
 80147b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ba:	4770      	bx	lr
 80147bc:	ffffc000 	.word	0xffffc000

080147c0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80147c8:	f7fa fd6c 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 80147cc:	4603      	mov	r3, r0
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7ff ff64 	bl	801469c <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80147d4:	bf00      	nop
 80147d6:	3708      	adds	r7, #8
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	3314      	adds	r3, #20
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7fa fe3d 	bl	800f47c <_ZN8touchgfx9colortypeC1Ev>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4618      	mov	r0, r3
 8014806:	3708      	adds	r7, #8
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 801480c:	b5b0      	push	{r4, r5, r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	330c      	adds	r3, #12
 801481a:	4619      	mov	r1, r3
 801481c:	4610      	mov	r0, r2
 801481e:	f7ff ff23 	bl	8014668 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8014822:	4a0e      	ldr	r2, [pc, #56]	; (801485c <_ZN10STM32F7DMAC1Ev+0x50>)
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	601a      	str	r2, [r3, #0]
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	f103 000c 	add.w	r0, r3, #12
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	3320      	adds	r3, #32
 8014832:	2260      	movs	r2, #96	; 0x60
 8014834:	4619      	mov	r1, r3
 8014836:	f006 ffeb 	bl	801b810 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	3320      	adds	r3, #32
 801483e:	245f      	movs	r4, #95	; 0x5f
 8014840:	461d      	mov	r5, r3
 8014842:	2c00      	cmp	r4, #0
 8014844:	db05      	blt.n	8014852 <_ZN10STM32F7DMAC1Ev+0x46>
 8014846:	4628      	mov	r0, r5
 8014848:	f7ff ffd2 	bl	80147f0 <_ZN8touchgfx6BlitOpC1Ev>
 801484c:	351c      	adds	r5, #28
 801484e:	3c01      	subs	r4, #1
 8014850:	e7f7      	b.n	8014842 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	4618      	mov	r0, r3
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bdb0      	pop	{r4, r5, r7, pc}
 801485c:	08020f08 	.word	0x08020f08

08014860 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	4a0b      	ldr	r2, [pc, #44]	; (8014898 <_ZN10STM32F7DMAD1Ev+0x38>)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801486e:	480b      	ldr	r0, [pc, #44]	; (801489c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8014870:	f7ec ff54 	bl	800171c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8014874:	205a      	movs	r0, #90	; 0x5a
 8014876:	f7ff ff51 	bl	801471c <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	330c      	adds	r3, #12
 801487e:	4618      	mov	r0, r3
 8014880:	f000 fab6 	bl	8014df0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4618      	mov	r0, r3
 8014888:	f7ff fece 	bl	8014628 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	4618      	mov	r0, r3
 8014890:	3708      	adds	r7, #8
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	08020f08 	.word	0x08020f08
 801489c:	20009150 	.word	0x20009150

080148a0 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b082      	sub	sp, #8
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
}
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7ff ffd9 	bl	8014860 <_ZN10STM32F7DMAD1Ev>
 80148ae:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f00a fce7 	bl	801f286 <_ZdlPvj>
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	4618      	mov	r0, r3
 80148bc:	3708      	adds	r7, #8
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
	...

080148c4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80148cc:	4b09      	ldr	r3, [pc, #36]	; (80148f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80148ce:	4a0a      	ldr	r2, [pc, #40]	; (80148f8 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80148d0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80148d2:	4808      	ldr	r0, [pc, #32]	; (80148f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80148d4:	f7ec fed8 	bl	8001688 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80148d8:	4b06      	ldr	r3, [pc, #24]	; (80148f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80148da:	4a08      	ldr	r2, [pc, #32]	; (80148fc <_ZN10STM32F7DMA10initializeEv+0x38>)
 80148dc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80148de:	4b05      	ldr	r3, [pc, #20]	; (80148f4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80148e0:	4a07      	ldr	r2, [pc, #28]	; (8014900 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80148e2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80148e4:	205a      	movs	r0, #90	; 0x5a
 80148e6:	f7ff fef9 	bl	80146dc <__NVIC_EnableIRQ>
}
 80148ea:	bf00      	nop
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	20009150 	.word	0x20009150
 80148f8:	4002b000 	.word	0x4002b000
 80148fc:	080147c1 	.word	0x080147c1
 8014900:	080147dd 	.word	0x080147dd

08014904 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 801490c:	4b07      	ldr	r3, [pc, #28]	; (801492c <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d001      	beq.n	801491a <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 8014916:	2300      	movs	r3, #0
 8014918:	e001      	b.n	801491e <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 801491a:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 801491e:	4618      	mov	r0, r3
 8014920:	370c      	adds	r7, #12
 8014922:	46bd      	mov	sp, r7
 8014924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014928:	4770      	bx	lr
 801492a:	bf00      	nop
 801492c:	200091d8 	.word	0x200091d8

08014930 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8014930:	b590      	push	{r4, r7, lr}
 8014932:	b08d      	sub	sp, #52	; 0x34
 8014934:	af02      	add	r7, sp, #8
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801493a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801493e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8014940:	2300      	movs	r3, #0
 8014942:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014948:	2b20      	cmp	r3, #32
 801494a:	d007      	beq.n	801495c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b40      	cmp	r3, #64	; 0x40
 8014952:	d003      	beq.n	801495c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	2b04      	cmp	r3, #4
 801495a:	d101      	bne.n	8014960 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801495c:	2301      	movs	r3, #1
 801495e:	e000      	b.n	8014962 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8014960:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8014962:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8014964:	683b      	ldr	r3, [r7, #0]
 8014966:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8014968:	2b80      	cmp	r3, #128	; 0x80
 801496a:	d004      	beq.n	8014976 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801496c:	683b      	ldr	r3, [r7, #0]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014974:	d101      	bne.n	801497a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8014976:	2301      	movs	r3, #1
 8014978:	e000      	b.n	801497c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801497a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801497c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801497e:	f7fa fd8b 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 8014982:	4602      	mov	r2, r0
 8014984:	6813      	ldr	r3, [r2, #0]
 8014986:	3320      	adds	r3, #32
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	4610      	mov	r0, r2
 801498c:	4798      	blx	r3
 801498e:	4603      	mov	r3, r0
 8014990:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b40      	cmp	r3, #64	; 0x40
 8014998:	d01d      	beq.n	80149d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 801499a:	2b40      	cmp	r3, #64	; 0x40
 801499c:	d804      	bhi.n	80149a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801499e:	2b04      	cmp	r3, #4
 80149a0:	d00e      	beq.n	80149c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80149a2:	2b20      	cmp	r3, #32
 80149a4:	d017      	beq.n	80149d6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80149a6:	e019      	b.n	80149dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80149a8:	2b80      	cmp	r3, #128	; 0x80
 80149aa:	d003      	beq.n	80149b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80149ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149b0:	d003      	beq.n	80149ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80149b2:	e013      	b.n	80149dc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80149b4:	230a      	movs	r3, #10
 80149b6:	623b      	str	r3, [r7, #32]
        break;
 80149b8:	e01a      	b.n	80149f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80149ba:	2309      	movs	r3, #9
 80149bc:	623b      	str	r3, [r7, #32]
        break;
 80149be:	e017      	b.n	80149f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80149c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80149c4:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80149c6:	7f7b      	ldrb	r3, [r7, #29]
 80149c8:	2b10      	cmp	r3, #16
 80149ca:	d101      	bne.n	80149d0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 80149cc:	2302      	movs	r3, #2
 80149ce:	e000      	b.n	80149d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 80149d0:	2301      	movs	r3, #1
 80149d2:	623b      	str	r3, [r7, #32]
        break;
 80149d4:	e00c      	b.n	80149f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80149d6:	2300      	movs	r3, #0
 80149d8:	623b      	str	r3, [r7, #32]
        break;
 80149da:	e009      	b.n	80149f0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80149dc:	2300      	movs	r3, #0
 80149de:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80149e0:	7f7b      	ldrb	r3, [r7, #29]
 80149e2:	2b10      	cmp	r3, #16
 80149e4:	d101      	bne.n	80149ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 80149e6:	2302      	movs	r3, #2
 80149e8:	e000      	b.n	80149ec <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 80149ea:	2301      	movs	r3, #1
 80149ec:	623b      	str	r3, [r7, #32]
        break;
 80149ee:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80149f0:	4a76      	ldr	r2, [pc, #472]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80149f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f4:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80149f6:	7f7b      	ldrb	r3, [r7, #29]
 80149f8:	2b10      	cmp	r3, #16
 80149fa:	d101      	bne.n	8014a00 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 80149fc:	2302      	movs	r3, #2
 80149fe:	e000      	b.n	8014a02 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8014a00:	2301      	movs	r3, #1
 8014a02:	4a72      	ldr	r2, [pc, #456]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a04:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	8a5b      	ldrh	r3, [r3, #18]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	899b      	ldrh	r3, [r3, #12]
 8014a10:	1ad3      	subs	r3, r2, r3
 8014a12:	461a      	mov	r2, r3
 8014a14:	4b6d      	ldr	r3, [pc, #436]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a16:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014a18:	7f7b      	ldrb	r3, [r7, #29]
 8014a1a:	2b10      	cmp	r3, #16
 8014a1c:	d101      	bne.n	8014a22 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 8014a1e:	2202      	movs	r2, #2
 8014a20:	e000      	b.n	8014a24 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8014a22:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	8a5b      	ldrh	r3, [r3, #18]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	899b      	ldrh	r3, [r3, #12]
 8014a2e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a32:	4866      	ldr	r0, [pc, #408]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a34:	f7ff fe96 	bl	8014764 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014a38:	4a64      	ldr	r2, [pc, #400]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a3a:	6a3b      	ldr	r3, [r7, #32]
 8014a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	8a1b      	ldrh	r3, [r3, #16]
 8014a42:	461a      	mov	r2, r3
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	899b      	ldrh	r3, [r3, #12]
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	4b5f      	ldr	r3, [pc, #380]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a4e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8014a50:	7ffb      	ldrb	r3, [r7, #31]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d103      	bne.n	8014a5e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8014a56:	7fbb      	ldrb	r3, [r7, #30]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 8082 	beq.w	8014b62 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	7e1b      	ldrb	r3, [r3, #24]
 8014a62:	2bff      	cmp	r3, #255	; 0xff
 8014a64:	d008      	beq.n	8014a78 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 8014a66:	4b59      	ldr	r3, [pc, #356]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a68:	2202      	movs	r2, #2
 8014a6a:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	7e1b      	ldrb	r3, [r3, #24]
 8014a70:	461a      	mov	r2, r3
 8014a72:	4b56      	ldr	r3, [pc, #344]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a74:	635a      	str	r2, [r3, #52]	; 0x34
 8014a76:	e002      	b.n	8014a7e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8014a78:	4b54      	ldr	r3, [pc, #336]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8014a7e:	7fbb      	ldrb	r3, [r7, #30]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d059      	beq.n	8014b38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 8014a84:	7f7b      	ldrb	r3, [r7, #29]
 8014a86:	2b10      	cmp	r3, #16
 8014a88:	d14a      	bne.n	8014b20 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	3314      	adds	r3, #20
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fa ff8b 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014a94:	4603      	mov	r3, r0
 8014a96:	12db      	asrs	r3, r3, #11
 8014a98:	f003 021f 	and.w	r2, r3, #31
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	021b      	lsls	r3, r3, #8
 8014aa0:	1a9b      	subs	r3, r3, r2
 8014aa2:	4a4b      	ldr	r2, [pc, #300]	; (8014bd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8014aa8:	441a      	add	r2, r3
 8014aaa:	1112      	asrs	r2, r2, #4
 8014aac:	17db      	asrs	r3, r3, #31
 8014aae:	1ad3      	subs	r3, r2, r3
 8014ab0:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	3314      	adds	r3, #20
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fa ff77 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014abc:	4603      	mov	r3, r0
 8014abe:	115b      	asrs	r3, r3, #5
 8014ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	021b      	lsls	r3, r3, #8
 8014ac8:	1a9b      	subs	r3, r3, r2
 8014aca:	4a42      	ldr	r2, [pc, #264]	; (8014bd4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8014acc:	fb82 1203 	smull	r1, r2, r2, r3
 8014ad0:	441a      	add	r2, r3
 8014ad2:	1152      	asrs	r2, r2, #5
 8014ad4:	17db      	asrs	r3, r3, #31
 8014ad6:	1ad3      	subs	r3, r2, r3
 8014ad8:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	3314      	adds	r3, #20
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fa ff63 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	f003 021f 	and.w	r2, r3, #31
 8014aea:	4613      	mov	r3, r2
 8014aec:	021b      	lsls	r3, r3, #8
 8014aee:	1a9b      	subs	r3, r3, r2
 8014af0:	4a37      	ldr	r2, [pc, #220]	; (8014bd0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8014af2:	fb82 1203 	smull	r1, r2, r2, r3
 8014af6:	441a      	add	r2, r3
 8014af8:	1112      	asrs	r2, r2, #4
 8014afa:	17db      	asrs	r3, r3, #31
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	7e1b      	ldrb	r3, [r3, #24]
 8014b04:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	061a      	lsls	r2, r3, #24
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	041b      	lsls	r3, r3, #16
 8014b0e:	431a      	orrs	r2, r3
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	021b      	lsls	r3, r3, #8
 8014b14:	431a      	orrs	r2, r3
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	4313      	orrs	r3, r2
 8014b1a:	4a2c      	ldr	r2, [pc, #176]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b1c:	6353      	str	r3, [r2, #52]	; 0x34
 8014b1e:	e00b      	b.n	8014b38 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	3314      	adds	r3, #20
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fa ff4d 	bl	800f9c4 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	7e1b      	ldrb	r3, [r3, #24]
 8014b30:	061b      	lsls	r3, r3, #24
 8014b32:	4313      	orrs	r3, r2
 8014b34:	4a25      	ldr	r2, [pc, #148]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b36:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	8a5b      	ldrh	r3, [r3, #18]
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	899b      	ldrh	r3, [r3, #12]
 8014b42:	1ad3      	subs	r3, r2, r3
 8014b44:	461a      	mov	r2, r3
 8014b46:	4b21      	ldr	r3, [pc, #132]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b48:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014b4a:	7f7b      	ldrb	r3, [r7, #29]
 8014b4c:	2b10      	cmp	r3, #16
 8014b4e:	d101      	bne.n	8014b54 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8014b50:	2302      	movs	r3, #2
 8014b52:	e000      	b.n	8014b56 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8014b54:	2301      	movs	r3, #1
 8014b56:	4a1d      	ldr	r2, [pc, #116]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b58:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014b5a:	2100      	movs	r1, #0
 8014b5c:	481b      	ldr	r0, [pc, #108]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b5e:	f7ed f85d 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014b62:	2101      	movs	r1, #1
 8014b64:	4819      	ldr	r0, [pc, #100]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b66:	f7ed f859 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8014b6a:	7ffb      	ldrb	r3, [r7, #31]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d102      	bne.n	8014b76 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 8014b70:	7fbb      	ldrb	r3, [r7, #30]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d015      	beq.n	8014ba2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b7a:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014b7c:	683b      	ldr	r3, [r7, #0]
 8014b7e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b80:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b86:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b8c:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	9200      	str	r2, [sp, #0]
 8014b96:	4623      	mov	r3, r4
 8014b98:	4602      	mov	r2, r0
 8014b9a:	480c      	ldr	r0, [pc, #48]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014b9c:	f7ec fe61 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
 8014ba0:	e00f      	b.n	8014bc2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014ba6:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014bac:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014bb2:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 8014bb8:	9300      	str	r3, [sp, #0]
 8014bba:	4603      	mov	r3, r0
 8014bbc:	4803      	ldr	r0, [pc, #12]	; (8014bcc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8014bbe:	f7ec fe1d 	bl	80017fc <HAL_DMA2D_Start_IT>
    }
}
 8014bc2:	bf00      	nop
 8014bc4:	372c      	adds	r7, #44	; 0x2c
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd90      	pop	{r4, r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	20009150 	.word	0x20009150
 8014bd0:	84210843 	.word	0x84210843
 8014bd4:	82082083 	.word	0x82082083

08014bd8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8014bd8:	b590      	push	{r4, r7, lr}
 8014bda:	b08d      	sub	sp, #52	; 0x34
 8014bdc:	af02      	add	r7, sp, #8
 8014bde:	6078      	str	r0, [r7, #4]
 8014be0:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8014be2:	f7fa fc59 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 8014be6:	4602      	mov	r2, r0
 8014be8:	6813      	ldr	r3, [r2, #0]
 8014bea:	3320      	adds	r3, #32
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4610      	mov	r0, r2
 8014bf0:	4798      	blx	r3
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014bf6:	7ffb      	ldrb	r3, [r7, #31]
 8014bf8:	2b10      	cmp	r3, #16
 8014bfa:	d101      	bne.n	8014c00 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8014bfc:	2302      	movs	r3, #2
 8014bfe:	e000      	b.n	8014c02 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8014c00:	2301      	movs	r3, #1
 8014c02:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8014c04:	2300      	movs	r3, #0
 8014c06:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8014c08:	7ffb      	ldrb	r3, [r7, #31]
 8014c0a:	2b10      	cmp	r3, #16
 8014c0c:	d149      	bne.n	8014ca2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	3314      	adds	r3, #20
 8014c12:	4618      	mov	r0, r3
 8014c14:	f7fa fec9 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	12db      	asrs	r3, r3, #11
 8014c1c:	f003 021f 	and.w	r2, r3, #31
 8014c20:	4613      	mov	r3, r2
 8014c22:	021b      	lsls	r3, r3, #8
 8014c24:	1a9b      	subs	r3, r3, r2
 8014c26:	4a69      	ldr	r2, [pc, #420]	; (8014dcc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014c28:	fb82 1203 	smull	r1, r2, r2, r3
 8014c2c:	441a      	add	r2, r3
 8014c2e:	1112      	asrs	r2, r2, #4
 8014c30:	17db      	asrs	r3, r3, #31
 8014c32:	1ad3      	subs	r3, r2, r3
 8014c34:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	3314      	adds	r3, #20
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fa feb5 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014c40:	4603      	mov	r3, r0
 8014c42:	115b      	asrs	r3, r3, #5
 8014c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014c48:	4613      	mov	r3, r2
 8014c4a:	021b      	lsls	r3, r3, #8
 8014c4c:	1a9b      	subs	r3, r3, r2
 8014c4e:	4a60      	ldr	r2, [pc, #384]	; (8014dd0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8014c50:	fb82 1203 	smull	r1, r2, r2, r3
 8014c54:	441a      	add	r2, r3
 8014c56:	1152      	asrs	r2, r2, #5
 8014c58:	17db      	asrs	r3, r3, #31
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	3314      	adds	r3, #20
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7fa fea1 	bl	800f9aa <_ZNK8touchgfx9colortypecvtEv>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	f003 021f 	and.w	r2, r3, #31
 8014c6e:	4613      	mov	r3, r2
 8014c70:	021b      	lsls	r3, r3, #8
 8014c72:	1a9b      	subs	r3, r3, r2
 8014c74:	4a55      	ldr	r2, [pc, #340]	; (8014dcc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8014c76:	fb82 1203 	smull	r1, r2, r2, r3
 8014c7a:	441a      	add	r2, r3
 8014c7c:	1112      	asrs	r2, r2, #4
 8014c7e:	17db      	asrs	r3, r3, #31
 8014c80:	1ad3      	subs	r3, r2, r3
 8014c82:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	7e1b      	ldrb	r3, [r3, #24]
 8014c88:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8014c8a:	68bb      	ldr	r3, [r7, #8]
 8014c8c:	061a      	lsls	r2, r3, #24
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	041b      	lsls	r3, r3, #16
 8014c92:	431a      	orrs	r2, r3
 8014c94:	693b      	ldr	r3, [r7, #16]
 8014c96:	021b      	lsls	r3, r3, #8
 8014c98:	4313      	orrs	r3, r2
 8014c9a:	68fa      	ldr	r2, [r7, #12]
 8014c9c:	4313      	orrs	r3, r2
 8014c9e:	623b      	str	r3, [r7, #32]
 8014ca0:	e00b      	b.n	8014cba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	7e1b      	ldrb	r3, [r3, #24]
 8014ca6:	061b      	lsls	r3, r3, #24
 8014ca8:	461c      	mov	r4, r3
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	3314      	adds	r3, #20
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f7fa fe88 	bl	800f9c4 <_ZNK8touchgfx9colortype10getColor32Ev>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	4323      	orrs	r3, r4
 8014cb8:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2b08      	cmp	r3, #8
 8014cc0:	d103      	bne.n	8014cca <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8014cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014cc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014cc8:	e003      	b.n	8014cd2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8014cca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8014cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8014cd0:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 8014cd2:	4a40      	ldr	r2, [pc, #256]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd6:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8014cd8:	7ffb      	ldrb	r3, [r7, #31]
 8014cda:	2b10      	cmp	r3, #16
 8014cdc:	d101      	bne.n	8014ce2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 8014cde:	2302      	movs	r3, #2
 8014ce0:	e000      	b.n	8014ce4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8014ce2:	2301      	movs	r3, #1
 8014ce4:	4a3b      	ldr	r2, [pc, #236]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014ce6:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	8a5b      	ldrh	r3, [r3, #18]
 8014cec:	461a      	mov	r2, r3
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	899b      	ldrh	r3, [r3, #12]
 8014cf2:	1ad3      	subs	r3, r2, r3
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	4b37      	ldr	r3, [pc, #220]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014cf8:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014cfa:	7ffb      	ldrb	r3, [r7, #31]
 8014cfc:	2b10      	cmp	r3, #16
 8014cfe:	d101      	bne.n	8014d04 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8014d00:	2202      	movs	r2, #2
 8014d02:	e000      	b.n	8014d06 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8014d04:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	8a5b      	ldrh	r3, [r3, #18]
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	899b      	ldrh	r3, [r3, #12]
 8014d10:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8014d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d14:	482f      	ldr	r0, [pc, #188]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d16:	f7ff fd25 	bl	8014764 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014d20:	d11e      	bne.n	8014d60 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8014d22:	4b2c      	ldr	r3, [pc, #176]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d24:	2201      	movs	r2, #1
 8014d26:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8014d28:	4a2a      	ldr	r2, [pc, #168]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d2a:	6a3b      	ldr	r3, [r7, #32]
 8014d2c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8014d2e:	4b29      	ldr	r3, [pc, #164]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d30:	2209      	movs	r2, #9
 8014d32:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	8a5b      	ldrh	r3, [r3, #18]
 8014d38:	461a      	mov	r2, r3
 8014d3a:	683b      	ldr	r3, [r7, #0]
 8014d3c:	899b      	ldrh	r3, [r3, #12]
 8014d3e:	1ad3      	subs	r3, r2, r3
 8014d40:	461a      	mov	r2, r3
 8014d42:	4b24      	ldr	r3, [pc, #144]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d44:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8014d46:	7ffb      	ldrb	r3, [r7, #31]
 8014d48:	2b10      	cmp	r3, #16
 8014d4a:	d101      	bne.n	8014d50 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8014d4c:	2302      	movs	r3, #2
 8014d4e:	e000      	b.n	8014d52 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8014d50:	2301      	movs	r3, #1
 8014d52:	4a20      	ldr	r2, [pc, #128]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d54:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8014d56:	2100      	movs	r1, #0
 8014d58:	481e      	ldr	r0, [pc, #120]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d5a:	f7ec ff5f 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
 8014d5e:	e005      	b.n	8014d6c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8014d60:	4a1c      	ldr	r2, [pc, #112]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 8014d66:	4b1b      	ldr	r3, [pc, #108]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d68:	2200      	movs	r2, #0
 8014d6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8014d6c:	2101      	movs	r1, #1
 8014d6e:	4819      	ldr	r0, [pc, #100]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014d70:	f7ec ff54 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 8014d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014d7a:	d115      	bne.n	8014da8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8014d7c:	683b      	ldr	r3, [r7, #0]
 8014d7e:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d80:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d86:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d8c:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d92:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8014d98:	9301      	str	r3, [sp, #4]
 8014d9a:	9200      	str	r2, [sp, #0]
 8014d9c:	4623      	mov	r3, r4
 8014d9e:	4602      	mov	r2, r0
 8014da0:	480c      	ldr	r0, [pc, #48]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014da2:	f7ec fd5e 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8014da6:	e00d      	b.n	8014dc4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014da8:	683b      	ldr	r3, [r7, #0]
 8014daa:	689b      	ldr	r3, [r3, #8]
 8014dac:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014db2:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8014db4:	683b      	ldr	r3, [r7, #0]
 8014db6:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	460b      	mov	r3, r1
 8014dbc:	6a39      	ldr	r1, [r7, #32]
 8014dbe:	4805      	ldr	r0, [pc, #20]	; (8014dd4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8014dc0:	f7ec fd1c 	bl	80017fc <HAL_DMA2D_Start_IT>
}
 8014dc4:	bf00      	nop
 8014dc6:	372c      	adds	r7, #44	; 0x2c
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd90      	pop	{r4, r7, pc}
 8014dcc:	84210843 	.word	0x84210843
 8014dd0:	82082083 	.word	0x82082083
 8014dd4:	20009150 	.word	0x20009150

08014dd8 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f006 fd02 	bl	801b7ec <_ZN8touchgfx13DMA_Interface5startEv>
}
 8014de8:	bf00      	nop
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b082      	sub	sp, #8
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
 8014df8:	4a05      	ldr	r2, [pc, #20]	; (8014e10 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	601a      	str	r2, [r3, #0]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7ff fbe3 	bl	80145cc <_ZN8touchgfx9DMA_QueueD1Ev>
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4618      	mov	r0, r3
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	08021e90 	.word	0x08021e90

08014e14 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b082      	sub	sp, #8
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7ff ffe7 	bl	8014df0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8014e22:	2114      	movs	r1, #20
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f00a fa2e 	bl	801f286 <_ZdlPvj>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	78fa      	ldrb	r2, [r7, #3]
 8014e44:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 8014e50:	bf00      	nop
 8014e52:	370c      	adds	r7, #12
 8014e54:	46bd      	mov	sp, r7
 8014e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5a:	4770      	bx	lr

08014e5c <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b082      	sub	sp, #8
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	3318      	adds	r3, #24
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	4798      	blx	r3
    }
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	685a      	ldr	r2, [r3, #4]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	4610      	mov	r0, r2
 8014e8e:	4798      	blx	r3
 8014e90:	4603      	mov	r3, r0
    };
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}

08014e9a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014e9a:	b480      	push	{r7}
 8014e9c:	b083      	sub	sp, #12
 8014e9e:	af00      	add	r7, sp, #0
 8014ea0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	b2da      	uxtb	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 8014eb2:	bf00      	nop
 8014eb4:	370c      	adds	r7, #12
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8014ebe:	b580      	push	{r7, lr}
 8014ec0:	b082      	sub	sp, #8
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f006 fb66 	bl	801b598 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	3384      	adds	r3, #132	; 0x84
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	4798      	blx	r3
    }
 8014ed8:	bf00      	nop
 8014eda:	3708      	adds	r7, #8
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}

08014ee0 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8014ee0:	b480      	push	{r7}
 8014ee2:	b083      	sub	sp, #12
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
        return false;
 8014eea:	2300      	movs	r3, #0
    }
 8014eec:	4618      	mov	r0, r3
 8014eee:	370c      	adds	r7, #12
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef6:	4770      	bx	lr

08014ef8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b086      	sub	sp, #24
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	60f8      	str	r0, [r7, #12]
 8014f00:	60b9      	str	r1, [r7, #8]
 8014f02:	4611      	mov	r1, r2
 8014f04:	461a      	mov	r2, r3
 8014f06:	460b      	mov	r3, r1
 8014f08:	80fb      	strh	r3, [r7, #6]
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	617b      	str	r3, [r7, #20]
        switch (depth)
 8014f12:	88fb      	ldrh	r3, [r7, #6]
 8014f14:	3b01      	subs	r3, #1
 8014f16:	2b1f      	cmp	r3, #31
 8014f18:	d862      	bhi.n	8014fe0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 8014f1a:	a201      	add	r2, pc, #4	; (adr r2, 8014f20 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 8014f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f20:	08014fbd 	.word	0x08014fbd
 8014f24:	08014fbd 	.word	0x08014fbd
 8014f28:	08014fe1 	.word	0x08014fe1
 8014f2c:	08014fbd 	.word	0x08014fbd
 8014f30:	08014fe1 	.word	0x08014fe1
 8014f34:	08014fe1 	.word	0x08014fe1
 8014f38:	08014fe1 	.word	0x08014fe1
 8014f3c:	08014fa1 	.word	0x08014fa1
 8014f40:	08014fe1 	.word	0x08014fe1
 8014f44:	08014fe1 	.word	0x08014fe1
 8014f48:	08014fe1 	.word	0x08014fe1
 8014f4c:	08014fe1 	.word	0x08014fe1
 8014f50:	08014fe1 	.word	0x08014fe1
 8014f54:	08014fe1 	.word	0x08014fe1
 8014f58:	08014fe1 	.word	0x08014fe1
 8014f5c:	08014fa1 	.word	0x08014fa1
 8014f60:	08014fe1 	.word	0x08014fe1
 8014f64:	08014fe1 	.word	0x08014fe1
 8014f68:	08014fe1 	.word	0x08014fe1
 8014f6c:	08014fe1 	.word	0x08014fe1
 8014f70:	08014fe1 	.word	0x08014fe1
 8014f74:	08014fe1 	.word	0x08014fe1
 8014f78:	08014fe1 	.word	0x08014fe1
 8014f7c:	08014fa1 	.word	0x08014fa1
 8014f80:	08014fe1 	.word	0x08014fe1
 8014f84:	08014fe1 	.word	0x08014fe1
 8014f88:	08014fe1 	.word	0x08014fe1
 8014f8c:	08014fe1 	.word	0x08014fe1
 8014f90:	08014fe1 	.word	0x08014fe1
 8014f94:	08014fe1 	.word	0x08014fe1
 8014f98:	08014fe1 	.word	0x08014fe1
 8014f9c:	08014fa1 	.word	0x08014fa1
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 8014fa0:	4b29      	ldr	r3, [pc, #164]	; (8015048 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 8014fa2:	881b      	ldrh	r3, [r3, #0]
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	4b29      	ldr	r3, [pc, #164]	; (801504c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8014fa8:	881b      	ldrh	r3, [r3, #0]
 8014faa:	fb03 f302 	mul.w	r3, r3, r2
 8014fae:	88fa      	ldrh	r2, [r7, #6]
 8014fb0:	08d2      	lsrs	r2, r2, #3
 8014fb2:	b292      	uxth	r2, r2
 8014fb4:	fb02 f303 	mul.w	r3, r2, r3
 8014fb8:	617b      	str	r3, [r7, #20]
            break;
 8014fba:	e018      	b.n	8014fee <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 8014fbc:	4b22      	ldr	r3, [pc, #136]	; (8015048 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 8014fbe:	881b      	ldrh	r3, [r3, #0]
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	88fb      	ldrh	r3, [r7, #6]
 8014fc4:	fb03 f302 	mul.w	r3, r3, r2
 8014fc8:	3307      	adds	r3, #7
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	da00      	bge.n	8014fd0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 8014fce:	3307      	adds	r3, #7
 8014fd0:	10db      	asrs	r3, r3, #3
 8014fd2:	461a      	mov	r2, r3
 8014fd4:	4b1d      	ldr	r3, [pc, #116]	; (801504c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8014fd6:	881b      	ldrh	r3, [r3, #0]
 8014fd8:	fb03 f302 	mul.w	r3, r3, r2
 8014fdc:	617b      	str	r3, [r7, #20]
            break;
 8014fde:	e006      	b.n	8014fee <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 8014fe0:	4b1b      	ldr	r3, [pc, #108]	; (8015050 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 8014fe2:	4a1c      	ldr	r2, [pc, #112]	; (8015054 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 8014fe4:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8014fe8:	481b      	ldr	r0, [pc, #108]	; (8015058 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 8014fea:	f00a f969 	bl	801f2c0 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	693a      	ldr	r2, [r7, #16]
 8014ff6:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 8014ff8:	797b      	ldrb	r3, [r7, #5]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d007      	beq.n	801500e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 8014ffe:	693a      	ldr	r2, [r7, #16]
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	4413      	add	r3, r2
 8015004:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	693a      	ldr	r2, [r7, #16]
 801500a:	63da      	str	r2, [r3, #60]	; 0x3c
 801500c:	e002      	b.n	8015014 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2200      	movs	r2, #0
 8015012:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 8015014:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d007      	beq.n	801502c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 801501c:	693a      	ldr	r2, [r7, #16]
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	4413      	add	r3, r2
 8015022:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	693a      	ldr	r2, [r7, #16]
 8015028:	641a      	str	r2, [r3, #64]	; 0x40
 801502a:	e002      	b.n	8015032 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2200      	movs	r2, #0
 8015030:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 8015032:	4a0a      	ldr	r2, [pc, #40]	; (801505c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 8015034:	797b      	ldrb	r3, [r7, #5]
 8015036:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 8015038:	4a09      	ldr	r2, [pc, #36]	; (8015060 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 801503a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801503e:	7013      	strb	r3, [r2, #0]
    }
 8015040:	bf00      	nop
 8015042:	3718      	adds	r7, #24
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	20009b08 	.word	0x20009b08
 801504c:	20009b0a 	.word	0x20009b0a
 8015050:	080205a0 	.word	0x080205a0
 8015054:	08021068 	.word	0x08021068
 8015058:	080205c0 	.word	0x080205c0
 801505c:	20009b12 	.word	0x20009b12
 8015060:	20009b13 	.word	0x20009b13

08015064 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	607a      	str	r2, [r7, #4]
 8015070:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d106      	bne.n	8015086 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8015078:	4b11      	ldr	r3, [pc, #68]	; (80150c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801507a:	4a12      	ldr	r2, [pc, #72]	; (80150c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 801507c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8015080:	4811      	ldr	r0, [pc, #68]	; (80150c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8015082:	f00a f91d 	bl	801f2c0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	68ba      	ldr	r2, [r7, #8]
 801508a:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	bf14      	ite	ne
 801509e:	2301      	movne	r3, #1
 80150a0:	2300      	moveq	r3, #0
 80150a2:	b2da      	uxtb	r2, r3
 80150a4:	4b09      	ldr	r3, [pc, #36]	; (80150cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 80150a6:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	bf14      	ite	ne
 80150ae:	2301      	movne	r3, #1
 80150b0:	2300      	moveq	r3, #0
 80150b2:	b2da      	uxtb	r2, r3
 80150b4:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 80150b6:	701a      	strb	r2, [r3, #0]
    }
 80150b8:	bf00      	nop
 80150ba:	3710      	adds	r7, #16
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}
 80150c0:	0802060c 	.word	0x0802060c
 80150c4:	08021018 	.word	0x08021018
 80150c8:	080205c0 	.word	0x080205c0
 80150cc:	20009b12 	.word	0x20009b12
 80150d0:	20009b13 	.word	0x20009b13

080150d4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b082      	sub	sp, #8
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	460b      	mov	r3, r1
 80150de:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d004      	beq.n	80150f2 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150ec:	887a      	ldrh	r2, [r7, #2]
 80150ee:	4610      	mov	r0, r2
 80150f0:	4798      	blx	r3
        }
    }
 80150f2:	bf00      	nop
 80150f4:	3708      	adds	r7, #8
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
	...

080150fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015110:	429a      	cmp	r2, r3
 8015112:	d017      	beq.n	8015144 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8015114:	4b1a      	ldr	r3, [pc, #104]	; (8015180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d12a      	bne.n	8015172 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 801511c:	4b19      	ldr	r3, [pc, #100]	; (8015184 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801511e:	881a      	ldrh	r2, [r3, #0]
 8015120:	4b19      	ldr	r3, [pc, #100]	; (8015188 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015122:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8015124:	4b19      	ldr	r3, [pc, #100]	; (801518c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015126:	881a      	ldrh	r2, [r3, #0]
 8015128:	4b19      	ldr	r3, [pc, #100]	; (8015190 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801512a:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 801512c:	4b16      	ldr	r3, [pc, #88]	; (8015188 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801512e:	881a      	ldrh	r2, [r3, #0]
 8015130:	4b16      	ldr	r3, [pc, #88]	; (801518c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015132:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8015134:	4b16      	ldr	r3, [pc, #88]	; (8015190 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8015136:	881a      	ldrh	r2, [r3, #0]
 8015138:	4b12      	ldr	r3, [pc, #72]	; (8015184 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801513a:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 801513c:	4b10      	ldr	r3, [pc, #64]	; (8015180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801513e:	2201      	movs	r2, #1
 8015140:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8015142:	e016      	b.n	8015172 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8015144:	4b0e      	ldr	r3, [pc, #56]	; (8015180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d012      	beq.n	8015172 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 801514c:	4b0f      	ldr	r3, [pc, #60]	; (801518c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801514e:	881a      	ldrh	r2, [r3, #0]
 8015150:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015152:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8015154:	4b0b      	ldr	r3, [pc, #44]	; (8015184 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8015156:	881a      	ldrh	r2, [r3, #0]
 8015158:	4b0d      	ldr	r3, [pc, #52]	; (8015190 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801515a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 801515c:	4b0c      	ldr	r3, [pc, #48]	; (8015190 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 801515e:	881a      	ldrh	r2, [r3, #0]
 8015160:	4b0a      	ldr	r3, [pc, #40]	; (801518c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8015162:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8015164:	4b08      	ldr	r3, [pc, #32]	; (8015188 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8015166:	881a      	ldrh	r2, [r3, #0]
 8015168:	4b06      	ldr	r3, [pc, #24]	; (8015184 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801516a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 801516c:	4b04      	ldr	r3, [pc, #16]	; (8015180 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 801516e:	2200      	movs	r2, #0
 8015170:	701a      	strb	r2, [r3, #0]
    }
 8015172:	bf00      	nop
 8015174:	370c      	adds	r7, #12
 8015176:	46bd      	mov	sp, r7
 8015178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517c:	4770      	bx	lr
 801517e:	bf00      	nop
 8015180:	20009b0c 	.word	0x20009b0c
 8015184:	20009b08 	.word	0x20009b08
 8015188:	20009b0e 	.word	0x20009b0e
 801518c:	20009b0a 	.word	0x20009b0a
 8015190:	20009b10 	.word	0x20009b10

08015194 <__NVIC_EnableIRQ>:
{
 8015194:	b480      	push	{r7}
 8015196:	b083      	sub	sp, #12
 8015198:	af00      	add	r7, sp, #0
 801519a:	4603      	mov	r3, r0
 801519c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	db0d      	blt.n	80151c2 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80151a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151aa:	b2db      	uxtb	r3, r3
 80151ac:	f003 021f 	and.w	r2, r3, #31
 80151b0:	4907      	ldr	r1, [pc, #28]	; (80151d0 <__NVIC_EnableIRQ+0x3c>)
 80151b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151b6:	095b      	lsrs	r3, r3, #5
 80151b8:	2001      	movs	r0, #1
 80151ba:	fa00 f202 	lsl.w	r2, r0, r2
 80151be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80151c2:	bf00      	nop
 80151c4:	370c      	adds	r7, #12
 80151c6:	46bd      	mov	sp, r7
 80151c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151cc:	4770      	bx	lr
 80151ce:	bf00      	nop
 80151d0:	e000e100 	.word	0xe000e100

080151d4 <__NVIC_DisableIRQ>:
{
 80151d4:	b480      	push	{r7}
 80151d6:	b083      	sub	sp, #12
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80151de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	db12      	blt.n	801520c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80151e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151ea:	b2db      	uxtb	r3, r3
 80151ec:	f003 021f 	and.w	r2, r3, #31
 80151f0:	4909      	ldr	r1, [pc, #36]	; (8015218 <__NVIC_DisableIRQ+0x44>)
 80151f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80151f6:	095b      	lsrs	r3, r3, #5
 80151f8:	2001      	movs	r0, #1
 80151fa:	fa00 f202 	lsl.w	r2, r0, r2
 80151fe:	3320      	adds	r3, #32
 8015200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015208:	f3bf 8f6f 	isb	sy
}
 801520c:	bf00      	nop
 801520e:	370c      	adds	r7, #12
 8015210:	46bd      	mov	sp, r7
 8015212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015216:	4770      	bx	lr
 8015218:	e000e100 	.word	0xe000e100

0801521c <__NVIC_SetPriority>:
{
 801521c:	b480      	push	{r7}
 801521e:	b083      	sub	sp, #12
 8015220:	af00      	add	r7, sp, #0
 8015222:	4603      	mov	r3, r0
 8015224:	6039      	str	r1, [r7, #0]
 8015226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801522c:	2b00      	cmp	r3, #0
 801522e:	db0c      	blt.n	801524a <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	b2db      	uxtb	r3, r3
 8015234:	4a0e      	ldr	r2, [pc, #56]	; (8015270 <__NVIC_SetPriority+0x54>)
 8015236:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801523a:	4608      	mov	r0, r1
 801523c:	011b      	lsls	r3, r3, #4
 801523e:	b2d9      	uxtb	r1, r3
 8015240:	1813      	adds	r3, r2, r0
 8015242:	460a      	mov	r2, r1
 8015244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015248:	e00c      	b.n	8015264 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	b2da      	uxtb	r2, r3
 801524e:	4909      	ldr	r1, [pc, #36]	; (8015274 <__NVIC_SetPriority+0x58>)
 8015250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015254:	b2db      	uxtb	r3, r3
 8015256:	f003 030f 	and.w	r3, r3, #15
 801525a:	3b04      	subs	r3, #4
 801525c:	0112      	lsls	r2, r2, #4
 801525e:	b2d2      	uxtb	r2, r2
 8015260:	440b      	add	r3, r1
 8015262:	761a      	strb	r2, [r3, #24]
}
 8015264:	bf00      	nop
 8015266:	370c      	adds	r7, #12
 8015268:	46bd      	mov	sp, r7
 801526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526e:	4770      	bx	lr
 8015270:	e000e100 	.word	0xe000e100
 8015274:	e000ed00 	.word	0xe000ed00

08015278 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	4618      	mov	r0, r3
 8015284:	f005 fdd5 	bl	801ae32 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8015298:	4b03      	ldr	r3, [pc, #12]	; (80152a8 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 801529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801529c:	4618      	mov	r0, r3
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr
 80152a8:	40016884 	.word	0x40016884

080152ac <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 80152ac:	b480      	push	{r7}
 80152ae:	b083      	sub	sp, #12
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80152b6:	4a06      	ldr	r2, [pc, #24]	; (80152d0 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 80152b8:	683b      	ldr	r3, [r7, #0]
 80152ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80152bc:	4b05      	ldr	r3, [pc, #20]	; (80152d4 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 80152be:	2201      	movs	r2, #1
 80152c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80152c2:	bf00      	nop
 80152c4:	370c      	adds	r7, #12
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	40016884 	.word	0x40016884
 80152d4:	40016800 	.word	0x40016800

080152d8 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 80152d8:	b480      	push	{r7}
 80152da:	b085      	sub	sp, #20
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 80152e0:	4b0d      	ldr	r3, [pc, #52]	; (8015318 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 80152e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152e4:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 80152e6:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 80152e8:	68db      	ldr	r3, [r3, #12]
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	3301      	adds	r3, #1
 80152f4:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 80152f6:	89fa      	ldrh	r2, [r7, #14]
 80152f8:	89bb      	ldrh	r3, [r7, #12]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d201      	bcs.n	8015302 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 80152fe:	2300      	movs	r3, #0
 8015300:	e003      	b.n	801530a <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8015302:	89fa      	ldrh	r2, [r7, #14]
 8015304:	89bb      	ldrh	r3, [r7, #12]
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	b29b      	uxth	r3, r3
    }
}
 801530a:	4618      	mov	r0, r3
 801530c:	3714      	adds	r7, #20
 801530e:	46bd      	mov	sp, r7
 8015310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	40016800 	.word	0x40016800

0801531c <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8015324:	2109      	movs	r1, #9
 8015326:	205a      	movs	r0, #90	; 0x5a
 8015328:	f7ff ff78 	bl	801521c <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 801532c:	2109      	movs	r1, #9
 801532e:	2058      	movs	r0, #88	; 0x58
 8015330:	f7ff ff74 	bl	801521c <__NVIC_SetPriority>
}
 8015334:	bf00      	nop
 8015336:	3708      	adds	r7, #8
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}

0801533c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015344:	4b12      	ldr	r3, [pc, #72]	; (8015390 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8015346:	68db      	ldr	r3, [r3, #12]
 8015348:	b29b      	uxth	r3, r3
 801534a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801534e:	b29b      	uxth	r3, r3
 8015350:	3b01      	subs	r3, #1
 8015352:	b29a      	uxth	r2, r3
 8015354:	4b0f      	ldr	r3, [pc, #60]	; (8015394 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8015356:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8015358:	4b0d      	ldr	r3, [pc, #52]	; (8015390 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 801535a:	691b      	ldr	r3, [r3, #16]
 801535c:	b29b      	uxth	r3, r3
 801535e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015362:	b29b      	uxth	r3, r3
 8015364:	3b01      	subs	r3, #1
 8015366:	b29a      	uxth	r2, r3
 8015368:	4b0b      	ldr	r3, [pc, #44]	; (8015398 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 801536a:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 801536c:	4b09      	ldr	r3, [pc, #36]	; (8015394 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 801536e:	881b      	ldrh	r3, [r3, #0]
 8015370:	4619      	mov	r1, r3
 8015372:	480a      	ldr	r0, [pc, #40]	; (801539c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015374:	f7f0 f940 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8015378:	4b08      	ldr	r3, [pc, #32]	; (801539c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801537e:	4b07      	ldr	r3, [pc, #28]	; (801539c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	f042 0203 	orr.w	r2, r2, #3
 8015386:	635a      	str	r2, [r3, #52]	; 0x34
}
 8015388:	bf00      	nop
 801538a:	3708      	adds	r7, #8
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}
 8015390:	40016800 	.word	0x40016800
 8015394:	200091da 	.word	0x200091da
 8015398:	200091dc 	.word	0x200091dc
 801539c:	200090a8 	.word	0x200090a8

080153a0 <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 80153a8:	2058      	movs	r0, #88	; 0x58
 80153aa:	f7ff ff13 	bl	80151d4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80153ae:	205a      	movs	r0, #90	; 0x5a
 80153b0:	f7ff ff10 	bl	80151d4 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 80153b4:	2059      	movs	r0, #89	; 0x59
 80153b6:	f7ff ff0d 	bl	80151d4 <__NVIC_DisableIRQ>
}
 80153ba:	bf00      	nop
 80153bc:	3708      	adds	r7, #8
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b082      	sub	sp, #8
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 80153ca:	2058      	movs	r0, #88	; 0x58
 80153cc:	f7ff fee2 	bl	8015194 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 80153d0:	205a      	movs	r0, #90	; 0x5a
 80153d2:	f7ff fedf 	bl	8015194 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 80153d6:	2059      	movs	r0, #89	; 0x59
 80153d8:	f7ff fedc 	bl	8015194 <__NVIC_EnableIRQ>
}
 80153dc:	bf00      	nop
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f005 fd23 	bl	801ae3e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 80153f8:	bf00      	nop
 80153fa:	3708      	adds	r7, #8
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8015408:	4b1a      	ldr	r3, [pc, #104]	; (8015474 <HAL_LTDC_LineEventCallback+0x74>)
 801540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801540c:	4a1a      	ldr	r2, [pc, #104]	; (8015478 <HAL_LTDC_LineEventCallback+0x78>)
 801540e:	8812      	ldrh	r2, [r2, #0]
 8015410:	4293      	cmp	r3, r2
 8015412:	bf0c      	ite	eq
 8015414:	2301      	moveq	r3, #1
 8015416:	2300      	movne	r3, #0
 8015418:	b2db      	uxtb	r3, r3
 801541a:	2b00      	cmp	r3, #0
 801541c:	d017      	beq.n	801544e <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801541e:	4b17      	ldr	r3, [pc, #92]	; (801547c <HAL_LTDC_LineEventCallback+0x7c>)
 8015420:	881b      	ldrh	r3, [r3, #0]
 8015422:	4619      	mov	r1, r3
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7f0 f8e7 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 801542a:	f7f9 ff3b 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 801542e:	4603      	mov	r3, r0
 8015430:	4618      	mov	r0, r3
 8015432:	f7ff fd32 	bl	8014e9a <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 8015436:	f7fa fb3d 	bl	800fab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 801543a:	f7f9 ff33 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 801543e:	4603      	mov	r3, r0
 8015440:	4618      	mov	r0, r3
 8015442:	f006 f8a9 	bl	801b598 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8015446:	2000      	movs	r0, #0
 8015448:	f7fe fd7b 	bl	8013f42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 801544c:	e00e      	b.n	801546c <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801544e:	4b0a      	ldr	r3, [pc, #40]	; (8015478 <HAL_LTDC_LineEventCallback+0x78>)
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	4619      	mov	r1, r3
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7f0 f8cf 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 801545a:	2000      	movs	r0, #0
 801545c:	f7fe fd7c 	bl	8013f58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8015460:	f7f9 ff20 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8015464:	4603      	mov	r3, r0
 8015466:	4618      	mov	r0, r3
 8015468:	f7ff fcf8 	bl	8014e5c <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 801546c:	bf00      	nop
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	40016800 	.word	0x40016800
 8015478:	200091da 	.word	0x200091da
 801547c:	200091dc 	.word	0x200091dc

08015480 <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b0a4      	sub	sp, #144	; 0x90
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8015488:	2300      	movs	r3, #0
 801548a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 801548e:	4b84      	ldr	r3, [pc, #528]	; (80156a0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015492:	4a83      	ldr	r2, [pc, #524]	; (80156a0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8015494:	f043 0301 	orr.w	r3, r3, #1
 8015498:	6413      	str	r3, [r2, #64]	; 0x40
 801549a:	4b81      	ldr	r3, [pc, #516]	; (80156a0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 801549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801549e:	f003 0301 	and.w	r3, r3, #1
 80154a2:	60bb      	str	r3, [r7, #8]
 80154a4:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80154a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80154aa:	2200      	movs	r2, #0
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	605a      	str	r2, [r3, #4]
 80154b0:	609a      	str	r2, [r3, #8]
 80154b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80154b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80154b8:	2200      	movs	r2, #0
 80154ba:	601a      	str	r2, [r3, #0]
 80154bc:	605a      	str	r2, [r3, #4]
 80154be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80154c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80154c4:	2200      	movs	r2, #0
 80154c6:	601a      	str	r2, [r3, #0]
 80154c8:	605a      	str	r2, [r3, #4]
 80154ca:	609a      	str	r2, [r3, #8]
 80154cc:	60da      	str	r2, [r3, #12]
 80154ce:	611a      	str	r2, [r3, #16]
 80154d0:	615a      	str	r2, [r3, #20]
 80154d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80154d4:	f107 030c 	add.w	r3, r7, #12
 80154d8:	222c      	movs	r2, #44	; 0x2c
 80154da:	2100      	movs	r1, #0
 80154dc:	4618      	mov	r0, r3
 80154de:	f009 ff6a 	bl	801f3b6 <memset>
  htim1.Instance = TIM1;
 80154e2:	4b70      	ldr	r3, [pc, #448]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80154e4:	4a70      	ldr	r2, [pc, #448]	; (80156a8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 80154e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80154e8:	4b6e      	ldr	r3, [pc, #440]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80154ea:	2200      	movs	r2, #0
 80154ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80154ee:	4b6d      	ldr	r3, [pc, #436]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80154f0:	2200      	movs	r2, #0
 80154f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80154f4:	4b6b      	ldr	r3, [pc, #428]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80154fa:	4b6a      	ldr	r3, [pc, #424]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80154fc:	2200      	movs	r2, #0
 80154fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8015500:	4b68      	ldr	r3, [pc, #416]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015502:	2200      	movs	r2, #0
 8015504:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015506:	4b67      	ldr	r3, [pc, #412]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015508:	2200      	movs	r2, #0
 801550a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801550c:	4865      	ldr	r0, [pc, #404]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801550e:	f7f3 fc9f 	bl	8008e50 <HAL_TIM_Base_Init>
 8015512:	4603      	mov	r3, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	bf14      	ite	ne
 8015518:	2301      	movne	r3, #1
 801551a:	2300      	moveq	r3, #0
 801551c:	b2db      	uxtb	r3, r3
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 8015522:	f001 fb23 	bl	8016b6c <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8015526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801552a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 801552c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015530:	4619      	mov	r1, r3
 8015532:	485c      	ldr	r0, [pc, #368]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015534:	f7f3 ff6e 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	bf14      	ite	ne
 801553e:	2301      	movne	r3, #1
 8015540:	2300      	moveq	r3, #0
 8015542:	b2db      	uxtb	r3, r3
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 8015548:	f001 fb10 	bl	8016b6c <Error_Handler>
  }

  htim1.Instance = TIM1;
 801554c:	4b55      	ldr	r3, [pc, #340]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801554e:	4a56      	ldr	r2, [pc, #344]	; (80156a8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8015550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8015552:	4b54      	ldr	r3, [pc, #336]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015554:	2200      	movs	r2, #0
 8015556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015558:	4b52      	ldr	r3, [pc, #328]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801555a:	2200      	movs	r2, #0
 801555c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 801555e:	4b51      	ldr	r3, [pc, #324]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015560:	2200      	movs	r2, #0
 8015562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8015564:	4b4f      	ldr	r3, [pc, #316]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015566:	2200      	movs	r2, #0
 8015568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801556a:	4b4e      	ldr	r3, [pc, #312]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801556c:	2200      	movs	r2, #0
 801556e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8015570:	4b4c      	ldr	r3, [pc, #304]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015572:	2200      	movs	r2, #0
 8015574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8015576:	484b      	ldr	r0, [pc, #300]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015578:	f7f3 fcea 	bl	8008f50 <HAL_TIM_PWM_Init>
 801557c:	4603      	mov	r3, r0
 801557e:	2b00      	cmp	r3, #0
 8015580:	bf14      	ite	ne
 8015582:	2301      	movne	r3, #1
 8015584:	2300      	moveq	r3, #0
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2b00      	cmp	r3, #0
 801558a:	d001      	beq.n	8015590 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 801558c:	f001 faee 	bl	8016b6c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015590:	2300      	movs	r3, #0
 8015592:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8015594:	2300      	movs	r3, #0
 8015596:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015598:	2300      	movs	r3, #0
 801559a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801559c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80155a0:	4619      	mov	r1, r3
 80155a2:	4840      	ldr	r0, [pc, #256]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155a4:	f7f4 fbb0 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 80155a8:	4603      	mov	r3, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	bf14      	ite	ne
 80155ae:	2301      	movne	r3, #1
 80155b0:	2300      	moveq	r3, #0
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d001      	beq.n	80155bc <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 80155b8:	f001 fad8 	bl	8016b6c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80155bc:	2360      	movs	r3, #96	; 0x60
 80155be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80155c4:	2300      	movs	r3, #0
 80155c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80155c8:	2300      	movs	r3, #0
 80155ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80155cc:	2300      	movs	r3, #0
 80155ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80155d0:	2300      	movs	r3, #0
 80155d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80155d4:	2300      	movs	r3, #0
 80155d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80155d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80155dc:	2200      	movs	r2, #0
 80155de:	4619      	mov	r1, r3
 80155e0:	4830      	ldr	r0, [pc, #192]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 80155e2:	f7f3 fdff 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	bf14      	ite	ne
 80155ec:	2301      	movne	r3, #1
 80155ee:	2300      	moveq	r3, #0
 80155f0:	b2db      	uxtb	r3, r3
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d001      	beq.n	80155fa <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 80155f6:	f001 fab9 	bl	8016b6c <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80155fa:	2300      	movs	r3, #0
 80155fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80155fe:	2300      	movs	r3, #0
 8015600:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8015602:	2300      	movs	r3, #0
 8015604:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8015606:	2300      	movs	r3, #0
 8015608:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801560a:	2300      	movs	r3, #0
 801560c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801560e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015612:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8015614:	2300      	movs	r3, #0
 8015616:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8015618:	2300      	movs	r3, #0
 801561a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801561c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015620:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8015622:	2300      	movs	r3, #0
 8015624:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8015626:	2300      	movs	r3, #0
 8015628:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801562a:	f107 030c 	add.w	r3, r7, #12
 801562e:	4619      	mov	r1, r3
 8015630:	481c      	ldr	r0, [pc, #112]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015632:	f7f4 fbc5 	bl	8009dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8015636:	4603      	mov	r3, r0
 8015638:	2b00      	cmp	r3, #0
 801563a:	bf14      	ite	ne
 801563c:	2301      	movne	r3, #1
 801563e:	2300      	moveq	r3, #0
 8015640:	b2db      	uxtb	r3, r3
 8015642:	2b00      	cmp	r3, #0
 8015644:	d001      	beq.n	801564a <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 8015646:	f001 fa91 	bl	8016b6c <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801564a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801564e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015652:	4611      	mov	r1, r2
 8015654:	4618      	mov	r0, r3
 8015656:	f7f0 ff0f 	bl	8006478 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 801565a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801565e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8015662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015666:	2b00      	cmp	r3, #0
 8015668:	d104      	bne.n	8015674 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 801566a:	f7f0 fedd 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 801566e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8015672:	e005      	b.n	8015680 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8015674:	f7f0 fed8 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8015678:	4603      	mov	r3, r0
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8015680:	f7f0 fec6 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8015684:	4602      	mov	r2, r0
 8015686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801568a:	fbb2 f2f3 	udiv	r2, r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8015692:	4804      	ldr	r0, [pc, #16]	; (80156a4 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8015694:	f7f3 fc08 	bl	8008ea8 <HAL_TIM_Base_Start>
}
 8015698:	bf00      	nop
 801569a:	3790      	adds	r7, #144	; 0x90
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	40023800 	.word	0x40023800
 80156a4:	200091e0 	.word	0x200091e0
 80156a8:	40010000 	.word	0x40010000

080156ac <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 80156ac:	b480      	push	{r7}
 80156ae:	b085      	sub	sp, #20
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	607a      	str	r2, [r7, #4]
 80156b8:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80156ba:	687a      	ldr	r2, [r7, #4]
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	1ad2      	subs	r2, r2, r3
 80156c0:	683b      	ldr	r3, [r7, #0]
 80156c2:	085b      	lsrs	r3, r3, #1
 80156c4:	441a      	add	r2, r3
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80156cc:	4618      	mov	r0, r3
 80156ce:	3714      	adds	r7, #20
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 80156e0:	4b06      	ldr	r3, [pc, #24]	; (80156fc <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	68d2      	ldr	r2, [r2, #12]
 80156ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	370c      	adds	r7, #12
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr
 80156fa:	bf00      	nop
 80156fc:	200091e0 	.word	0x200091e0

08015700 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b082      	sub	sp, #8
 8015704:	af00      	add	r7, sp, #0
 8015706:	6078      	str	r0, [r7, #4]
 8015708:	460b      	mov	r3, r1
 801570a:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 801570c:	78fb      	ldrb	r3, [r7, #3]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00f      	beq.n	8015732 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	3310      	adds	r3, #16
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	4798      	blx	r3
 801571e:	4602      	mov	r2, r0
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	689b      	ldr	r3, [r3, #8]
 8015724:	1ad2      	subs	r2, r2, r3
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	441a      	add	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8015730:	e008      	b.n	8015744 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	3310      	adds	r3, #16
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	4798      	blx	r3
 801573e:	4602      	mov	r2, r0
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	609a      	str	r2, [r3, #8]
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}

0801574c <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 801574c:	b590      	push	{r4, r7, lr}
 801574e:	b083      	sub	sp, #12
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8015754:	f7fe f81e 	bl	8013794 <LCD_GetXSize>
 8015758:	4603      	mov	r3, r0
 801575a:	b29c      	uxth	r4, r3
 801575c:	f7fe f823 	bl	80137a6 <LCD_GetYSize>
 8015760:	4603      	mov	r3, r0
 8015762:	b29b      	uxth	r3, r3
 8015764:	4619      	mov	r1, r3
 8015766:	4620      	mov	r0, r4
 8015768:	f7fd f8d8 	bl	801291c <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 801576c:	bf00      	nop
 801576e:	370c      	adds	r7, #12
 8015770:	46bd      	mov	sp, r7
 8015772:	bd90      	pop	{r4, r7, pc}

08015774 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b090      	sub	sp, #64	; 0x40
 8015778:	af00      	add	r7, sp, #0
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

    TS_StateTypeDef state = { 0 };
 8015780:	f107 0314 	add.w	r3, r7, #20
 8015784:	222c      	movs	r2, #44	; 0x2c
 8015786:	2100      	movs	r1, #0
 8015788:	4618      	mov	r0, r3
 801578a:	f009 fe14 	bl	801f3b6 <memset>
    BSP_TS_GetState(&state);
 801578e:	f107 0314 	add.w	r3, r7, #20
 8015792:	4618      	mov	r0, r3
 8015794:	f7fd f902 	bl	801299c <BSP_TS_GetState>
    if (state.touchDetected)
 8015798:	7d3b      	ldrb	r3, [r7, #20]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d009      	beq.n	80157b2 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801579e:	8afb      	ldrh	r3, [r7, #22]
 80157a0:	461a      	mov	r2, r3
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 80157a6:	8c3b      	ldrh	r3, [r7, #32]
 80157a8:	461a      	mov	r2, r3
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	601a      	str	r2, [r3, #0]

        return true;
 80157ae:	2301      	movs	r3, #1
 80157b0:	e000      	b.n	80157b4 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 80157b2:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3740      	adds	r7, #64	; 0x40
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80157c2:	2300      	movs	r3, #0
 80157c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80157c6:	f000 f87b 	bl	80158c0 <BSP_SD_IsDetected>
 80157ca:	4603      	mov	r3, r0
 80157cc:	2b01      	cmp	r3, #1
 80157ce:	d001      	beq.n	80157d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80157d0:	2302      	movs	r3, #2
 80157d2:	e012      	b.n	80157fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80157d4:	480b      	ldr	r0, [pc, #44]	; (8015804 <BSP_SD_Init+0x48>)
 80157d6:	f7f2 f90d 	bl	80079f4 <HAL_SD_Init>
 80157da:	4603      	mov	r3, r0
 80157dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80157de:	79fb      	ldrb	r3, [r7, #7]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d109      	bne.n	80157f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80157e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80157e8:	4806      	ldr	r0, [pc, #24]	; (8015804 <BSP_SD_Init+0x48>)
 80157ea:	f7f2 fd8d 	bl	8008308 <HAL_SD_ConfigWideBusOperation>
 80157ee:	4603      	mov	r3, r0
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d001      	beq.n	80157f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80157f4:	2301      	movs	r3, #1
 80157f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80157f8:	79fb      	ldrb	r3, [r7, #7]
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3708      	adds	r7, #8
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
 8015802:	bf00      	nop
 8015804:	20009530 	.word	0x20009530

08015808 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b086      	sub	sp, #24
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015814:	2300      	movs	r3, #0
 8015816:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	68ba      	ldr	r2, [r7, #8]
 801581c:	68f9      	ldr	r1, [r7, #12]
 801581e:	4806      	ldr	r0, [pc, #24]	; (8015838 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015820:	f7f2 f978 	bl	8007b14 <HAL_SD_ReadBlocks_DMA>
 8015824:	4603      	mov	r3, r0
 8015826:	2b00      	cmp	r3, #0
 8015828:	d001      	beq.n	801582e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801582a:	2301      	movs	r3, #1
 801582c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3718      	adds	r7, #24
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	20009530 	.word	0x20009530

0801583c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b086      	sub	sp, #24
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015848:	2300      	movs	r3, #0
 801584a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	68f9      	ldr	r1, [r7, #12]
 8015852:	4806      	ldr	r0, [pc, #24]	; (801586c <BSP_SD_WriteBlocks_DMA+0x30>)
 8015854:	f7f2 fa2c 	bl	8007cb0 <HAL_SD_WriteBlocks_DMA>
 8015858:	4603      	mov	r3, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	d001      	beq.n	8015862 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801585e:	2301      	movs	r3, #1
 8015860:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8015862:	7dfb      	ldrb	r3, [r7, #23]
}
 8015864:	4618      	mov	r0, r3
 8015866:	3718      	adds	r7, #24
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}
 801586c:	20009530 	.word	0x20009530

08015870 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8015874:	4805      	ldr	r0, [pc, #20]	; (801588c <BSP_SD_GetCardState+0x1c>)
 8015876:	f7f2 fdc3 	bl	8008400 <HAL_SD_GetCardState>
 801587a:	4603      	mov	r3, r0
 801587c:	2b04      	cmp	r3, #4
 801587e:	bf14      	ite	ne
 8015880:	2301      	movne	r3, #1
 8015882:	2300      	moveq	r3, #0
 8015884:	b2db      	uxtb	r3, r3
}
 8015886:	4618      	mov	r0, r3
 8015888:	bd80      	pop	{r7, pc}
 801588a:	bf00      	nop
 801588c:	20009530 	.word	0x20009530

08015890 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8015898:	6879      	ldr	r1, [r7, #4]
 801589a:	4803      	ldr	r0, [pc, #12]	; (80158a8 <BSP_SD_GetCardInfo+0x18>)
 801589c:	f7f2 fd08 	bl	80082b0 <HAL_SD_GetCardInfo>
}
 80158a0:	bf00      	nop
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	20009530 	.word	0x20009530

080158ac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b082      	sub	sp, #8
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80158b4:	f001 fb66 	bl	8016f84 <BSP_SD_ReadCpltCallback>
}
 80158b8:	bf00      	nop
 80158ba:	3708      	adds	r7, #8
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}

080158c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b082      	sub	sp, #8
 80158c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80158c6:	2301      	movs	r3, #1
 80158c8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80158ca:	f000 f81d 	bl	8015908 <BSP_PlatformIsDetected>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d101      	bne.n	80158d8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80158d4:	2300      	movs	r3, #0
 80158d6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80158d8:	79fb      	ldrb	r3, [r7, #7]
 80158da:	b2db      	uxtb	r3, r3
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3708      	adds	r7, #8
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80158e8:	4904      	ldr	r1, [pc, #16]	; (80158fc <MX_FATFS_Init+0x18>)
 80158ea:	4805      	ldr	r0, [pc, #20]	; (8015900 <MX_FATFS_Init+0x1c>)
 80158ec:	f7fa f99e 	bl	800fc2c <FATFS_LinkDriver>
 80158f0:	4603      	mov	r3, r0
 80158f2:	461a      	mov	r2, r3
 80158f4:	4b03      	ldr	r3, [pc, #12]	; (8015904 <MX_FATFS_Init+0x20>)
 80158f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80158f8:	bf00      	nop
 80158fa:	bd80      	pop	{r7, pc}
 80158fc:	2000a0b0 	.word	0x2000a0b0
 8015900:	080210fc 	.word	0x080210fc
 8015904:	2000a0b4 	.word	0x2000a0b4

08015908 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801590e:	2301      	movs	r3, #1
 8015910:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8015912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8015916:	4806      	ldr	r0, [pc, #24]	; (8015930 <BSP_PlatformIsDetected+0x28>)
 8015918:	f7ed f9ce 	bl	8002cb8 <HAL_GPIO_ReadPin>
 801591c:	4603      	mov	r3, r0
 801591e:	2b00      	cmp	r3, #0
 8015920:	d001      	beq.n	8015926 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8015922:	2300      	movs	r3, #0
 8015924:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8015926:	79fb      	ldrb	r3, [r7, #7]
}  
 8015928:	4618      	mov	r0, r3
 801592a:	3708      	adds	r7, #8
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	40020800 	.word	0x40020800

08015934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015934:	b5b0      	push	{r4, r5, r7, lr}
 8015936:	b086      	sub	sp, #24
 8015938:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801593a:	f7eb f8db 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801593e:	f000 f841 	bl	80159c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015942:	f000 ff1f 	bl	8016784 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 8015946:	f000 f911 	bl	8015b6c <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 801594a:	f000 f96b 	bl	8015c24 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 801594e:	f000 f991 	bl	8015c74 <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 8015952:	f000 f9c9 	bl	8015ce8 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 8015956:	f000 fa01 	bl	8015d5c <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 801595a:	f000 fa4d 	bl	8015df8 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 801595e:	f000 fa99 	bl	8015e94 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 8015962:	f000 fac7 	bl	8015ef4 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8015966:	f000 fb8b 	bl	8016080 <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 801596a:	f000 fc3b 	bl	80161e4 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 801596e:	f000 fc59 	bl	8016224 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 8015972:	f000 fc8d 	bl	8016290 <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8015976:	f000 fccd 	bl	8016314 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 801597a:	f000 fd5b 	bl	8016434 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 801597e:	f000 fde9 	bl	8016554 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 8015982:	f000 fe49 	bl	8016618 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8015986:	f000 fe95 	bl	80166b4 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 801598a:	f000 fec7 	bl	801671c <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 801598e:	f7fd ff13 	bl	80137b8 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 8015992:	f7fd ff89 	bl	80138a8 <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8015996:	4b09      	ldr	r3, [pc, #36]	; (80159bc <main+0x88>)
 8015998:	1d3c      	adds	r4, r7, #4
 801599a:	461d      	mov	r5, r3
 801599c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801599e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159a0:	682b      	ldr	r3, [r5, #0]
 80159a2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80159a4:	1d3b      	adds	r3, r7, #4
 80159a6:	2100      	movs	r1, #0
 80159a8:	4618      	mov	r0, r3
 80159aa:	f7fa f99b 	bl	800fce4 <osThreadCreate>
 80159ae:	4602      	mov	r2, r0
 80159b0:	4b03      	ldr	r3, [pc, #12]	; (80159c0 <main+0x8c>)
 80159b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80159b4:	f7fa f973 	bl	800fc9e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80159b8:	e7fe      	b.n	80159b8 <main+0x84>
 80159ba:	bf00      	nop
 80159bc:	08020650 	.word	0x08020650
 80159c0:	20009864 	.word	0x20009864

080159c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b0b4      	sub	sp, #208	; 0xd0
 80159c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80159ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80159ce:	2230      	movs	r2, #48	; 0x30
 80159d0:	2100      	movs	r1, #0
 80159d2:	4618      	mov	r0, r3
 80159d4:	f009 fcef 	bl	801f3b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80159d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80159dc:	2200      	movs	r2, #0
 80159de:	601a      	str	r2, [r3, #0]
 80159e0:	605a      	str	r2, [r3, #4]
 80159e2:	609a      	str	r2, [r3, #8]
 80159e4:	60da      	str	r2, [r3, #12]
 80159e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80159e8:	f107 0308 	add.w	r3, r7, #8
 80159ec:	2284      	movs	r2, #132	; 0x84
 80159ee:	2100      	movs	r1, #0
 80159f0:	4618      	mov	r0, r3
 80159f2:	f009 fce0 	bl	801f3b6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80159f6:	f7ef ffd1 	bl	800599c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80159fa:	4b59      	ldr	r3, [pc, #356]	; (8015b60 <SystemClock_Config+0x19c>)
 80159fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159fe:	4a58      	ldr	r2, [pc, #352]	; (8015b60 <SystemClock_Config+0x19c>)
 8015a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a04:	6413      	str	r3, [r2, #64]	; 0x40
 8015a06:	4b56      	ldr	r3, [pc, #344]	; (8015b60 <SystemClock_Config+0x19c>)
 8015a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a0e:	607b      	str	r3, [r7, #4]
 8015a10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8015a12:	4b54      	ldr	r3, [pc, #336]	; (8015b64 <SystemClock_Config+0x1a0>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	4a53      	ldr	r2, [pc, #332]	; (8015b64 <SystemClock_Config+0x1a0>)
 8015a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8015a1c:	6013      	str	r3, [r2, #0]
 8015a1e:	4b51      	ldr	r3, [pc, #324]	; (8015b64 <SystemClock_Config+0x1a0>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8015a26:	603b      	str	r3, [r7, #0]
 8015a28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8015a2a:	2309      	movs	r3, #9
 8015a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8015a34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8015a3e:	2302      	movs	r3, #2
 8015a40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8015a44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8015a4c:	2319      	movs	r3, #25
 8015a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8015a52:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8015a5a:	2302      	movs	r3, #2
 8015a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8015a60:	2309      	movs	r3, #9
 8015a62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8015a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7f0 f8c6 	bl	8005bfc <HAL_RCC_OscConfig>
 8015a70:	4603      	mov	r3, r0
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	bf14      	ite	ne
 8015a76:	2301      	movne	r3, #1
 8015a78:	2300      	moveq	r3, #0
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d001      	beq.n	8015a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8015a80:	f001 f874 	bl	8016b6c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8015a84:	f7ef ff9a 	bl	80059bc <HAL_PWREx_EnableOverDrive>
 8015a88:	4603      	mov	r3, r0
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	bf14      	ite	ne
 8015a8e:	2301      	movne	r3, #1
 8015a90:	2300      	moveq	r3, #0
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d001      	beq.n	8015a9c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8015a98:	f001 f868 	bl	8016b6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8015a9c:	230f      	movs	r3, #15
 8015a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015aa2:	2302      	movs	r3, #2
 8015aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8015aae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8015ab2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8015ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8015abe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015ac2:	2106      	movs	r1, #6
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7f0 fb09 	bl	80060dc <HAL_RCC_ClockConfig>
 8015aca:	4603      	mov	r3, r0
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	bf14      	ite	ne
 8015ad0:	2301      	movne	r3, #1
 8015ad2:	2300      	moveq	r3, #0
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d001      	beq.n	8015ade <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8015ada:	f001 f847 	bl	8016b6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8015ade:	4b22      	ldr	r3, [pc, #136]	; (8015b68 <SystemClock_Config+0x1a4>)
 8015ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8015ae2:	2364      	movs	r3, #100	; 0x64
 8015ae4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8015ae6:	2302      	movs	r3, #2
 8015ae8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8015aea:	2302      	movs	r3, #2
 8015aec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8015aee:	2302      	movs	r3, #2
 8015af0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8015af2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8015af6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8015af8:	2305      	movs	r3, #5
 8015afa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8015afc:	2302      	movs	r3, #2
 8015afe:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8015b00:	2303      	movs	r3, #3
 8015b02:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8015b04:	2301      	movs	r3, #1
 8015b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8015b08:	2301      	movs	r3, #1
 8015b0a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8015b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015b10:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8015b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b16:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8015b20:	2300      	movs	r3, #0
 8015b22:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8015b24:	2300      	movs	r3, #0
 8015b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8015b2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015b30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8015b34:	2300      	movs	r3, #0
 8015b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015b3a:	f107 0308 	add.w	r3, r7, #8
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f0 fccc 	bl	80064dc <HAL_RCCEx_PeriphCLKConfig>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	bf14      	ite	ne
 8015b4a:	2301      	movne	r3, #1
 8015b4c:	2300      	moveq	r3, #0
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d001      	beq.n	8015b58 <SystemClock_Config+0x194>
  {
    Error_Handler();
 8015b54:	f001 f80a 	bl	8016b6c <Error_Handler>
  }
}
 8015b58:	bf00      	nop
 8015b5a:	37d0      	adds	r7, #208	; 0xd0
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	40023800 	.word	0x40023800
 8015b64:	40007000 	.word	0x40007000
 8015b68:	01b14868 	.word	0x01b14868

08015b6c <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b084      	sub	sp, #16
 8015b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8015b72:	463b      	mov	r3, r7
 8015b74:	2200      	movs	r2, #0
 8015b76:	601a      	str	r2, [r3, #0]
 8015b78:	605a      	str	r2, [r3, #4]
 8015b7a:	609a      	str	r2, [r3, #8]
 8015b7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8015b7e:	4b26      	ldr	r3, [pc, #152]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015b80:	4a26      	ldr	r2, [pc, #152]	; (8015c1c <_ZL12MX_ADC3_Initv+0xb0>)
 8015b82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8015b84:	4b24      	ldr	r3, [pc, #144]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015b8a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8015b8c:	4b22      	ldr	r3, [pc, #136]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015b8e:	2200      	movs	r2, #0
 8015b90:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8015b92:	4b21      	ldr	r3, [pc, #132]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015b94:	2200      	movs	r2, #0
 8015b96:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8015b98:	4b1f      	ldr	r3, [pc, #124]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8015b9e:	4b1e      	ldr	r3, [pc, #120]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8015ba6:	4b1c      	ldr	r3, [pc, #112]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015ba8:	2200      	movs	r2, #0
 8015baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8015bac:	4b1a      	ldr	r3, [pc, #104]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bae:	4a1c      	ldr	r2, [pc, #112]	; (8015c20 <_ZL12MX_ADC3_Initv+0xb4>)
 8015bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8015bb2:	4b19      	ldr	r3, [pc, #100]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8015bb8:	4b17      	ldr	r3, [pc, #92]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bba:	2201      	movs	r2, #1
 8015bbc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8015bbe:	4b16      	ldr	r3, [pc, #88]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8015bc6:	4b14      	ldr	r3, [pc, #80]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bc8:	2201      	movs	r2, #1
 8015bca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8015bcc:	4812      	ldr	r0, [pc, #72]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bce:	f7ea ffe1 	bl	8000b94 <HAL_ADC_Init>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	bf14      	ite	ne
 8015bd8:	2301      	movne	r3, #1
 8015bda:	2300      	moveq	r3, #0
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 8015be2:	f000 ffc3 	bl	8016b6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8015be6:	2304      	movs	r3, #4
 8015be8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8015bea:	2301      	movs	r3, #1
 8015bec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8015bf2:	463b      	mov	r3, r7
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	4808      	ldr	r0, [pc, #32]	; (8015c18 <_ZL12MX_ADC3_Initv+0xac>)
 8015bf8:	f7eb f810 	bl	8000c1c <HAL_ADC_ConfigChannel>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	bf14      	ite	ne
 8015c02:	2301      	movne	r3, #1
 8015c04:	2300      	moveq	r3, #0
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d001      	beq.n	8015c10 <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8015c0c:	f000 ffae 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8015c10:	bf00      	nop
 8015c12:	3710      	adds	r7, #16
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}
 8015c18:	20009220 	.word	0x20009220
 8015c1c:	40012200 	.word	0x40012200
 8015c20:	0f000001 	.word	0x0f000001

08015c24 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8015c28:	4b10      	ldr	r3, [pc, #64]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c2a:	4a11      	ldr	r2, [pc, #68]	; (8015c70 <_ZL11MX_CRC_Initv+0x4c>)
 8015c2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8015c2e:	4b0f      	ldr	r3, [pc, #60]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c30:	2200      	movs	r2, #0
 8015c32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8015c34:	4b0d      	ldr	r3, [pc, #52]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c36:	2200      	movs	r2, #0
 8015c38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8015c3a:	4b0c      	ldr	r3, [pc, #48]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8015c40:	4b0a      	ldr	r3, [pc, #40]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c42:	2200      	movs	r2, #0
 8015c44:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8015c46:	4b09      	ldr	r3, [pc, #36]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c48:	2201      	movs	r2, #1
 8015c4a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8015c4c:	4807      	ldr	r0, [pc, #28]	; (8015c6c <_ZL11MX_CRC_Initv+0x48>)
 8015c4e:	f7eb fb25 	bl	800129c <HAL_CRC_Init>
 8015c52:	4603      	mov	r3, r0
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	bf14      	ite	ne
 8015c58:	2301      	movne	r3, #1
 8015c5a:	2300      	moveq	r3, #0
 8015c5c:	b2db      	uxtb	r3, r3
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d001      	beq.n	8015c66 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8015c62:	f000 ff83 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8015c66:	bf00      	nop
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	20009268 	.word	0x20009268
 8015c70:	40023000 	.word	0x40023000

08015c74 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8015c78:	4b19      	ldr	r3, [pc, #100]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c7a:	4a1a      	ldr	r2, [pc, #104]	; (8015ce4 <_ZL12MX_DCMI_Initv+0x70>)
 8015c7c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8015c7e:	4b18      	ldr	r3, [pc, #96]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c80:	2200      	movs	r2, #0
 8015c82:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8015c84:	4b16      	ldr	r3, [pc, #88]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c86:	2200      	movs	r2, #0
 8015c88:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8015c8a:	4b15      	ldr	r3, [pc, #84]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8015c90:	4b13      	ldr	r3, [pc, #76]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c92:	2200      	movs	r2, #0
 8015c94:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8015c96:	4b12      	ldr	r3, [pc, #72]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c98:	2200      	movs	r2, #0
 8015c9a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8015c9c:	4b10      	ldr	r3, [pc, #64]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8015ca2:	4b0f      	ldr	r3, [pc, #60]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8015ca8:	4b0d      	ldr	r3, [pc, #52]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015caa:	2200      	movs	r2, #0
 8015cac:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8015cae:	4b0c      	ldr	r3, [pc, #48]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8015cb4:	4b0a      	ldr	r3, [pc, #40]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8015cba:	4b09      	ldr	r3, [pc, #36]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8015cc0:	4807      	ldr	r0, [pc, #28]	; (8015ce0 <_ZL12MX_DCMI_Initv+0x6c>)
 8015cc2:	f7eb fbd5 	bl	8001470 <HAL_DCMI_Init>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	bf14      	ite	ne
 8015ccc:	2301      	movne	r3, #1
 8015cce:	2300      	moveq	r3, #0
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d001      	beq.n	8015cda <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 8015cd6:	f000 ff49 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8015cda:	bf00      	nop
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	2000928c 	.word	0x2000928c
 8015ce4:	50050000 	.word	0x50050000

08015ce8 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8015cee:	4b19      	ldr	r3, [pc, #100]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015cf0:	4a19      	ldr	r2, [pc, #100]	; (8015d58 <_ZL11MX_ETH_Initv+0x70>)
 8015cf2:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8015cf4:	4b17      	ldr	r3, [pc, #92]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8015cfa:	4b16      	ldr	r3, [pc, #88]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8015d00:	2300      	movs	r3, #0
 8015d02:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8015d04:	2380      	movs	r3, #128	; 0x80
 8015d06:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8015d08:	23e1      	movs	r3, #225	; 0xe1
 8015d0a:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 8015d10:	2300      	movs	r3, #0
 8015d12:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8015d14:	2300      	movs	r3, #0
 8015d16:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8015d18:	4a0e      	ldr	r2, [pc, #56]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015d1a:	463b      	mov	r3, r7
 8015d1c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8015d1e:	4b0d      	ldr	r3, [pc, #52]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015d20:	2200      	movs	r2, #0
 8015d22:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8015d24:	4b0b      	ldr	r3, [pc, #44]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015d26:	2200      	movs	r2, #0
 8015d28:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8015d2a:	4b0a      	ldr	r3, [pc, #40]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015d2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015d30:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8015d32:	4808      	ldr	r0, [pc, #32]	; (8015d54 <_ZL11MX_ETH_Initv+0x6c>)
 8015d34:	f7ec f8a0 	bl	8001e78 <HAL_ETH_Init>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	bf14      	ite	ne
 8015d3e:	2301      	movne	r3, #1
 8015d40:	2300      	moveq	r3, #0
 8015d42:	b2db      	uxtb	r3, r3
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d001      	beq.n	8015d4c <_ZL11MX_ETH_Initv+0x64>
  {
    Error_Handler();
 8015d48:	f000 ff10 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8015d4c:	bf00      	nop
 8015d4e:	3708      	adds	r7, #8
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	200092dc 	.word	0x200092dc
 8015d58:	40028000 	.word	0x40028000

08015d5c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8015d60:	4b22      	ldr	r3, [pc, #136]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d62:	4a23      	ldr	r2, [pc, #140]	; (8015df0 <_ZL12MX_I2C1_Initv+0x94>)
 8015d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8015d66:	4b21      	ldr	r3, [pc, #132]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d68:	4a22      	ldr	r2, [pc, #136]	; (8015df4 <_ZL12MX_I2C1_Initv+0x98>)
 8015d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8015d6c:	4b1f      	ldr	r3, [pc, #124]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d6e:	2200      	movs	r2, #0
 8015d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015d72:	4b1e      	ldr	r3, [pc, #120]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d74:	2201      	movs	r2, #1
 8015d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015d78:	4b1c      	ldr	r3, [pc, #112]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d7a:	2200      	movs	r2, #0
 8015d7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8015d7e:	4b1b      	ldr	r3, [pc, #108]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015d84:	4b19      	ldr	r3, [pc, #100]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d86:	2200      	movs	r2, #0
 8015d88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015d8a:	4b18      	ldr	r3, [pc, #96]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015d90:	4b16      	ldr	r3, [pc, #88]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d92:	2200      	movs	r2, #0
 8015d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015d96:	4815      	ldr	r0, [pc, #84]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015d98:	f7ee fc1a 	bl	80045d0 <HAL_I2C_Init>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	bf14      	ite	ne
 8015da2:	2301      	movne	r3, #1
 8015da4:	2300      	moveq	r3, #0
 8015da6:	b2db      	uxtb	r3, r3
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d001      	beq.n	8015db0 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8015dac:	f000 fede 	bl	8016b6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015db0:	2100      	movs	r1, #0
 8015db2:	480e      	ldr	r0, [pc, #56]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015db4:	f7ef f924 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 8015db8:	4603      	mov	r3, r0
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	bf14      	ite	ne
 8015dbe:	2301      	movne	r3, #1
 8015dc0:	2300      	moveq	r3, #0
 8015dc2:	b2db      	uxtb	r3, r3
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d001      	beq.n	8015dcc <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8015dc8:	f000 fed0 	bl	8016b6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8015dcc:	2100      	movs	r1, #0
 8015dce:	4807      	ldr	r0, [pc, #28]	; (8015dec <_ZL12MX_I2C1_Initv+0x90>)
 8015dd0:	f7ef f961 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	bf14      	ite	ne
 8015dda:	2301      	movne	r3, #1
 8015ddc:	2300      	moveq	r3, #0
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d001      	beq.n	8015de8 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8015de4:	f000 fec2 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015de8:	bf00      	nop
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	20009324 	.word	0x20009324
 8015df0:	40005400 	.word	0x40005400
 8015df4:	00c0eaff 	.word	0x00c0eaff

08015df8 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8015dfc:	4b22      	ldr	r3, [pc, #136]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015dfe:	4a23      	ldr	r2, [pc, #140]	; (8015e8c <_ZL12MX_I2C3_Initv+0x94>)
 8015e00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8015e02:	4b21      	ldr	r3, [pc, #132]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e04:	4a22      	ldr	r2, [pc, #136]	; (8015e90 <_ZL12MX_I2C3_Initv+0x98>)
 8015e06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8015e08:	4b1f      	ldr	r3, [pc, #124]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015e0e:	4b1e      	ldr	r3, [pc, #120]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e10:	2201      	movs	r2, #1
 8015e12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015e14:	4b1c      	ldr	r3, [pc, #112]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e16:	2200      	movs	r2, #0
 8015e18:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8015e1a:	4b1b      	ldr	r3, [pc, #108]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015e20:	4b19      	ldr	r3, [pc, #100]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e22:	2200      	movs	r2, #0
 8015e24:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015e26:	4b18      	ldr	r3, [pc, #96]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e28:	2200      	movs	r2, #0
 8015e2a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015e2c:	4b16      	ldr	r3, [pc, #88]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e2e:	2200      	movs	r2, #0
 8015e30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8015e32:	4815      	ldr	r0, [pc, #84]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e34:	f7ee fbcc 	bl	80045d0 <HAL_I2C_Init>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	bf14      	ite	ne
 8015e3e:	2301      	movne	r3, #1
 8015e40:	2300      	moveq	r3, #0
 8015e42:	b2db      	uxtb	r3, r3
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d001      	beq.n	8015e4c <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8015e48:	f000 fe90 	bl	8016b6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	480e      	ldr	r0, [pc, #56]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e50:	f7ef f8d6 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 8015e54:	4603      	mov	r3, r0
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	bf14      	ite	ne
 8015e5a:	2301      	movne	r3, #1
 8015e5c:	2300      	moveq	r3, #0
 8015e5e:	b2db      	uxtb	r3, r3
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d001      	beq.n	8015e68 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8015e64:	f000 fe82 	bl	8016b6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8015e68:	2100      	movs	r1, #0
 8015e6a:	4807      	ldr	r0, [pc, #28]	; (8015e88 <_ZL12MX_I2C3_Initv+0x90>)
 8015e6c:	f7ef f913 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	bf14      	ite	ne
 8015e76:	2301      	movne	r3, #1
 8015e78:	2300      	moveq	r3, #0
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d001      	beq.n	8015e84 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 8015e80:	f000 fe74 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8015e84:	bf00      	nop
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	20009370 	.word	0x20009370
 8015e8c:	40005c00 	.word	0x40005c00
 8015e90:	00c0eaff 	.word	0x00c0eaff

08015e94 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8015e98:	4b14      	ldr	r3, [pc, #80]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015e9a:	4a15      	ldr	r2, [pc, #84]	; (8015ef0 <_ZL15MX_QUADSPI_Initv+0x5c>)
 8015e9c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8015e9e:	4b13      	ldr	r3, [pc, #76]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015ea0:	22ff      	movs	r2, #255	; 0xff
 8015ea2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8015ea4:	4b11      	ldr	r3, [pc, #68]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8015eaa:	4b10      	ldr	r3, [pc, #64]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8015eb0:	4b0e      	ldr	r3, [pc, #56]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015eb2:	2201      	movs	r2, #1
 8015eb4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8015eb6:	4b0d      	ldr	r3, [pc, #52]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015eb8:	2200      	movs	r2, #0
 8015eba:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8015ebc:	4b0b      	ldr	r3, [pc, #44]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8015ec2:	4b0a      	ldr	r3, [pc, #40]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8015ec8:	4b08      	ldr	r3, [pc, #32]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015eca:	2200      	movs	r2, #0
 8015ecc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8015ece:	4807      	ldr	r0, [pc, #28]	; (8015eec <_ZL15MX_QUADSPI_Initv+0x58>)
 8015ed0:	f7ef fdc4 	bl	8005a5c <HAL_QSPI_Init>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bf14      	ite	ne
 8015eda:	2301      	movne	r3, #1
 8015edc:	2300      	moveq	r3, #0
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d001      	beq.n	8015ee8 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8015ee4:	f000 fe42 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8015ee8:	bf00      	nop
 8015eea:	bd80      	pop	{r7, pc}
 8015eec:	200093bc 	.word	0x200093bc
 8015ef0:	a0001000 	.word	0xa0001000

08015ef4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b092      	sub	sp, #72	; 0x48
 8015ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8015efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]
 8015f02:	605a      	str	r2, [r3, #4]
 8015f04:	609a      	str	r2, [r3, #8]
 8015f06:	60da      	str	r2, [r3, #12]
 8015f08:	611a      	str	r2, [r3, #16]
 8015f0a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8015f10:	463b      	mov	r3, r7
 8015f12:	222c      	movs	r2, #44	; 0x2c
 8015f14:	2100      	movs	r1, #0
 8015f16:	4618      	mov	r0, r3
 8015f18:	f009 fa4d 	bl	801f3b6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8015f1c:	4b56      	ldr	r3, [pc, #344]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f1e:	4a57      	ldr	r2, [pc, #348]	; (801607c <_ZL11MX_RTC_Initv+0x188>)
 8015f20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8015f22:	4b55      	ldr	r3, [pc, #340]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8015f28:	4b53      	ldr	r3, [pc, #332]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f2a:	227f      	movs	r2, #127	; 0x7f
 8015f2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8015f2e:	4b52      	ldr	r3, [pc, #328]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f30:	22ff      	movs	r2, #255	; 0xff
 8015f32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8015f34:	4b50      	ldr	r3, [pc, #320]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f36:	2200      	movs	r2, #0
 8015f38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8015f3a:	4b4f      	ldr	r3, [pc, #316]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8015f40:	4b4d      	ldr	r3, [pc, #308]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f42:	2200      	movs	r2, #0
 8015f44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8015f46:	484c      	ldr	r0, [pc, #304]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f48:	f7f0 ffea 	bl	8006f20 <HAL_RTC_Init>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	bf14      	ite	ne
 8015f52:	2301      	movne	r3, #1
 8015f54:	2300      	moveq	r3, #0
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d001      	beq.n	8015f60 <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 8015f5c:	f000 fe06 	bl	8016b6c <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8015f60:	2300      	movs	r3, #0
 8015f62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8015f66:	2300      	movs	r3, #0
 8015f68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8015f6c:	2300      	movs	r3, #0
 8015f6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8015f72:	2300      	movs	r3, #0
 8015f74:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8015f76:	2300      	movs	r3, #0
 8015f78:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8015f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015f7e:	2201      	movs	r2, #1
 8015f80:	4619      	mov	r1, r3
 8015f82:	483d      	ldr	r0, [pc, #244]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015f84:	f7f1 f848 	bl	8007018 <HAL_RTC_SetTime>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	bf14      	ite	ne
 8015f8e:	2301      	movne	r3, #1
 8015f90:	2300      	moveq	r3, #0
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d001      	beq.n	8015f9c <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 8015f98:	f000 fde8 	bl	8016b6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8015fa8:	2301      	movs	r3, #1
 8015faa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8015fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015fb8:	2201      	movs	r2, #1
 8015fba:	4619      	mov	r1, r3
 8015fbc:	482e      	ldr	r0, [pc, #184]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8015fbe:	f7f1 f8e9 	bl	8007194 <HAL_RTC_SetDate>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	bf14      	ite	ne
 8015fc8:	2301      	movne	r3, #1
 8015fca:	2300      	moveq	r3, #0
 8015fcc:	b2db      	uxtb	r3, r3
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d001      	beq.n	8015fd6 <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 8015fd2:	f000 fdcb 	bl	8016b6c <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8015fea:	2300      	movs	r3, #0
 8015fec:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8016000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016004:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8016006:	463b      	mov	r3, r7
 8016008:	2201      	movs	r2, #1
 801600a:	4619      	mov	r1, r3
 801600c:	481a      	ldr	r0, [pc, #104]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 801600e:	f7f1 f969 	bl	80072e4 <HAL_RTC_SetAlarm>
 8016012:	4603      	mov	r3, r0
 8016014:	2b00      	cmp	r3, #0
 8016016:	bf14      	ite	ne
 8016018:	2301      	movne	r3, #1
 801601a:	2300      	moveq	r3, #0
 801601c:	b2db      	uxtb	r3, r3
 801601e:	2b00      	cmp	r3, #0
 8016020:	d001      	beq.n	8016026 <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 8016022:	f000 fda3 	bl	8016b6c <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8016026:	2301      	movs	r3, #1
 8016028:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 801602c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016030:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8016032:	463b      	mov	r3, r7
 8016034:	2201      	movs	r2, #1
 8016036:	4619      	mov	r1, r3
 8016038:	480f      	ldr	r0, [pc, #60]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 801603a:	f7f1 f953 	bl	80072e4 <HAL_RTC_SetAlarm>
 801603e:	4603      	mov	r3, r0
 8016040:	2b00      	cmp	r3, #0
 8016042:	bf14      	ite	ne
 8016044:	2301      	movne	r3, #1
 8016046:	2300      	moveq	r3, #0
 8016048:	b2db      	uxtb	r3, r3
 801604a:	2b00      	cmp	r3, #0
 801604c:	d001      	beq.n	8016052 <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 801604e:	f000 fd8d 	bl	8016b6c <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8016052:	2202      	movs	r2, #2
 8016054:	2100      	movs	r1, #0
 8016056:	4808      	ldr	r0, [pc, #32]	; (8016078 <_ZL11MX_RTC_Initv+0x184>)
 8016058:	f7f1 face 	bl	80075f8 <HAL_RTCEx_SetTimeStamp>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	bf14      	ite	ne
 8016062:	2301      	movne	r3, #1
 8016064:	2300      	moveq	r3, #0
 8016066:	b2db      	uxtb	r3, r3
 8016068:	2b00      	cmp	r3, #0
 801606a:	d001      	beq.n	8016070 <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 801606c:	f000 fd7e 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8016070:	bf00      	nop
 8016072:	3748      	adds	r7, #72	; 0x48
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}
 8016078:	20009408 	.word	0x20009408
 801607c:	40002800 	.word	0x40002800

08016080 <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8016080:	b580      	push	{r7, lr}
 8016082:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8016084:	4b52      	ldr	r3, [pc, #328]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016086:	4a53      	ldr	r2, [pc, #332]	; (80161d4 <_ZL12MX_SAI2_Initv+0x154>)
 8016088:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801608a:	4b51      	ldr	r3, [pc, #324]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 801608c:	2200      	movs	r2, #0
 801608e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8016090:	4b4f      	ldr	r3, [pc, #316]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016092:	2200      	movs	r2, #0
 8016094:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8016096:	4b4e      	ldr	r3, [pc, #312]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016098:	2240      	movs	r2, #64	; 0x40
 801609a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801609c:	4b4c      	ldr	r3, [pc, #304]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 801609e:	2200      	movs	r2, #0
 80160a0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80160a2:	4b4b      	ldr	r3, [pc, #300]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160a4:	2200      	movs	r2, #0
 80160a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80160a8:	4b49      	ldr	r3, [pc, #292]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160aa:	2200      	movs	r2, #0
 80160ac:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80160ae:	4b48      	ldr	r3, [pc, #288]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160b0:	2200      	movs	r2, #0
 80160b2:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80160b4:	4b46      	ldr	r3, [pc, #280]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160b6:	2200      	movs	r2, #0
 80160b8:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80160ba:	4b45      	ldr	r3, [pc, #276]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160bc:	2200      	movs	r2, #0
 80160be:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80160c0:	4b43      	ldr	r3, [pc, #268]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160c2:	4a45      	ldr	r2, [pc, #276]	; (80161d8 <_ZL12MX_SAI2_Initv+0x158>)
 80160c4:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80160c6:	4b42      	ldr	r3, [pc, #264]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160c8:	2200      	movs	r2, #0
 80160ca:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80160cc:	4b40      	ldr	r3, [pc, #256]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160ce:	2200      	movs	r2, #0
 80160d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80160d2:	4b3f      	ldr	r3, [pc, #252]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80160d8:	4b3d      	ldr	r3, [pc, #244]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160da:	2200      	movs	r2, #0
 80160dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80160de:	4b3c      	ldr	r3, [pc, #240]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160e0:	2208      	movs	r2, #8
 80160e2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80160e4:	4b3a      	ldr	r3, [pc, #232]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160e6:	2201      	movs	r2, #1
 80160e8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80160ea:	4b39      	ldr	r3, [pc, #228]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160ec:	2200      	movs	r2, #0
 80160ee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80160f0:	4b37      	ldr	r3, [pc, #220]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160f2:	2200      	movs	r2, #0
 80160f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80160f6:	4b36      	ldr	r3, [pc, #216]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160f8:	2200      	movs	r2, #0
 80160fa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80160fc:	4b34      	ldr	r3, [pc, #208]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 80160fe:	2200      	movs	r2, #0
 8016100:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8016102:	4b33      	ldr	r3, [pc, #204]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016104:	2200      	movs	r2, #0
 8016106:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8016108:	4b31      	ldr	r3, [pc, #196]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 801610a:	2201      	movs	r2, #1
 801610c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 801610e:	4b30      	ldr	r3, [pc, #192]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016110:	2200      	movs	r2, #0
 8016112:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8016114:	482e      	ldr	r0, [pc, #184]	; (80161d0 <_ZL12MX_SAI2_Initv+0x150>)
 8016116:	f7f1 fac5 	bl	80076a4 <HAL_SAI_Init>
 801611a:	4603      	mov	r3, r0
 801611c:	2b00      	cmp	r3, #0
 801611e:	bf14      	ite	ne
 8016120:	2301      	movne	r3, #1
 8016122:	2300      	moveq	r3, #0
 8016124:	b2db      	uxtb	r3, r3
 8016126:	2b00      	cmp	r3, #0
 8016128:	d001      	beq.n	801612e <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 801612a:	f000 fd1f 	bl	8016b6c <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 801612e:	4b2b      	ldr	r3, [pc, #172]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016130:	4a2b      	ldr	r2, [pc, #172]	; (80161e0 <_ZL12MX_SAI2_Initv+0x160>)
 8016132:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8016134:	4b29      	ldr	r3, [pc, #164]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016136:	2200      	movs	r2, #0
 8016138:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 801613a:	4b28      	ldr	r3, [pc, #160]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801613c:	2203      	movs	r2, #3
 801613e:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8016140:	4b26      	ldr	r3, [pc, #152]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016142:	2240      	movs	r2, #64	; 0x40
 8016144:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8016146:	4b25      	ldr	r3, [pc, #148]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016148:	2200      	movs	r2, #0
 801614a:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801614c:	4b23      	ldr	r3, [pc, #140]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801614e:	2200      	movs	r2, #0
 8016150:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8016152:	4b22      	ldr	r3, [pc, #136]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016154:	2201      	movs	r2, #1
 8016156:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8016158:	4b20      	ldr	r3, [pc, #128]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801615a:	2200      	movs	r2, #0
 801615c:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801615e:	4b1f      	ldr	r3, [pc, #124]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016160:	2200      	movs	r2, #0
 8016162:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8016164:	4b1d      	ldr	r3, [pc, #116]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016166:	2200      	movs	r2, #0
 8016168:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 801616a:	4b1c      	ldr	r3, [pc, #112]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801616c:	2200      	movs	r2, #0
 801616e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8016170:	4b1a      	ldr	r3, [pc, #104]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016172:	2200      	movs	r2, #0
 8016174:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8016176:	4b19      	ldr	r3, [pc, #100]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016178:	2200      	movs	r2, #0
 801617a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 801617c:	4b17      	ldr	r3, [pc, #92]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801617e:	2218      	movs	r2, #24
 8016180:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8016182:	4b16      	ldr	r3, [pc, #88]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016184:	2201      	movs	r2, #1
 8016186:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8016188:	4b14      	ldr	r3, [pc, #80]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801618a:	2200      	movs	r2, #0
 801618c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801618e:	4b13      	ldr	r3, [pc, #76]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016190:	2200      	movs	r2, #0
 8016192:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8016194:	4b11      	ldr	r3, [pc, #68]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 8016196:	2200      	movs	r2, #0
 8016198:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 801619a:	4b10      	ldr	r3, [pc, #64]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 801619c:	2200      	movs	r2, #0
 801619e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80161a0:	4b0e      	ldr	r3, [pc, #56]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80161a6:	4b0d      	ldr	r3, [pc, #52]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 80161a8:	2201      	movs	r2, #1
 80161aa:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80161ac:	4b0b      	ldr	r3, [pc, #44]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 80161ae:	2200      	movs	r2, #0
 80161b0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80161b2:	480a      	ldr	r0, [pc, #40]	; (80161dc <_ZL12MX_SAI2_Initv+0x15c>)
 80161b4:	f7f1 fa76 	bl	80076a4 <HAL_SAI_Init>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	bf14      	ite	ne
 80161be:	2301      	movne	r3, #1
 80161c0:	2300      	moveq	r3, #0
 80161c2:	b2db      	uxtb	r3, r3
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d001      	beq.n	80161cc <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 80161c8:	f000 fcd0 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80161cc:	bf00      	nop
 80161ce:	bd80      	pop	{r7, pc}
 80161d0:	20009428 	.word	0x20009428
 80161d4:	40015c04 	.word	0x40015c04
 80161d8:	0002ee00 	.word	0x0002ee00
 80161dc:	200094ac 	.word	0x200094ac
 80161e0:	40015c24 	.word	0x40015c24

080161e4 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80161e4:	b480      	push	{r7}
 80161e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80161e8:	4b0c      	ldr	r3, [pc, #48]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80161ea:	4a0d      	ldr	r2, [pc, #52]	; (8016220 <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 80161ec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80161ee:	4b0b      	ldr	r3, [pc, #44]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80161f0:	2200      	movs	r2, #0
 80161f2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80161f4:	4b09      	ldr	r3, [pc, #36]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80161f6:	2200      	movs	r2, #0
 80161f8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80161fa:	4b08      	ldr	r3, [pc, #32]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 80161fc:	2200      	movs	r2, #0
 80161fe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8016200:	4b06      	ldr	r3, [pc, #24]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016202:	2200      	movs	r2, #0
 8016204:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8016206:	4b05      	ldr	r3, [pc, #20]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8016208:	2200      	movs	r2, #0
 801620a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 801620c:	4b03      	ldr	r3, [pc, #12]	; (801621c <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 801620e:	2200      	movs	r2, #0
 8016210:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8016212:	bf00      	nop
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr
 801621c:	20009530 	.word	0x20009530
 8016220:	40012c00 	.word	0x40012c00

08016224 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8016228:	4b18      	ldr	r3, [pc, #96]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 801622a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 801622e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8016230:	4b16      	ldr	r3, [pc, #88]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016232:	2200      	movs	r2, #0
 8016234:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8016236:	4b15      	ldr	r3, [pc, #84]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016238:	2200      	movs	r2, #0
 801623a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 801623c:	4b13      	ldr	r3, [pc, #76]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 801623e:	2200      	movs	r2, #0
 8016240:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8016242:	4b12      	ldr	r3, [pc, #72]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016244:	2200      	movs	r2, #0
 8016246:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8016248:	4b10      	ldr	r3, [pc, #64]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 801624a:	2200      	movs	r2, #0
 801624c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 801624e:	4b0f      	ldr	r3, [pc, #60]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016250:	2200      	movs	r2, #0
 8016252:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8016254:	4b0d      	ldr	r3, [pc, #52]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016256:	2200      	movs	r2, #0
 8016258:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 801625a:	4b0c      	ldr	r3, [pc, #48]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 801625c:	2200      	movs	r2, #0
 801625e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8016260:	4b0a      	ldr	r3, [pc, #40]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016262:	2200      	movs	r2, #0
 8016264:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8016266:	4b09      	ldr	r3, [pc, #36]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 8016268:	2200      	movs	r2, #0
 801626a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 801626c:	4807      	ldr	r0, [pc, #28]	; (801628c <_ZL15MX_SPDIFRX_Initv+0x68>)
 801626e:	f7f2 fd01 	bl	8008c74 <HAL_SPDIFRX_Init>
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	bf14      	ite	ne
 8016278:	2301      	movne	r3, #1
 801627a:	2300      	moveq	r3, #0
 801627c:	b2db      	uxtb	r3, r3
 801627e:	2b00      	cmp	r3, #0
 8016280:	d001      	beq.n	8016286 <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8016282:	f000 fc73 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8016286:	bf00      	nop
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	200095b4 	.word	0x200095b4

08016290 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8016294:	4b1d      	ldr	r3, [pc, #116]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 8016296:	4a1e      	ldr	r2, [pc, #120]	; (8016310 <_ZL12MX_SPI2_Initv+0x80>)
 8016298:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801629a:	4b1c      	ldr	r3, [pc, #112]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 801629c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80162a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80162a2:	4b1a      	ldr	r3, [pc, #104]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162a4:	2200      	movs	r2, #0
 80162a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80162a8:	4b18      	ldr	r3, [pc, #96]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80162ae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80162b0:	4b16      	ldr	r3, [pc, #88]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162b2:	2200      	movs	r2, #0
 80162b4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80162b6:	4b15      	ldr	r3, [pc, #84]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162b8:	2200      	movs	r2, #0
 80162ba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80162bc:	4b13      	ldr	r3, [pc, #76]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80162c2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80162c4:	4b11      	ldr	r3, [pc, #68]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162c6:	2200      	movs	r2, #0
 80162c8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80162ca:	4b10      	ldr	r3, [pc, #64]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162cc:	2200      	movs	r2, #0
 80162ce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80162d0:	4b0e      	ldr	r3, [pc, #56]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162d2:	2200      	movs	r2, #0
 80162d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80162d6:	4b0d      	ldr	r3, [pc, #52]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162d8:	2200      	movs	r2, #0
 80162da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80162dc:	4b0b      	ldr	r3, [pc, #44]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162de:	2207      	movs	r2, #7
 80162e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80162e2:	4b0a      	ldr	r3, [pc, #40]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162e4:	2200      	movs	r2, #0
 80162e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80162e8:	4b08      	ldr	r3, [pc, #32]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162ea:	2208      	movs	r2, #8
 80162ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80162ee:	4807      	ldr	r0, [pc, #28]	; (801630c <_ZL12MX_SPI2_Initv+0x7c>)
 80162f0:	f7f2 fd1c 	bl	8008d2c <HAL_SPI_Init>
 80162f4:	4603      	mov	r3, r0
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	bf14      	ite	ne
 80162fa:	2301      	movne	r3, #1
 80162fc:	2300      	moveq	r3, #0
 80162fe:	b2db      	uxtb	r3, r3
 8016300:	2b00      	cmp	r3, #0
 8016302:	d001      	beq.n	8016308 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8016304:	f000 fc32 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8016308:	bf00      	nop
 801630a:	bd80      	pop	{r7, pc}
 801630c:	20009600 	.word	0x20009600
 8016310:	40003800 	.word	0x40003800

08016314 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b08e      	sub	sp, #56	; 0x38
 8016318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801631a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801631e:	2200      	movs	r2, #0
 8016320:	601a      	str	r2, [r3, #0]
 8016322:	605a      	str	r2, [r3, #4]
 8016324:	609a      	str	r2, [r3, #8]
 8016326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016328:	f107 031c 	add.w	r3, r7, #28
 801632c:	2200      	movs	r2, #0
 801632e:	601a      	str	r2, [r3, #0]
 8016330:	605a      	str	r2, [r3, #4]
 8016332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016334:	463b      	mov	r3, r7
 8016336:	2200      	movs	r2, #0
 8016338:	601a      	str	r2, [r3, #0]
 801633a:	605a      	str	r2, [r3, #4]
 801633c:	609a      	str	r2, [r3, #8]
 801633e:	60da      	str	r2, [r3, #12]
 8016340:	611a      	str	r2, [r3, #16]
 8016342:	615a      	str	r2, [r3, #20]
 8016344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8016346:	4b39      	ldr	r3, [pc, #228]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016348:	4a39      	ldr	r2, [pc, #228]	; (8016430 <_ZL12MX_TIM3_Initv+0x11c>)
 801634a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801634c:	4b37      	ldr	r3, [pc, #220]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 801634e:	2200      	movs	r2, #0
 8016350:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016352:	4b36      	ldr	r3, [pc, #216]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016354:	2200      	movs	r2, #0
 8016356:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8016358:	4b34      	ldr	r3, [pc, #208]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 801635a:	2200      	movs	r2, #0
 801635c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801635e:	4b33      	ldr	r3, [pc, #204]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016360:	2200      	movs	r2, #0
 8016362:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016364:	4b31      	ldr	r3, [pc, #196]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016366:	2200      	movs	r2, #0
 8016368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801636a:	4830      	ldr	r0, [pc, #192]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 801636c:	f7f2 fd70 	bl	8008e50 <HAL_TIM_Base_Init>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	bf14      	ite	ne
 8016376:	2301      	movne	r3, #1
 8016378:	2300      	moveq	r3, #0
 801637a:	b2db      	uxtb	r3, r3
 801637c:	2b00      	cmp	r3, #0
 801637e:	d001      	beq.n	8016384 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8016380:	f000 fbf4 	bl	8016b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016388:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801638a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801638e:	4619      	mov	r1, r3
 8016390:	4826      	ldr	r0, [pc, #152]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016392:	f7f3 f83f 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8016396:	4603      	mov	r3, r0
 8016398:	2b00      	cmp	r3, #0
 801639a:	bf14      	ite	ne
 801639c:	2301      	movne	r3, #1
 801639e:	2300      	moveq	r3, #0
 80163a0:	b2db      	uxtb	r3, r3
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d001      	beq.n	80163aa <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80163a6:	f000 fbe1 	bl	8016b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80163aa:	4820      	ldr	r0, [pc, #128]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 80163ac:	f7f2 fdd0 	bl	8008f50 <HAL_TIM_PWM_Init>
 80163b0:	4603      	mov	r3, r0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	bf14      	ite	ne
 80163b6:	2301      	movne	r3, #1
 80163b8:	2300      	moveq	r3, #0
 80163ba:	b2db      	uxtb	r3, r3
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d001      	beq.n	80163c4 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 80163c0:	f000 fbd4 	bl	8016b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80163c4:	2300      	movs	r3, #0
 80163c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80163c8:	2300      	movs	r3, #0
 80163ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80163cc:	f107 031c 	add.w	r3, r7, #28
 80163d0:	4619      	mov	r1, r3
 80163d2:	4816      	ldr	r0, [pc, #88]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 80163d4:	f7f3 fc98 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 80163d8:	4603      	mov	r3, r0
 80163da:	2b00      	cmp	r3, #0
 80163dc:	bf14      	ite	ne
 80163de:	2301      	movne	r3, #1
 80163e0:	2300      	moveq	r3, #0
 80163e2:	b2db      	uxtb	r3, r3
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d001      	beq.n	80163ec <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80163e8:	f000 fbc0 	bl	8016b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80163ec:	2360      	movs	r3, #96	; 0x60
 80163ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80163f0:	2300      	movs	r3, #0
 80163f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80163f4:	2300      	movs	r3, #0
 80163f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80163f8:	2300      	movs	r3, #0
 80163fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80163fc:	463b      	mov	r3, r7
 80163fe:	2200      	movs	r2, #0
 8016400:	4619      	mov	r1, r3
 8016402:	480a      	ldr	r0, [pc, #40]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 8016404:	f7f2 feee 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8016408:	4603      	mov	r3, r0
 801640a:	2b00      	cmp	r3, #0
 801640c:	bf14      	ite	ne
 801640e:	2301      	movne	r3, #1
 8016410:	2300      	moveq	r3, #0
 8016412:	b2db      	uxtb	r3, r3
 8016414:	2b00      	cmp	r3, #0
 8016416:	d001      	beq.n	801641c <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8016418:	f000 fba8 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801641c:	4803      	ldr	r0, [pc, #12]	; (801642c <_ZL12MX_TIM3_Initv+0x118>)
 801641e:	f001 fa8f 	bl	8017940 <HAL_TIM_MspPostInit>

}
 8016422:	bf00      	nop
 8016424:	3738      	adds	r7, #56	; 0x38
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
 801642a:	bf00      	nop
 801642c:	20009664 	.word	0x20009664
 8016430:	40000400 	.word	0x40000400

08016434 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08e      	sub	sp, #56	; 0x38
 8016438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801643a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801643e:	2200      	movs	r2, #0
 8016440:	601a      	str	r2, [r3, #0]
 8016442:	605a      	str	r2, [r3, #4]
 8016444:	609a      	str	r2, [r3, #8]
 8016446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016448:	f107 031c 	add.w	r3, r7, #28
 801644c:	2200      	movs	r2, #0
 801644e:	601a      	str	r2, [r3, #0]
 8016450:	605a      	str	r2, [r3, #4]
 8016452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016454:	463b      	mov	r3, r7
 8016456:	2200      	movs	r2, #0
 8016458:	601a      	str	r2, [r3, #0]
 801645a:	605a      	str	r2, [r3, #4]
 801645c:	609a      	str	r2, [r3, #8]
 801645e:	60da      	str	r2, [r3, #12]
 8016460:	611a      	str	r2, [r3, #16]
 8016462:	615a      	str	r2, [r3, #20]
 8016464:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8016466:	4b39      	ldr	r3, [pc, #228]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 8016468:	4a39      	ldr	r2, [pc, #228]	; (8016550 <_ZL12MX_TIM5_Initv+0x11c>)
 801646a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 801646c:	4b37      	ldr	r3, [pc, #220]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 801646e:	2200      	movs	r2, #0
 8016470:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016472:	4b36      	ldr	r3, [pc, #216]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 8016474:	2200      	movs	r2, #0
 8016476:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8016478:	4b34      	ldr	r3, [pc, #208]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 801647a:	2200      	movs	r2, #0
 801647c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801647e:	4b33      	ldr	r3, [pc, #204]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 8016480:	2200      	movs	r2, #0
 8016482:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016484:	4b31      	ldr	r3, [pc, #196]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 8016486:	2200      	movs	r2, #0
 8016488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801648a:	4830      	ldr	r0, [pc, #192]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 801648c:	f7f2 fce0 	bl	8008e50 <HAL_TIM_Base_Init>
 8016490:	4603      	mov	r3, r0
 8016492:	2b00      	cmp	r3, #0
 8016494:	bf14      	ite	ne
 8016496:	2301      	movne	r3, #1
 8016498:	2300      	moveq	r3, #0
 801649a:	b2db      	uxtb	r3, r3
 801649c:	2b00      	cmp	r3, #0
 801649e:	d001      	beq.n	80164a4 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 80164a0:	f000 fb64 	bl	8016b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80164a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80164a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80164aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80164ae:	4619      	mov	r1, r3
 80164b0:	4826      	ldr	r0, [pc, #152]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 80164b2:	f7f2 ffaf 	bl	8009414 <HAL_TIM_ConfigClockSource>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bf14      	ite	ne
 80164bc:	2301      	movne	r3, #1
 80164be:	2300      	moveq	r3, #0
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d001      	beq.n	80164ca <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 80164c6:	f000 fb51 	bl	8016b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80164ca:	4820      	ldr	r0, [pc, #128]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 80164cc:	f7f2 fd40 	bl	8008f50 <HAL_TIM_PWM_Init>
 80164d0:	4603      	mov	r3, r0
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	bf14      	ite	ne
 80164d6:	2301      	movne	r3, #1
 80164d8:	2300      	moveq	r3, #0
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d001      	beq.n	80164e4 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 80164e0:	f000 fb44 	bl	8016b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80164e4:	2300      	movs	r3, #0
 80164e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80164e8:	2300      	movs	r3, #0
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80164ec:	f107 031c 	add.w	r3, r7, #28
 80164f0:	4619      	mov	r1, r3
 80164f2:	4816      	ldr	r0, [pc, #88]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 80164f4:	f7f3 fc08 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 80164f8:	4603      	mov	r3, r0
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	bf14      	ite	ne
 80164fe:	2301      	movne	r3, #1
 8016500:	2300      	moveq	r3, #0
 8016502:	b2db      	uxtb	r3, r3
 8016504:	2b00      	cmp	r3, #0
 8016506:	d001      	beq.n	801650c <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8016508:	f000 fb30 	bl	8016b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801650c:	2360      	movs	r3, #96	; 0x60
 801650e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8016510:	2300      	movs	r3, #0
 8016512:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016514:	2300      	movs	r3, #0
 8016516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016518:	2300      	movs	r3, #0
 801651a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 801651c:	463b      	mov	r3, r7
 801651e:	220c      	movs	r2, #12
 8016520:	4619      	mov	r1, r3
 8016522:	480a      	ldr	r0, [pc, #40]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 8016524:	f7f2 fe5e 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	bf14      	ite	ne
 801652e:	2301      	movne	r3, #1
 8016530:	2300      	moveq	r3, #0
 8016532:	b2db      	uxtb	r3, r3
 8016534:	2b00      	cmp	r3, #0
 8016536:	d001      	beq.n	801653c <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8016538:	f000 fb18 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 801653c:	4803      	ldr	r0, [pc, #12]	; (801654c <_ZL12MX_TIM5_Initv+0x118>)
 801653e:	f001 f9ff 	bl	8017940 <HAL_TIM_MspPostInit>

}
 8016542:	bf00      	nop
 8016544:	3738      	adds	r7, #56	; 0x38
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	200096a4 	.word	0x200096a4
 8016550:	40000c00 	.word	0x40000c00

08016554 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b088      	sub	sp, #32
 8016558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801655a:	f107 0310 	add.w	r3, r7, #16
 801655e:	2200      	movs	r2, #0
 8016560:	601a      	str	r2, [r3, #0]
 8016562:	605a      	str	r2, [r3, #4]
 8016564:	609a      	str	r2, [r3, #8]
 8016566:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016568:	1d3b      	adds	r3, r7, #4
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]
 801656e:	605a      	str	r2, [r3, #4]
 8016570:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8016572:	4b27      	ldr	r3, [pc, #156]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 8016574:	4a27      	ldr	r2, [pc, #156]	; (8016614 <_ZL12MX_TIM8_Initv+0xc0>)
 8016576:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8016578:	4b25      	ldr	r3, [pc, #148]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 801657a:	2200      	movs	r2, #0
 801657c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801657e:	4b24      	ldr	r3, [pc, #144]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 8016580:	2200      	movs	r2, #0
 8016582:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8016584:	4b22      	ldr	r3, [pc, #136]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 8016586:	2200      	movs	r2, #0
 8016588:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801658a:	4b21      	ldr	r3, [pc, #132]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 801658c:	2200      	movs	r2, #0
 801658e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016590:	4b1f      	ldr	r3, [pc, #124]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 8016592:	2200      	movs	r2, #0
 8016594:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016596:	4b1e      	ldr	r3, [pc, #120]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 8016598:	2200      	movs	r2, #0
 801659a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801659c:	481c      	ldr	r0, [pc, #112]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 801659e:	f7f2 fc57 	bl	8008e50 <HAL_TIM_Base_Init>
 80165a2:	4603      	mov	r3, r0
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	bf14      	ite	ne
 80165a8:	2301      	movne	r3, #1
 80165aa:	2300      	moveq	r3, #0
 80165ac:	b2db      	uxtb	r3, r3
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d001      	beq.n	80165b6 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 80165b2:	f000 fadb 	bl	8016b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80165b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80165ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80165bc:	f107 0310 	add.w	r3, r7, #16
 80165c0:	4619      	mov	r1, r3
 80165c2:	4813      	ldr	r0, [pc, #76]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 80165c4:	f7f2 ff26 	bl	8009414 <HAL_TIM_ConfigClockSource>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	bf14      	ite	ne
 80165ce:	2301      	movne	r3, #1
 80165d0:	2300      	moveq	r3, #0
 80165d2:	b2db      	uxtb	r3, r3
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d001      	beq.n	80165dc <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 80165d8:	f000 fac8 	bl	8016b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80165dc:	2300      	movs	r3, #0
 80165de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80165e0:	2300      	movs	r3, #0
 80165e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80165e4:	2300      	movs	r3, #0
 80165e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80165e8:	1d3b      	adds	r3, r7, #4
 80165ea:	4619      	mov	r1, r3
 80165ec:	4808      	ldr	r0, [pc, #32]	; (8016610 <_ZL12MX_TIM8_Initv+0xbc>)
 80165ee:	f7f3 fb8b 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	bf14      	ite	ne
 80165f8:	2301      	movne	r3, #1
 80165fa:	2300      	moveq	r3, #0
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d001      	beq.n	8016606 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8016602:	f000 fab3 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8016606:	bf00      	nop
 8016608:	3720      	adds	r7, #32
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	200096e4 	.word	0x200096e4
 8016614:	40010400 	.word	0x40010400

08016618 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b088      	sub	sp, #32
 801661c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801661e:	1d3b      	adds	r3, r7, #4
 8016620:	2200      	movs	r2, #0
 8016622:	601a      	str	r2, [r3, #0]
 8016624:	605a      	str	r2, [r3, #4]
 8016626:	609a      	str	r2, [r3, #8]
 8016628:	60da      	str	r2, [r3, #12]
 801662a:	611a      	str	r2, [r3, #16]
 801662c:	615a      	str	r2, [r3, #20]
 801662e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8016630:	4b1e      	ldr	r3, [pc, #120]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016632:	4a1f      	ldr	r2, [pc, #124]	; (80166b0 <_ZL13MX_TIM12_Initv+0x98>)
 8016634:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8016636:	4b1d      	ldr	r3, [pc, #116]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016638:	2200      	movs	r2, #0
 801663a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 801663c:	4b1b      	ldr	r3, [pc, #108]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 801663e:	2200      	movs	r2, #0
 8016640:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8016642:	4b1a      	ldr	r3, [pc, #104]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016644:	2200      	movs	r2, #0
 8016646:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016648:	4b18      	ldr	r3, [pc, #96]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 801664a:	2200      	movs	r2, #0
 801664c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801664e:	4b17      	ldr	r3, [pc, #92]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016650:	2200      	movs	r2, #0
 8016652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8016654:	4815      	ldr	r0, [pc, #84]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016656:	f7f2 fc7b 	bl	8008f50 <HAL_TIM_PWM_Init>
 801665a:	4603      	mov	r3, r0
 801665c:	2b00      	cmp	r3, #0
 801665e:	bf14      	ite	ne
 8016660:	2301      	movne	r3, #1
 8016662:	2300      	moveq	r3, #0
 8016664:	b2db      	uxtb	r3, r3
 8016666:	2b00      	cmp	r3, #0
 8016668:	d001      	beq.n	801666e <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 801666a:	f000 fa7f 	bl	8016b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801666e:	2360      	movs	r3, #96	; 0x60
 8016670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8016672:	2300      	movs	r3, #0
 8016674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016676:	2300      	movs	r3, #0
 8016678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801667a:	2300      	movs	r3, #0
 801667c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801667e:	1d3b      	adds	r3, r7, #4
 8016680:	2200      	movs	r2, #0
 8016682:	4619      	mov	r1, r3
 8016684:	4809      	ldr	r0, [pc, #36]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 8016686:	f7f2 fdad 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 801668a:	4603      	mov	r3, r0
 801668c:	2b00      	cmp	r3, #0
 801668e:	bf14      	ite	ne
 8016690:	2301      	movne	r3, #1
 8016692:	2300      	moveq	r3, #0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	2b00      	cmp	r3, #0
 8016698:	d001      	beq.n	801669e <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 801669a:	f000 fa67 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 801669e:	4803      	ldr	r0, [pc, #12]	; (80166ac <_ZL13MX_TIM12_Initv+0x94>)
 80166a0:	f001 f94e 	bl	8017940 <HAL_TIM_MspPostInit>

}
 80166a4:	bf00      	nop
 80166a6:	3720      	adds	r7, #32
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20009724 	.word	0x20009724
 80166b0:	40001800 	.word	0x40001800

080166b4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80166b8:	4b16      	ldr	r3, [pc, #88]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166ba:	4a17      	ldr	r2, [pc, #92]	; (8016718 <_ZL19MX_USART1_UART_Initv+0x64>)
 80166bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80166be:	4b15      	ldr	r3, [pc, #84]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80166c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80166c6:	4b13      	ldr	r3, [pc, #76]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166c8:	2200      	movs	r2, #0
 80166ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80166cc:	4b11      	ldr	r3, [pc, #68]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166ce:	2200      	movs	r2, #0
 80166d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80166d2:	4b10      	ldr	r3, [pc, #64]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166d4:	2200      	movs	r2, #0
 80166d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80166d8:	4b0e      	ldr	r3, [pc, #56]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166da:	220c      	movs	r2, #12
 80166dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80166de:	4b0d      	ldr	r3, [pc, #52]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166e0:	2200      	movs	r2, #0
 80166e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80166e4:	4b0b      	ldr	r3, [pc, #44]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166e6:	2200      	movs	r2, #0
 80166e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80166ea:	4b0a      	ldr	r3, [pc, #40]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166ec:	2200      	movs	r2, #0
 80166ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80166f0:	4b08      	ldr	r3, [pc, #32]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166f2:	2200      	movs	r2, #0
 80166f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80166f6:	4807      	ldr	r0, [pc, #28]	; (8016714 <_ZL19MX_USART1_UART_Initv+0x60>)
 80166f8:	f7f3 fbfe 	bl	8009ef8 <HAL_UART_Init>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	bf14      	ite	ne
 8016702:	2301      	movne	r3, #1
 8016704:	2300      	moveq	r3, #0
 8016706:	b2db      	uxtb	r3, r3
 8016708:	2b00      	cmp	r3, #0
 801670a:	d001      	beq.n	8016710 <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 801670c:	f000 fa2e 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8016710:	bf00      	nop
 8016712:	bd80      	pop	{r7, pc}
 8016714:	20009764 	.word	0x20009764
 8016718:	40011000 	.word	0x40011000

0801671c <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8016720:	4b16      	ldr	r3, [pc, #88]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016722:	4a17      	ldr	r2, [pc, #92]	; (8016780 <_ZL19MX_USART6_UART_Initv+0x64>)
 8016724:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8016726:	4b15      	ldr	r3, [pc, #84]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801672c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801672e:	4b13      	ldr	r3, [pc, #76]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016730:	2200      	movs	r2, #0
 8016732:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8016734:	4b11      	ldr	r3, [pc, #68]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016736:	2200      	movs	r2, #0
 8016738:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801673a:	4b10      	ldr	r3, [pc, #64]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 801673c:	2200      	movs	r2, #0
 801673e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8016740:	4b0e      	ldr	r3, [pc, #56]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016742:	220c      	movs	r2, #12
 8016744:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8016746:	4b0d      	ldr	r3, [pc, #52]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016748:	2200      	movs	r2, #0
 801674a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801674c:	4b0b      	ldr	r3, [pc, #44]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 801674e:	2200      	movs	r2, #0
 8016750:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8016752:	4b0a      	ldr	r3, [pc, #40]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016754:	2200      	movs	r2, #0
 8016756:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8016758:	4b08      	ldr	r3, [pc, #32]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 801675a:	2200      	movs	r2, #0
 801675c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801675e:	4807      	ldr	r0, [pc, #28]	; (801677c <_ZL19MX_USART6_UART_Initv+0x60>)
 8016760:	f7f3 fbca 	bl	8009ef8 <HAL_UART_Init>
 8016764:	4603      	mov	r3, r0
 8016766:	2b00      	cmp	r3, #0
 8016768:	bf14      	ite	ne
 801676a:	2301      	movne	r3, #1
 801676c:	2300      	moveq	r3, #0
 801676e:	b2db      	uxtb	r3, r3
 8016770:	2b00      	cmp	r3, #0
 8016772:	d001      	beq.n	8016778 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8016774:	f000 f9fa 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8016778:	bf00      	nop
 801677a:	bd80      	pop	{r7, pc}
 801677c:	200097e4 	.word	0x200097e4
 8016780:	40011400 	.word	0x40011400

08016784 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b090      	sub	sp, #64	; 0x40
 8016788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801678a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801678e:	2200      	movs	r2, #0
 8016790:	601a      	str	r2, [r3, #0]
 8016792:	605a      	str	r2, [r3, #4]
 8016794:	609a      	str	r2, [r3, #8]
 8016796:	60da      	str	r2, [r3, #12]
 8016798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801679a:	4baf      	ldr	r3, [pc, #700]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 801679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801679e:	4aae      	ldr	r2, [pc, #696]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167a0:	f043 0310 	orr.w	r3, r3, #16
 80167a4:	6313      	str	r3, [r2, #48]	; 0x30
 80167a6:	4bac      	ldr	r3, [pc, #688]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167aa:	f003 0310 	and.w	r3, r3, #16
 80167ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80167b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80167b2:	4ba9      	ldr	r3, [pc, #676]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167b6:	4aa8      	ldr	r2, [pc, #672]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167bc:	6313      	str	r3, [r2, #48]	; 0x30
 80167be:	4ba6      	ldr	r3, [pc, #664]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80167c6:	627b      	str	r3, [r7, #36]	; 0x24
 80167c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80167ca:	4ba3      	ldr	r3, [pc, #652]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167ce:	4aa2      	ldr	r2, [pc, #648]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167d0:	f043 0302 	orr.w	r3, r3, #2
 80167d4:	6313      	str	r3, [r2, #48]	; 0x30
 80167d6:	4ba0      	ldr	r3, [pc, #640]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167da:	f003 0302 	and.w	r3, r3, #2
 80167de:	623b      	str	r3, [r7, #32]
 80167e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80167e2:	4b9d      	ldr	r3, [pc, #628]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167e6:	4a9c      	ldr	r2, [pc, #624]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167e8:	f043 0308 	orr.w	r3, r3, #8
 80167ec:	6313      	str	r3, [r2, #48]	; 0x30
 80167ee:	4b9a      	ldr	r3, [pc, #616]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167f2:	f003 0308 	and.w	r3, r3, #8
 80167f6:	61fb      	str	r3, [r7, #28]
 80167f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80167fa:	4b97      	ldr	r3, [pc, #604]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 80167fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167fe:	4a96      	ldr	r2, [pc, #600]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016800:	f043 0304 	orr.w	r3, r3, #4
 8016804:	6313      	str	r3, [r2, #48]	; 0x30
 8016806:	4b94      	ldr	r3, [pc, #592]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801680a:	f003 0304 	and.w	r3, r3, #4
 801680e:	61bb      	str	r3, [r7, #24]
 8016810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8016812:	4b91      	ldr	r3, [pc, #580]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016816:	4a90      	ldr	r2, [pc, #576]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016818:	f043 0301 	orr.w	r3, r3, #1
 801681c:	6313      	str	r3, [r2, #48]	; 0x30
 801681e:	4b8e      	ldr	r3, [pc, #568]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016822:	f003 0301 	and.w	r3, r3, #1
 8016826:	617b      	str	r3, [r7, #20]
 8016828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801682a:	4b8b      	ldr	r3, [pc, #556]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 801682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801682e:	4a8a      	ldr	r2, [pc, #552]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016834:	6313      	str	r3, [r2, #48]	; 0x30
 8016836:	4b88      	ldr	r3, [pc, #544]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801683a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801683e:	613b      	str	r3, [r7, #16]
 8016840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8016842:	4b85      	ldr	r3, [pc, #532]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016846:	4a84      	ldr	r2, [pc, #528]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801684c:	6313      	str	r3, [r2, #48]	; 0x30
 801684e:	4b82      	ldr	r3, [pc, #520]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016856:	60fb      	str	r3, [r7, #12]
 8016858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801685a:	4b7f      	ldr	r3, [pc, #508]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 801685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801685e:	4a7e      	ldr	r2, [pc, #504]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016864:	6313      	str	r3, [r2, #48]	; 0x30
 8016866:	4b7c      	ldr	r3, [pc, #496]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801686a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801686e:	60bb      	str	r3, [r7, #8]
 8016870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8016872:	4b79      	ldr	r3, [pc, #484]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016876:	4a78      	ldr	r2, [pc, #480]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016878:	f043 0320 	orr.w	r3, r3, #32
 801687c:	6313      	str	r3, [r2, #48]	; 0x30
 801687e:	4b76      	ldr	r3, [pc, #472]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016882:	f003 0320 	and.w	r3, r3, #32
 8016886:	607b      	str	r3, [r7, #4]
 8016888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801688a:	4b73      	ldr	r3, [pc, #460]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 801688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801688e:	4a72      	ldr	r2, [pc, #456]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016894:	6313      	str	r3, [r2, #48]	; 0x30
 8016896:	4b70      	ldr	r3, [pc, #448]	; (8016a58 <_ZL12MX_GPIO_Initv+0x2d4>)
 8016898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801689e:	603b      	str	r3, [r7, #0]
 80168a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80168a2:	2201      	movs	r2, #1
 80168a4:	2120      	movs	r1, #32
 80168a6:	486d      	ldr	r0, [pc, #436]	; (8016a5c <_ZL12MX_GPIO_Initv+0x2d8>)
 80168a8:	f7ec fa1e 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80168ac:	2200      	movs	r2, #0
 80168ae:	210c      	movs	r1, #12
 80168b0:	486b      	ldr	r0, [pc, #428]	; (8016a60 <_ZL12MX_GPIO_Initv+0x2dc>)
 80168b2:	f7ec fa19 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80168b6:	2201      	movs	r2, #1
 80168b8:	2108      	movs	r1, #8
 80168ba:	486a      	ldr	r0, [pc, #424]	; (8016a64 <_ZL12MX_GPIO_Initv+0x2e0>)
 80168bc:	f7ec fa14 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80168c0:	2201      	movs	r2, #1
 80168c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80168c6:	4866      	ldr	r0, [pc, #408]	; (8016a60 <_ZL12MX_GPIO_Initv+0x2dc>)
 80168c8:	f7ec fa0e 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80168cc:	2200      	movs	r2, #0
 80168ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80168d2:	4865      	ldr	r0, [pc, #404]	; (8016a68 <_ZL12MX_GPIO_Initv+0x2e4>)
 80168d4:	f7ec fa08 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80168d8:	2200      	movs	r2, #0
 80168da:	21c8      	movs	r1, #200	; 0xc8
 80168dc:	4863      	ldr	r0, [pc, #396]	; (8016a6c <_ZL12MX_GPIO_Initv+0x2e8>)
 80168de:	f7ec fa03 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80168e2:	2308      	movs	r3, #8
 80168e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80168e6:	2300      	movs	r3, #0
 80168e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80168ea:	2300      	movs	r3, #0
 80168ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80168ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80168f2:	4619      	mov	r1, r3
 80168f4:	485e      	ldr	r0, [pc, #376]	; (8016a70 <_ZL12MX_GPIO_Initv+0x2ec>)
 80168f6:	f7eb ff2b 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80168fa:	f643 4323 	movw	r3, #15395	; 0x3c23
 80168fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016900:	2302      	movs	r3, #2
 8016902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016904:	2300      	movs	r3, #0
 8016906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016908:	2303      	movs	r3, #3
 801690a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801690c:	230a      	movs	r3, #10
 801690e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016914:	4619      	mov	r1, r3
 8016916:	4857      	ldr	r0, [pc, #348]	; (8016a74 <_ZL12MX_GPIO_Initv+0x2f0>)
 8016918:	f7eb ff1a 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 801691c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016922:	2302      	movs	r3, #2
 8016924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016926:	2300      	movs	r3, #0
 8016928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801692a:	2300      	movs	r3, #0
 801692c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801692e:	2301      	movs	r3, #1
 8016930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8016932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016936:	4619      	mov	r1, r3
 8016938:	484f      	ldr	r0, [pc, #316]	; (8016a78 <_ZL12MX_GPIO_Initv+0x2f4>)
 801693a:	f7eb ff09 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 801693e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016944:	2300      	movs	r3, #0
 8016946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016948:	2300      	movs	r3, #0
 801694a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 801694c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016950:	4619      	mov	r1, r3
 8016952:	484a      	ldr	r0, [pc, #296]	; (8016a7c <_ZL12MX_GPIO_Initv+0x2f8>)
 8016954:	f7eb fefc 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8016958:	2340      	movs	r3, #64	; 0x40
 801695a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 801695c:	4b48      	ldr	r3, [pc, #288]	; (8016a80 <_ZL12MX_GPIO_Initv+0x2fc>)
 801695e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016960:	2300      	movs	r3, #0
 8016962:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8016964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016968:	4619      	mov	r1, r3
 801696a:	483c      	ldr	r0, [pc, #240]	; (8016a5c <_ZL12MX_GPIO_Initv+0x2d8>)
 801696c:	f7eb fef0 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8016970:	2320      	movs	r3, #32
 8016972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016974:	2301      	movs	r3, #1
 8016976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016978:	2300      	movs	r3, #0
 801697a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801697c:	2300      	movs	r3, #0
 801697e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8016980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016984:	4619      	mov	r1, r3
 8016986:	4835      	ldr	r0, [pc, #212]	; (8016a5c <_ZL12MX_GPIO_Initv+0x2d8>)
 8016988:	f7eb fee2 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 801698c:	f241 030c 	movw	r3, #4108	; 0x100c
 8016990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016992:	2301      	movs	r3, #1
 8016994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016996:	2300      	movs	r3, #0
 8016998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801699a:	2300      	movs	r3, #0
 801699c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801699e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169a2:	4619      	mov	r1, r3
 80169a4:	482e      	ldr	r0, [pc, #184]	; (8016a60 <_ZL12MX_GPIO_Initv+0x2dc>)
 80169a6:	f7eb fed3 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80169aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80169ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80169b0:	2300      	movs	r3, #0
 80169b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169b4:	2300      	movs	r3, #0
 80169b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80169b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169bc:	4619      	mov	r1, r3
 80169be:	4831      	ldr	r0, [pc, #196]	; (8016a84 <_ZL12MX_GPIO_Initv+0x300>)
 80169c0:	f7eb fec6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80169c4:	2308      	movs	r3, #8
 80169c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80169c8:	2301      	movs	r3, #1
 80169ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169cc:	2300      	movs	r3, #0
 80169ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80169d0:	2300      	movs	r3, #0
 80169d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80169d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169d8:	4619      	mov	r1, r3
 80169da:	4822      	ldr	r0, [pc, #136]	; (8016a64 <_ZL12MX_GPIO_Initv+0x2e0>)
 80169dc:	f7eb feb8 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80169e0:	2310      	movs	r3, #16
 80169e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80169e4:	2300      	movs	r3, #0
 80169e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80169e8:	2300      	movs	r3, #0
 80169ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80169ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80169f0:	4619      	mov	r1, r3
 80169f2:	481a      	ldr	r0, [pc, #104]	; (8016a5c <_ZL12MX_GPIO_Initv+0x2d8>)
 80169f4:	f7eb feac 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80169f8:	f248 0304 	movw	r3, #32772	; 0x8004
 80169fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80169fe:	2300      	movs	r3, #0
 8016a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a02:	2300      	movs	r3, #0
 8016a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8016a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	4816      	ldr	r0, [pc, #88]	; (8016a68 <_ZL12MX_GPIO_Initv+0x2e4>)
 8016a0e:	f7eb fe9f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8016a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016a18:	2301      	movs	r3, #1
 8016a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016a20:	2300      	movs	r3, #0
 8016a22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8016a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a28:	4619      	mov	r1, r3
 8016a2a:	480f      	ldr	r0, [pc, #60]	; (8016a68 <_ZL12MX_GPIO_Initv+0x2e4>)
 8016a2c:	f7eb fe90 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8016a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8016a36:	4b12      	ldr	r3, [pc, #72]	; (8016a80 <_ZL12MX_GPIO_Initv+0x2fc>)
 8016a38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8016a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a42:	4619      	mov	r1, r3
 8016a44:	4806      	ldr	r0, [pc, #24]	; (8016a60 <_ZL12MX_GPIO_Initv+0x2dc>)
 8016a46:	f7eb fe83 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8016a4a:	2310      	movs	r3, #16
 8016a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016a4e:	2302      	movs	r3, #2
 8016a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016a52:	2300      	movs	r3, #0
 8016a54:	e018      	b.n	8016a88 <_ZL12MX_GPIO_Initv+0x304>
 8016a56:	bf00      	nop
 8016a58:	40023800 	.word	0x40023800
 8016a5c:	40020c00 	.word	0x40020c00
 8016a60:	40022000 	.word	0x40022000
 8016a64:	40022800 	.word	0x40022800
 8016a68:	40021c00 	.word	0x40021c00
 8016a6c:	40021800 	.word	0x40021800
 8016a70:	40021000 	.word	0x40021000
 8016a74:	40020400 	.word	0x40020400
 8016a78:	40020000 	.word	0x40020000
 8016a7c:	40022400 	.word	0x40022400
 8016a80:	10120000 	.word	0x10120000
 8016a84:	40020800 	.word	0x40020800
 8016a88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016a8a:	2303      	movs	r3, #3
 8016a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016a8e:	230a      	movs	r3, #10
 8016a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8016a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a96:	4619      	mov	r1, r3
 8016a98:	4820      	ldr	r0, [pc, #128]	; (8016b1c <_ZL12MX_GPIO_Initv+0x398>)
 8016a9a:	f7eb fe59 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8016a9e:	23c8      	movs	r3, #200	; 0xc8
 8016aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	481a      	ldr	r0, [pc, #104]	; (8016b20 <_ZL12MX_GPIO_Initv+0x39c>)
 8016ab6:	f7eb fe4b 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8016aba:	2305      	movs	r3, #5
 8016abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016abe:	2302      	movs	r3, #2
 8016ac0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ac6:	2303      	movs	r3, #3
 8016ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016aca:	230a      	movs	r3, #10
 8016acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	4813      	ldr	r0, [pc, #76]	; (8016b24 <_ZL12MX_GPIO_Initv+0x3a0>)
 8016ad6:	f7eb fe3b 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8016ada:	2304      	movs	r3, #4
 8016adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8016ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016aea:	4619      	mov	r1, r3
 8016aec:	480c      	ldr	r0, [pc, #48]	; (8016b20 <_ZL12MX_GPIO_Initv+0x39c>)
 8016aee:	f7eb fe2f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8016af2:	2328      	movs	r3, #40	; 0x28
 8016af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016af6:	2302      	movs	r3, #2
 8016af8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016afa:	2300      	movs	r3, #0
 8016afc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016afe:	2303      	movs	r3, #3
 8016b00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8016b02:	230a      	movs	r3, #10
 8016b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	4806      	ldr	r0, [pc, #24]	; (8016b28 <_ZL12MX_GPIO_Initv+0x3a4>)
 8016b0e:	f7eb fe1f 	bl	8002750 <HAL_GPIO_Init>

}
 8016b12:	bf00      	nop
 8016b14:	3740      	adds	r7, #64	; 0x40
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	40021c00 	.word	0x40021c00
 8016b20:	40021800 	.word	0x40021800
 8016b24:	40020800 	.word	0x40020800
 8016b28:	40020000 	.word	0x40020000

08016b2c <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b082      	sub	sp, #8
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8016b34:	f7fe fed6 	bl	80158e4 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8016b38:	f001 fa36 	bl	8017fa8 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 8016b3c:	f7fc feba 	bl	80138b4 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8016b40:	2001      	movs	r0, #1
 8016b42:	f7f9 f8f6 	bl	800fd32 <osDelay>
 8016b46:	e7fb      	b.n	8016b40 <_Z16StartDefaultTaskPKv+0x14>

08016b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	4a04      	ldr	r2, [pc, #16]	; (8016b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8016b56:	4293      	cmp	r3, r2
 8016b58:	d101      	bne.n	8016b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8016b5a:	f7e9 ffd9 	bl	8000b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	40001000 	.word	0x40001000

08016b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8016b70:	bf00      	nop
 8016b72:	46bd      	mov	sp, r7
 8016b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b78:	4770      	bx	lr

08016b7a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8016b7a:	b580      	push	{r7, lr}
 8016b7c:	b084      	sub	sp, #16
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8016b82:	f7f9 f89f 	bl	800fcc4 <osKernelSysTick>
 8016b86:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8016b88:	e006      	b.n	8016b98 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016b8a:	f7fe fe71 	bl	8015870 <BSP_SD_GetCardState>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d101      	bne.n	8016b98 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8016b94:	2300      	movs	r3, #0
 8016b96:	e009      	b.n	8016bac <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8016b98:	f7f9 f894 	bl	800fcc4 <osKernelSysTick>
 8016b9c:	4602      	mov	r2, r0
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	1ad3      	subs	r3, r2, r3
 8016ba2:	687a      	ldr	r2, [r7, #4]
 8016ba4:	429a      	cmp	r2, r3
 8016ba6:	d8f0      	bhi.n	8016b8a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8016ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3710      	adds	r7, #16
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}

08016bb4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b082      	sub	sp, #8
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	4603      	mov	r3, r0
 8016bbc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8016bbe:	4b0b      	ldr	r3, [pc, #44]	; (8016bec <SD_CheckStatus+0x38>)
 8016bc0:	2201      	movs	r2, #1
 8016bc2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016bc4:	f7fe fe54 	bl	8015870 <BSP_SD_GetCardState>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d107      	bne.n	8016bde <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8016bce:	4b07      	ldr	r3, [pc, #28]	; (8016bec <SD_CheckStatus+0x38>)
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	f023 0301 	bic.w	r3, r3, #1
 8016bd8:	b2da      	uxtb	r2, r3
 8016bda:	4b04      	ldr	r3, [pc, #16]	; (8016bec <SD_CheckStatus+0x38>)
 8016bdc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8016bde:	4b03      	ldr	r3, [pc, #12]	; (8016bec <SD_CheckStatus+0x38>)
 8016be0:	781b      	ldrb	r3, [r3, #0]
 8016be2:	b2db      	uxtb	r3, r3
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3708      	adds	r7, #8
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}
 8016bec:	20000062 	.word	0x20000062

08016bf0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8016bfa:	4b1a      	ldr	r3, [pc, #104]	; (8016c64 <SD_initialize+0x74>)
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8016c00:	f7f9 f854 	bl	800fcac <osKernelRunning>
 8016c04:	4603      	mov	r3, r0
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d025      	beq.n	8016c56 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8016c0a:	f7fe fdd7 	bl	80157bc <BSP_SD_Init>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d107      	bne.n	8016c24 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8016c14:	79fb      	ldrb	r3, [r7, #7]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7ff ffcc 	bl	8016bb4 <SD_CheckStatus>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	461a      	mov	r2, r3
 8016c20:	4b10      	ldr	r3, [pc, #64]	; (8016c64 <SD_initialize+0x74>)
 8016c22:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8016c24:	4b0f      	ldr	r3, [pc, #60]	; (8016c64 <SD_initialize+0x74>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	2b01      	cmp	r3, #1
 8016c2c:	d013      	beq.n	8016c56 <SD_initialize+0x66>
 8016c2e:	4b0e      	ldr	r3, [pc, #56]	; (8016c68 <SD_initialize+0x78>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d10f      	bne.n	8016c56 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8016c36:	4a0d      	ldr	r2, [pc, #52]	; (8016c6c <SD_initialize+0x7c>)
 8016c38:	f107 0308 	add.w	r3, r7, #8
 8016c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c40:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8016c44:	f107 0308 	add.w	r3, r7, #8
 8016c48:	2100      	movs	r1, #0
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7f9 f885 	bl	800fd5a <osMessageCreate>
 8016c50:	4602      	mov	r2, r0
 8016c52:	4b05      	ldr	r3, [pc, #20]	; (8016c68 <SD_initialize+0x78>)
 8016c54:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8016c56:	4b03      	ldr	r3, [pc, #12]	; (8016c64 <SD_initialize+0x74>)
 8016c58:	781b      	ldrb	r3, [r3, #0]
 8016c5a:	b2db      	uxtb	r3, r3
}
 8016c5c:	4618      	mov	r0, r3
 8016c5e:	3710      	adds	r7, #16
 8016c60:	46bd      	mov	sp, r7
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	20000062 	.word	0x20000062
 8016c68:	20009a68 	.word	0x20009a68
 8016c6c:	08020664 	.word	0x08020664

08016c70 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8016c7a:	79fb      	ldrb	r3, [r7, #7]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7ff ff99 	bl	8016bb4 <SD_CheckStatus>
 8016c82:	4603      	mov	r3, r0
}
 8016c84:	4618      	mov	r0, r3
 8016c86:	3708      	adds	r7, #8
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b08e      	sub	sp, #56	; 0x38
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	61b9      	str	r1, [r7, #24]
 8016c94:	617a      	str	r2, [r7, #20]
 8016c96:	613b      	str	r3, [r7, #16]
 8016c98:	4603      	mov	r3, r0
 8016c9a:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8016c9c:	2301      	movs	r3, #1
 8016c9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016ca2:	f247 5030 	movw	r0, #30000	; 0x7530
 8016ca6:	f7ff ff68 	bl	8016b7a <SD_CheckStatusWithTimeout>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	da02      	bge.n	8016cb6 <SD_read+0x2a>
  {
    return res;
 8016cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016cb4:	e06c      	b.n	8016d90 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8016cb6:	69bb      	ldr	r3, [r7, #24]
 8016cb8:	f003 0303 	and.w	r3, r3, #3
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d11e      	bne.n	8016cfe <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8016cc0:	693a      	ldr	r2, [r7, #16]
 8016cc2:	6979      	ldr	r1, [r7, #20]
 8016cc4:	69b8      	ldr	r0, [r7, #24]
 8016cc6:	f7fe fd9f 	bl	8015808 <BSP_SD_ReadBlocks_DMA>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8016cd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d159      	bne.n	8016d8c <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016cd8:	4b2f      	ldr	r3, [pc, #188]	; (8016d98 <SD_read+0x10c>)
 8016cda:	6819      	ldr	r1, [r3, #0]
 8016cdc:	f107 0320 	add.w	r3, r7, #32
 8016ce0:	f247 5230 	movw	r2, #30000	; 0x7530
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	f7f9 f88b 	bl	800fe00 <osMessageGet>
      if (event.status == osEventMessage) {
 8016cea:	6a3b      	ldr	r3, [r7, #32]
 8016cec:	2b10      	cmp	r3, #16
 8016cee:	d14d      	bne.n	8016d8c <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf2:	2b01      	cmp	r3, #1
 8016cf4:	d14a      	bne.n	8016d8c <SD_read+0x100>
          res = RES_OK;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016cfc:	e046      	b.n	8016d8c <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8016cfe:	2300      	movs	r3, #0
 8016d00:	633b      	str	r3, [r7, #48]	; 0x30
 8016d02:	e032      	b.n	8016d6a <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	1c5a      	adds	r2, r3, #1
 8016d08:	617a      	str	r2, [r7, #20]
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	4619      	mov	r1, r3
 8016d0e:	4823      	ldr	r0, [pc, #140]	; (8016d9c <SD_read+0x110>)
 8016d10:	f7fe fd7a 	bl	8015808 <BSP_SD_ReadBlocks_DMA>
 8016d14:	4603      	mov	r3, r0
 8016d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8016d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d128      	bne.n	8016d74 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016d22:	4b1d      	ldr	r3, [pc, #116]	; (8016d98 <SD_read+0x10c>)
 8016d24:	6819      	ldr	r1, [r3, #0]
 8016d26:	463b      	mov	r3, r7
 8016d28:	f247 5230 	movw	r2, #30000	; 0x7530
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f9 f867 	bl	800fe00 <osMessageGet>
 8016d32:	f107 0320 	add.w	r3, r7, #32
 8016d36:	463a      	mov	r2, r7
 8016d38:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8016d3e:	6a3b      	ldr	r3, [r7, #32]
 8016d40:	2b10      	cmp	r3, #16
 8016d42:	d10f      	bne.n	8016d64 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8016d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d46:	2b01      	cmp	r3, #1
 8016d48:	d10c      	bne.n	8016d64 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8016d4a:	69bb      	ldr	r3, [r7, #24]
 8016d4c:	4a13      	ldr	r2, [pc, #76]	; (8016d9c <SD_read+0x110>)
 8016d4e:	4618      	mov	r0, r3
 8016d50:	4611      	mov	r1, r2
 8016d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016d56:	461a      	mov	r2, r3
 8016d58:	f008 fb22 	bl	801f3a0 <memcpy>
            buff += BLOCKSIZE;
 8016d5c:	69bb      	ldr	r3, [r7, #24]
 8016d5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8016d62:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8016d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d66:	3301      	adds	r3, #1
 8016d68:	633b      	str	r3, [r7, #48]	; 0x30
 8016d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6c:	693a      	ldr	r2, [r7, #16]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d8c8      	bhi.n	8016d04 <SD_read+0x78>
 8016d72:	e000      	b.n	8016d76 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8016d74:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8016d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d78:	693a      	ldr	r2, [r7, #16]
 8016d7a:	429a      	cmp	r2, r3
 8016d7c:	d106      	bne.n	8016d8c <SD_read+0x100>
 8016d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d102      	bne.n	8016d8c <SD_read+0x100>
      res = RES_OK;
 8016d86:	2300      	movs	r3, #0
 8016d88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8016d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8016d90:	4618      	mov	r0, r3
 8016d92:	3738      	adds	r7, #56	; 0x38
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}
 8016d98:	20009a68 	.word	0x20009a68
 8016d9c:	20009868 	.word	0x20009868

08016da0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b090      	sub	sp, #64	; 0x40
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	61b9      	str	r1, [r7, #24]
 8016da8:	617a      	str	r2, [r7, #20]
 8016daa:	613b      	str	r3, [r7, #16]
 8016dac:	4603      	mov	r3, r0
 8016dae:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8016db0:	2301      	movs	r3, #1
 8016db2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8016db6:	f247 5030 	movw	r0, #30000	; 0x7530
 8016dba:	f7ff fede 	bl	8016b7a <SD_CheckStatusWithTimeout>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	da02      	bge.n	8016dca <SD_write+0x2a>
  {
    return res;
 8016dc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016dc8:	e07c      	b.n	8016ec4 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	f003 0303 	and.w	r3, r3, #3
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d12e      	bne.n	8016e32 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8016dd4:	693a      	ldr	r2, [r7, #16]
 8016dd6:	6979      	ldr	r1, [r7, #20]
 8016dd8:	69b8      	ldr	r0, [r7, #24]
 8016dda:	f7fe fd2f 	bl	801583c <BSP_SD_WriteBlocks_DMA>
 8016dde:	4603      	mov	r3, r0
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d16d      	bne.n	8016ec0 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016de4:	4b39      	ldr	r3, [pc, #228]	; (8016ecc <SD_write+0x12c>)
 8016de6:	6819      	ldr	r1, [r3, #0]
 8016de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016dec:	f247 5230 	movw	r2, #30000	; 0x7530
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7f9 f805 	bl	800fe00 <osMessageGet>

      if (event.status == osEventMessage)
 8016df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df8:	2b10      	cmp	r3, #16
 8016dfa:	d161      	bne.n	8016ec0 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8016dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dfe:	2b02      	cmp	r3, #2
 8016e00:	d15e      	bne.n	8016ec0 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8016e02:	f7f8 ff5f 	bl	800fcc4 <osKernelSysTick>
 8016e06:	4602      	mov	r2, r0
 8016e08:	f247 5330 	movw	r3, #30000	; 0x7530
 8016e0c:	4413      	add	r3, r2
 8016e0e:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8016e10:	e008      	b.n	8016e24 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8016e12:	f7fe fd2d 	bl	8015870 <BSP_SD_GetCardState>
 8016e16:	4603      	mov	r3, r0
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d103      	bne.n	8016e24 <SD_write+0x84>
            {
              res = RES_OK;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8016e22:	e04d      	b.n	8016ec0 <SD_write+0x120>
          while(timer > osKernelSysTick())
 8016e24:	f7f8 ff4e 	bl	800fcc4 <osKernelSysTick>
 8016e28:	4602      	mov	r2, r0
 8016e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d8f0      	bhi.n	8016e12 <SD_write+0x72>
 8016e30:	e046      	b.n	8016ec0 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8016e32:	2300      	movs	r3, #0
 8016e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8016e36:	e032      	b.n	8016e9e <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	1c5a      	adds	r2, r3, #1
 8016e3c:	617a      	str	r2, [r7, #20]
 8016e3e:	2201      	movs	r2, #1
 8016e40:	4619      	mov	r1, r3
 8016e42:	4823      	ldr	r0, [pc, #140]	; (8016ed0 <SD_write+0x130>)
 8016e44:	f7fe fcfa 	bl	801583c <BSP_SD_WriteBlocks_DMA>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8016e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d128      	bne.n	8016ea8 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8016e56:	4b1d      	ldr	r3, [pc, #116]	; (8016ecc <SD_write+0x12c>)
 8016e58:	6819      	ldr	r1, [r3, #0]
 8016e5a:	463b      	mov	r3, r7
 8016e5c:	f247 5230 	movw	r2, #30000	; 0x7530
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7f8 ffcd 	bl	800fe00 <osMessageGet>
 8016e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e6a:	463a      	mov	r2, r7
 8016e6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8016e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e74:	2b10      	cmp	r3, #16
 8016e76:	d10f      	bne.n	8016e98 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8016e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e7a:	2b02      	cmp	r3, #2
 8016e7c:	d10c      	bne.n	8016e98 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	4a13      	ldr	r2, [pc, #76]	; (8016ed0 <SD_write+0x130>)
 8016e82:	4618      	mov	r0, r3
 8016e84:	4611      	mov	r1, r2
 8016e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016e8a:	461a      	mov	r2, r3
 8016e8c:	f008 fa88 	bl	801f3a0 <memcpy>
            buff += BLOCKSIZE;
 8016e90:	69bb      	ldr	r3, [r7, #24]
 8016e92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8016e96:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8016e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8016e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ea0:	693a      	ldr	r2, [r7, #16]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	d8c8      	bhi.n	8016e38 <SD_write+0x98>
 8016ea6:	e000      	b.n	8016eaa <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8016ea8:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8016eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eac:	693a      	ldr	r2, [r7, #16]
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d106      	bne.n	8016ec0 <SD_write+0x120>
 8016eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d102      	bne.n	8016ec0 <SD_write+0x120>
      res = RES_OK;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8016ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8016ec4:	4618      	mov	r0, r3
 8016ec6:	3740      	adds	r7, #64	; 0x40
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	20009a68 	.word	0x20009a68
 8016ed0:	20009868 	.word	0x20009868

08016ed4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b08c      	sub	sp, #48	; 0x30
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	4603      	mov	r3, r0
 8016edc:	603a      	str	r2, [r7, #0]
 8016ede:	71fb      	strb	r3, [r7, #7]
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8016eea:	4b25      	ldr	r3, [pc, #148]	; (8016f80 <SD_ioctl+0xac>)
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	b2db      	uxtb	r3, r3
 8016ef0:	f003 0301 	and.w	r3, r3, #1
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d001      	beq.n	8016efc <SD_ioctl+0x28>
 8016ef8:	2303      	movs	r3, #3
 8016efa:	e03c      	b.n	8016f76 <SD_ioctl+0xa2>

  switch (cmd)
 8016efc:	79bb      	ldrb	r3, [r7, #6]
 8016efe:	2b03      	cmp	r3, #3
 8016f00:	d834      	bhi.n	8016f6c <SD_ioctl+0x98>
 8016f02:	a201      	add	r2, pc, #4	; (adr r2, 8016f08 <SD_ioctl+0x34>)
 8016f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f08:	08016f19 	.word	0x08016f19
 8016f0c:	08016f21 	.word	0x08016f21
 8016f10:	08016f39 	.word	0x08016f39
 8016f14:	08016f53 	.word	0x08016f53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8016f18:	2300      	movs	r3, #0
 8016f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f1e:	e028      	b.n	8016f72 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f20:	f107 030c 	add.w	r3, r7, #12
 8016f24:	4618      	mov	r0, r3
 8016f26:	f7fe fcb3 	bl	8015890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8016f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016f30:	2300      	movs	r3, #0
 8016f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f36:	e01c      	b.n	8016f72 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f38:	f107 030c 	add.w	r3, r7, #12
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7fe fca7 	bl	8015890 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8016f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f44:	b29a      	uxth	r2, r3
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8016f4a:	2300      	movs	r3, #0
 8016f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f50:	e00f      	b.n	8016f72 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8016f52:	f107 030c 	add.w	r3, r7, #12
 8016f56:	4618      	mov	r0, r3
 8016f58:	f7fe fc9a 	bl	8015890 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8016f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5e:	0a5a      	lsrs	r2, r3, #9
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8016f64:	2300      	movs	r3, #0
 8016f66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8016f6a:	e002      	b.n	8016f72 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8016f6c:	2304      	movs	r3, #4
 8016f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8016f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3730      	adds	r7, #48	; 0x30
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	bd80      	pop	{r7, pc}
 8016f7e:	bf00      	nop
 8016f80:	20000062 	.word	0x20000062

08016f84 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8016f88:	4b04      	ldr	r3, [pc, #16]	; (8016f9c <BSP_SD_ReadCpltCallback+0x18>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016f90:	2101      	movs	r1, #1
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7f8 fef4 	bl	800fd80 <osMessagePut>
}
 8016f98:	bf00      	nop
 8016f9a:	bd80      	pop	{r7, pc}
 8016f9c:	20009a68 	.word	0x20009a68

08016fa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8016fa6:	4b11      	ldr	r3, [pc, #68]	; (8016fec <HAL_MspInit+0x4c>)
 8016fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016faa:	4a10      	ldr	r2, [pc, #64]	; (8016fec <HAL_MspInit+0x4c>)
 8016fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8016fb2:	4b0e      	ldr	r3, [pc, #56]	; (8016fec <HAL_MspInit+0x4c>)
 8016fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016fba:	607b      	str	r3, [r7, #4]
 8016fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016fbe:	4b0b      	ldr	r3, [pc, #44]	; (8016fec <HAL_MspInit+0x4c>)
 8016fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fc2:	4a0a      	ldr	r2, [pc, #40]	; (8016fec <HAL_MspInit+0x4c>)
 8016fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8016fca:	4b08      	ldr	r3, [pc, #32]	; (8016fec <HAL_MspInit+0x4c>)
 8016fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016fd2:	603b      	str	r3, [r7, #0]
 8016fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	210f      	movs	r1, #15
 8016fda:	f06f 0001 	mvn.w	r0, #1
 8016fde:	f7ea f925 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016fe2:	bf00      	nop
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	40023800 	.word	0x40023800

08016ff0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b08a      	sub	sp, #40	; 0x28
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016ff8:	f107 0314 	add.w	r3, r7, #20
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	601a      	str	r2, [r3, #0]
 8017000:	605a      	str	r2, [r3, #4]
 8017002:	609a      	str	r2, [r3, #8]
 8017004:	60da      	str	r2, [r3, #12]
 8017006:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4a21      	ldr	r2, [pc, #132]	; (8017094 <HAL_ADC_MspInit+0xa4>)
 801700e:	4293      	cmp	r3, r2
 8017010:	d13c      	bne.n	801708c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8017012:	4b21      	ldr	r3, [pc, #132]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017016:	4a20      	ldr	r2, [pc, #128]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801701c:	6453      	str	r3, [r2, #68]	; 0x44
 801701e:	4b1e      	ldr	r3, [pc, #120]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017026:	613b      	str	r3, [r7, #16]
 8017028:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801702a:	4b1b      	ldr	r3, [pc, #108]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 801702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801702e:	4a1a      	ldr	r2, [pc, #104]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017030:	f043 0320 	orr.w	r3, r3, #32
 8017034:	6313      	str	r3, [r2, #48]	; 0x30
 8017036:	4b18      	ldr	r3, [pc, #96]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801703a:	f003 0320 	and.w	r3, r3, #32
 801703e:	60fb      	str	r3, [r7, #12]
 8017040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017042:	4b15      	ldr	r3, [pc, #84]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017046:	4a14      	ldr	r2, [pc, #80]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017048:	f043 0301 	orr.w	r3, r3, #1
 801704c:	6313      	str	r3, [r2, #48]	; 0x30
 801704e:	4b12      	ldr	r3, [pc, #72]	; (8017098 <HAL_ADC_MspInit+0xa8>)
 8017050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017052:	f003 0301 	and.w	r3, r3, #1
 8017056:	60bb      	str	r3, [r7, #8]
 8017058:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 801705a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801705e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017060:	2303      	movs	r3, #3
 8017062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017064:	2300      	movs	r3, #0
 8017066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017068:	f107 0314 	add.w	r3, r7, #20
 801706c:	4619      	mov	r1, r3
 801706e:	480b      	ldr	r0, [pc, #44]	; (801709c <HAL_ADC_MspInit+0xac>)
 8017070:	f7eb fb6e 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8017074:	2301      	movs	r3, #1
 8017076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8017078:	2303      	movs	r3, #3
 801707a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801707c:	2300      	movs	r3, #0
 801707e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8017080:	f107 0314 	add.w	r3, r7, #20
 8017084:	4619      	mov	r1, r3
 8017086:	4806      	ldr	r0, [pc, #24]	; (80170a0 <HAL_ADC_MspInit+0xb0>)
 8017088:	f7eb fb62 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 801708c:	bf00      	nop
 801708e:	3728      	adds	r7, #40	; 0x28
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	40012200 	.word	0x40012200
 8017098:	40023800 	.word	0x40023800
 801709c:	40021400 	.word	0x40021400
 80170a0:	40020000 	.word	0x40020000

080170a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80170a4:	b480      	push	{r7}
 80170a6:	b085      	sub	sp, #20
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	4a0a      	ldr	r2, [pc, #40]	; (80170dc <HAL_CRC_MspInit+0x38>)
 80170b2:	4293      	cmp	r3, r2
 80170b4:	d10b      	bne.n	80170ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80170b6:	4b0a      	ldr	r3, [pc, #40]	; (80170e0 <HAL_CRC_MspInit+0x3c>)
 80170b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170ba:	4a09      	ldr	r2, [pc, #36]	; (80170e0 <HAL_CRC_MspInit+0x3c>)
 80170bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80170c0:	6313      	str	r3, [r2, #48]	; 0x30
 80170c2:	4b07      	ldr	r3, [pc, #28]	; (80170e0 <HAL_CRC_MspInit+0x3c>)
 80170c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80170ca:	60fb      	str	r3, [r7, #12]
 80170cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80170ce:	bf00      	nop
 80170d0:	3714      	adds	r7, #20
 80170d2:	46bd      	mov	sp, r7
 80170d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d8:	4770      	bx	lr
 80170da:	bf00      	nop
 80170dc:	40023000 	.word	0x40023000
 80170e0:	40023800 	.word	0x40023800

080170e4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b08e      	sub	sp, #56	; 0x38
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80170ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80170f0:	2200      	movs	r2, #0
 80170f2:	601a      	str	r2, [r3, #0]
 80170f4:	605a      	str	r2, [r3, #4]
 80170f6:	609a      	str	r2, [r3, #8]
 80170f8:	60da      	str	r2, [r3, #12]
 80170fa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4a50      	ldr	r2, [pc, #320]	; (8017244 <HAL_DCMI_MspInit+0x160>)
 8017102:	4293      	cmp	r3, r2
 8017104:	f040 809a 	bne.w	801723c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8017108:	4b4f      	ldr	r3, [pc, #316]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801710c:	4a4e      	ldr	r2, [pc, #312]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801710e:	f043 0301 	orr.w	r3, r3, #1
 8017112:	6353      	str	r3, [r2, #52]	; 0x34
 8017114:	4b4c      	ldr	r3, [pc, #304]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017118:	f003 0301 	and.w	r3, r3, #1
 801711c:	623b      	str	r3, [r7, #32]
 801711e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017120:	4b49      	ldr	r3, [pc, #292]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017124:	4a48      	ldr	r2, [pc, #288]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017126:	f043 0310 	orr.w	r3, r3, #16
 801712a:	6313      	str	r3, [r2, #48]	; 0x30
 801712c:	4b46      	ldr	r3, [pc, #280]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017130:	f003 0310 	and.w	r3, r3, #16
 8017134:	61fb      	str	r3, [r7, #28]
 8017136:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017138:	4b43      	ldr	r3, [pc, #268]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801713c:	4a42      	ldr	r2, [pc, #264]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801713e:	f043 0308 	orr.w	r3, r3, #8
 8017142:	6313      	str	r3, [r2, #48]	; 0x30
 8017144:	4b40      	ldr	r3, [pc, #256]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017148:	f003 0308 	and.w	r3, r3, #8
 801714c:	61bb      	str	r3, [r7, #24]
 801714e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017150:	4b3d      	ldr	r3, [pc, #244]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017154:	4a3c      	ldr	r2, [pc, #240]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801715a:	6313      	str	r3, [r2, #48]	; 0x30
 801715c:	4b3a      	ldr	r3, [pc, #232]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017164:	617b      	str	r3, [r7, #20]
 8017166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017168:	4b37      	ldr	r3, [pc, #220]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801716c:	4a36      	ldr	r2, [pc, #216]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017172:	6313      	str	r3, [r2, #48]	; 0x30
 8017174:	4b34      	ldr	r3, [pc, #208]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801717c:	613b      	str	r3, [r7, #16]
 801717e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017180:	4b31      	ldr	r3, [pc, #196]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017184:	4a30      	ldr	r2, [pc, #192]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 8017186:	f043 0301 	orr.w	r3, r3, #1
 801718a:	6313      	str	r3, [r2, #48]	; 0x30
 801718c:	4b2e      	ldr	r3, [pc, #184]	; (8017248 <HAL_DCMI_MspInit+0x164>)
 801718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017190:	f003 0301 	and.w	r3, r3, #1
 8017194:	60fb      	str	r3, [r7, #12]
 8017196:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8017198:	2360      	movs	r3, #96	; 0x60
 801719a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801719c:	2302      	movs	r3, #2
 801719e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171a0:	2300      	movs	r3, #0
 80171a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171a4:	2300      	movs	r3, #0
 80171a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80171a8:	230d      	movs	r3, #13
 80171aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80171ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171b0:	4619      	mov	r1, r3
 80171b2:	4826      	ldr	r0, [pc, #152]	; (801724c <HAL_DCMI_MspInit+0x168>)
 80171b4:	f7eb facc 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80171b8:	2308      	movs	r3, #8
 80171ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171bc:	2302      	movs	r3, #2
 80171be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171c0:	2300      	movs	r3, #0
 80171c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171c4:	2300      	movs	r3, #0
 80171c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80171c8:	230d      	movs	r3, #13
 80171ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80171cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171d0:	4619      	mov	r1, r3
 80171d2:	481f      	ldr	r0, [pc, #124]	; (8017250 <HAL_DCMI_MspInit+0x16c>)
 80171d4:	f7eb fabc 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80171d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80171dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80171de:	2302      	movs	r3, #2
 80171e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80171e2:	2300      	movs	r3, #0
 80171e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80171e6:	2300      	movs	r3, #0
 80171e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80171ea:	230d      	movs	r3, #13
 80171ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80171ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80171f2:	4619      	mov	r1, r3
 80171f4:	4817      	ldr	r0, [pc, #92]	; (8017254 <HAL_DCMI_MspInit+0x170>)
 80171f6:	f7eb faab 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80171fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80171fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017200:	2302      	movs	r3, #2
 8017202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017204:	2300      	movs	r3, #0
 8017206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017208:	2300      	movs	r3, #0
 801720a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801720c:	230d      	movs	r3, #13
 801720e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8017210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017214:	4619      	mov	r1, r3
 8017216:	4810      	ldr	r0, [pc, #64]	; (8017258 <HAL_DCMI_MspInit+0x174>)
 8017218:	f7eb fa9a 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 801721c:	2350      	movs	r3, #80	; 0x50
 801721e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017220:	2302      	movs	r3, #2
 8017222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017224:	2300      	movs	r3, #0
 8017226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017228:	2300      	movs	r3, #0
 801722a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801722c:	230d      	movs	r3, #13
 801722e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017234:	4619      	mov	r1, r3
 8017236:	4809      	ldr	r0, [pc, #36]	; (801725c <HAL_DCMI_MspInit+0x178>)
 8017238:	f7eb fa8a 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 801723c:	bf00      	nop
 801723e:	3738      	adds	r7, #56	; 0x38
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	50050000 	.word	0x50050000
 8017248:	40023800 	.word	0x40023800
 801724c:	40021000 	.word	0x40021000
 8017250:	40020c00 	.word	0x40020c00
 8017254:	40021800 	.word	0x40021800
 8017258:	40021c00 	.word	0x40021c00
 801725c:	40020000 	.word	0x40020000

08017260 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8017260:	b580      	push	{r7, lr}
 8017262:	b08e      	sub	sp, #56	; 0x38
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801726c:	2200      	movs	r2, #0
 801726e:	601a      	str	r2, [r3, #0]
 8017270:	605a      	str	r2, [r3, #4]
 8017272:	609a      	str	r2, [r3, #8]
 8017274:	60da      	str	r2, [r3, #12]
 8017276:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	4a3f      	ldr	r2, [pc, #252]	; (801737c <HAL_ETH_MspInit+0x11c>)
 801727e:	4293      	cmp	r3, r2
 8017280:	d178      	bne.n	8017374 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8017282:	4b3f      	ldr	r3, [pc, #252]	; (8017380 <HAL_ETH_MspInit+0x120>)
 8017284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017286:	4a3e      	ldr	r2, [pc, #248]	; (8017380 <HAL_ETH_MspInit+0x120>)
 8017288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801728c:	6313      	str	r3, [r2, #48]	; 0x30
 801728e:	4b3c      	ldr	r3, [pc, #240]	; (8017380 <HAL_ETH_MspInit+0x120>)
 8017290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017296:	623b      	str	r3, [r7, #32]
 8017298:	6a3b      	ldr	r3, [r7, #32]
 801729a:	4b39      	ldr	r3, [pc, #228]	; (8017380 <HAL_ETH_MspInit+0x120>)
 801729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801729e:	4a38      	ldr	r2, [pc, #224]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80172a4:	6313      	str	r3, [r2, #48]	; 0x30
 80172a6:	4b36      	ldr	r3, [pc, #216]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80172ae:	61fb      	str	r3, [r7, #28]
 80172b0:	69fb      	ldr	r3, [r7, #28]
 80172b2:	4b33      	ldr	r3, [pc, #204]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172b6:	4a32      	ldr	r2, [pc, #200]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80172bc:	6313      	str	r3, [r2, #48]	; 0x30
 80172be:	4b30      	ldr	r3, [pc, #192]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80172c6:	61bb      	str	r3, [r7, #24]
 80172c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80172ca:	4b2d      	ldr	r3, [pc, #180]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172ce:	4a2c      	ldr	r2, [pc, #176]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172d4:	6313      	str	r3, [r2, #48]	; 0x30
 80172d6:	4b2a      	ldr	r3, [pc, #168]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172de:	617b      	str	r3, [r7, #20]
 80172e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80172e2:	4b27      	ldr	r3, [pc, #156]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172e6:	4a26      	ldr	r2, [pc, #152]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172e8:	f043 0304 	orr.w	r3, r3, #4
 80172ec:	6313      	str	r3, [r2, #48]	; 0x30
 80172ee:	4b24      	ldr	r3, [pc, #144]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172f2:	f003 0304 	and.w	r3, r3, #4
 80172f6:	613b      	str	r3, [r7, #16]
 80172f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80172fa:	4b21      	ldr	r3, [pc, #132]	; (8017380 <HAL_ETH_MspInit+0x120>)
 80172fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172fe:	4a20      	ldr	r2, [pc, #128]	; (8017380 <HAL_ETH_MspInit+0x120>)
 8017300:	f043 0301 	orr.w	r3, r3, #1
 8017304:	6313      	str	r3, [r2, #48]	; 0x30
 8017306:	4b1e      	ldr	r3, [pc, #120]	; (8017380 <HAL_ETH_MspInit+0x120>)
 8017308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801730a:	f003 0301 	and.w	r3, r3, #1
 801730e:	60fb      	str	r3, [r7, #12]
 8017310:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8017312:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8017316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017318:	2302      	movs	r3, #2
 801731a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801731c:	2300      	movs	r3, #0
 801731e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017320:	2303      	movs	r3, #3
 8017322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017324:	230b      	movs	r3, #11
 8017326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801732c:	4619      	mov	r1, r3
 801732e:	4815      	ldr	r0, [pc, #84]	; (8017384 <HAL_ETH_MspInit+0x124>)
 8017330:	f7eb fa0e 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8017334:	2332      	movs	r3, #50	; 0x32
 8017336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017338:	2302      	movs	r3, #2
 801733a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801733c:	2300      	movs	r3, #0
 801733e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017340:	2303      	movs	r3, #3
 8017342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017344:	230b      	movs	r3, #11
 8017346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801734c:	4619      	mov	r1, r3
 801734e:	480e      	ldr	r0, [pc, #56]	; (8017388 <HAL_ETH_MspInit+0x128>)
 8017350:	f7eb f9fe 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8017354:	2386      	movs	r3, #134	; 0x86
 8017356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017358:	2302      	movs	r3, #2
 801735a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801735c:	2300      	movs	r3, #0
 801735e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017360:	2303      	movs	r3, #3
 8017362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8017364:	230b      	movs	r3, #11
 8017366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801736c:	4619      	mov	r1, r3
 801736e:	4807      	ldr	r0, [pc, #28]	; (801738c <HAL_ETH_MspInit+0x12c>)
 8017370:	f7eb f9ee 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8017374:	bf00      	nop
 8017376:	3738      	adds	r7, #56	; 0x38
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	40028000 	.word	0x40028000
 8017380:	40023800 	.word	0x40023800
 8017384:	40021800 	.word	0x40021800
 8017388:	40020800 	.word	0x40020800
 801738c:	40020000 	.word	0x40020000

08017390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8017390:	b580      	push	{r7, lr}
 8017392:	b08c      	sub	sp, #48	; 0x30
 8017394:	af00      	add	r7, sp, #0
 8017396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017398:	f107 031c 	add.w	r3, r7, #28
 801739c:	2200      	movs	r2, #0
 801739e:	601a      	str	r2, [r3, #0]
 80173a0:	605a      	str	r2, [r3, #4]
 80173a2:	609a      	str	r2, [r3, #8]
 80173a4:	60da      	str	r2, [r3, #12]
 80173a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	4a2f      	ldr	r2, [pc, #188]	; (801746c <HAL_I2C_MspInit+0xdc>)
 80173ae:	4293      	cmp	r3, r2
 80173b0:	d129      	bne.n	8017406 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80173b2:	4b2f      	ldr	r3, [pc, #188]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173b6:	4a2e      	ldr	r2, [pc, #184]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173b8:	f043 0302 	orr.w	r3, r3, #2
 80173bc:	6313      	str	r3, [r2, #48]	; 0x30
 80173be:	4b2c      	ldr	r3, [pc, #176]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173c2:	f003 0302 	and.w	r3, r3, #2
 80173c6:	61bb      	str	r3, [r7, #24]
 80173c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80173ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80173ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80173d0:	2312      	movs	r3, #18
 80173d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80173d4:	2301      	movs	r3, #1
 80173d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173d8:	2300      	movs	r3, #0
 80173da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80173dc:	2304      	movs	r3, #4
 80173de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80173e0:	f107 031c 	add.w	r3, r7, #28
 80173e4:	4619      	mov	r1, r3
 80173e6:	4823      	ldr	r0, [pc, #140]	; (8017474 <HAL_I2C_MspInit+0xe4>)
 80173e8:	f7eb f9b2 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80173ec:	4b20      	ldr	r3, [pc, #128]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173f0:	4a1f      	ldr	r2, [pc, #124]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80173f6:	6413      	str	r3, [r2, #64]	; 0x40
 80173f8:	4b1d      	ldr	r3, [pc, #116]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 80173fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017400:	617b      	str	r3, [r7, #20]
 8017402:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8017404:	e02d      	b.n	8017462 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4a1b      	ldr	r2, [pc, #108]	; (8017478 <HAL_I2C_MspInit+0xe8>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d128      	bne.n	8017462 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017410:	4b17      	ldr	r3, [pc, #92]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 8017412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017414:	4a16      	ldr	r2, [pc, #88]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 8017416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801741a:	6313      	str	r3, [r2, #48]	; 0x30
 801741c:	4b14      	ldr	r3, [pc, #80]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 801741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017424:	613b      	str	r3, [r7, #16]
 8017426:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8017428:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801742c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801742e:	2312      	movs	r3, #18
 8017430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017432:	2301      	movs	r3, #1
 8017434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017436:	2303      	movs	r3, #3
 8017438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801743a:	2304      	movs	r3, #4
 801743c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801743e:	f107 031c 	add.w	r3, r7, #28
 8017442:	4619      	mov	r1, r3
 8017444:	480d      	ldr	r0, [pc, #52]	; (801747c <HAL_I2C_MspInit+0xec>)
 8017446:	f7eb f983 	bl	8002750 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801744a:	4b09      	ldr	r3, [pc, #36]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 801744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801744e:	4a08      	ldr	r2, [pc, #32]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 8017450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017454:	6413      	str	r3, [r2, #64]	; 0x40
 8017456:	4b06      	ldr	r3, [pc, #24]	; (8017470 <HAL_I2C_MspInit+0xe0>)
 8017458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801745e:	60fb      	str	r3, [r7, #12]
 8017460:	68fb      	ldr	r3, [r7, #12]
}
 8017462:	bf00      	nop
 8017464:	3730      	adds	r7, #48	; 0x30
 8017466:	46bd      	mov	sp, r7
 8017468:	bd80      	pop	{r7, pc}
 801746a:	bf00      	nop
 801746c:	40005400 	.word	0x40005400
 8017470:	40023800 	.word	0x40023800
 8017474:	40020400 	.word	0x40020400
 8017478:	40005c00 	.word	0x40005c00
 801747c:	40021c00 	.word	0x40021c00

08017480 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	4a11      	ldr	r2, [pc, #68]	; (80174d4 <HAL_I2C_MspDeInit+0x54>)
 801748e:	4293      	cmp	r3, r2
 8017490:	d10b      	bne.n	80174aa <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8017492:	4b11      	ldr	r3, [pc, #68]	; (80174d8 <HAL_I2C_MspDeInit+0x58>)
 8017494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017496:	4a10      	ldr	r2, [pc, #64]	; (80174d8 <HAL_I2C_MspDeInit+0x58>)
 8017498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801749c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 801749e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80174a2:	480e      	ldr	r0, [pc, #56]	; (80174dc <HAL_I2C_MspDeInit+0x5c>)
 80174a4:	f7eb fafe 	bl	8002aa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80174a8:	e00f      	b.n	80174ca <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	4a0c      	ldr	r2, [pc, #48]	; (80174e0 <HAL_I2C_MspDeInit+0x60>)
 80174b0:	4293      	cmp	r3, r2
 80174b2:	d10a      	bne.n	80174ca <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80174b4:	4b08      	ldr	r3, [pc, #32]	; (80174d8 <HAL_I2C_MspDeInit+0x58>)
 80174b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174b8:	4a07      	ldr	r2, [pc, #28]	; (80174d8 <HAL_I2C_MspDeInit+0x58>)
 80174ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80174be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 80174c0:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80174c4:	4807      	ldr	r0, [pc, #28]	; (80174e4 <HAL_I2C_MspDeInit+0x64>)
 80174c6:	f7eb faed 	bl	8002aa4 <HAL_GPIO_DeInit>
}
 80174ca:	bf00      	nop
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	40005400 	.word	0x40005400
 80174d8:	40023800 	.word	0x40023800
 80174dc:	40020400 	.word	0x40020400
 80174e0:	40005c00 	.word	0x40005c00
 80174e4:	40021c00 	.word	0x40021c00

080174e8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b08c      	sub	sp, #48	; 0x30
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174f0:	f107 031c 	add.w	r3, r7, #28
 80174f4:	2200      	movs	r2, #0
 80174f6:	601a      	str	r2, [r3, #0]
 80174f8:	605a      	str	r2, [r3, #4]
 80174fa:	609a      	str	r2, [r3, #8]
 80174fc:	60da      	str	r2, [r3, #12]
 80174fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4a3b      	ldr	r2, [pc, #236]	; (80175f4 <HAL_QSPI_MspInit+0x10c>)
 8017506:	4293      	cmp	r3, r2
 8017508:	d170      	bne.n	80175ec <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 801750a:	4b3b      	ldr	r3, [pc, #236]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 801750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801750e:	4a3a      	ldr	r2, [pc, #232]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017510:	f043 0302 	orr.w	r3, r3, #2
 8017514:	6393      	str	r3, [r2, #56]	; 0x38
 8017516:	4b38      	ldr	r3, [pc, #224]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801751a:	f003 0302 	and.w	r3, r3, #2
 801751e:	61bb      	str	r3, [r7, #24]
 8017520:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017522:	4b35      	ldr	r3, [pc, #212]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017526:	4a34      	ldr	r2, [pc, #208]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017528:	f043 0310 	orr.w	r3, r3, #16
 801752c:	6313      	str	r3, [r2, #48]	; 0x30
 801752e:	4b32      	ldr	r3, [pc, #200]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017532:	f003 0310 	and.w	r3, r3, #16
 8017536:	617b      	str	r3, [r7, #20]
 8017538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801753a:	4b2f      	ldr	r3, [pc, #188]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 801753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801753e:	4a2e      	ldr	r2, [pc, #184]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017540:	f043 0302 	orr.w	r3, r3, #2
 8017544:	6313      	str	r3, [r2, #48]	; 0x30
 8017546:	4b2c      	ldr	r3, [pc, #176]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801754a:	f003 0302 	and.w	r3, r3, #2
 801754e:	613b      	str	r3, [r7, #16]
 8017550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017552:	4b29      	ldr	r3, [pc, #164]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017556:	4a28      	ldr	r2, [pc, #160]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017558:	f043 0308 	orr.w	r3, r3, #8
 801755c:	6313      	str	r3, [r2, #48]	; 0x30
 801755e:	4b26      	ldr	r3, [pc, #152]	; (80175f8 <HAL_QSPI_MspInit+0x110>)
 8017560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017562:	f003 0308 	and.w	r3, r3, #8
 8017566:	60fb      	str	r3, [r7, #12]
 8017568:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 801756a:	2304      	movs	r3, #4
 801756c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801756e:	2302      	movs	r3, #2
 8017570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017572:	2300      	movs	r3, #0
 8017574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017576:	2303      	movs	r3, #3
 8017578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 801757a:	2309      	movs	r3, #9
 801757c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 801757e:	f107 031c 	add.w	r3, r7, #28
 8017582:	4619      	mov	r1, r3
 8017584:	481d      	ldr	r0, [pc, #116]	; (80175fc <HAL_QSPI_MspInit+0x114>)
 8017586:	f7eb f8e3 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 801758a:	2340      	movs	r3, #64	; 0x40
 801758c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801758e:	2302      	movs	r3, #2
 8017590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017592:	2300      	movs	r3, #0
 8017594:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017596:	2303      	movs	r3, #3
 8017598:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 801759a:	230a      	movs	r3, #10
 801759c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 801759e:	f107 031c 	add.w	r3, r7, #28
 80175a2:	4619      	mov	r1, r3
 80175a4:	4816      	ldr	r0, [pc, #88]	; (8017600 <HAL_QSPI_MspInit+0x118>)
 80175a6:	f7eb f8d3 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80175aa:	2304      	movs	r3, #4
 80175ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80175ae:	2302      	movs	r3, #2
 80175b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175b2:	2300      	movs	r3, #0
 80175b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80175b6:	2303      	movs	r3, #3
 80175b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80175ba:	2309      	movs	r3, #9
 80175bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80175be:	f107 031c 	add.w	r3, r7, #28
 80175c2:	4619      	mov	r1, r3
 80175c4:	480e      	ldr	r0, [pc, #56]	; (8017600 <HAL_QSPI_MspInit+0x118>)
 80175c6:	f7eb f8c3 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80175ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80175ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80175d0:	2302      	movs	r3, #2
 80175d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80175d4:	2300      	movs	r3, #0
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80175d8:	2303      	movs	r3, #3
 80175da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80175dc:	2309      	movs	r3, #9
 80175de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80175e0:	f107 031c 	add.w	r3, r7, #28
 80175e4:	4619      	mov	r1, r3
 80175e6:	4807      	ldr	r0, [pc, #28]	; (8017604 <HAL_QSPI_MspInit+0x11c>)
 80175e8:	f7eb f8b2 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80175ec:	bf00      	nop
 80175ee:	3730      	adds	r7, #48	; 0x30
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	a0001000 	.word	0xa0001000
 80175f8:	40023800 	.word	0x40023800
 80175fc:	40021000 	.word	0x40021000
 8017600:	40020400 	.word	0x40020400
 8017604:	40020c00 	.word	0x40020c00

08017608 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8017608:	b480      	push	{r7}
 801760a:	b083      	sub	sp, #12
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	4a07      	ldr	r2, [pc, #28]	; (8017634 <HAL_RTC_MspInit+0x2c>)
 8017616:	4293      	cmp	r3, r2
 8017618:	d105      	bne.n	8017626 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801761a:	4b07      	ldr	r3, [pc, #28]	; (8017638 <HAL_RTC_MspInit+0x30>)
 801761c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801761e:	4a06      	ldr	r2, [pc, #24]	; (8017638 <HAL_RTC_MspInit+0x30>)
 8017620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017624:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8017626:	bf00      	nop
 8017628:	370c      	adds	r7, #12
 801762a:	46bd      	mov	sp, r7
 801762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017630:	4770      	bx	lr
 8017632:	bf00      	nop
 8017634:	40002800 	.word	0x40002800
 8017638:	40023800 	.word	0x40023800

0801763c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b08a      	sub	sp, #40	; 0x28
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017644:	f107 0314 	add.w	r3, r7, #20
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]
 801764c:	605a      	str	r2, [r3, #4]
 801764e:	609a      	str	r2, [r3, #8]
 8017650:	60da      	str	r2, [r3, #12]
 8017652:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a25      	ldr	r2, [pc, #148]	; (80176f0 <HAL_SD_MspInit+0xb4>)
 801765a:	4293      	cmp	r3, r2
 801765c:	d144      	bne.n	80176e8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801765e:	4b25      	ldr	r3, [pc, #148]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017662:	4a24      	ldr	r2, [pc, #144]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017668:	6453      	str	r3, [r2, #68]	; 0x44
 801766a:	4b22      	ldr	r3, [pc, #136]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 801766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801766e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017672:	613b      	str	r3, [r7, #16]
 8017674:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017676:	4b1f      	ldr	r3, [pc, #124]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801767a:	4a1e      	ldr	r2, [pc, #120]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 801767c:	f043 0304 	orr.w	r3, r3, #4
 8017680:	6313      	str	r3, [r2, #48]	; 0x30
 8017682:	4b1c      	ldr	r3, [pc, #112]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017686:	f003 0304 	and.w	r3, r3, #4
 801768a:	60fb      	str	r3, [r7, #12]
 801768c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801768e:	4b19      	ldr	r3, [pc, #100]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017692:	4a18      	ldr	r2, [pc, #96]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 8017694:	f043 0308 	orr.w	r3, r3, #8
 8017698:	6313      	str	r3, [r2, #48]	; 0x30
 801769a:	4b16      	ldr	r3, [pc, #88]	; (80176f4 <HAL_SD_MspInit+0xb8>)
 801769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801769e:	f003 0308 	and.w	r3, r3, #8
 80176a2:	60bb      	str	r3, [r7, #8]
 80176a4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80176a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80176aa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176ac:	2302      	movs	r3, #2
 80176ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176b0:	2300      	movs	r3, #0
 80176b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80176b4:	2303      	movs	r3, #3
 80176b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80176b8:	230c      	movs	r3, #12
 80176ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80176bc:	f107 0314 	add.w	r3, r7, #20
 80176c0:	4619      	mov	r1, r3
 80176c2:	480d      	ldr	r0, [pc, #52]	; (80176f8 <HAL_SD_MspInit+0xbc>)
 80176c4:	f7eb f844 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80176c8:	2304      	movs	r3, #4
 80176ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176cc:	2302      	movs	r3, #2
 80176ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176d0:	2300      	movs	r3, #0
 80176d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80176d4:	2303      	movs	r3, #3
 80176d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80176d8:	230c      	movs	r3, #12
 80176da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80176dc:	f107 0314 	add.w	r3, r7, #20
 80176e0:	4619      	mov	r1, r3
 80176e2:	4806      	ldr	r0, [pc, #24]	; (80176fc <HAL_SD_MspInit+0xc0>)
 80176e4:	f7eb f834 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80176e8:	bf00      	nop
 80176ea:	3728      	adds	r7, #40	; 0x28
 80176ec:	46bd      	mov	sp, r7
 80176ee:	bd80      	pop	{r7, pc}
 80176f0:	40012c00 	.word	0x40012c00
 80176f4:	40023800 	.word	0x40023800
 80176f8:	40020800 	.word	0x40020800
 80176fc:	40020c00 	.word	0x40020c00

08017700 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b08a      	sub	sp, #40	; 0x28
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017708:	f107 0314 	add.w	r3, r7, #20
 801770c:	2200      	movs	r2, #0
 801770e:	601a      	str	r2, [r3, #0]
 8017710:	605a      	str	r2, [r3, #4]
 8017712:	609a      	str	r2, [r3, #8]
 8017714:	60da      	str	r2, [r3, #12]
 8017716:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8017720:	d127      	bne.n	8017772 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8017722:	4b16      	ldr	r3, [pc, #88]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 8017724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017726:	4a15      	ldr	r2, [pc, #84]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 8017728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801772c:	6413      	str	r3, [r2, #64]	; 0x40
 801772e:	4b13      	ldr	r3, [pc, #76]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 8017730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017736:	613b      	str	r3, [r7, #16]
 8017738:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801773a:	4b10      	ldr	r3, [pc, #64]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 801773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801773e:	4a0f      	ldr	r2, [pc, #60]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 8017740:	f043 0308 	orr.w	r3, r3, #8
 8017744:	6313      	str	r3, [r2, #48]	; 0x30
 8017746:	4b0d      	ldr	r3, [pc, #52]	; (801777c <HAL_SPDIFRX_MspInit+0x7c>)
 8017748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801774a:	f003 0308 	and.w	r3, r3, #8
 801774e:	60fb      	str	r3, [r7, #12]
 8017750:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8017752:	2380      	movs	r3, #128	; 0x80
 8017754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017756:	2302      	movs	r3, #2
 8017758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801775a:	2300      	movs	r3, #0
 801775c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801775e:	2300      	movs	r3, #0
 8017760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8017762:	2308      	movs	r3, #8
 8017764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8017766:	f107 0314 	add.w	r3, r7, #20
 801776a:	4619      	mov	r1, r3
 801776c:	4804      	ldr	r0, [pc, #16]	; (8017780 <HAL_SPDIFRX_MspInit+0x80>)
 801776e:	f7ea ffef 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8017772:	bf00      	nop
 8017774:	3728      	adds	r7, #40	; 0x28
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	40023800 	.word	0x40023800
 8017780:	40020c00 	.word	0x40020c00

08017784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b08a      	sub	sp, #40	; 0x28
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801778c:	f107 0314 	add.w	r3, r7, #20
 8017790:	2200      	movs	r2, #0
 8017792:	601a      	str	r2, [r3, #0]
 8017794:	605a      	str	r2, [r3, #4]
 8017796:	609a      	str	r2, [r3, #8]
 8017798:	60da      	str	r2, [r3, #12]
 801779a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4a25      	ldr	r2, [pc, #148]	; (8017838 <HAL_SPI_MspInit+0xb4>)
 80177a2:	4293      	cmp	r3, r2
 80177a4:	d144      	bne.n	8017830 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80177a6:	4b25      	ldr	r3, [pc, #148]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177aa:	4a24      	ldr	r2, [pc, #144]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80177b0:	6413      	str	r3, [r2, #64]	; 0x40
 80177b2:	4b22      	ldr	r3, [pc, #136]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80177ba:	613b      	str	r3, [r7, #16]
 80177bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80177be:	4b1f      	ldr	r3, [pc, #124]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177c2:	4a1e      	ldr	r2, [pc, #120]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80177c8:	6313      	str	r3, [r2, #48]	; 0x30
 80177ca:	4b1c      	ldr	r3, [pc, #112]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177d2:	60fb      	str	r3, [r7, #12]
 80177d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80177d6:	4b19      	ldr	r3, [pc, #100]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177da:	4a18      	ldr	r2, [pc, #96]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177dc:	f043 0302 	orr.w	r3, r3, #2
 80177e0:	6313      	str	r3, [r2, #48]	; 0x30
 80177e2:	4b16      	ldr	r3, [pc, #88]	; (801783c <HAL_SPI_MspInit+0xb8>)
 80177e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177e6:	f003 0302 	and.w	r3, r3, #2
 80177ea:	60bb      	str	r3, [r7, #8]
 80177ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80177ee:	2302      	movs	r3, #2
 80177f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177f2:	2302      	movs	r3, #2
 80177f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80177fa:	2300      	movs	r3, #0
 80177fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80177fe:	2305      	movs	r3, #5
 8017800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8017802:	f107 0314 	add.w	r3, r7, #20
 8017806:	4619      	mov	r1, r3
 8017808:	480d      	ldr	r0, [pc, #52]	; (8017840 <HAL_SPI_MspInit+0xbc>)
 801780a:	f7ea ffa1 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801780e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8017812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017814:	2302      	movs	r3, #2
 8017816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017818:	2300      	movs	r3, #0
 801781a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801781c:	2300      	movs	r3, #0
 801781e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8017820:	2305      	movs	r3, #5
 8017822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017824:	f107 0314 	add.w	r3, r7, #20
 8017828:	4619      	mov	r1, r3
 801782a:	4806      	ldr	r0, [pc, #24]	; (8017844 <HAL_SPI_MspInit+0xc0>)
 801782c:	f7ea ff90 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8017830:	bf00      	nop
 8017832:	3728      	adds	r7, #40	; 0x28
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	40003800 	.word	0x40003800
 801783c:	40023800 	.word	0x40023800
 8017840:	40022000 	.word	0x40022000
 8017844:	40020400 	.word	0x40020400

08017848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8017848:	b480      	push	{r7}
 801784a:	b087      	sub	sp, #28
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	4a25      	ldr	r2, [pc, #148]	; (80178ec <HAL_TIM_Base_MspInit+0xa4>)
 8017856:	4293      	cmp	r3, r2
 8017858:	d10c      	bne.n	8017874 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801785a:	4b25      	ldr	r3, [pc, #148]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 801785c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801785e:	4a24      	ldr	r2, [pc, #144]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 8017860:	f043 0301 	orr.w	r3, r3, #1
 8017864:	6453      	str	r3, [r2, #68]	; 0x44
 8017866:	4b22      	ldr	r3, [pc, #136]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 8017868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801786a:	f003 0301 	and.w	r3, r3, #1
 801786e:	617b      	str	r3, [r7, #20]
 8017870:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8017872:	e034      	b.n	80178de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	4a1e      	ldr	r2, [pc, #120]	; (80178f4 <HAL_TIM_Base_MspInit+0xac>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d10c      	bne.n	8017898 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801787e:	4b1c      	ldr	r3, [pc, #112]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 8017880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017882:	4a1b      	ldr	r2, [pc, #108]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 8017884:	f043 0302 	orr.w	r3, r3, #2
 8017888:	6413      	str	r3, [r2, #64]	; 0x40
 801788a:	4b19      	ldr	r3, [pc, #100]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 801788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788e:	f003 0302 	and.w	r3, r3, #2
 8017892:	613b      	str	r3, [r7, #16]
 8017894:	693b      	ldr	r3, [r7, #16]
}
 8017896:	e022      	b.n	80178de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	4a16      	ldr	r2, [pc, #88]	; (80178f8 <HAL_TIM_Base_MspInit+0xb0>)
 801789e:	4293      	cmp	r3, r2
 80178a0:	d10c      	bne.n	80178bc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80178a2:	4b13      	ldr	r3, [pc, #76]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178a6:	4a12      	ldr	r2, [pc, #72]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178a8:	f043 0308 	orr.w	r3, r3, #8
 80178ac:	6413      	str	r3, [r2, #64]	; 0x40
 80178ae:	4b10      	ldr	r3, [pc, #64]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178b2:	f003 0308 	and.w	r3, r3, #8
 80178b6:	60fb      	str	r3, [r7, #12]
 80178b8:	68fb      	ldr	r3, [r7, #12]
}
 80178ba:	e010      	b.n	80178de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a0e      	ldr	r2, [pc, #56]	; (80178fc <HAL_TIM_Base_MspInit+0xb4>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d10b      	bne.n	80178de <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80178c6:	4b0a      	ldr	r3, [pc, #40]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ca:	4a09      	ldr	r2, [pc, #36]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178cc:	f043 0302 	orr.w	r3, r3, #2
 80178d0:	6453      	str	r3, [r2, #68]	; 0x44
 80178d2:	4b07      	ldr	r3, [pc, #28]	; (80178f0 <HAL_TIM_Base_MspInit+0xa8>)
 80178d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178d6:	f003 0302 	and.w	r3, r3, #2
 80178da:	60bb      	str	r3, [r7, #8]
 80178dc:	68bb      	ldr	r3, [r7, #8]
}
 80178de:	bf00      	nop
 80178e0:	371c      	adds	r7, #28
 80178e2:	46bd      	mov	sp, r7
 80178e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e8:	4770      	bx	lr
 80178ea:	bf00      	nop
 80178ec:	40010000 	.word	0x40010000
 80178f0:	40023800 	.word	0x40023800
 80178f4:	40000400 	.word	0x40000400
 80178f8:	40000c00 	.word	0x40000c00
 80178fc:	40010400 	.word	0x40010400

08017900 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8017900:	b480      	push	{r7}
 8017902:	b085      	sub	sp, #20
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	4a0a      	ldr	r2, [pc, #40]	; (8017938 <HAL_TIM_PWM_MspInit+0x38>)
 801790e:	4293      	cmp	r3, r2
 8017910:	d10b      	bne.n	801792a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8017912:	4b0a      	ldr	r3, [pc, #40]	; (801793c <HAL_TIM_PWM_MspInit+0x3c>)
 8017914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017916:	4a09      	ldr	r2, [pc, #36]	; (801793c <HAL_TIM_PWM_MspInit+0x3c>)
 8017918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801791c:	6413      	str	r3, [r2, #64]	; 0x40
 801791e:	4b07      	ldr	r3, [pc, #28]	; (801793c <HAL_TIM_PWM_MspInit+0x3c>)
 8017920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017926:	60fb      	str	r3, [r7, #12]
 8017928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 801792a:	bf00      	nop
 801792c:	3714      	adds	r7, #20
 801792e:	46bd      	mov	sp, r7
 8017930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017934:	4770      	bx	lr
 8017936:	bf00      	nop
 8017938:	40001800 	.word	0x40001800
 801793c:	40023800 	.word	0x40023800

08017940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b08c      	sub	sp, #48	; 0x30
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017948:	f107 031c 	add.w	r3, r7, #28
 801794c:	2200      	movs	r2, #0
 801794e:	601a      	str	r2, [r3, #0]
 8017950:	605a      	str	r2, [r3, #4]
 8017952:	609a      	str	r2, [r3, #8]
 8017954:	60da      	str	r2, [r3, #12]
 8017956:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	4a44      	ldr	r2, [pc, #272]	; (8017a70 <HAL_TIM_MspPostInit+0x130>)
 801795e:	4293      	cmp	r3, r2
 8017960:	d11d      	bne.n	801799e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017962:	4b44      	ldr	r3, [pc, #272]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017966:	4a43      	ldr	r2, [pc, #268]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017968:	f043 0301 	orr.w	r3, r3, #1
 801796c:	6313      	str	r3, [r2, #48]	; 0x30
 801796e:	4b41      	ldr	r3, [pc, #260]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017972:	f003 0301 	and.w	r3, r3, #1
 8017976:	61bb      	str	r3, [r7, #24]
 8017978:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 801797a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801797e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017980:	2302      	movs	r3, #2
 8017982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017984:	2300      	movs	r3, #0
 8017986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017988:	2300      	movs	r3, #0
 801798a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801798c:	2301      	movs	r3, #1
 801798e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8017990:	f107 031c 	add.w	r3, r7, #28
 8017994:	4619      	mov	r1, r3
 8017996:	4838      	ldr	r0, [pc, #224]	; (8017a78 <HAL_TIM_MspPostInit+0x138>)
 8017998:	f7ea feda 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 801799c:	e064      	b.n	8017a68 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	4a36      	ldr	r2, [pc, #216]	; (8017a7c <HAL_TIM_MspPostInit+0x13c>)
 80179a4:	4293      	cmp	r3, r2
 80179a6:	d11c      	bne.n	80179e2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179a8:	4b32      	ldr	r3, [pc, #200]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179ac:	4a31      	ldr	r2, [pc, #196]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179ae:	f043 0302 	orr.w	r3, r3, #2
 80179b2:	6313      	str	r3, [r2, #48]	; 0x30
 80179b4:	4b2f      	ldr	r3, [pc, #188]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179b8:	f003 0302 	and.w	r3, r3, #2
 80179bc:	617b      	str	r3, [r7, #20]
 80179be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80179c0:	2310      	movs	r3, #16
 80179c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179c4:	2302      	movs	r3, #2
 80179c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179c8:	2300      	movs	r3, #0
 80179ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80179cc:	2300      	movs	r3, #0
 80179ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80179d0:	2302      	movs	r3, #2
 80179d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80179d4:	f107 031c 	add.w	r3, r7, #28
 80179d8:	4619      	mov	r1, r3
 80179da:	4829      	ldr	r0, [pc, #164]	; (8017a80 <HAL_TIM_MspPostInit+0x140>)
 80179dc:	f7ea feb8 	bl	8002750 <HAL_GPIO_Init>
}
 80179e0:	e042      	b.n	8017a68 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	4a27      	ldr	r2, [pc, #156]	; (8017a84 <HAL_TIM_MspPostInit+0x144>)
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d11c      	bne.n	8017a26 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80179ec:	4b21      	ldr	r3, [pc, #132]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f0:	4a20      	ldr	r2, [pc, #128]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80179f6:	6313      	str	r3, [r2, #48]	; 0x30
 80179f8:	4b1e      	ldr	r3, [pc, #120]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 80179fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017a00:	613b      	str	r3, [r7, #16]
 8017a02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8017a04:	2301      	movs	r3, #1
 8017a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a08:	2302      	movs	r3, #2
 8017a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a10:	2300      	movs	r3, #0
 8017a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8017a14:	2302      	movs	r3, #2
 8017a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8017a18:	f107 031c 	add.w	r3, r7, #28
 8017a1c:	4619      	mov	r1, r3
 8017a1e:	481a      	ldr	r0, [pc, #104]	; (8017a88 <HAL_TIM_MspPostInit+0x148>)
 8017a20:	f7ea fe96 	bl	8002750 <HAL_GPIO_Init>
}
 8017a24:	e020      	b.n	8017a68 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	4a18      	ldr	r2, [pc, #96]	; (8017a8c <HAL_TIM_MspPostInit+0x14c>)
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d11b      	bne.n	8017a68 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8017a30:	4b10      	ldr	r3, [pc, #64]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a34:	4a0f      	ldr	r2, [pc, #60]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8017a3c:	4b0d      	ldr	r3, [pc, #52]	; (8017a74 <HAL_TIM_MspPostInit+0x134>)
 8017a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017a44:	60fb      	str	r3, [r7, #12]
 8017a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8017a48:	2340      	movs	r3, #64	; 0x40
 8017a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a4c:	2302      	movs	r3, #2
 8017a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a50:	2300      	movs	r3, #0
 8017a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a54:	2300      	movs	r3, #0
 8017a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8017a58:	2309      	movs	r3, #9
 8017a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8017a5c:	f107 031c 	add.w	r3, r7, #28
 8017a60:	4619      	mov	r1, r3
 8017a62:	480b      	ldr	r0, [pc, #44]	; (8017a90 <HAL_TIM_MspPostInit+0x150>)
 8017a64:	f7ea fe74 	bl	8002750 <HAL_GPIO_Init>
}
 8017a68:	bf00      	nop
 8017a6a:	3730      	adds	r7, #48	; 0x30
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd80      	pop	{r7, pc}
 8017a70:	40010000 	.word	0x40010000
 8017a74:	40023800 	.word	0x40023800
 8017a78:	40020000 	.word	0x40020000
 8017a7c:	40000400 	.word	0x40000400
 8017a80:	40020400 	.word	0x40020400
 8017a84:	40000c00 	.word	0x40000c00
 8017a88:	40022000 	.word	0x40022000
 8017a8c:	40001800 	.word	0x40001800
 8017a90:	40021c00 	.word	0x40021c00

08017a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b08c      	sub	sp, #48	; 0x30
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a9c:	f107 031c 	add.w	r3, r7, #28
 8017aa0:	2200      	movs	r2, #0
 8017aa2:	601a      	str	r2, [r3, #0]
 8017aa4:	605a      	str	r2, [r3, #4]
 8017aa6:	609a      	str	r2, [r3, #8]
 8017aa8:	60da      	str	r2, [r3, #12]
 8017aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	4a3c      	ldr	r2, [pc, #240]	; (8017ba4 <HAL_UART_MspInit+0x110>)
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	d145      	bne.n	8017b42 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017ab6:	4b3c      	ldr	r3, [pc, #240]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017aba:	4a3b      	ldr	r2, [pc, #236]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017abc:	f043 0310 	orr.w	r3, r3, #16
 8017ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8017ac2:	4b39      	ldr	r3, [pc, #228]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ac6:	f003 0310 	and.w	r3, r3, #16
 8017aca:	61bb      	str	r3, [r7, #24]
 8017acc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017ace:	4b36      	ldr	r3, [pc, #216]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ad2:	4a35      	ldr	r2, [pc, #212]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017ad4:	f043 0302 	orr.w	r3, r3, #2
 8017ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8017ada:	4b33      	ldr	r3, [pc, #204]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ade:	f003 0302 	and.w	r3, r3, #2
 8017ae2:	617b      	str	r3, [r7, #20]
 8017ae4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ae6:	4b30      	ldr	r3, [pc, #192]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017aea:	4a2f      	ldr	r2, [pc, #188]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017aec:	f043 0301 	orr.w	r3, r3, #1
 8017af0:	6313      	str	r3, [r2, #48]	; 0x30
 8017af2:	4b2d      	ldr	r3, [pc, #180]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017af6:	f003 0301 	and.w	r3, r3, #1
 8017afa:	613b      	str	r3, [r7, #16]
 8017afc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8017afe:	2380      	movs	r3, #128	; 0x80
 8017b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b02:	2302      	movs	r3, #2
 8017b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b06:	2300      	movs	r3, #0
 8017b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017b0e:	2307      	movs	r3, #7
 8017b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8017b12:	f107 031c 	add.w	r3, r7, #28
 8017b16:	4619      	mov	r1, r3
 8017b18:	4824      	ldr	r0, [pc, #144]	; (8017bac <HAL_UART_MspInit+0x118>)
 8017b1a:	f7ea fe19 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8017b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b24:	2302      	movs	r3, #2
 8017b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8017b30:	2307      	movs	r3, #7
 8017b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8017b34:	f107 031c 	add.w	r3, r7, #28
 8017b38:	4619      	mov	r1, r3
 8017b3a:	481d      	ldr	r0, [pc, #116]	; (8017bb0 <HAL_UART_MspInit+0x11c>)
 8017b3c:	f7ea fe08 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8017b40:	e02c      	b.n	8017b9c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4a1b      	ldr	r2, [pc, #108]	; (8017bb4 <HAL_UART_MspInit+0x120>)
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	d127      	bne.n	8017b9c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8017b4c:	4b16      	ldr	r3, [pc, #88]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b50:	4a15      	ldr	r2, [pc, #84]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b52:	f043 0320 	orr.w	r3, r3, #32
 8017b56:	6453      	str	r3, [r2, #68]	; 0x44
 8017b58:	4b13      	ldr	r3, [pc, #76]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b5c:	f003 0320 	and.w	r3, r3, #32
 8017b60:	60fb      	str	r3, [r7, #12]
 8017b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017b64:	4b10      	ldr	r3, [pc, #64]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b68:	4a0f      	ldr	r2, [pc, #60]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b6a:	f043 0304 	orr.w	r3, r3, #4
 8017b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8017b70:	4b0d      	ldr	r3, [pc, #52]	; (8017ba8 <HAL_UART_MspInit+0x114>)
 8017b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b74:	f003 0304 	and.w	r3, r3, #4
 8017b78:	60bb      	str	r3, [r7, #8]
 8017b7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8017b7c:	23c0      	movs	r3, #192	; 0xc0
 8017b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b80:	2302      	movs	r3, #2
 8017b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b84:	2300      	movs	r3, #0
 8017b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017b88:	2303      	movs	r3, #3
 8017b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8017b8c:	2308      	movs	r3, #8
 8017b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017b90:	f107 031c 	add.w	r3, r7, #28
 8017b94:	4619      	mov	r1, r3
 8017b96:	4808      	ldr	r0, [pc, #32]	; (8017bb8 <HAL_UART_MspInit+0x124>)
 8017b98:	f7ea fdda 	bl	8002750 <HAL_GPIO_Init>
}
 8017b9c:	bf00      	nop
 8017b9e:	3730      	adds	r7, #48	; 0x30
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	bd80      	pop	{r7, pc}
 8017ba4:	40011000 	.word	0x40011000
 8017ba8:	40023800 	.word	0x40023800
 8017bac:	40020400 	.word	0x40020400
 8017bb0:	40020000 	.word	0x40020000
 8017bb4:	40011400 	.word	0x40011400
 8017bb8:	40020800 	.word	0x40020800

08017bbc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b08a      	sub	sp, #40	; 0x28
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	4a2b      	ldr	r2, [pc, #172]	; (8017c78 <HAL_SAI_MspInit+0xbc>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d124      	bne.n	8017c18 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8017bce:	4b2b      	ldr	r3, [pc, #172]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d10b      	bne.n	8017bee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8017bd6:	4b2a      	ldr	r3, [pc, #168]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bda:	4a29      	ldr	r2, [pc, #164]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017be0:	6453      	str	r3, [r2, #68]	; 0x44
 8017be2:	4b27      	ldr	r3, [pc, #156]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017bea:	613b      	str	r3, [r7, #16]
 8017bec:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8017bee:	4b23      	ldr	r3, [pc, #140]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	4a21      	ldr	r2, [pc, #132]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017bf6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8017bf8:	23f0      	movs	r3, #240	; 0xf0
 8017bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017bfc:	2302      	movs	r3, #2
 8017bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c00:	2300      	movs	r3, #0
 8017c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c04:	2300      	movs	r3, #0
 8017c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8017c08:	230a      	movs	r3, #10
 8017c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8017c0c:	f107 0314 	add.w	r3, r7, #20
 8017c10:	4619      	mov	r1, r3
 8017c12:	481c      	ldr	r0, [pc, #112]	; (8017c84 <HAL_SAI_MspInit+0xc8>)
 8017c14:	f7ea fd9c 	bl	8002750 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	4a1a      	ldr	r2, [pc, #104]	; (8017c88 <HAL_SAI_MspInit+0xcc>)
 8017c1e:	4293      	cmp	r3, r2
 8017c20:	d125      	bne.n	8017c6e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8017c22:	4b16      	ldr	r3, [pc, #88]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d10b      	bne.n	8017c42 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8017c2a:	4b15      	ldr	r3, [pc, #84]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c2e:	4a14      	ldr	r2, [pc, #80]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017c30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017c34:	6453      	str	r3, [r2, #68]	; 0x44
 8017c36:	4b12      	ldr	r3, [pc, #72]	; (8017c80 <HAL_SAI_MspInit+0xc4>)
 8017c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017c3e:	60fb      	str	r3, [r7, #12]
 8017c40:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8017c42:	4b0e      	ldr	r3, [pc, #56]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	3301      	adds	r3, #1
 8017c48:	4a0c      	ldr	r2, [pc, #48]	; (8017c7c <HAL_SAI_MspInit+0xc0>)
 8017c4a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8017c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c52:	2302      	movs	r3, #2
 8017c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c56:	2300      	movs	r3, #0
 8017c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8017c5e:	230a      	movs	r3, #10
 8017c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8017c62:	f107 0314 	add.w	r3, r7, #20
 8017c66:	4619      	mov	r1, r3
 8017c68:	4808      	ldr	r0, [pc, #32]	; (8017c8c <HAL_SAI_MspInit+0xd0>)
 8017c6a:	f7ea fd71 	bl	8002750 <HAL_GPIO_Init>

    }
}
 8017c6e:	bf00      	nop
 8017c70:	3728      	adds	r7, #40	; 0x28
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	40015c04 	.word	0x40015c04
 8017c7c:	20009a6c 	.word	0x20009a6c
 8017c80:	40023800 	.word	0x40023800
 8017c84:	40022000 	.word	0x40022000
 8017c88:	40015c24 	.word	0x40015c24
 8017c8c:	40021800 	.word	0x40021800

08017c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b08c      	sub	sp, #48	; 0x30
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017c98:	2300      	movs	r3, #0
 8017c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	6879      	ldr	r1, [r7, #4]
 8017ca4:	2036      	movs	r0, #54	; 0x36
 8017ca6:	f7e9 fac1 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8017caa:	2036      	movs	r0, #54	; 0x36
 8017cac:	f7e9 fada 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8017cb0:	4b1f      	ldr	r3, [pc, #124]	; (8017d30 <HAL_InitTick+0xa0>)
 8017cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cb4:	4a1e      	ldr	r2, [pc, #120]	; (8017d30 <HAL_InitTick+0xa0>)
 8017cb6:	f043 0310 	orr.w	r3, r3, #16
 8017cba:	6413      	str	r3, [r2, #64]	; 0x40
 8017cbc:	4b1c      	ldr	r3, [pc, #112]	; (8017d30 <HAL_InitTick+0xa0>)
 8017cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017cc0:	f003 0310 	and.w	r3, r3, #16
 8017cc4:	60fb      	str	r3, [r7, #12]
 8017cc6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017cc8:	f107 0210 	add.w	r2, r7, #16
 8017ccc:	f107 0314 	add.w	r3, r7, #20
 8017cd0:	4611      	mov	r1, r2
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	f7ee fbd0 	bl	8006478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017cd8:	f7ee fba6 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	005b      	lsls	r3, r3, #1
 8017ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8017ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce4:	4a13      	ldr	r2, [pc, #76]	; (8017d34 <HAL_InitTick+0xa4>)
 8017ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8017cea:	0c9b      	lsrs	r3, r3, #18
 8017cec:	3b01      	subs	r3, #1
 8017cee:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8017cf0:	4b11      	ldr	r3, [pc, #68]	; (8017d38 <HAL_InitTick+0xa8>)
 8017cf2:	4a12      	ldr	r2, [pc, #72]	; (8017d3c <HAL_InitTick+0xac>)
 8017cf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8017cf6:	4b10      	ldr	r3, [pc, #64]	; (8017d38 <HAL_InitTick+0xa8>)
 8017cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017cfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8017cfe:	4a0e      	ldr	r2, [pc, #56]	; (8017d38 <HAL_InitTick+0xa8>)
 8017d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8017d04:	4b0c      	ldr	r3, [pc, #48]	; (8017d38 <HAL_InitTick+0xa8>)
 8017d06:	2200      	movs	r2, #0
 8017d08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d0a:	4b0b      	ldr	r3, [pc, #44]	; (8017d38 <HAL_InitTick+0xa8>)
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8017d10:	4809      	ldr	r0, [pc, #36]	; (8017d38 <HAL_InitTick+0xa8>)
 8017d12:	f7f1 f89d 	bl	8008e50 <HAL_TIM_Base_Init>
 8017d16:	4603      	mov	r3, r0
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d104      	bne.n	8017d26 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8017d1c:	4806      	ldr	r0, [pc, #24]	; (8017d38 <HAL_InitTick+0xa8>)
 8017d1e:	f7f1 f8ed 	bl	8008efc <HAL_TIM_Base_Start_IT>
 8017d22:	4603      	mov	r3, r0
 8017d24:	e000      	b.n	8017d28 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8017d26:	2301      	movs	r3, #1
}
 8017d28:	4618      	mov	r0, r3
 8017d2a:	3730      	adds	r7, #48	; 0x30
 8017d2c:	46bd      	mov	sp, r7
 8017d2e:	bd80      	pop	{r7, pc}
 8017d30:	40023800 	.word	0x40023800
 8017d34:	431bde83 	.word	0x431bde83
 8017d38:	2000a0b8 	.word	0x2000a0b8
 8017d3c:	40001000 	.word	0x40001000

08017d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017d40:	b480      	push	{r7}
 8017d42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017d44:	bf00      	nop
 8017d46:	46bd      	mov	sp, r7
 8017d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4c:	4770      	bx	lr

08017d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017d4e:	b480      	push	{r7}
 8017d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017d52:	e7fe      	b.n	8017d52 <HardFault_Handler+0x4>

08017d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017d54:	b480      	push	{r7}
 8017d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017d58:	e7fe      	b.n	8017d58 <MemManage_Handler+0x4>

08017d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017d5a:	b480      	push	{r7}
 8017d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017d5e:	e7fe      	b.n	8017d5e <BusFault_Handler+0x4>

08017d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017d60:	b480      	push	{r7}
 8017d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017d64:	e7fe      	b.n	8017d64 <UsageFault_Handler+0x4>

08017d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017d66:	b480      	push	{r7}
 8017d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017d6a:	bf00      	nop
 8017d6c:	46bd      	mov	sp, r7
 8017d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d72:	4770      	bx	lr

08017d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017d78:	4802      	ldr	r0, [pc, #8]	; (8017d84 <TIM6_DAC_IRQHandler+0x10>)
 8017d7a:	f7f1 f914 	bl	8008fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017d7e:	bf00      	nop
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	2000a0b8 	.word	0x2000a0b8

08017d88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8017d8c:	4802      	ldr	r0, [pc, #8]	; (8017d98 <OTG_FS_IRQHandler+0x10>)
 8017d8e:	f7eb fa3d 	bl	800320c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8017d92:	bf00      	nop
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	2000a4d0 	.word	0x2000a4d0

08017d9c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8017da0:	4802      	ldr	r0, [pc, #8]	; (8017dac <LTDC_IRQHandler+0x10>)
 8017da2:	f7ed faad 	bl	8005300 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8017da6:	bf00      	nop
 8017da8:	bd80      	pop	{r7, pc}
 8017daa:	bf00      	nop
 8017dac:	200090a8 	.word	0x200090a8

08017db0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8017db4:	4802      	ldr	r0, [pc, #8]	; (8017dc0 <DMA2D_IRQHandler+0x10>)
 8017db6:	f7e9 fe20 	bl	80019fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8017dba:	bf00      	nop
 8017dbc:	bd80      	pop	{r7, pc}
 8017dbe:	bf00      	nop
 8017dc0:	20009150 	.word	0x20009150

08017dc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017dc4:	b480      	push	{r7}
 8017dc6:	af00      	add	r7, sp, #0
	return 1;
 8017dc8:	2301      	movs	r3, #1
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd2:	4770      	bx	lr

08017dd4 <_kill>:

int _kill(int pid, int sig)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b082      	sub	sp, #8
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	6078      	str	r0, [r7, #4]
 8017ddc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017dde:	f007 fa93 	bl	801f308 <__errno>
 8017de2:	4602      	mov	r2, r0
 8017de4:	2316      	movs	r3, #22
 8017de6:	6013      	str	r3, [r2, #0]
	return -1;
 8017de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	3708      	adds	r7, #8
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}

08017df4 <_exit>:

void _exit (int status)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f7ff ffe7 	bl	8017dd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017e06:	e7fe      	b.n	8017e06 <_exit+0x12>

08017e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b086      	sub	sp, #24
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	60b9      	str	r1, [r7, #8]
 8017e12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e14:	2300      	movs	r3, #0
 8017e16:	617b      	str	r3, [r7, #20]
 8017e18:	e00a      	b.n	8017e30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017e1a:	f3af 8000 	nop.w
 8017e1e:	4601      	mov	r1, r0
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	1c5a      	adds	r2, r3, #1
 8017e24:	60ba      	str	r2, [r7, #8]
 8017e26:	b2ca      	uxtb	r2, r1
 8017e28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	617b      	str	r3, [r7, #20]
 8017e30:	697a      	ldr	r2, [r7, #20]
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	429a      	cmp	r2, r3
 8017e36:	dbf0      	blt.n	8017e1a <_read+0x12>
	}

return len;
 8017e38:	687b      	ldr	r3, [r7, #4]
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3718      	adds	r7, #24
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017e42:	b580      	push	{r7, lr}
 8017e44:	b086      	sub	sp, #24
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	60f8      	str	r0, [r7, #12]
 8017e4a:	60b9      	str	r1, [r7, #8]
 8017e4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e4e:	2300      	movs	r3, #0
 8017e50:	617b      	str	r3, [r7, #20]
 8017e52:	e009      	b.n	8017e68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017e54:	68bb      	ldr	r3, [r7, #8]
 8017e56:	1c5a      	adds	r2, r3, #1
 8017e58:	60ba      	str	r2, [r7, #8]
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e62:	697b      	ldr	r3, [r7, #20]
 8017e64:	3301      	adds	r3, #1
 8017e66:	617b      	str	r3, [r7, #20]
 8017e68:	697a      	ldr	r2, [r7, #20]
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	dbf1      	blt.n	8017e54 <_write+0x12>
	}
	return len;
 8017e70:	687b      	ldr	r3, [r7, #4]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3718      	adds	r7, #24
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}

08017e7a <_close>:

int _close(int file)
{
 8017e7a:	b480      	push	{r7}
 8017e7c:	b083      	sub	sp, #12
 8017e7e:	af00      	add	r7, sp, #0
 8017e80:	6078      	str	r0, [r7, #4]
	return -1;
 8017e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	370c      	adds	r7, #12
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e90:	4770      	bx	lr

08017e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017e92:	b480      	push	{r7}
 8017e94:	b083      	sub	sp, #12
 8017e96:	af00      	add	r7, sp, #0
 8017e98:	6078      	str	r0, [r7, #4]
 8017e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8017ea4:	2300      	movs	r3, #0
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	370c      	adds	r7, #12
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_isatty>:

int _isatty(int file)
{
 8017eb2:	b480      	push	{r7}
 8017eb4:	b083      	sub	sp, #12
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
	return 1;
 8017eba:	2301      	movs	r3, #1
}
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	370c      	adds	r7, #12
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec6:	4770      	bx	lr

08017ec8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017ec8:	b480      	push	{r7}
 8017eca:	b085      	sub	sp, #20
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
	return 0;
 8017ed4:	2300      	movs	r3, #0
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3714      	adds	r7, #20
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr
	...

08017ee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017eec:	4b11      	ldr	r3, [pc, #68]	; (8017f34 <_sbrk+0x50>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d102      	bne.n	8017efa <_sbrk+0x16>
		heap_end = &end;
 8017ef4:	4b0f      	ldr	r3, [pc, #60]	; (8017f34 <_sbrk+0x50>)
 8017ef6:	4a10      	ldr	r2, [pc, #64]	; (8017f38 <_sbrk+0x54>)
 8017ef8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017efa:	4b0e      	ldr	r3, [pc, #56]	; (8017f34 <_sbrk+0x50>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8017f00:	4b0c      	ldr	r3, [pc, #48]	; (8017f34 <_sbrk+0x50>)
 8017f02:	681a      	ldr	r2, [r3, #0]
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	4413      	add	r3, r2
 8017f08:	466a      	mov	r2, sp
 8017f0a:	4293      	cmp	r3, r2
 8017f0c:	d907      	bls.n	8017f1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8017f0e:	f007 f9fb 	bl	801f308 <__errno>
 8017f12:	4602      	mov	r2, r0
 8017f14:	230c      	movs	r3, #12
 8017f16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8017f18:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1c:	e006      	b.n	8017f2c <_sbrk+0x48>
	}

	heap_end += incr;
 8017f1e:	4b05      	ldr	r3, [pc, #20]	; (8017f34 <_sbrk+0x50>)
 8017f20:	681a      	ldr	r2, [r3, #0]
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	4413      	add	r3, r2
 8017f26:	4a03      	ldr	r2, [pc, #12]	; (8017f34 <_sbrk+0x50>)
 8017f28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8017f2a:	68fb      	ldr	r3, [r7, #12]
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3710      	adds	r7, #16
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	20009a70 	.word	0x20009a70
 8017f38:	2000a798 	.word	0x2000a798

08017f3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017f40:	4b15      	ldr	r3, [pc, #84]	; (8017f98 <SystemInit+0x5c>)
 8017f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f46:	4a14      	ldr	r2, [pc, #80]	; (8017f98 <SystemInit+0x5c>)
 8017f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8017f50:	4b12      	ldr	r3, [pc, #72]	; (8017f9c <SystemInit+0x60>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	4a11      	ldr	r2, [pc, #68]	; (8017f9c <SystemInit+0x60>)
 8017f56:	f043 0301 	orr.w	r3, r3, #1
 8017f5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8017f5c:	4b0f      	ldr	r3, [pc, #60]	; (8017f9c <SystemInit+0x60>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8017f62:	4b0e      	ldr	r3, [pc, #56]	; (8017f9c <SystemInit+0x60>)
 8017f64:	681a      	ldr	r2, [r3, #0]
 8017f66:	490d      	ldr	r1, [pc, #52]	; (8017f9c <SystemInit+0x60>)
 8017f68:	4b0d      	ldr	r3, [pc, #52]	; (8017fa0 <SystemInit+0x64>)
 8017f6a:	4013      	ands	r3, r2
 8017f6c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8017f6e:	4b0b      	ldr	r3, [pc, #44]	; (8017f9c <SystemInit+0x60>)
 8017f70:	4a0c      	ldr	r2, [pc, #48]	; (8017fa4 <SystemInit+0x68>)
 8017f72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8017f74:	4b09      	ldr	r3, [pc, #36]	; (8017f9c <SystemInit+0x60>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	4a08      	ldr	r2, [pc, #32]	; (8017f9c <SystemInit+0x60>)
 8017f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8017f7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8017f80:	4b06      	ldr	r3, [pc, #24]	; (8017f9c <SystemInit+0x60>)
 8017f82:	2200      	movs	r2, #0
 8017f84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017f86:	4b04      	ldr	r3, [pc, #16]	; (8017f98 <SystemInit+0x5c>)
 8017f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017f8c:	609a      	str	r2, [r3, #8]
#endif
}
 8017f8e:	bf00      	nop
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	e000ed00 	.word	0xe000ed00
 8017f9c:	40023800 	.word	0x40023800
 8017fa0:	fef6ffff 	.word	0xfef6ffff
 8017fa4:	24003010 	.word	0x24003010

08017fa8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8017fac:	2201      	movs	r2, #1
 8017fae:	490e      	ldr	r1, [pc, #56]	; (8017fe8 <MX_USB_HOST_Init+0x40>)
 8017fb0:	480e      	ldr	r0, [pc, #56]	; (8017fec <MX_USB_HOST_Init+0x44>)
 8017fb2:	f7f4 fd11 	bl	800c9d8 <USBH_Init>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d001      	beq.n	8017fc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8017fbc:	f7fe fdd6 	bl	8016b6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8017fc0:	490b      	ldr	r1, [pc, #44]	; (8017ff0 <MX_USB_HOST_Init+0x48>)
 8017fc2:	480a      	ldr	r0, [pc, #40]	; (8017fec <MX_USB_HOST_Init+0x44>)
 8017fc4:	f7f4 fda3 	bl	800cb0e <USBH_RegisterClass>
 8017fc8:	4603      	mov	r3, r0
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d001      	beq.n	8017fd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8017fce:	f7fe fdcd 	bl	8016b6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8017fd2:	4806      	ldr	r0, [pc, #24]	; (8017fec <MX_USB_HOST_Init+0x44>)
 8017fd4:	f7f4 fe28 	bl	800cc28 <USBH_Start>
 8017fd8:	4603      	mov	r3, r0
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d001      	beq.n	8017fe2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8017fde:	f7fe fdc5 	bl	8016b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8017fe2:	bf00      	nop
 8017fe4:	bd80      	pop	{r7, pc}
 8017fe6:	bf00      	nop
 8017fe8:	08017ff5 	.word	0x08017ff5
 8017fec:	2000a0f8 	.word	0x2000a0f8
 8017ff0:	2000002c 	.word	0x2000002c

08017ff4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b083      	sub	sp, #12
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018000:	78fb      	ldrb	r3, [r7, #3]
 8018002:	3b01      	subs	r3, #1
 8018004:	2b04      	cmp	r3, #4
 8018006:	d819      	bhi.n	801803c <USBH_UserProcess+0x48>
 8018008:	a201      	add	r2, pc, #4	; (adr r2, 8018010 <USBH_UserProcess+0x1c>)
 801800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801800e:	bf00      	nop
 8018010:	0801803d 	.word	0x0801803d
 8018014:	0801802d 	.word	0x0801802d
 8018018:	0801803d 	.word	0x0801803d
 801801c:	08018035 	.word	0x08018035
 8018020:	08018025 	.word	0x08018025
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018024:	4b09      	ldr	r3, [pc, #36]	; (801804c <USBH_UserProcess+0x58>)
 8018026:	2203      	movs	r2, #3
 8018028:	701a      	strb	r2, [r3, #0]
  break;
 801802a:	e008      	b.n	801803e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801802c:	4b07      	ldr	r3, [pc, #28]	; (801804c <USBH_UserProcess+0x58>)
 801802e:	2202      	movs	r2, #2
 8018030:	701a      	strb	r2, [r3, #0]
  break;
 8018032:	e004      	b.n	801803e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018034:	4b05      	ldr	r3, [pc, #20]	; (801804c <USBH_UserProcess+0x58>)
 8018036:	2201      	movs	r2, #1
 8018038:	701a      	strb	r2, [r3, #0]
  break;
 801803a:	e000      	b.n	801803e <USBH_UserProcess+0x4a>

  default:
  break;
 801803c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801803e:	bf00      	nop
 8018040:	370c      	adds	r7, #12
 8018042:	46bd      	mov	sp, r7
 8018044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018048:	4770      	bx	lr
 801804a:	bf00      	nop
 801804c:	20009a74 	.word	0x20009a74

08018050 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b08a      	sub	sp, #40	; 0x28
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018058:	f107 0314 	add.w	r3, r7, #20
 801805c:	2200      	movs	r2, #0
 801805e:	601a      	str	r2, [r3, #0]
 8018060:	605a      	str	r2, [r3, #4]
 8018062:	609a      	str	r2, [r3, #8]
 8018064:	60da      	str	r2, [r3, #12]
 8018066:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018070:	d13c      	bne.n	80180ec <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018072:	4b20      	ldr	r3, [pc, #128]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 8018074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018076:	4a1f      	ldr	r2, [pc, #124]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 8018078:	f043 0301 	orr.w	r3, r3, #1
 801807c:	6313      	str	r3, [r2, #48]	; 0x30
 801807e:	4b1d      	ldr	r3, [pc, #116]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 8018080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018082:	f003 0301 	and.w	r3, r3, #1
 8018086:	613b      	str	r3, [r7, #16]
 8018088:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801808a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801808e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018090:	2302      	movs	r3, #2
 8018092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018094:	2300      	movs	r3, #0
 8018096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018098:	2303      	movs	r3, #3
 801809a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801809c:	230a      	movs	r3, #10
 801809e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80180a0:	f107 0314 	add.w	r3, r7, #20
 80180a4:	4619      	mov	r1, r3
 80180a6:	4814      	ldr	r0, [pc, #80]	; (80180f8 <HAL_HCD_MspInit+0xa8>)
 80180a8:	f7ea fb52 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80180ac:	4b11      	ldr	r3, [pc, #68]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180b0:	4a10      	ldr	r2, [pc, #64]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180b6:	6353      	str	r3, [r2, #52]	; 0x34
 80180b8:	4b0e      	ldr	r3, [pc, #56]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80180bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80180c0:	60fb      	str	r3, [r7, #12]
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	4b0b      	ldr	r3, [pc, #44]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180c8:	4a0a      	ldr	r2, [pc, #40]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80180ce:	6453      	str	r3, [r2, #68]	; 0x44
 80180d0:	4b08      	ldr	r3, [pc, #32]	; (80180f4 <HAL_HCD_MspInit+0xa4>)
 80180d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80180d8:	60bb      	str	r3, [r7, #8]
 80180da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80180dc:	2200      	movs	r2, #0
 80180de:	2105      	movs	r1, #5
 80180e0:	2043      	movs	r0, #67	; 0x43
 80180e2:	f7e9 f8a3 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80180e6:	2043      	movs	r0, #67	; 0x43
 80180e8:	f7e9 f8bc 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80180ec:	bf00      	nop
 80180ee:	3728      	adds	r7, #40	; 0x28
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bd80      	pop	{r7, pc}
 80180f4:	40023800 	.word	0x40023800
 80180f8:	40020000 	.word	0x40020000

080180fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b082      	sub	sp, #8
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801810a:	4618      	mov	r0, r3
 801810c:	f7f5 f8df 	bl	800d2ce <USBH_LL_IncTimer>
}
 8018110:	bf00      	nop
 8018112:	3708      	adds	r7, #8
 8018114:	46bd      	mov	sp, r7
 8018116:	bd80      	pop	{r7, pc}

08018118 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018126:	4618      	mov	r0, r3
 8018128:	f7f5 f924 	bl	800d374 <USBH_LL_Connect>
}
 801812c:	bf00      	nop
 801812e:	3708      	adds	r7, #8
 8018130:	46bd      	mov	sp, r7
 8018132:	bd80      	pop	{r7, pc}

08018134 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b082      	sub	sp, #8
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018142:	4618      	mov	r0, r3
 8018144:	f7f5 f94a 	bl	800d3dc <USBH_LL_Disconnect>
}
 8018148:	bf00      	nop
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}

08018150 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	460b      	mov	r3, r1
 801815a:	70fb      	strb	r3, [r7, #3]
 801815c:	4613      	mov	r3, r2
 801815e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018166:	4618      	mov	r0, r3
 8018168:	f7f5 f988 	bl	800d47c <USBH_LL_NotifyURBChange>
#endif
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8018182:	4618      	mov	r0, r3
 8018184:	f7f5 f8cd 	bl	800d322 <USBH_LL_PortEnabled>
} 
 8018188:	bf00      	nop
 801818a:	3708      	adds	r7, #8
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801819e:	4618      	mov	r0, r3
 80181a0:	f7f5 f8cd 	bl	800d33e <USBH_LL_PortDisabled>
} 
 80181a4:	bf00      	nop
 80181a6:	3708      	adds	r7, #8
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80181ba:	2b01      	cmp	r3, #1
 80181bc:	d12a      	bne.n	8018214 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80181be:	4a18      	ldr	r2, [pc, #96]	; (8018220 <USBH_LL_Init+0x74>)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	4a15      	ldr	r2, [pc, #84]	; (8018220 <USBH_LL_Init+0x74>)
 80181ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181ce:	4b14      	ldr	r3, [pc, #80]	; (8018220 <USBH_LL_Init+0x74>)
 80181d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80181d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80181d6:	4b12      	ldr	r3, [pc, #72]	; (8018220 <USBH_LL_Init+0x74>)
 80181d8:	2208      	movs	r2, #8
 80181da:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80181dc:	4b10      	ldr	r3, [pc, #64]	; (8018220 <USBH_LL_Init+0x74>)
 80181de:	2203      	movs	r2, #3
 80181e0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80181e2:	4b0f      	ldr	r3, [pc, #60]	; (8018220 <USBH_LL_Init+0x74>)
 80181e4:	2200      	movs	r2, #0
 80181e6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80181e8:	4b0d      	ldr	r3, [pc, #52]	; (8018220 <USBH_LL_Init+0x74>)
 80181ea:	2202      	movs	r2, #2
 80181ec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181ee:	4b0c      	ldr	r3, [pc, #48]	; (8018220 <USBH_LL_Init+0x74>)
 80181f0:	2200      	movs	r2, #0
 80181f2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80181f4:	480a      	ldr	r0, [pc, #40]	; (8018220 <USBH_LL_Init+0x74>)
 80181f6:	f7ea fd90 	bl	8002d1a <HAL_HCD_Init>
 80181fa:	4603      	mov	r3, r0
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d001      	beq.n	8018204 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8018200:	f7fe fcb4 	bl	8016b6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8018204:	4806      	ldr	r0, [pc, #24]	; (8018220 <USBH_LL_Init+0x74>)
 8018206:	f7eb f97f 	bl	8003508 <HAL_HCD_GetCurrentFrame>
 801820a:	4603      	mov	r3, r0
 801820c:	4619      	mov	r1, r3
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f7f5 f84e 	bl	800d2b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8018214:	2300      	movs	r3, #0
}
 8018216:	4618      	mov	r0, r3
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	2000a4d0 	.word	0x2000a4d0

08018224 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801822c:	2300      	movs	r3, #0
 801822e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018230:	2300      	movs	r3, #0
 8018232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801823a:	4618      	mov	r0, r3
 801823c:	f7eb f8ec 	bl	8003418 <HAL_HCD_Start>
 8018240:	4603      	mov	r3, r0
 8018242:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018244:	7bfb      	ldrb	r3, [r7, #15]
 8018246:	4618      	mov	r0, r3
 8018248:	f000 f95c 	bl	8018504 <USBH_Get_USB_Status>
 801824c:	4603      	mov	r3, r0
 801824e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018250:	7bbb      	ldrb	r3, [r7, #14]
}
 8018252:	4618      	mov	r0, r3
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}

0801825a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801825a:	b580      	push	{r7, lr}
 801825c:	b084      	sub	sp, #16
 801825e:	af00      	add	r7, sp, #0
 8018260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018262:	2300      	movs	r3, #0
 8018264:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018266:	2300      	movs	r3, #0
 8018268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018270:	4618      	mov	r0, r3
 8018272:	f7eb f8f4 	bl	800345e <HAL_HCD_Stop>
 8018276:	4603      	mov	r3, r0
 8018278:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801827a:	7bfb      	ldrb	r3, [r7, #15]
 801827c:	4618      	mov	r0, r3
 801827e:	f000 f941 	bl	8018504 <USBH_Get_USB_Status>
 8018282:	4603      	mov	r3, r0
 8018284:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8018286:	7bbb      	ldrb	r3, [r7, #14]
}
 8018288:	4618      	mov	r0, r3
 801828a:	3710      	adds	r7, #16
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}

08018290 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018298:	2301      	movs	r3, #1
 801829a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7eb f93e 	bl	8003524 <HAL_HCD_GetCurrentSpeed>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b01      	cmp	r3, #1
 80182ac:	d007      	beq.n	80182be <USBH_LL_GetSpeed+0x2e>
 80182ae:	2b01      	cmp	r3, #1
 80182b0:	d302      	bcc.n	80182b8 <USBH_LL_GetSpeed+0x28>
 80182b2:	2b02      	cmp	r3, #2
 80182b4:	d006      	beq.n	80182c4 <USBH_LL_GetSpeed+0x34>
 80182b6:	e008      	b.n	80182ca <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80182b8:	2300      	movs	r3, #0
 80182ba:	73fb      	strb	r3, [r7, #15]
    break;
 80182bc:	e008      	b.n	80182d0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80182be:	2301      	movs	r3, #1
 80182c0:	73fb      	strb	r3, [r7, #15]
    break;
 80182c2:	e005      	b.n	80182d0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80182c4:	2302      	movs	r3, #2
 80182c6:	73fb      	strb	r3, [r7, #15]
    break;
 80182c8:	e002      	b.n	80182d0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80182ca:	2301      	movs	r3, #1
 80182cc:	73fb      	strb	r3, [r7, #15]
    break;
 80182ce:	bf00      	nop
  }
  return  speed;
 80182d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80182d2:	4618      	mov	r0, r3
 80182d4:	3710      	adds	r7, #16
 80182d6:	46bd      	mov	sp, r7
 80182d8:	bd80      	pop	{r7, pc}

080182da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80182da:	b580      	push	{r7, lr}
 80182dc:	b084      	sub	sp, #16
 80182de:	af00      	add	r7, sp, #0
 80182e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182e2:	2300      	movs	r3, #0
 80182e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80182e6:	2300      	movs	r3, #0
 80182e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7eb f8d1 	bl	8003498 <HAL_HCD_ResetPort>
 80182f6:	4603      	mov	r3, r0
 80182f8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80182fa:	7bfb      	ldrb	r3, [r7, #15]
 80182fc:	4618      	mov	r0, r3
 80182fe:	f000 f901 	bl	8018504 <USBH_Get_USB_Status>
 8018302:	4603      	mov	r3, r0
 8018304:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018306:	7bbb      	ldrb	r3, [r7, #14]
}
 8018308:	4618      	mov	r0, r3
 801830a:	3710      	adds	r7, #16
 801830c:	46bd      	mov	sp, r7
 801830e:	bd80      	pop	{r7, pc}

08018310 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b082      	sub	sp, #8
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
 8018318:	460b      	mov	r3, r1
 801831a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018322:	78fa      	ldrb	r2, [r7, #3]
 8018324:	4611      	mov	r1, r2
 8018326:	4618      	mov	r0, r3
 8018328:	f7eb f8d9 	bl	80034de <HAL_HCD_HC_GetXferCount>
 801832c:	4603      	mov	r3, r0
}
 801832e:	4618      	mov	r0, r3
 8018330:	3708      	adds	r7, #8
 8018332:	46bd      	mov	sp, r7
 8018334:	bd80      	pop	{r7, pc}

08018336 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018336:	b590      	push	{r4, r7, lr}
 8018338:	b089      	sub	sp, #36	; 0x24
 801833a:	af04      	add	r7, sp, #16
 801833c:	6078      	str	r0, [r7, #4]
 801833e:	4608      	mov	r0, r1
 8018340:	4611      	mov	r1, r2
 8018342:	461a      	mov	r2, r3
 8018344:	4603      	mov	r3, r0
 8018346:	70fb      	strb	r3, [r7, #3]
 8018348:	460b      	mov	r3, r1
 801834a:	70bb      	strb	r3, [r7, #2]
 801834c:	4613      	mov	r3, r2
 801834e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018350:	2300      	movs	r3, #0
 8018352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018354:	2300      	movs	r3, #0
 8018356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801835e:	787c      	ldrb	r4, [r7, #1]
 8018360:	78ba      	ldrb	r2, [r7, #2]
 8018362:	78f9      	ldrb	r1, [r7, #3]
 8018364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018366:	9302      	str	r3, [sp, #8]
 8018368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801836c:	9301      	str	r3, [sp, #4]
 801836e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018372:	9300      	str	r3, [sp, #0]
 8018374:	4623      	mov	r3, r4
 8018376:	f7ea fd26 	bl	8002dc6 <HAL_HCD_HC_Init>
 801837a:	4603      	mov	r3, r0
 801837c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801837e:	7bfb      	ldrb	r3, [r7, #15]
 8018380:	4618      	mov	r0, r3
 8018382:	f000 f8bf 	bl	8018504 <USBH_Get_USB_Status>
 8018386:	4603      	mov	r3, r0
 8018388:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801838a:	7bbb      	ldrb	r3, [r7, #14]
}
 801838c:	4618      	mov	r0, r3
 801838e:	3714      	adds	r7, #20
 8018390:	46bd      	mov	sp, r7
 8018392:	bd90      	pop	{r4, r7, pc}

08018394 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b084      	sub	sp, #16
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	460b      	mov	r3, r1
 801839e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183a0:	2300      	movs	r3, #0
 80183a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80183a4:	2300      	movs	r3, #0
 80183a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80183ae:	78fa      	ldrb	r2, [r7, #3]
 80183b0:	4611      	mov	r1, r2
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7ea fd9f 	bl	8002ef6 <HAL_HCD_HC_Halt>
 80183b8:	4603      	mov	r3, r0
 80183ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80183bc:	7bfb      	ldrb	r3, [r7, #15]
 80183be:	4618      	mov	r0, r3
 80183c0:	f000 f8a0 	bl	8018504 <USBH_Get_USB_Status>
 80183c4:	4603      	mov	r3, r0
 80183c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80183c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3710      	adds	r7, #16
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}

080183d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80183d2:	b590      	push	{r4, r7, lr}
 80183d4:	b089      	sub	sp, #36	; 0x24
 80183d6:	af04      	add	r7, sp, #16
 80183d8:	6078      	str	r0, [r7, #4]
 80183da:	4608      	mov	r0, r1
 80183dc:	4611      	mov	r1, r2
 80183de:	461a      	mov	r2, r3
 80183e0:	4603      	mov	r3, r0
 80183e2:	70fb      	strb	r3, [r7, #3]
 80183e4:	460b      	mov	r3, r1
 80183e6:	70bb      	strb	r3, [r7, #2]
 80183e8:	4613      	mov	r3, r2
 80183ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183ec:	2300      	movs	r3, #0
 80183ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80183f0:	2300      	movs	r3, #0
 80183f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80183fa:	787c      	ldrb	r4, [r7, #1]
 80183fc:	78ba      	ldrb	r2, [r7, #2]
 80183fe:	78f9      	ldrb	r1, [r7, #3]
 8018400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018404:	9303      	str	r3, [sp, #12]
 8018406:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018408:	9302      	str	r3, [sp, #8]
 801840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840c:	9301      	str	r3, [sp, #4]
 801840e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018412:	9300      	str	r3, [sp, #0]
 8018414:	4623      	mov	r3, r4
 8018416:	f7ea fd91 	bl	8002f3c <HAL_HCD_HC_SubmitRequest>
 801841a:	4603      	mov	r3, r0
 801841c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801841e:	7bfb      	ldrb	r3, [r7, #15]
 8018420:	4618      	mov	r0, r3
 8018422:	f000 f86f 	bl	8018504 <USBH_Get_USB_Status>
 8018426:	4603      	mov	r3, r0
 8018428:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801842a:	7bbb      	ldrb	r3, [r7, #14]
}
 801842c:	4618      	mov	r0, r3
 801842e:	3714      	adds	r7, #20
 8018430:	46bd      	mov	sp, r7
 8018432:	bd90      	pop	{r4, r7, pc}

08018434 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b082      	sub	sp, #8
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
 801843c:	460b      	mov	r3, r1
 801843e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8018446:	78fa      	ldrb	r2, [r7, #3]
 8018448:	4611      	mov	r1, r2
 801844a:	4618      	mov	r0, r3
 801844c:	f7eb f832 	bl	80034b4 <HAL_HCD_HC_GetURBState>
 8018450:	4603      	mov	r3, r0
}
 8018452:	4618      	mov	r0, r3
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801845a:	b580      	push	{r7, lr}
 801845c:	b082      	sub	sp, #8
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
 8018462:	460b      	mov	r3, r1
 8018464:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801846c:	2b01      	cmp	r3, #1
 801846e:	d103      	bne.n	8018478 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8018470:	78fb      	ldrb	r3, [r7, #3]
 8018472:	4618      	mov	r0, r3
 8018474:	f000 f872 	bl	801855c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8018478:	20c8      	movs	r0, #200	; 0xc8
 801847a:	f7e8 fb69 	bl	8000b50 <HAL_Delay>
  return USBH_OK;
 801847e:	2300      	movs	r3, #0
}
 8018480:	4618      	mov	r0, r3
 8018482:	3708      	adds	r7, #8
 8018484:	46bd      	mov	sp, r7
 8018486:	bd80      	pop	{r7, pc}

08018488 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018488:	b480      	push	{r7}
 801848a:	b085      	sub	sp, #20
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
 8018490:	460b      	mov	r3, r1
 8018492:	70fb      	strb	r3, [r7, #3]
 8018494:	4613      	mov	r3, r2
 8018496:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801849e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80184a0:	78fa      	ldrb	r2, [r7, #3]
 80184a2:	68f9      	ldr	r1, [r7, #12]
 80184a4:	4613      	mov	r3, r2
 80184a6:	009b      	lsls	r3, r3, #2
 80184a8:	4413      	add	r3, r2
 80184aa:	00db      	lsls	r3, r3, #3
 80184ac:	440b      	add	r3, r1
 80184ae:	333b      	adds	r3, #59	; 0x3b
 80184b0:	781b      	ldrb	r3, [r3, #0]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d00a      	beq.n	80184cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80184b6:	78fa      	ldrb	r2, [r7, #3]
 80184b8:	68f9      	ldr	r1, [r7, #12]
 80184ba:	4613      	mov	r3, r2
 80184bc:	009b      	lsls	r3, r3, #2
 80184be:	4413      	add	r3, r2
 80184c0:	00db      	lsls	r3, r3, #3
 80184c2:	440b      	add	r3, r1
 80184c4:	3350      	adds	r3, #80	; 0x50
 80184c6:	78ba      	ldrb	r2, [r7, #2]
 80184c8:	701a      	strb	r2, [r3, #0]
 80184ca:	e009      	b.n	80184e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80184cc:	78fa      	ldrb	r2, [r7, #3]
 80184ce:	68f9      	ldr	r1, [r7, #12]
 80184d0:	4613      	mov	r3, r2
 80184d2:	009b      	lsls	r3, r3, #2
 80184d4:	4413      	add	r3, r2
 80184d6:	00db      	lsls	r3, r3, #3
 80184d8:	440b      	add	r3, r1
 80184da:	3351      	adds	r3, #81	; 0x51
 80184dc:	78ba      	ldrb	r2, [r7, #2]
 80184de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80184e0:	2300      	movs	r3, #0
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	3714      	adds	r7, #20
 80184e6:	46bd      	mov	sp, r7
 80184e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ec:	4770      	bx	lr

080184ee <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80184ee:	b580      	push	{r7, lr}
 80184f0:	b082      	sub	sp, #8
 80184f2:	af00      	add	r7, sp, #0
 80184f4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f7e8 fb2a 	bl	8000b50 <HAL_Delay>
}
 80184fc:	bf00      	nop
 80184fe:	3708      	adds	r7, #8
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}

08018504 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018504:	b480      	push	{r7}
 8018506:	b085      	sub	sp, #20
 8018508:	af00      	add	r7, sp, #0
 801850a:	4603      	mov	r3, r0
 801850c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801850e:	2300      	movs	r3, #0
 8018510:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018512:	79fb      	ldrb	r3, [r7, #7]
 8018514:	2b03      	cmp	r3, #3
 8018516:	d817      	bhi.n	8018548 <USBH_Get_USB_Status+0x44>
 8018518:	a201      	add	r2, pc, #4	; (adr r2, 8018520 <USBH_Get_USB_Status+0x1c>)
 801851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801851e:	bf00      	nop
 8018520:	08018531 	.word	0x08018531
 8018524:	08018537 	.word	0x08018537
 8018528:	0801853d 	.word	0x0801853d
 801852c:	08018543 	.word	0x08018543
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018530:	2300      	movs	r3, #0
 8018532:	73fb      	strb	r3, [r7, #15]
    break;
 8018534:	e00b      	b.n	801854e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018536:	2302      	movs	r3, #2
 8018538:	73fb      	strb	r3, [r7, #15]
    break;
 801853a:	e008      	b.n	801854e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801853c:	2301      	movs	r3, #1
 801853e:	73fb      	strb	r3, [r7, #15]
    break;
 8018540:	e005      	b.n	801854e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018542:	2302      	movs	r3, #2
 8018544:	73fb      	strb	r3, [r7, #15]
    break;
 8018546:	e002      	b.n	801854e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018548:	2302      	movs	r3, #2
 801854a:	73fb      	strb	r3, [r7, #15]
    break;
 801854c:	bf00      	nop
  }
  return usb_status;
 801854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018550:	4618      	mov	r0, r3
 8018552:	3714      	adds	r7, #20
 8018554:	46bd      	mov	sp, r7
 8018556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855a:	4770      	bx	lr

0801855c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 801855c:	b580      	push	{r7, lr}
 801855e:	b084      	sub	sp, #16
 8018560:	af00      	add	r7, sp, #0
 8018562:	4603      	mov	r3, r0
 8018564:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8018566:	79fb      	ldrb	r3, [r7, #7]
 8018568:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801856a:	79fb      	ldrb	r3, [r7, #7]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d102      	bne.n	8018576 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8018570:	2301      	movs	r3, #1
 8018572:	73fb      	strb	r3, [r7, #15]
 8018574:	e001      	b.n	801857a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8018576:	2300      	movs	r3, #0
 8018578:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801857a:	7bfb      	ldrb	r3, [r7, #15]
 801857c:	461a      	mov	r2, r3
 801857e:	2120      	movs	r1, #32
 8018580:	4803      	ldr	r0, [pc, #12]	; (8018590 <MX_DriverVbusFS+0x34>)
 8018582:	f7ea fbb1 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8018586:	bf00      	nop
 8018588:	3710      	adds	r7, #16
 801858a:	46bd      	mov	sp, r7
 801858c:	bd80      	pop	{r7, pc}
 801858e:	bf00      	nop
 8018590:	40020c00 	.word	0x40020c00

08018594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80185cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8018598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801859a:	e003      	b.n	80185a4 <LoopCopyDataInit>

0801859c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801859c:	4b0c      	ldr	r3, [pc, #48]	; (80185d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801859e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80185a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80185a2:	3104      	adds	r1, #4

080185a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80185a4:	480b      	ldr	r0, [pc, #44]	; (80185d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80185a6:	4b0c      	ldr	r3, [pc, #48]	; (80185d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80185a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80185aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80185ac:	d3f6      	bcc.n	801859c <CopyDataInit>
  ldr  r2, =_sbss
 80185ae:	4a0b      	ldr	r2, [pc, #44]	; (80185dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80185b0:	e002      	b.n	80185b8 <LoopFillZerobss>

080185b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80185b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80185b4:	f842 3b04 	str.w	r3, [r2], #4

080185b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80185b8:	4b09      	ldr	r3, [pc, #36]	; (80185e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80185ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80185bc:	d3f9      	bcc.n	80185b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80185be:	f7ff fcbd 	bl	8017f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80185c2:	f006 feb9 	bl	801f338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80185c6:	f7fd f9b5 	bl	8015934 <main>
  bx  lr    
 80185ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80185cc:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 80185d0:	08036800 	.word	0x08036800
  ldr  r0, =_sdata
 80185d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80185d8:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80185dc:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80185e0:	2000a798 	.word	0x2000a798

080185e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80185e4:	e7fe      	b.n	80185e4 <ADC_IRQHandler>

080185e6 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 80185e6:	b580      	push	{r7, lr}
 80185e8:	b082      	sub	sp, #8
 80185ea:	af00      	add	r7, sp, #0
 80185ec:	6078      	str	r0, [r7, #4]
 80185ee:	460b      	mov	r3, r1
 80185f0:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 80185f2:	887b      	ldrh	r3, [r7, #2]
 80185f4:	2b01      	cmp	r3, #1
 80185f6:	d007      	beq.n	8018608 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 80185f8:	2b02      	cmp	r3, #2
 80185fa:	d009      	beq.n	8018610 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d10b      	bne.n	8018618 <_ZN23ApplicationFontProvider7getFontEt+0x32>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 8018600:	f000 f898 	bl	8018734 <_Z23getFont_verdana_20_4bppv>
 8018604:	4603      	mov	r3, r0
 8018606:	e008      	b.n	801861a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8018608:	f000 f8d2 	bl	80187b0 <_Z23getFont_verdana_40_4bppv>
 801860c:	4603      	mov	r3, r0
 801860e:	e004      	b.n	801861a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
 8018610:	f000 f852 	bl	80186b8 <_Z23getFont_verdana_10_4bppv>
 8018614:	4603      	mov	r3, r0
 8018616:	e000      	b.n	801861a <_ZN23ApplicationFontProvider7getFontEt+0x34>
    default:
        return 0;
 8018618:	2300      	movs	r3, #0
    }
}
 801861a:	4618      	mov	r0, r3
 801861c:	3708      	adds	r7, #8
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
	...

08018624 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
 801862c:	4a04      	ldr	r2, [pc, #16]	; (8018640 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	601a      	str	r2, [r3, #0]
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	4618      	mov	r0, r3
 8018636:	370c      	adds	r7, #12
 8018638:	46bd      	mov	sp, r7
 801863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863e:	4770      	bx	lr
 8018640:	080220d8 	.word	0x080220d8

08018644 <_ZN8touchgfx4FontD0Ev>:
 8018644:	b580      	push	{r7, lr}
 8018646:	b082      	sub	sp, #8
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7ff ffe9 	bl	8018624 <_ZN8touchgfx4FontD1Ev>
 8018652:	2110      	movs	r1, #16
 8018654:	6878      	ldr	r0, [r7, #4]
 8018656:	f006 fe16 	bl	801f286 <_ZdlPvj>
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	4618      	mov	r0, r3
 801865e:	3708      	adds	r7, #8
 8018660:	46bd      	mov	sp, r7
 8018662:	bd80      	pop	{r7, pc}

08018664 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8018664:	b580      	push	{r7, lr}
 8018666:	b082      	sub	sp, #8
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
 801866c:	4a05      	ldr	r2, [pc, #20]	; (8018684 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	601a      	str	r2, [r3, #0]
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	4618      	mov	r0, r3
 8018676:	f7ff ffd5 	bl	8018624 <_ZN8touchgfx4FontD1Ev>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	4618      	mov	r0, r3
 801867e:	3708      	adds	r7, #8
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}
 8018684:	0802218c 	.word	0x0802218c

08018688 <_ZN8touchgfx9ConstFontD0Ev>:
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
 8018690:	6878      	ldr	r0, [r7, #4]
 8018692:	f7ff ffe7 	bl	8018664 <_ZN8touchgfx9ConstFontD1Ev>
 8018696:	2118      	movs	r1, #24
 8018698:	6878      	ldr	r0, [r7, #4]
 801869a:	f006 fdf4 	bl	801f286 <_ZdlPvj>
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	4618      	mov	r0, r3
 80186a2:	3708      	adds	r7, #8
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}

080186a8 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 80186a8:	b580      	push	{r7, lr}
 80186aa:	af00      	add	r7, sp, #0
 80186ac:	4801      	ldr	r0, [pc, #4]	; (80186b4 <__tcf_0+0xc>)
 80186ae:	f000 f8b5 	bl	801881c <_ZN8touchgfx17InternalFlashFontD1Ev>
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	20009a78 	.word	0x20009a78

080186b8 <_Z23getFont_verdana_10_4bppv>:
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b088      	sub	sp, #32
 80186bc:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 0, 10, 0, 4, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 0, 0);
 80186be:	4b13      	ldr	r3, [pc, #76]	; (801870c <_Z23getFont_verdana_10_4bppv+0x54>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	f003 0301 	and.w	r3, r3, #1
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d11b      	bne.n	8018702 <_Z23getFont_verdana_10_4bppv+0x4a>
 80186ca:	2300      	movs	r3, #0
 80186cc:	9307      	str	r3, [sp, #28]
 80186ce:	2300      	movs	r3, #0
 80186d0:	9306      	str	r3, [sp, #24]
 80186d2:	4b0f      	ldr	r3, [pc, #60]	; (8018710 <_Z23getFont_verdana_10_4bppv+0x58>)
 80186d4:	9305      	str	r3, [sp, #20]
 80186d6:	4b0f      	ldr	r3, [pc, #60]	; (8018714 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80186d8:	9304      	str	r3, [sp, #16]
 80186da:	2300      	movs	r3, #0
 80186dc:	9303      	str	r3, [sp, #12]
 80186de:	2300      	movs	r3, #0
 80186e0:	9302      	str	r3, [sp, #8]
 80186e2:	2304      	movs	r3, #4
 80186e4:	9301      	str	r3, [sp, #4]
 80186e6:	2300      	movs	r3, #0
 80186e8:	9300      	str	r3, [sp, #0]
 80186ea:	230a      	movs	r3, #10
 80186ec:	2200      	movs	r2, #0
 80186ee:	490a      	ldr	r1, [pc, #40]	; (8018718 <_Z23getFont_verdana_10_4bppv+0x60>)
 80186f0:	480a      	ldr	r0, [pc, #40]	; (801871c <_Z23getFont_verdana_10_4bppv+0x64>)
 80186f2:	f004 fb3b 	bl	801cd6c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80186f6:	4b05      	ldr	r3, [pc, #20]	; (801870c <_Z23getFont_verdana_10_4bppv+0x54>)
 80186f8:	2201      	movs	r2, #1
 80186fa:	601a      	str	r2, [r3, #0]
 80186fc:	4808      	ldr	r0, [pc, #32]	; (8018720 <_Z23getFont_verdana_10_4bppv+0x68>)
 80186fe:	f006 fdfd 	bl	801f2fc <atexit>
    return verdana_10_4bpp;
 8018702:	4b06      	ldr	r3, [pc, #24]	; (801871c <_Z23getFont_verdana_10_4bppv+0x64>)
}
 8018704:	4618      	mov	r0, r3
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	20009a98 	.word	0x20009a98
 8018710:	080228dc 	.word	0x080228dc
 8018714:	080228d0 	.word	0x080228d0
 8018718:	080228e8 	.word	0x080228e8
 801871c:	20009a78 	.word	0x20009a78
 8018720:	080186a9 	.word	0x080186a9

08018724 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 8018724:	b580      	push	{r7, lr}
 8018726:	af00      	add	r7, sp, #0
 8018728:	4801      	ldr	r0, [pc, #4]	; (8018730 <__tcf_1+0xc>)
 801872a:	f000 f877 	bl	801881c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801872e:	bd80      	pop	{r7, pc}
 8018730:	20009a9c 	.word	0x20009a9c

08018734 <_Z23getFont_verdana_20_4bppv>:
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b088      	sub	sp, #32
 8018738:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 0, 20, 0, 4, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 0, 0);
 801873a:	4b13      	ldr	r3, [pc, #76]	; (8018788 <_Z23getFont_verdana_20_4bppv+0x54>)
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f003 0301 	and.w	r3, r3, #1
 8018742:	2b00      	cmp	r3, #0
 8018744:	d11b      	bne.n	801877e <_Z23getFont_verdana_20_4bppv+0x4a>
 8018746:	2300      	movs	r3, #0
 8018748:	9307      	str	r3, [sp, #28]
 801874a:	2300      	movs	r3, #0
 801874c:	9306      	str	r3, [sp, #24]
 801874e:	4b0f      	ldr	r3, [pc, #60]	; (801878c <_Z23getFont_verdana_20_4bppv+0x58>)
 8018750:	9305      	str	r3, [sp, #20]
 8018752:	4b0f      	ldr	r3, [pc, #60]	; (8018790 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8018754:	9304      	str	r3, [sp, #16]
 8018756:	2300      	movs	r3, #0
 8018758:	9303      	str	r3, [sp, #12]
 801875a:	2300      	movs	r3, #0
 801875c:	9302      	str	r3, [sp, #8]
 801875e:	2304      	movs	r3, #4
 8018760:	9301      	str	r3, [sp, #4]
 8018762:	2300      	movs	r3, #0
 8018764:	9300      	str	r3, [sp, #0]
 8018766:	2314      	movs	r3, #20
 8018768:	2200      	movs	r2, #0
 801876a:	490a      	ldr	r1, [pc, #40]	; (8018794 <_Z23getFont_verdana_20_4bppv+0x60>)
 801876c:	480a      	ldr	r0, [pc, #40]	; (8018798 <_Z23getFont_verdana_20_4bppv+0x64>)
 801876e:	f004 fafd 	bl	801cd6c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8018772:	4b05      	ldr	r3, [pc, #20]	; (8018788 <_Z23getFont_verdana_20_4bppv+0x54>)
 8018774:	2201      	movs	r2, #1
 8018776:	601a      	str	r2, [r3, #0]
 8018778:	4808      	ldr	r0, [pc, #32]	; (801879c <_Z23getFont_verdana_20_4bppv+0x68>)
 801877a:	f006 fdbf 	bl	801f2fc <atexit>
    return verdana_20_4bpp;
 801877e:	4b06      	ldr	r3, [pc, #24]	; (8018798 <_Z23getFont_verdana_20_4bppv+0x64>)
}
 8018780:	4618      	mov	r0, r3
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}
 8018786:	bf00      	nop
 8018788:	20009abc 	.word	0x20009abc
 801878c:	080228e0 	.word	0x080228e0
 8018790:	080228d4 	.word	0x080228d4
 8018794:	080228f8 	.word	0x080228f8
 8018798:	20009a9c 	.word	0x20009a9c
 801879c:	08018725 	.word	0x08018725

080187a0 <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 80187a0:	b580      	push	{r7, lr}
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	4801      	ldr	r0, [pc, #4]	; (80187ac <__tcf_2+0xc>)
 80187a6:	f000 f839 	bl	801881c <_ZN8touchgfx17InternalFlashFontD1Ev>
 80187aa:	bd80      	pop	{r7, pc}
 80187ac:	20009ac0 	.word	0x20009ac0

080187b0 <_Z23getFont_verdana_40_4bppv>:
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b088      	sub	sp, #32
 80187b4:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 0, 40, 0, 4, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 0, 0);
 80187b6:	4b13      	ldr	r3, [pc, #76]	; (8018804 <_Z23getFont_verdana_40_4bppv+0x54>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f003 0301 	and.w	r3, r3, #1
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d11b      	bne.n	80187fa <_Z23getFont_verdana_40_4bppv+0x4a>
 80187c2:	2300      	movs	r3, #0
 80187c4:	9307      	str	r3, [sp, #28]
 80187c6:	2300      	movs	r3, #0
 80187c8:	9306      	str	r3, [sp, #24]
 80187ca:	4b0f      	ldr	r3, [pc, #60]	; (8018808 <_Z23getFont_verdana_40_4bppv+0x58>)
 80187cc:	9305      	str	r3, [sp, #20]
 80187ce:	4b0f      	ldr	r3, [pc, #60]	; (801880c <_Z23getFont_verdana_40_4bppv+0x5c>)
 80187d0:	9304      	str	r3, [sp, #16]
 80187d2:	2300      	movs	r3, #0
 80187d4:	9303      	str	r3, [sp, #12]
 80187d6:	2300      	movs	r3, #0
 80187d8:	9302      	str	r3, [sp, #8]
 80187da:	2304      	movs	r3, #4
 80187dc:	9301      	str	r3, [sp, #4]
 80187de:	2300      	movs	r3, #0
 80187e0:	9300      	str	r3, [sp, #0]
 80187e2:	2328      	movs	r3, #40	; 0x28
 80187e4:	2200      	movs	r2, #0
 80187e6:	490a      	ldr	r1, [pc, #40]	; (8018810 <_Z23getFont_verdana_40_4bppv+0x60>)
 80187e8:	480a      	ldr	r0, [pc, #40]	; (8018814 <_Z23getFont_verdana_40_4bppv+0x64>)
 80187ea:	f004 fabf 	bl	801cd6c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 80187ee:	4b05      	ldr	r3, [pc, #20]	; (8018804 <_Z23getFont_verdana_40_4bppv+0x54>)
 80187f0:	2201      	movs	r2, #1
 80187f2:	601a      	str	r2, [r3, #0]
 80187f4:	4808      	ldr	r0, [pc, #32]	; (8018818 <_Z23getFont_verdana_40_4bppv+0x68>)
 80187f6:	f006 fd81 	bl	801f2fc <atexit>
    return verdana_40_4bpp;
 80187fa:	4b06      	ldr	r3, [pc, #24]	; (8018814 <_Z23getFont_verdana_40_4bppv+0x64>)
}
 80187fc:	4618      	mov	r0, r3
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	20009ae0 	.word	0x20009ae0
 8018808:	080228e4 	.word	0x080228e4
 801880c:	080228d8 	.word	0x080228d8
 8018810:	08022908 	.word	0x08022908
 8018814:	20009ac0 	.word	0x20009ac0
 8018818:	080187a1 	.word	0x080187a1

0801881c <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
 8018822:	6078      	str	r0, [r7, #4]
 8018824:	4a05      	ldr	r2, [pc, #20]	; (801883c <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	601a      	str	r2, [r3, #0]
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	4618      	mov	r0, r3
 801882e:	f7ff ff19 	bl	8018664 <_ZN8touchgfx9ConstFontD1Ev>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	4618      	mov	r0, r3
 8018836:	3708      	adds	r7, #8
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}
 801883c:	08022220 	.word	0x08022220

08018840 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6878      	ldr	r0, [r7, #4]
 801884a:	f7ff ffe7 	bl	801881c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801884e:	2120      	movs	r1, #32
 8018850:	6878      	ldr	r0, [r7, #4]
 8018852:	f006 fd18 	bl	801f286 <_ZdlPvj>
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	4618      	mov	r0, r3
 801885a:	3708      	adds	r7, #8
 801885c:	46bd      	mov	sp, r7
 801885e:	bd80      	pop	{r7, pc}

08018860 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8018860:	b480      	push	{r7}
 8018862:	b083      	sub	sp, #12
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
 8018868:	6039      	str	r1, [r7, #0]
 801886a:	683b      	ldr	r3, [r7, #0]
 801886c:	4618      	mov	r0, r3
 801886e:	370c      	adds	r7, #12
 8018870:	46bd      	mov	sp, r7
 8018872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018876:	4770      	bx	lr

08018878 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8018878:	b480      	push	{r7}
 801887a:	b083      	sub	sp, #12
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8018880:	4a07      	ldr	r2, [pc, #28]	; (80188a0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	601a      	str	r2, [r3, #0]
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	2200      	movs	r2, #0
 801888a:	605a      	str	r2, [r3, #4]
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	2200      	movs	r2, #0
 8018890:	721a      	strb	r2, [r3, #8]
    {
    }
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	4618      	mov	r0, r3
 8018896:	370c      	adds	r7, #12
 8018898:	46bd      	mov	sp, r7
 801889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889e:	4770      	bx	lr
 80188a0:	08021250 	.word	0x08021250

080188a4 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 80188a4:	b480      	push	{r7}
 80188a6:	b083      	sub	sp, #12
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
    {
 80188ac:	4a04      	ldr	r2, [pc, #16]	; (80188c0 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	601a      	str	r2, [r3, #0]
    }
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	4618      	mov	r0, r3
 80188b6:	370c      	adds	r7, #12
 80188b8:	46bd      	mov	sp, r7
 80188ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188be:	4770      	bx	lr
 80188c0:	08021250 	.word	0x08021250

080188c4 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b082      	sub	sp, #8
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]
    }
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f7ff ffe9 	bl	80188a4 <_ZN8touchgfx10TransitionD1Ev>
 80188d2:	210c      	movs	r1, #12
 80188d4:	6878      	ldr	r0, [r7, #4]
 80188d6:	f006 fcd6 	bl	801f286 <_ZdlPvj>
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	4618      	mov	r0, r3
 80188de:	3708      	adds	r7, #8
 80188e0:	46bd      	mov	sp, r7
 80188e2:	bd80      	pop	{r7, pc}

080188e4 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 80188e4:	b480      	push	{r7}
 80188e6:	b083      	sub	sp, #12
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
 80188ec:	bf00      	nop
 80188ee:	370c      	adds	r7, #12
 80188f0:	46bd      	mov	sp, r7
 80188f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f6:	4770      	bx	lr

080188f8 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
 8018900:	bf00      	nop
 8018902:	370c      	adds	r7, #12
 8018904:	46bd      	mov	sp, r7
 8018906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890a:	4770      	bx	lr

0801890c <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801890c:	b480      	push	{r7}
 801890e:	b083      	sub	sp, #12
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
 8018914:	bf00      	nop
 8018916:	370c      	adds	r7, #12
 8018918:	46bd      	mov	sp, r7
 801891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801891e:	4770      	bx	lr

08018920 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8018920:	b480      	push	{r7}
 8018922:	b083      	sub	sp, #12
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	683a      	ldr	r2, [r7, #0]
 801892e:	605a      	str	r2, [r3, #4]
    }
 8018930:	bf00      	nop
 8018932:	370c      	adds	r7, #12
 8018934:	46bd      	mov	sp, r7
 8018936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893a:	4770      	bx	lr

0801893c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 801893c:	b580      	push	{r7, lr}
 801893e:	b082      	sub	sp, #8
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	4618      	mov	r0, r3
 8018948:	f003 f9cc 	bl	801bce4 <_ZN8touchgfx11ApplicationC1Ev>
 801894c:	4a09      	ldr	r2, [pc, #36]	; (8018974 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	601a      	str	r2, [r3, #0]
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	2200      	movs	r2, #0
 8018956:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	2200      	movs	r2, #0
 801895e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	4a04      	ldr	r2, [pc, #16]	; (8018978 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8018966:	6013      	str	r3, [r2, #0]
    }
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	4618      	mov	r0, r3
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	08020e0c 	.word	0x08020e0c
 8018978:	20009b70 	.word	0x20009b70

0801897c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b084      	sub	sp, #16
 8018980:	af00      	add	r7, sp, #0
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8018988:	f003 f98a 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801898c:	4603      	mov	r3, r0
 801898e:	4618      	mov	r0, r3
 8018990:	f003 f98c 	bl	801bcac <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d008      	beq.n	80189ae <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681a      	ldr	r2, [r3, #0]
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	330c      	adds	r3, #12
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	4610      	mov	r0, r2
 80189ac:	4798      	blx	r3
    }
    if (*currentTrans)
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d007      	beq.n	80189c6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681a      	ldr	r2, [r3, #0]
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	4610      	mov	r0, r2
 80189c4:	4798      	blx	r3
    }
    if (*currentScreen)
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d008      	beq.n	80189e0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	681a      	ldr	r2, [r3, #0]
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	3314      	adds	r3, #20
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	4610      	mov	r0, r2
 80189de:	4798      	blx	r3
    }
    if (*currentPresenter)
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d008      	beq.n	80189fa <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	681a      	ldr	r2, [r3, #0]
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	3304      	adds	r3, #4
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	4610      	mov	r0, r2
 80189f8:	4798      	blx	r3
    }
    if (*currentScreen)
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d007      	beq.n	8018a12 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	681a      	ldr	r2, [r3, #0]
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4610      	mov	r0, r2
 8018a10:	4798      	blx	r3
    }
    if (*currentPresenter)
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d008      	beq.n	8018a2c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8018a1a:	68bb      	ldr	r3, [r7, #8]
 8018a1c:	681a      	ldr	r2, [r3, #0]
 8018a1e:	68bb      	ldr	r3, [r7, #8]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	3308      	adds	r3, #8
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	4610      	mov	r0, r2
 8018a2a:	4798      	blx	r3
    }
}
 8018a2c:	bf00      	nop
 8018a2e:	3710      	adds	r7, #16
 8018a30:	46bd      	mov	sp, r7
 8018a32:	bd80      	pop	{r7, pc}

08018a34 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8018a34:	b580      	push	{r7, lr}
 8018a36:	b084      	sub	sp, #16
 8018a38:	af00      	add	r7, sp, #0
 8018a3a:	60f8      	str	r0, [r7, #12]
 8018a3c:	60b9      	str	r1, [r7, #8]
 8018a3e:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	330c      	adds	r3, #12
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	68f8      	ldr	r0, [r7, #12]
 8018a4a:	4798      	blx	r3
    newPresenter->activate();
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	68b8      	ldr	r0, [r7, #8]
 8018a54:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8018a56:	6879      	ldr	r1, [r7, #4]
 8018a58:	68f8      	ldr	r0, [r7, #12]
 8018a5a:	f004 f929 	bl	801ccb0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	3310      	adds	r3, #16
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	6878      	ldr	r0, [r7, #4]
 8018a68:	4798      	blx	r3

    Application::getInstance()->draw();
 8018a6a:	f003 f919 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 8018a6e:	4602      	mov	r2, r0
 8018a70:	6813      	ldr	r3, [r2, #0]
 8018a72:	3328      	adds	r3, #40	; 0x28
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	4610      	mov	r0, r2
 8018a78:	4798      	blx	r3
}
 8018a7a:	bf00      	nop
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}

08018a82 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8018a82:	b480      	push	{r7}
 8018a84:	b083      	sub	sp, #12
 8018a86:	af00      	add	r7, sp, #0
 8018a88:	6078      	str	r0, [r7, #4]
 8018a8a:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	683a      	ldr	r2, [r7, #0]
 8018a90:	601a      	str	r2, [r3, #0]
    }
 8018a92:	bf00      	nop
 8018a94:	370c      	adds	r7, #12
 8018a96:	46bd      	mov	sp, r7
 8018a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9c:	4770      	bx	lr
	...

08018aa0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7ff fee4 	bl	8018878 <_ZN8touchgfx10TransitionC1Ev>
 8018ab0:	4a03      	ldr	r2, [pc, #12]	; (8018ac0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	601a      	str	r2, [r3, #0]
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	4618      	mov	r0, r3
 8018aba:	3708      	adds	r7, #8
 8018abc:	46bd      	mov	sp, r7
 8018abe:	bd80      	pop	{r7, pc}
 8018ac0:	08021230 	.word	0x08021230

08018ac4 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b082      	sub	sp, #8
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	6078      	str	r0, [r7, #4]
 8018acc:	4a05      	ldr	r2, [pc, #20]	; (8018ae4 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	601a      	str	r2, [r3, #0]
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f7ff fee5 	bl	80188a4 <_ZN8touchgfx10TransitionD1Ev>
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	4618      	mov	r0, r3
 8018ade:	3708      	adds	r7, #8
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}
 8018ae4:	08021230 	.word	0x08021230

08018ae8 <_ZN8touchgfx12NoTransitionD0Ev>:
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	6878      	ldr	r0, [r7, #4]
 8018af2:	f7ff ffe7 	bl	8018ac4 <_ZN8touchgfx12NoTransitionD1Ev>
 8018af6:	210c      	movs	r1, #12
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f006 fbc4 	bl	801f286 <_ZdlPvj>
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	4618      	mov	r0, r3
 8018b02:	3708      	adds	r7, #8
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	2201      	movs	r2, #1
 8018b14:	721a      	strb	r2, [r3, #8]
    }
 8018b16:	bf00      	nop
 8018b18:	370c      	adds	r7, #12
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b20:	4770      	bx	lr

08018b22 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8018b22:	b480      	push	{r7}
 8018b24:	b083      	sub	sp, #12
 8018b26:	af00      	add	r7, sp, #0
 8018b28:	6078      	str	r0, [r7, #4]
 8018b2a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	683a      	ldr	r2, [r7, #0]
 8018b30:	605a      	str	r2, [r3, #4]
    }
 8018b32:	bf00      	nop
 8018b34:	370c      	adds	r7, #12
 8018b36:	46bd      	mov	sp, r7
 8018b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3c:	4770      	bx	lr
	...

08018b40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b084      	sub	sp, #16
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7ff fef4 	bl	801893c <_ZN8touchgfx14MVPApplicationC1Ev>
 8018b54:	4a0a      	ldr	r2, [pc, #40]	; (8018b80 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>)
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	601a      	str	r2, [r3, #0]
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8018b60:	4618      	mov	r0, r3
 8018b62:	f000 f919 	bl	8018d98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	68ba      	ldr	r2, [r7, #8]
 8018b72:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{

}
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3710      	adds	r7, #16
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	08020db8 	.word	0x08020db8

08018b84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	4618      	mov	r0, r3
 8018b92:	370c      	adds	r7, #12
 8018b94:	46bd      	mov	sp, r7
 8018b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9a:	4770      	bx	lr

08018b9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
 8018ba4:	6039      	str	r1, [r7, #0]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	683a      	ldr	r2, [r7, #0]
 8018baa:	4611      	mov	r1, r2
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7ff ffe9 	bl	8018b84 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8018bb2:	683b      	ldr	r3, [r7, #0]
 8018bb4:	685a      	ldr	r2, [r3, #4]
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	605a      	str	r2, [r3, #4]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	683a      	ldr	r2, [r7, #0]
 8018bbe:	3308      	adds	r3, #8
 8018bc0:	3208      	adds	r2, #8
 8018bc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3708      	adds	r7, #8
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}

08018bd4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8018bd4:	b590      	push	{r4, r7, lr}
 8018bd6:	b089      	sub	sp, #36	; 0x24
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8018be2:	4b10      	ldr	r3, [pc, #64]	; (8018c24 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8018be4:	61bb      	str	r3, [r7, #24]
 8018be6:	2300      	movs	r3, #0
 8018be8:	61fb      	str	r3, [r7, #28]
 8018bea:	f107 0008 	add.w	r0, r7, #8
 8018bee:	f107 0318 	add.w	r3, r7, #24
 8018bf2:	cb0c      	ldmia	r3, {r2, r3}
 8018bf4:	6879      	ldr	r1, [r7, #4]
 8018bf6:	f000 f8eb 	bl	8018dd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8018bfa:	f107 0308 	add.w	r3, r7, #8
 8018bfe:	4619      	mov	r1, r3
 8018c00:	4620      	mov	r0, r4
 8018c02:	f7ff ffcb 	bl	8018b9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8018c06:	f107 0308 	add.w	r3, r7, #8
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7fb f84a 	bl	8013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8018c1c:	bf00      	nop
 8018c1e:	3724      	adds	r7, #36	; 0x24
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd90      	pop	{r4, r7, pc}
 8018c24:	08018c29 	.word	0x08018c29

08018c28 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b084      	sub	sp, #16
 8018c2c:	af02      	add	r7, sp, #8
 8018c2e:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8018c3c:	461a      	mov	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018c44:	9300      	str	r3, [sp, #0]
 8018c46:	4b04      	ldr	r3, [pc, #16]	; (8018c58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8018c48:	4804      	ldr	r0, [pc, #16]	; (8018c5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8018c4a:	f000 f8e1 	bl	8018e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8018c4e:	bf00      	nop
 8018c50:	3708      	adds	r7, #8
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}
 8018c56:	bf00      	nop
 8018c58:	20009b6c 	.word	0x20009b6c
 8018c5c:	20009b68 	.word	0x20009b68

08018c60 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>:


void FrontendApplicationBase::gotoScreen1ScreenCoverTransitionWest()
{
 8018c60:	b590      	push	{r4, r7, lr}
 8018c62:	b089      	sub	sp, #36	; 0x24
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenCoverTransitionWestImpl);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8018c6e:	4b10      	ldr	r3, [pc, #64]	; (8018cb0 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv+0x50>)
 8018c70:	61bb      	str	r3, [r7, #24]
 8018c72:	2300      	movs	r3, #0
 8018c74:	61fb      	str	r3, [r7, #28]
 8018c76:	f107 0008 	add.w	r0, r7, #8
 8018c7a:	f107 0318 	add.w	r3, r7, #24
 8018c7e:	cb0c      	ldmia	r3, {r2, r3}
 8018c80:	6879      	ldr	r1, [r7, #4]
 8018c82:	f000 f8a5 	bl	8018dd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8018c86:	f107 0308 	add.w	r3, r7, #8
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	4620      	mov	r0, r4
 8018c8e:	f7ff ff85 	bl	8018b9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8018c92:	f107 0308 	add.w	r3, r7, #8
 8018c96:	4618      	mov	r0, r3
 8018c98:	f7fb f804 	bl	8013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8018ca8:	bf00      	nop
 8018caa:	3724      	adds	r7, #36	; 0x24
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd90      	pop	{r4, r7, pc}
 8018cb0:	08018cb5 	.word	0x08018cb5

08018cb4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenCoverTransitionWestImpl()
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b084      	sub	sp, #16
 8018cb8:	af02      	add	r7, sp, #8
 8018cba:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::CoverTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8018cc8:	461a      	mov	r2, r3
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018cd0:	9300      	str	r3, [sp, #0]
 8018cd2:	4b04      	ldr	r3, [pc, #16]	; (8018ce4 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x30>)
 8018cd4:	4804      	ldr	r0, [pc, #16]	; (8018ce8 <_ZN23FrontendApplicationBase40gotoScreen1ScreenCoverTransitionWestImplEv+0x34>)
 8018cd6:	f000 f953 	bl	8018f80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8018cda:	bf00      	nop
 8018cdc:	3708      	adds	r7, #8
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	20009b6c 	.word	0x20009b6c
 8018ce8:	20009b68 	.word	0x20009b68

08018cec <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEast()
{
 8018cec:	b590      	push	{r4, r7, lr}
 8018cee:	b089      	sub	sp, #36	; 0x24
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionEastImpl);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8018cfa:	4b10      	ldr	r3, [pc, #64]	; (8018d3c <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv+0x50>)
 8018cfc:	61bb      	str	r3, [r7, #24]
 8018cfe:	2300      	movs	r3, #0
 8018d00:	61fb      	str	r3, [r7, #28]
 8018d02:	f107 0008 	add.w	r0, r7, #8
 8018d06:	f107 0318 	add.w	r3, r7, #24
 8018d0a:	cb0c      	ldmia	r3, {r2, r3}
 8018d0c:	6879      	ldr	r1, [r7, #4]
 8018d0e:	f000 f85f 	bl	8018dd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8018d12:	f107 0308 	add.w	r3, r7, #8
 8018d16:	4619      	mov	r1, r3
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f7ff ff3f 	bl	8018b9c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8018d1e:	f107 0308 	add.w	r3, r7, #8
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7fa ffbe 	bl	8013ca4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8018d34:	bf00      	nop
 8018d36:	3724      	adds	r7, #36	; 0x24
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd90      	pop	{r4, r7, pc}
 8018d3c:	08018d41 	.word	0x08018d41

08018d40 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionEastImpl()
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af02      	add	r7, sp, #8
 8018d46:	6078      	str	r0, [r7, #4]
    makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8018d54:	461a      	mov	r2, r3
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018d5c:	9300      	str	r3, [sp, #0]
 8018d5e:	4b04      	ldr	r3, [pc, #16]	; (8018d70 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x30>)
 8018d60:	4804      	ldr	r0, [pc, #16]	; (8018d74 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionEastImplEv+0x34>)
 8018d62:	f000 f9c7 	bl	80190f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8018d66:	bf00      	nop
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}
 8018d6e:	bf00      	nop
 8018d70:	20009b6c 	.word	0x20009b6c
 8018d74:	20009b68 	.word	0x20009b68

08018d78 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8018d78:	b480      	push	{r7}
 8018d7a:	b083      	sub	sp, #12
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	4a04      	ldr	r2, [pc, #16]	; (8018d94 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	601a      	str	r2, [r3, #0]
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	370c      	adds	r7, #12
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d92:	4770      	bx	lr
 8018d94:	08020e48 	.word	0x08020e48

08018d98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 8018d98:	b580      	push	{r7, lr}
 8018d9a:	b082      	sub	sp, #8
 8018d9c:	af00      	add	r7, sp, #0
 8018d9e:	6078      	str	r0, [r7, #4]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7ff ffe8 	bl	8018d78 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018da8:	4a08      	ldr	r2, [pc, #32]	; (8018dcc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	601a      	str	r2, [r3, #0]
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	2200      	movs	r2, #0
 8018db2:	605a      	str	r2, [r3, #4]
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2200      	movs	r2, #0
 8018db8:	609a      	str	r2, [r3, #8]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	60da      	str	r2, [r3, #12]
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3708      	adds	r7, #8
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}
 8018dca:	bf00      	nop
 8018dcc:	08020df4 	.word	0x08020df4

08018dd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b084      	sub	sp, #16
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	60f8      	str	r0, [r7, #12]
 8018dd8:	60b9      	str	r1, [r7, #8]
 8018dda:	4639      	mov	r1, r7
 8018ddc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7ff ffc8 	bl	8018d78 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8018de8:	4a08      	ldr	r2, [pc, #32]	; (8018e0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	68ba      	ldr	r2, [r7, #8]
 8018df2:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	3308      	adds	r3, #8
 8018df8:	463a      	mov	r2, r7
 8018dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018dfe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	4618      	mov	r0, r3
 8018e06:	3710      	adds	r7, #16
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}
 8018e0c:	08020df4 	.word	0x08020df4

08018e10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8018e10:	b590      	push	{r4, r7, lr}
 8018e12:	b089      	sub	sp, #36	; 0x24
 8018e14:	af00      	add	r7, sp, #0
 8018e16:	60f8      	str	r0, [r7, #12]
 8018e18:	60b9      	str	r1, [r7, #8]
 8018e1a:	607a      	str	r2, [r7, #4]
 8018e1c:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	689a      	ldr	r2, [r3, #8]
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	689b      	ldr	r3, [r3, #8]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	3320      	adds	r3, #32
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	4610      	mov	r0, r2
 8018e2e:	4798      	blx	r3
 8018e30:	4603      	mov	r3, r0
 8018e32:	2bb3      	cmp	r3, #179	; 0xb3
 8018e34:	d805      	bhi.n	8018e42 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8018e36:	4b4d      	ldr	r3, [pc, #308]	; (8018f6c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 8018e38:	4a4d      	ldr	r2, [pc, #308]	; (8018f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018e3a:	21c2      	movs	r1, #194	; 0xc2
 8018e3c:	484d      	ldr	r0, [pc, #308]	; (8018f74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018e3e:	f006 fa3f 	bl	801f2c0 <__assert_func>
 8018e42:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	685a      	ldr	r2, [r3, #4]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	3320      	adds	r3, #32
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4610      	mov	r0, r2
 8018e54:	4798      	blx	r3
 8018e56:	4603      	mov	r3, r0
 8018e58:	2b0f      	cmp	r3, #15
 8018e5a:	d805      	bhi.n	8018e68 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8018e5c:	4b46      	ldr	r3, [pc, #280]	; (8018f78 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018e5e:	4a44      	ldr	r2, [pc, #272]	; (8018f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018e60:	21c3      	movs	r1, #195	; 0xc3
 8018e62:	4844      	ldr	r0, [pc, #272]	; (8018f74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018e64:	f006 fa2c 	bl	801f2c0 <__assert_func>
 8018e68:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	68da      	ldr	r2, [r3, #12]
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	68db      	ldr	r3, [r3, #12]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	3320      	adds	r3, #32
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	4610      	mov	r0, r2
 8018e7a:	4798      	blx	r3
 8018e7c:	4603      	mov	r3, r0
 8018e7e:	2b0b      	cmp	r3, #11
 8018e80:	d805      	bhi.n	8018e8e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8018e82:	4b3e      	ldr	r3, [pc, #248]	; (8018f7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8018e84:	4a3a      	ldr	r2, [pc, #232]	; (8018f70 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018e86:	21c4      	movs	r1, #196	; 0xc4
 8018e88:	483a      	ldr	r0, [pc, #232]	; (8018f74 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018e8a:	f006 fa19 	bl	801f2c0 <__assert_func>
 8018e8e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8018e90:	683a      	ldr	r2, [r7, #0]
 8018e92:	68b9      	ldr	r1, [r7, #8]
 8018e94:	68f8      	ldr	r0, [r7, #12]
 8018e96:	f7ff fd71 	bl	801897c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	68db      	ldr	r3, [r3, #12]
 8018e9e:	2100      	movs	r1, #0
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f000 f9e1 	bl	8019268 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	200c      	movs	r0, #12
 8018eac:	f7ff fcd8 	bl	8018860 <_ZnwjPv>
 8018eb0:	4604      	mov	r4, r0
 8018eb2:	2c00      	cmp	r4, #0
 8018eb4:	d004      	beq.n	8018ec0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7ff fdf2 	bl	8018aa0 <_ZN8touchgfx12NoTransitionC1Ev>
 8018ebc:	4623      	mov	r3, r4
 8018ebe:	e000      	b.n	8018ec2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8018ec0:	4623      	mov	r3, r4
 8018ec2:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	689b      	ldr	r3, [r3, #8]
 8018ec8:	2100      	movs	r1, #0
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f000 f9df 	bl	801928e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	4619      	mov	r1, r3
 8018ed4:	20b4      	movs	r0, #180	; 0xb4
 8018ed6:	f7ff fcc3 	bl	8018860 <_ZnwjPv>
 8018eda:	4604      	mov	r4, r0
 8018edc:	2c00      	cmp	r4, #0
 8018ede:	d004      	beq.n	8018eea <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f001 fe35 	bl	801ab50 <_ZN11Screen1ViewC1Ev>
 8018ee6:	4623      	mov	r3, r4
 8018ee8:	e000      	b.n	8018eec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8018eea:	4623      	mov	r3, r4
 8018eec:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	685b      	ldr	r3, [r3, #4]
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f000 f9dd 	bl	80192b4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8018efa:	4603      	mov	r3, r0
 8018efc:	4619      	mov	r1, r3
 8018efe:	2010      	movs	r0, #16
 8018f00:	f7ff fcae 	bl	8018860 <_ZnwjPv>
 8018f04:	4604      	mov	r4, r0
 8018f06:	2c00      	cmp	r4, #0
 8018f08:	d005      	beq.n	8018f16 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 8018f0a:	69b9      	ldr	r1, [r7, #24]
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	f001 fdc9 	bl	801aaa4 <_ZN16Screen1PresenterC1ER11Screen1View>
 8018f12:	4623      	mov	r3, r4
 8018f14:	e000      	b.n	8018f18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 8018f16:	4623      	mov	r3, r4
 8018f18:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	69fa      	ldr	r2, [r7, #28]
 8018f1e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8018f20:	68bb      	ldr	r3, [r7, #8]
 8018f22:	697a      	ldr	r2, [r7, #20]
 8018f24:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8018f26:	68fb      	ldr	r3, [r7, #12]
 8018f28:	69ba      	ldr	r2, [r7, #24]
 8018f2a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8018f2c:	697b      	ldr	r3, [r7, #20]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d002      	beq.n	8018f38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	3304      	adds	r3, #4
 8018f36:	e000      	b.n	8018f3a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8018f38:	2300      	movs	r3, #0
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f3e:	f7ff fda0 	bl	8018a82 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	3304      	adds	r3, #4
 8018f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7ff fdea 	bl	8018b22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	6979      	ldr	r1, [r7, #20]
 8018f52:	4618      	mov	r0, r3
 8018f54:	f000 f9c1 	bl	80192da <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 8018f58:	69fa      	ldr	r2, [r7, #28]
 8018f5a:	6979      	ldr	r1, [r7, #20]
 8018f5c:	69b8      	ldr	r0, [r7, #24]
 8018f5e:	f7ff fd69 	bl	8018a34 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8018f62:	697b      	ldr	r3, [r7, #20]
}
 8018f64:	4618      	mov	r0, r3
 8018f66:	3724      	adds	r7, #36	; 0x24
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	bd90      	pop	{r4, r7, pc}
 8018f6c:	0802066c 	.word	0x0802066c
 8018f70:	08021268 	.word	0x08021268
 8018f74:	080206fc 	.word	0x080206fc
 8018f78:	0802074c 	.word	0x0802074c
 8018f7c:	080207f0 	.word	0x080207f0

08018f80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8018f80:	b590      	push	{r4, r7, lr}
 8018f82:	b089      	sub	sp, #36	; 0x24
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
 8018f8c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	689a      	ldr	r2, [r3, #8]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	689b      	ldr	r3, [r3, #8]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	3320      	adds	r3, #32
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	4610      	mov	r0, r2
 8018f9e:	4798      	blx	r3
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	2bb3      	cmp	r3, #179	; 0xb3
 8018fa4:	d805      	bhi.n	8018fb2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8018fa6:	4b4e      	ldr	r3, [pc, #312]	; (80190e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8018fa8:	4a4e      	ldr	r2, [pc, #312]	; (80190e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018faa:	21c2      	movs	r1, #194	; 0xc2
 8018fac:	484e      	ldr	r0, [pc, #312]	; (80190e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018fae:	f006 f987 	bl	801f2c0 <__assert_func>
 8018fb2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	685a      	ldr	r2, [r3, #4]
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	3320      	adds	r3, #32
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	4610      	mov	r0, r2
 8018fc4:	4798      	blx	r3
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b0f      	cmp	r3, #15
 8018fca:	d805      	bhi.n	8018fd8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8018fcc:	4b47      	ldr	r3, [pc, #284]	; (80190ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8018fce:	4a45      	ldr	r2, [pc, #276]	; (80190e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018fd0:	21c3      	movs	r1, #195	; 0xc3
 8018fd2:	4845      	ldr	r0, [pc, #276]	; (80190e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018fd4:	f006 f974 	bl	801f2c0 <__assert_func>
 8018fd8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	68da      	ldr	r2, [r3, #12]
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	3320      	adds	r3, #32
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	4610      	mov	r0, r2
 8018fea:	4798      	blx	r3
 8018fec:	4603      	mov	r3, r0
 8018fee:	2b4f      	cmp	r3, #79	; 0x4f
 8018ff0:	d805      	bhi.n	8018ffe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8018ff2:	4b3f      	ldr	r3, [pc, #252]	; (80190f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8018ff4:	4a3b      	ldr	r2, [pc, #236]	; (80190e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8018ff6:	21c4      	movs	r1, #196	; 0xc4
 8018ff8:	483b      	ldr	r0, [pc, #236]	; (80190e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8018ffa:	f006 f961 	bl	801f2c0 <__assert_func>
 8018ffe:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8019000:	683a      	ldr	r2, [r7, #0]
 8019002:	68b9      	ldr	r1, [r7, #8]
 8019004:	68f8      	ldr	r0, [r7, #12]
 8019006:	f7ff fcb9 	bl	801897c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	68db      	ldr	r3, [r3, #12]
 801900e:	2100      	movs	r1, #0
 8019010:	4618      	mov	r0, r3
 8019012:	f000 f970 	bl	80192f6 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE3EEEEERT_t>
 8019016:	4603      	mov	r3, r0
 8019018:	4619      	mov	r1, r3
 801901a:	2050      	movs	r0, #80	; 0x50
 801901c:	f7ff fc20 	bl	8018860 <_ZnwjPv>
 8019020:	4604      	mov	r4, r0
 8019022:	2c00      	cmp	r4, #0
 8019024:	d005      	beq.n	8019032 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 8019026:	2114      	movs	r1, #20
 8019028:	4620      	mov	r0, r4
 801902a:	f000 f999 	bl	8019360 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh>
 801902e:	4623      	mov	r3, r4
 8019030:	e000      	b.n	8019034 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 8019032:	4623      	mov	r3, r4
 8019034:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	689b      	ldr	r3, [r3, #8]
 801903a:	2100      	movs	r1, #0
 801903c:	4618      	mov	r0, r3
 801903e:	f000 f926 	bl	801928e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8019042:	4603      	mov	r3, r0
 8019044:	4619      	mov	r1, r3
 8019046:	20b4      	movs	r0, #180	; 0xb4
 8019048:	f7ff fc0a 	bl	8018860 <_ZnwjPv>
 801904c:	4604      	mov	r4, r0
 801904e:	2c00      	cmp	r4, #0
 8019050:	d004      	beq.n	801905c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8019052:	4620      	mov	r0, r4
 8019054:	f001 fd7c 	bl	801ab50 <_ZN11Screen1ViewC1Ev>
 8019058:	4623      	mov	r3, r4
 801905a:	e000      	b.n	801905e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 801905c:	4623      	mov	r3, r4
 801905e:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	685b      	ldr	r3, [r3, #4]
 8019064:	2100      	movs	r1, #0
 8019066:	4618      	mov	r0, r3
 8019068:	f000 f924 	bl	80192b4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801906c:	4603      	mov	r3, r0
 801906e:	4619      	mov	r1, r3
 8019070:	2010      	movs	r0, #16
 8019072:	f7ff fbf5 	bl	8018860 <_ZnwjPv>
 8019076:	4604      	mov	r4, r0
 8019078:	2c00      	cmp	r4, #0
 801907a:	d005      	beq.n	8019088 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 801907c:	69b9      	ldr	r1, [r7, #24]
 801907e:	4620      	mov	r0, r4
 8019080:	f001 fd10 	bl	801aaa4 <_ZN16Screen1PresenterC1ER11Screen1View>
 8019084:	4623      	mov	r3, r4
 8019086:	e000      	b.n	801908a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 8019088:	4623      	mov	r3, r4
 801908a:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	69fa      	ldr	r2, [r7, #28]
 8019090:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8019092:	68bb      	ldr	r3, [r7, #8]
 8019094:	697a      	ldr	r2, [r7, #20]
 8019096:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	69ba      	ldr	r2, [r7, #24]
 801909c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d002      	beq.n	80190aa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 80190a4:	697b      	ldr	r3, [r7, #20]
 80190a6:	3304      	adds	r3, #4
 80190a8:	e000      	b.n	80190ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15CoverTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 80190aa:	2300      	movs	r3, #0
 80190ac:	4619      	mov	r1, r3
 80190ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190b0:	f7ff fce7 	bl	8018a82 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	3304      	adds	r3, #4
 80190b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7ff fd31 	bl	8018b22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	6979      	ldr	r1, [r7, #20]
 80190c4:	4618      	mov	r0, r3
 80190c6:	f000 f908 	bl	80192da <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 80190ca:	69fa      	ldr	r2, [r7, #28]
 80190cc:	6979      	ldr	r1, [r7, #20]
 80190ce:	69b8      	ldr	r0, [r7, #24]
 80190d0:	f7ff fcb0 	bl	8018a34 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 80190d4:	697b      	ldr	r3, [r7, #20]
}
 80190d6:	4618      	mov	r0, r3
 80190d8:	3724      	adds	r7, #36	; 0x24
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd90      	pop	{r4, r7, pc}
 80190de:	bf00      	nop
 80190e0:	0802066c 	.word	0x0802066c
 80190e4:	0802136c 	.word	0x0802136c
 80190e8:	080206fc 	.word	0x080206fc
 80190ec:	0802074c 	.word	0x0802074c
 80190f0:	080207f0 	.word	0x080207f0

080190f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80190f4:	b590      	push	{r4, r7, lr}
 80190f6:	b089      	sub	sp, #36	; 0x24
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	60f8      	str	r0, [r7, #12]
 80190fc:	60b9      	str	r1, [r7, #8]
 80190fe:	607a      	str	r2, [r7, #4]
 8019100:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	689a      	ldr	r2, [r3, #8]
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	689b      	ldr	r3, [r3, #8]
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	3320      	adds	r3, #32
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	4610      	mov	r0, r2
 8019112:	4798      	blx	r3
 8019114:	4603      	mov	r3, r0
 8019116:	2bb3      	cmp	r3, #179	; 0xb3
 8019118:	d805      	bhi.n	8019126 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 801911a:	4b4e      	ldr	r3, [pc, #312]	; (8019254 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801911c:	4a4e      	ldr	r2, [pc, #312]	; (8019258 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801911e:	21c2      	movs	r1, #194	; 0xc2
 8019120:	484e      	ldr	r0, [pc, #312]	; (801925c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8019122:	f006 f8cd 	bl	801f2c0 <__assert_func>
 8019126:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	685a      	ldr	r2, [r3, #4]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	685b      	ldr	r3, [r3, #4]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	3320      	adds	r3, #32
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	4610      	mov	r0, r2
 8019138:	4798      	blx	r3
 801913a:	4603      	mov	r3, r0
 801913c:	2b0f      	cmp	r3, #15
 801913e:	d805      	bhi.n	801914c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8019140:	4b47      	ldr	r3, [pc, #284]	; (8019260 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8019142:	4a45      	ldr	r2, [pc, #276]	; (8019258 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 8019144:	21c3      	movs	r1, #195	; 0xc3
 8019146:	4845      	ldr	r0, [pc, #276]	; (801925c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8019148:	f006 f8ba 	bl	801f2c0 <__assert_func>
 801914c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	68da      	ldr	r2, [r3, #12]
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	68db      	ldr	r3, [r3, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	3320      	adds	r3, #32
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4610      	mov	r0, r2
 801915e:	4798      	blx	r3
 8019160:	4603      	mov	r3, r0
 8019162:	2b57      	cmp	r3, #87	; 0x57
 8019164:	d805      	bhi.n	8019172 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8019166:	4b3f      	ldr	r3, [pc, #252]	; (8019264 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8019168:	4a3b      	ldr	r2, [pc, #236]	; (8019258 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801916a:	21c4      	movs	r1, #196	; 0xc4
 801916c:	483b      	ldr	r0, [pc, #236]	; (801925c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801916e:	f006 f8a7 	bl	801f2c0 <__assert_func>
 8019172:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 8019174:	683a      	ldr	r2, [r7, #0]
 8019176:	68b9      	ldr	r1, [r7, #8]
 8019178:	68f8      	ldr	r0, [r7, #12]
 801917a:	f7ff fbff 	bl	801897c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	68db      	ldr	r3, [r3, #12]
 8019182:	2100      	movs	r1, #0
 8019184:	4618      	mov	r0, r3
 8019186:	f000 f969 	bl	801945c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>
 801918a:	4603      	mov	r3, r0
 801918c:	4619      	mov	r1, r3
 801918e:	2058      	movs	r0, #88	; 0x58
 8019190:	f7ff fb66 	bl	8018860 <_ZnwjPv>
 8019194:	4604      	mov	r4, r0
 8019196:	2c00      	cmp	r4, #0
 8019198:	d005      	beq.n	80191a6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 801919a:	2114      	movs	r1, #20
 801919c:	4620      	mov	r0, r4
 801919e:	f000 f993 	bl	80194c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>
 80191a2:	4623      	mov	r3, r4
 80191a4:	e000      	b.n	80191a8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80191a6:	4623      	mov	r3, r4
 80191a8:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	689b      	ldr	r3, [r3, #8]
 80191ae:	2100      	movs	r1, #0
 80191b0:	4618      	mov	r0, r3
 80191b2:	f000 fa1d 	bl	80195f0 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 80191b6:	4603      	mov	r3, r0
 80191b8:	4619      	mov	r1, r3
 80191ba:	20b4      	movs	r0, #180	; 0xb4
 80191bc:	f7ff fb50 	bl	8018860 <_ZnwjPv>
 80191c0:	4604      	mov	r4, r0
 80191c2:	2c00      	cmp	r4, #0
 80191c4:	d004      	beq.n	80191d0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 80191c6:	4620      	mov	r0, r4
 80191c8:	f001 fd76 	bl	801acb8 <_ZN11Screen2ViewC1Ev>
 80191cc:	4623      	mov	r3, r4
 80191ce:	e000      	b.n	80191d2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 80191d0:	4623      	mov	r3, r4
 80191d2:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	685b      	ldr	r3, [r3, #4]
 80191d8:	2100      	movs	r1, #0
 80191da:	4618      	mov	r0, r3
 80191dc:	f000 fa1b 	bl	8019616 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 80191e0:	4603      	mov	r3, r0
 80191e2:	4619      	mov	r1, r3
 80191e4:	2010      	movs	r0, #16
 80191e6:	f7ff fb3b 	bl	8018860 <_ZnwjPv>
 80191ea:	4604      	mov	r4, r0
 80191ec:	2c00      	cmp	r4, #0
 80191ee:	d005      	beq.n	80191fc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 80191f0:	69b9      	ldr	r1, [r7, #24]
 80191f2:	4620      	mov	r0, r4
 80191f4:	f001 fd0a 	bl	801ac0c <_ZN16Screen2PresenterC1ER11Screen2View>
 80191f8:	4623      	mov	r3, r4
 80191fa:	e000      	b.n	80191fe <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 80191fc:	4623      	mov	r3, r4
 80191fe:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	69fa      	ldr	r2, [r7, #28]
 8019204:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8019206:	68bb      	ldr	r3, [r7, #8]
 8019208:	697a      	ldr	r2, [r7, #20]
 801920a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	69ba      	ldr	r2, [r7, #24]
 8019210:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8019212:	697b      	ldr	r3, [r7, #20]
 8019214:	2b00      	cmp	r3, #0
 8019216:	d002      	beq.n	801921e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8019218:	697b      	ldr	r3, [r7, #20]
 801921a:	3304      	adds	r3, #4
 801921c:	e000      	b.n	8019220 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801921e:	2300      	movs	r3, #0
 8019220:	4619      	mov	r1, r3
 8019222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019224:	f7ff fc2d 	bl	8018a82 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	3304      	adds	r3, #4
 801922c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801922e:	4618      	mov	r0, r3
 8019230:	f7ff fc77 	bl	8018b22 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8019234:	69bb      	ldr	r3, [r7, #24]
 8019236:	6979      	ldr	r1, [r7, #20]
 8019238:	4618      	mov	r0, r3
 801923a:	f000 f9ff 	bl	801963c <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801923e:	69fa      	ldr	r2, [r7, #28]
 8019240:	6979      	ldr	r1, [r7, #20]
 8019242:	69b8      	ldr	r0, [r7, #24]
 8019244:	f7ff fbf6 	bl	8018a34 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 8019248:	697b      	ldr	r3, [r7, #20]
}
 801924a:	4618      	mov	r0, r3
 801924c:	3724      	adds	r7, #36	; 0x24
 801924e:	46bd      	mov	sp, r7
 8019250:	bd90      	pop	{r4, r7, pc}
 8019252:	bf00      	nop
 8019254:	0802066c 	.word	0x0802066c
 8019258:	0802148c 	.word	0x0802148c
 801925c:	080206fc 	.word	0x080206fc
 8019260:	0802074c 	.word	0x0802074c
 8019264:	080207f0 	.word	0x080207f0

08019268 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 8019268:	b580      	push	{r7, lr}
 801926a:	b082      	sub	sp, #8
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	460b      	mov	r3, r1
 8019272:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	3324      	adds	r3, #36	; 0x24
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	887a      	ldrh	r2, [r7, #2]
 801927e:	4611      	mov	r1, r2
 8019280:	6878      	ldr	r0, [r7, #4]
 8019282:	4798      	blx	r3
 8019284:	4603      	mov	r3, r0
    }
 8019286:	4618      	mov	r0, r3
 8019288:	3708      	adds	r7, #8
 801928a:	46bd      	mov	sp, r7
 801928c:	bd80      	pop	{r7, pc}

0801928e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801928e:	b580      	push	{r7, lr}
 8019290:	b082      	sub	sp, #8
 8019292:	af00      	add	r7, sp, #0
 8019294:	6078      	str	r0, [r7, #4]
 8019296:	460b      	mov	r3, r1
 8019298:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	3324      	adds	r3, #36	; 0x24
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	887a      	ldrh	r2, [r7, #2]
 80192a4:	4611      	mov	r1, r2
 80192a6:	6878      	ldr	r0, [r7, #4]
 80192a8:	4798      	blx	r3
 80192aa:	4603      	mov	r3, r0
    }
 80192ac:	4618      	mov	r0, r3
 80192ae:	3708      	adds	r7, #8
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}

080192b4 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
 80192bc:	460b      	mov	r3, r1
 80192be:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	3324      	adds	r3, #36	; 0x24
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	887a      	ldrh	r2, [r7, #2]
 80192ca:	4611      	mov	r1, r2
 80192cc:	6878      	ldr	r0, [r7, #4]
 80192ce:	4798      	blx	r3
 80192d0:	4603      	mov	r3, r0
    }
 80192d2:	4618      	mov	r0, r3
 80192d4:	3708      	adds	r7, #8
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}

080192da <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 80192da:	b480      	push	{r7}
 80192dc:	b083      	sub	sp, #12
 80192de:	af00      	add	r7, sp, #0
 80192e0:	6078      	str	r0, [r7, #4]
 80192e2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	683a      	ldr	r2, [r7, #0]
 80192e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80192ea:	bf00      	nop
 80192ec:	370c      	adds	r7, #12
 80192ee:	46bd      	mov	sp, r7
 80192f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f4:	4770      	bx	lr

080192f6 <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 80192f6:	b580      	push	{r7, lr}
 80192f8:	b082      	sub	sp, #8
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	6078      	str	r0, [r7, #4]
 80192fe:	460b      	mov	r3, r1
 8019300:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	3324      	adds	r3, #36	; 0x24
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	887a      	ldrh	r2, [r7, #2]
 801930c:	4611      	mov	r1, r2
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	4798      	blx	r3
 8019312:	4603      	mov	r3, r0
    }
 8019314:	4618      	mov	r0, r3
 8019316:	3708      	adds	r7, #8
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	4a05      	ldr	r2, [pc, #20]	; (801933c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	601a      	str	r2, [r3, #0]
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	4618      	mov	r0, r3
 801932e:	f7f5 fdc1 	bl	800eeb4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	4618      	mov	r0, r3
 8019336:	3708      	adds	r7, #8
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}
 801933c:	080211d8 	.word	0x080211d8

08019340 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 8019340:	b580      	push	{r7, lr}
 8019342:	b082      	sub	sp, #8
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
 8019348:	6878      	ldr	r0, [r7, #4]
 801934a:	f7ff ffe7 	bl	801931c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801934e:	2110      	movs	r1, #16
 8019350:	6878      	ldr	r0, [r7, #4]
 8019352:	f005 ff98 	bl	801f286 <_ZdlPvj>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	4618      	mov	r0, r3
 801935a:	3708      	adds	r7, #8
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}

08019360 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    CoverTransition(const uint8_t transitionSteps = 20)
 8019360:	b590      	push	{r4, r7, lr}
 8019362:	b087      	sub	sp, #28
 8019364:	af02      	add	r7, sp, #8
 8019366:	6078      	str	r0, [r7, #4]
 8019368:	460b      	mov	r3, r1
 801936a:	70fb      	strb	r3, [r7, #3]
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          movedToPos(0),
          solid()
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	4618      	mov	r0, r3
 8019370:	f7ff fa82 	bl	8018878 <_ZN8touchgfx10TransitionC1Ev>
 8019374:	4a35      	ldr	r2, [pc, #212]	; (801944c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xec>)
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	601a      	str	r2, [r3, #0]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	f103 040c 	add.w	r4, r3, #12
 8019380:	4a33      	ldr	r2, [pc, #204]	; (8019450 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf0>)
 8019382:	f107 0308 	add.w	r3, r7, #8
 8019386:	e892 0003 	ldmia.w	r2, {r0, r1}
 801938a:	e883 0003 	stmia.w	r3, {r0, r1}
 801938e:	f107 0308 	add.w	r3, r7, #8
 8019392:	cb0c      	ldmia	r3, {r2, r3}
 8019394:	6879      	ldr	r1, [r7, #4]
 8019396:	4620      	mov	r0, r4
 8019398:	f000 f990 	bl	80196bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	2203      	movs	r2, #3
 80193a0:	771a      	strb	r2, [r3, #28]
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	78fa      	ldrb	r2, [r7, #3]
 80193a6:	775a      	strb	r2, [r3, #29]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2200      	movs	r2, #0
 80193ac:	779a      	strb	r2, [r3, #30]
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	2200      	movs	r2, #0
 80193b2:	845a      	strh	r2, [r3, #34]	; 0x22
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	2200      	movs	r2, #0
 80193b8:	849a      	strh	r2, [r3, #36]	; 0x24
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	3328      	adds	r3, #40	; 0x28
 80193be:	4618      	mov	r0, r3
 80193c0:	f000 f99c 	bl	80196fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>
    {
        switch (direction)
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	7f1b      	ldrb	r3, [r3, #28]
 80193c8:	2b03      	cmp	r3, #3
 80193ca:	d827      	bhi.n	801941c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xbc>
 80193cc:	a201      	add	r2, pc, #4	; (adr r2, 80193d4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0x74>)
 80193ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193d2:	bf00      	nop
 80193d4:	08019401 	.word	0x08019401
 80193d8:	0801940d 	.word	0x0801940d
 80193dc:	080193e5 	.word	0x080193e5
 80193e0:	080193f5 	.word	0x080193f5
        {
        case EAST:
            targetValue = -HAL::DISPLAY_WIDTH;
 80193e4:	4b1b      	ldr	r3, [pc, #108]	; (8019454 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf4>)
 80193e6:	881b      	ldrh	r3, [r3, #0]
 80193e8:	425b      	negs	r3, r3
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	b21a      	sxth	r2, r3
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	841a      	strh	r2, [r3, #32]
            break;
 80193f2:	e017      	b.n	8019424 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xc4>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 80193f4:	4b17      	ldr	r3, [pc, #92]	; (8019454 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf4>)
 80193f6:	881b      	ldrh	r3, [r3, #0]
 80193f8:	b21a      	sxth	r2, r3
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	841a      	strh	r2, [r3, #32]
            break;
 80193fe:	e011      	b.n	8019424 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xc4>
        case NORTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8019400:	4b15      	ldr	r3, [pc, #84]	; (8019458 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf8>)
 8019402:	881b      	ldrh	r3, [r3, #0]
 8019404:	b21a      	sxth	r2, r3
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	841a      	strh	r2, [r3, #32]
            break;
 801940a:	e00b      	b.n	8019424 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xc4>
        case SOUTH:
            targetValue = -HAL::DISPLAY_HEIGHT;
 801940c:	4b12      	ldr	r3, [pc, #72]	; (8019458 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf8>)
 801940e:	881b      	ldrh	r3, [r3, #0]
 8019410:	425b      	negs	r3, r3
 8019412:	b29b      	uxth	r3, r3
 8019414:	b21a      	sxth	r2, r3
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	841a      	strh	r2, [r3, #32]
            break;
 801941a:	e003      	b.n	8019424 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xc4>
        default:
            done = true;
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	2201      	movs	r2, #1
 8019420:	721a      	strb	r2, [r3, #8]
            // Nothing to do here
            break;
 8019422:	bf00      	nop
        }

        //Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	f103 0028 	add.w	r0, r3, #40	; 0x28
 801942a:	4b0a      	ldr	r3, [pc, #40]	; (8019454 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf4>)
 801942c:	881b      	ldrh	r3, [r3, #0]
 801942e:	b21a      	sxth	r2, r3
 8019430:	4b09      	ldr	r3, [pc, #36]	; (8019458 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EEC1Eh+0xf8>)
 8019432:	881b      	ldrh	r3, [r3, #0]
 8019434:	b21b      	sxth	r3, r3
 8019436:	9300      	str	r3, [sp, #0]
 8019438:	4613      	mov	r3, r2
 801943a:	2200      	movs	r2, #0
 801943c:	2100      	movs	r1, #0
 801943e:	f7f5 f919 	bl	800e674 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	4618      	mov	r0, r3
 8019446:	3714      	adds	r7, #20
 8019448:	46bd      	mov	sp, r7
 801944a:	bd90      	pop	{r4, r7, pc}
 801944c:	08021144 	.word	0x08021144
 8019450:	08020894 	.word	0x08020894
 8019454:	20009b08 	.word	0x20009b08
 8019458:	20009b0a 	.word	0x20009b0a

0801945c <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 801945c:	b580      	push	{r7, lr}
 801945e:	b082      	sub	sp, #8
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
 8019464:	460b      	mov	r3, r1
 8019466:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	3324      	adds	r3, #36	; 0x24
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	887a      	ldrh	r2, [r7, #2]
 8019472:	4611      	mov	r1, r2
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	4798      	blx	r3
 8019478:	4603      	mov	r3, r0
    }
 801947a:	4618      	mov	r0, r3
 801947c:	3708      	adds	r7, #8
 801947e:	46bd      	mov	sp, r7
 8019480:	bd80      	pop	{r7, pc}
	...

08019484 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
 8019484:	b580      	push	{r7, lr}
 8019486:	b082      	sub	sp, #8
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	4a05      	ldr	r2, [pc, #20]	; (80194a4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	601a      	str	r2, [r3, #0]
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	4618      	mov	r0, r3
 8019496:	f7f5 fd0d 	bl	800eeb4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	4618      	mov	r0, r3
 801949e:	3708      	adds	r7, #8
 80194a0:	46bd      	mov	sp, r7
 80194a2:	bd80      	pop	{r7, pc}
 80194a4:	08021218 	.word	0x08021218

080194a8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	6078      	str	r0, [r7, #4]
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	f7ff ffe7 	bl	8019484 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 80194b6:	2110      	movs	r1, #16
 80194b8:	6878      	ldr	r0, [r7, #4]
 80194ba:	f005 fee4 	bl	801f286 <_ZdlPvj>
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	4618      	mov	r0, r3
 80194c2:	3708      	adds	r7, #8
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}

080194c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 80194c8:	b590      	push	{r4, r7, lr}
 80194ca:	b087      	sub	sp, #28
 80194cc:	af02      	add	r7, sp, #8
 80194ce:	6078      	str	r0, [r7, #4]
 80194d0:	460b      	mov	r3, r1
 80194d2:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ff f9ce 	bl	8018878 <_ZN8touchgfx10TransitionC1Ev>
 80194dc:	4a3f      	ldr	r2, [pc, #252]	; (80195dc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x114>)
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	601a      	str	r2, [r3, #0]
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	330c      	adds	r3, #12
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7f6 f98c 	bl	800f804 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f103 020c 	add.w	r2, r3, #12
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80194fc:	4a38      	ldr	r2, [pc, #224]	; (80195e0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x118>)
 80194fe:	f107 0308 	add.w	r3, r7, #8
 8019502:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019506:	e883 0003 	stmia.w	r3, {r0, r1}
 801950a:	f107 0308 	add.w	r3, r7, #8
 801950e:	cb0c      	ldmia	r3, {r2, r3}
 8019510:	6879      	ldr	r1, [r7, #4]
 8019512:	4620      	mov	r0, r4
 8019514:	f000 f960 	bl	80197d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	2202      	movs	r2, #2
 801951c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	78fa      	ldrb	r2, [r7, #3]
 8019524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	2200      	movs	r2, #0
 801952c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	2200      	movs	r2, #0
 8019534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    {
        if (HAL::USE_ANIMATION_STORAGE)
 8019538:	4b2a      	ldr	r3, [pc, #168]	; (80195e4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x11c>)
 801953a:	781b      	ldrb	r3, [r3, #0]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d047      	beq.n	80195d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	f103 000c 	add.w	r0, r3, #12
 8019546:	4b28      	ldr	r3, [pc, #160]	; (80195e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 8019548:	881b      	ldrh	r3, [r3, #0]
 801954a:	b21a      	sxth	r2, r3
 801954c:	4b27      	ldr	r3, [pc, #156]	; (80195ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 801954e:	881b      	ldrh	r3, [r3, #0]
 8019550:	b21b      	sxth	r3, r3
 8019552:	9300      	str	r3, [sp, #0]
 8019554:	4613      	mov	r3, r2
 8019556:	2200      	movs	r2, #0
 8019558:	2100      	movs	r1, #0
 801955a:	f7f5 f88b 	bl	800e674 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	330c      	adds	r3, #12
 8019562:	4618      	mov	r0, r3
 8019564:	f7f6 f9f6 	bl	800f954 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801956e:	2b03      	cmp	r3, #3
 8019570:	d82a      	bhi.n	80195c8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x100>
 8019572:	a201      	add	r2, pc, #4	; (adr r2, 8019578 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8019574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019578:	080195a9 	.word	0x080195a9
 801957c:	080195b7 	.word	0x080195b7
 8019580:	08019589 	.word	0x08019589
 8019584:	0801959b 	.word	0x0801959b
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 8019588:	4b17      	ldr	r3, [pc, #92]	; (80195e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801958a:	881b      	ldrh	r3, [r3, #0]
 801958c:	425b      	negs	r3, r3
 801958e:	b29b      	uxth	r3, r3
 8019590:	b21a      	sxth	r2, r3
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 8019598:	e01a      	b.n	80195d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801959a:	4b13      	ldr	r3, [pc, #76]	; (80195e8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x120>)
 801959c:	881b      	ldrh	r3, [r3, #0]
 801959e:	b21a      	sxth	r2, r3
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 80195a6:	e013      	b.n	80195d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 80195a8:	4b10      	ldr	r3, [pc, #64]	; (80195ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80195aa:	881b      	ldrh	r3, [r3, #0]
 80195ac:	b21a      	sxth	r2, r3
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 80195b4:	e00c      	b.n	80195d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 80195b6:	4b0d      	ldr	r3, [pc, #52]	; (80195ec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x124>)
 80195b8:	881b      	ldrh	r3, [r3, #0]
 80195ba:	425b      	negs	r3, r3
 80195bc:	b29b      	uxth	r3, r3
 80195be:	b21a      	sxth	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 80195c6:	e003      	b.n	80195d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EEC1Eh+0x108>
            default:
                done = true;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	2201      	movs	r2, #1
 80195cc:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 80195ce:	bf00      	nop
            }
        }
    }
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	4618      	mov	r0, r3
 80195d4:	3714      	adds	r7, #20
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd90      	pop	{r4, r7, pc}
 80195da:	bf00      	nop
 80195dc:	080211f0 	.word	0x080211f0
 80195e0:	0802089c 	.word	0x0802089c
 80195e4:	20009b13 	.word	0x20009b13
 80195e8:	20009b08 	.word	0x20009b08
 80195ec:	20009b0a 	.word	0x20009b0a

080195f0 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b082      	sub	sp, #8
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
 80195f8:	460b      	mov	r3, r1
 80195fa:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	681b      	ldr	r3, [r3, #0]
 8019600:	3324      	adds	r3, #36	; 0x24
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	887a      	ldrh	r2, [r7, #2]
 8019606:	4611      	mov	r1, r2
 8019608:	6878      	ldr	r0, [r7, #4]
 801960a:	4798      	blx	r3
 801960c:	4603      	mov	r3, r0
    }
 801960e:	4618      	mov	r0, r3
 8019610:	3708      	adds	r7, #8
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}

08019616 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8019616:	b580      	push	{r7, lr}
 8019618:	b082      	sub	sp, #8
 801961a:	af00      	add	r7, sp, #0
 801961c:	6078      	str	r0, [r7, #4]
 801961e:	460b      	mov	r3, r1
 8019620:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	3324      	adds	r3, #36	; 0x24
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	887a      	ldrh	r2, [r7, #2]
 801962c:	4611      	mov	r1, r2
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	4798      	blx	r3
 8019632:	4603      	mov	r3, r0
    }
 8019634:	4618      	mov	r0, r3
 8019636:	3708      	adds	r7, #8
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 801963c:	b480      	push	{r7}
 801963e:	b083      	sub	sp, #12
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
 8019644:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	683a      	ldr	r2, [r7, #0]
 801964a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801964c:	bf00      	nop
 801964e:	370c      	adds	r7, #12
 8019650:	46bd      	mov	sp, r7
 8019652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019656:	4770      	bx	lr

08019658 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
 8019660:	6039      	str	r1, [r7, #0]
    {
        switch (direction)
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	7f1b      	ldrb	r3, [r3, #28]
 8019666:	2b03      	cmp	r3, #3
 8019668:	d820      	bhi.n	80196ac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x54>
 801966a:	a201      	add	r2, pc, #4	; (adr r2, 8019670 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x18>)
 801966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019670:	08019697 	.word	0x08019697
 8019674:	08019697 	.word	0x08019697
 8019678:	08019681 	.word	0x08019681
 801967c:	08019681 	.word	0x08019681
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	681b      	ldr	r3, [r3, #0]
 8019684:	3354      	adds	r3, #84	; 0x54
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	687a      	ldr	r2, [r7, #4]
 801968a:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 801968e:	2200      	movs	r2, #0
 8019690:	6838      	ldr	r0, [r7, #0]
 8019692:	4798      	blx	r3
            break;
 8019694:	e00e      	b.n	80196b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	3354      	adds	r3, #84	; 0x54
 801969c:	681b      	ldr	r3, [r3, #0]
 801969e:	687a      	ldr	r2, [r7, #4]
 80196a0:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80196a4:	2100      	movs	r1, #0
 80196a6:	6838      	ldr	r0, [r7, #0]
 80196a8:	4798      	blx	r3
            break;
 80196aa:	e003      	b.n	80196b4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x5c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	2201      	movs	r2, #1
 80196b0:	721a      	strb	r2, [r3, #8]
            break;
 80196b2:	bf00      	nop
        }
    }
 80196b4:	bf00      	nop
 80196b6:	3708      	adds	r7, #8
 80196b8:	46bd      	mov	sp, r7
 80196ba:	bd80      	pop	{r7, pc}

080196bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80196bc:	b580      	push	{r7, lr}
 80196be:	b084      	sub	sp, #16
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	60f8      	str	r0, [r7, #12]
 80196c4:	60b9      	str	r1, [r7, #8]
 80196c6:	4639      	mov	r1, r7
 80196c8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	4618      	mov	r0, r3
 80196d0:	f7f5 fbe0 	bl	800ee94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80196d4:	4a08      	ldr	r2, [pc, #32]	; (80196f8 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80196da:	68fb      	ldr	r3, [r7, #12]
 80196dc:	68ba      	ldr	r2, [r7, #8]
 80196de:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	3308      	adds	r3, #8
 80196e4:	463a      	mov	r2, r7
 80196e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196ea:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	4618      	mov	r0, r3
 80196f2:	3710      	adds	r7, #16
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd80      	pop	{r7, pc}
 80196f8:	080211d8 	.word	0x080211d8

080196fc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>:
        FullSolidRect() : Widget()
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	4618      	mov	r0, r3
 8019708:	f7f5 fc92 	bl	800f030 <_ZN8touchgfx6WidgetC1Ev>
 801970c:	4a03      	ldr	r2, [pc, #12]	; (801971c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev+0x20>)
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	601a      	str	r2, [r3, #0]
        {}
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	4618      	mov	r0, r3
 8019716:	3708      	adds	r7, #8
 8019718:	46bd      	mov	sp, r7
 801971a:	bd80      	pop	{r7, pc}
 801971c:	0802116c 	.word	0x0802116c

08019720 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>:
        virtual ~FullSolidRect() {}
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	4a05      	ldr	r2, [pc, #20]	; (8019740 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev+0x20>)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	601a      	str	r2, [r3, #0]
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	4618      	mov	r0, r3
 8019732:	f7f5 fc8f 	bl	800f054 <_ZN8touchgfx6WidgetD1Ev>
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	4618      	mov	r0, r3
 801973a:	3708      	adds	r7, #8
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}
 8019740:	0802116c 	.word	0x0802116c

08019744 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectD0Ev>:
 8019744:	b580      	push	{r7, lr}
 8019746:	b082      	sub	sp, #8
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
 801974c:	6878      	ldr	r0, [r7, #4]
 801974e:	f7ff ffe7 	bl	8019720 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 8019752:	2128      	movs	r1, #40	; 0x28
 8019754:	6878      	ldr	r0, [r7, #4]
 8019756:	f005 fd96 	bl	801f286 <_ZdlPvj>
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	4618      	mov	r0, r3
 801975e:	3708      	adds	r7, #8
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}

08019764 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 8019764:	b580      	push	{r7, lr}
 8019766:	b082      	sub	sp, #8
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019772:	683a      	ldr	r2, [r7, #0]
 8019774:	429a      	cmp	r2, r3
 8019776:	d02a      	beq.n	80197ce <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801977e:	2b03      	cmp	r3, #3
 8019780:	d820      	bhi.n	80197c4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x60>
 8019782:	a201      	add	r2, pc, #4	; (adr r2, 8019788 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 8019784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019788:	080197af 	.word	0x080197af
 801978c:	080197af 	.word	0x080197af
 8019790:	08019799 	.word	0x08019799
 8019794:	08019799 	.word	0x08019799
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	3354      	adds	r3, #84	; 0x54
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	687a      	ldr	r2, [r7, #4]
 80197a2:	f9b2 1056 	ldrsh.w	r1, [r2, #86]	; 0x56
 80197a6:	2200      	movs	r2, #0
 80197a8:	6838      	ldr	r0, [r7, #0]
 80197aa:	4798      	blx	r3
            break;
 80197ac:	e010      	b.n	80197d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 80197ae:	683b      	ldr	r3, [r7, #0]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	3354      	adds	r3, #84	; 0x54
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	687a      	ldr	r2, [r7, #4]
 80197b8:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 80197bc:	2100      	movs	r1, #0
 80197be:	6838      	ldr	r0, [r7, #0]
 80197c0:	4798      	blx	r3
            break;
 80197c2:	e005      	b.n	80197d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	2201      	movs	r2, #1
 80197c8:	721a      	strb	r2, [r3, #8]
            break;
 80197ca:	bf00      	nop
 80197cc:	e000      	b.n	80197d0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 80197ce:	bf00      	nop
        }
    }
 80197d0:	3708      	adds	r7, #8
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop

080197d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	4639      	mov	r1, r7
 80197e4:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	4618      	mov	r0, r3
 80197ec:	f7f5 fb52 	bl	800ee94 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 80197f0:	4a08      	ldr	r2, [pc, #32]	; (8019814 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	68ba      	ldr	r2, [r7, #8]
 80197fa:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	3308      	adds	r3, #8
 8019800:	463a      	mov	r2, r7
 8019802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019806:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	4618      	mov	r0, r3
 801980e:	3710      	adds	r7, #16
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}
 8019814:	08021218 	.word	0x08021218

08019818 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~CoverTransition()
 8019818:	b580      	push	{r7, lr}
 801981a:	b082      	sub	sp, #8
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
    }
 8019820:	4a0a      	ldr	r2, [pc, #40]	; (801984c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev+0x34>)
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	601a      	str	r2, [r3, #0]
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	3328      	adds	r3, #40	; 0x28
 801982a:	4618      	mov	r0, r3
 801982c:	f7ff ff78 	bl	8019720 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	330c      	adds	r3, #12
 8019834:	4618      	mov	r0, r3
 8019836:	f7ff fd71 	bl	801931c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	4618      	mov	r0, r3
 801983e:	f7ff f831 	bl	80188a4 <_ZN8touchgfx10TransitionD1Ev>
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	4618      	mov	r0, r3
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}
 801984c:	08021144 	.word	0x08021144

08019850 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~CoverTransition()
 8019850:	b580      	push	{r7, lr}
 8019852:	b082      	sub	sp, #8
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
    }
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7ff ffdd 	bl	8019818 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EED1Ev>
 801985e:	2150      	movs	r1, #80	; 0x50
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	f005 fd10 	bl	801f286 <_ZdlPvj>
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	4618      	mov	r0, r3
 801986a:	3708      	adds	r7, #8
 801986c:	46bd      	mov	sp, r7
 801986e:	bd80      	pop	{r7, pc}

08019870 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8019870:	b590      	push	{r4, r7, lr}
 8019872:	b08b      	sub	sp, #44	; 0x2c
 8019874:	af02      	add	r7, sp, #8
 8019876:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	4618      	mov	r0, r3
 801987c:	f7ff f832 	bl	80188e4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	7f9b      	ldrb	r3, [r3, #30]
 8019884:	3301      	adds	r3, #1
 8019886:	b2da      	uxtb	r2, r3
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	779a      	strb	r2, [r3, #30]
        if (animationCounter <= animationSteps)
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	7f9a      	ldrb	r2, [r3, #30]
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	7f5b      	ldrb	r3, [r3, #29]
 8019894:	429a      	cmp	r2, r3
 8019896:	d82b      	bhi.n	80198f0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	7f9b      	ldrb	r3, [r3, #30]
 801989c:	b298      	uxth	r0, r3
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	7f5b      	ldrb	r3, [r3, #29]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	2100      	movs	r1, #0
 80198ac:	f003 fa1a 	bl	801cce4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80198b0:	4603      	mov	r3, r0
 80198b2:	461a      	mov	r2, r3
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	845a      	strh	r2, [r3, #34]	; 0x22
            if (calculatedValue % 2)
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80198be:	b29b      	uxth	r3, r3
 80198c0:	f003 0301 	and.w	r3, r3, #1
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d019      	beq.n	80198fe <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80198d0:	b29b      	uxth	r3, r3
 80198d2:	687a      	ldr	r2, [r7, #4]
 80198d4:	f9b2 2022 	ldrsh.w	r2, [r2, #34]	; 0x22
 80198d8:	2a00      	cmp	r2, #0
 80198da:	dd01      	ble.n	80198e0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x70>
 80198dc:	2201      	movs	r2, #1
 80198de:	e001      	b.n	80198e4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
 80198e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198e4:	4413      	add	r3, r2
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	b21a      	sxth	r2, r3
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	845a      	strh	r2, [r3, #34]	; 0x22
 80198ee:	e006      	b.n	80198fe <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            done = true;
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	2201      	movs	r2, #1
 80198f4:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2200      	movs	r2, #0
 80198fa:	779a      	strb	r2, [r3, #30]
            return;
 80198fc:	e0c0      	b.n	8019a80 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x210>
        calculatedValue -= movedToPos;
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019904:	b29a      	uxth	r2, r3
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801990c:	b29b      	uxth	r3, r3
 801990e:	1ad3      	subs	r3, r2, r3
 8019910:	b29b      	uxth	r3, r3
 8019912:	b21a      	sxth	r2, r3
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	845a      	strh	r2, [r3, #34]	; 0x22
        movedToPos += calculatedValue;
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 801991e:	b29a      	uxth	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019926:	b29b      	uxth	r3, r3
 8019928:	4413      	add	r3, r2
 801992a:	b29b      	uxth	r3, r3
 801992c:	b21a      	sxth	r2, r3
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	849a      	strh	r2, [r3, #36]	; 0x24
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	7f9b      	ldrb	r3, [r3, #30]
 8019936:	2b01      	cmp	r3, #1
 8019938:	f040 8097 	bne.w	8019a6a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1fa>
 801993c:	4b52      	ldr	r3, [pc, #328]	; (8019a88 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x218>)
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	2b00      	cmp	r3, #0
 8019942:	f000 8092 	beq.w	8019a6a <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1fa>
            Rect rect;
 8019946:	f107 0314 	add.w	r3, r7, #20
 801994a:	4618      	mov	r0, r3
 801994c:	f7f5 fae1 	bl	800ef12 <_ZN8touchgfx4RectC1Ev>
            switch (direction)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	7f1b      	ldrb	r3, [r3, #28]
 8019954:	2b03      	cmp	r3, #3
 8019956:	d85b      	bhi.n	8019a10 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a0>
 8019958:	a201      	add	r2, pc, #4	; (adr r2, 8019960 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0xf0>)
 801995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801995e:	bf00      	nop
 8019960:	080199c1 	.word	0x080199c1
 8019964:	080199eb 	.word	0x080199eb
 8019968:	08019971 	.word	0x08019971
 801996c:	08019997 	.word	0x08019997
                rect.x = 0;
 8019970:	2300      	movs	r3, #0
 8019972:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8019974:	2300      	movs	r3, #0
 8019976:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801997e:	b29a      	uxth	r2, r3
 8019980:	4b42      	ldr	r3, [pc, #264]	; (8019a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x21c>)
 8019982:	881b      	ldrh	r3, [r3, #0]
 8019984:	4413      	add	r3, r2
 8019986:	b29b      	uxth	r3, r3
 8019988:	b21b      	sxth	r3, r3
 801998a:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 801998c:	4b40      	ldr	r3, [pc, #256]	; (8019a90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x220>)
 801998e:	881b      	ldrh	r3, [r3, #0]
 8019990:	b21b      	sxth	r3, r3
 8019992:	837b      	strh	r3, [r7, #26]
                break;
 8019994:	e03d      	b.n	8019a12 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a2>
                rect.x = calculatedValue;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801999c:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 801999e:	2300      	movs	r3, #0
 80199a0:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH - calculatedValue;
 80199a2:	4b3a      	ldr	r3, [pc, #232]	; (8019a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x21c>)
 80199a4:	881a      	ldrh	r2, [r3, #0]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80199ac:	b29b      	uxth	r3, r3
 80199ae:	1ad3      	subs	r3, r2, r3
 80199b0:	b29b      	uxth	r3, r3
 80199b2:	b21b      	sxth	r3, r3
 80199b4:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 80199b6:	4b36      	ldr	r3, [pc, #216]	; (8019a90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x220>)
 80199b8:	881b      	ldrh	r3, [r3, #0]
 80199ba:	b21b      	sxth	r3, r3
 80199bc:	837b      	strh	r3, [r7, #26]
                break;
 80199be:	e028      	b.n	8019a12 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 80199c0:	2300      	movs	r3, #0
 80199c2:	82bb      	strh	r3, [r7, #20]
                rect.y = calculatedValue;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80199ca:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 80199cc:	4b2f      	ldr	r3, [pc, #188]	; (8019a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x21c>)
 80199ce:	881b      	ldrh	r3, [r3, #0]
 80199d0:	b21b      	sxth	r3, r3
 80199d2:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT - calculatedValue;
 80199d4:	4b2e      	ldr	r3, [pc, #184]	; (8019a90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x220>)
 80199d6:	881a      	ldrh	r2, [r3, #0]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80199de:	b29b      	uxth	r3, r3
 80199e0:	1ad3      	subs	r3, r2, r3
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	b21b      	sxth	r3, r3
 80199e6:	837b      	strh	r3, [r7, #26]
                break;
 80199e8:	e013      	b.n	8019a12 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a2>
                rect.x = 0;
 80199ea:	2300      	movs	r3, #0
 80199ec:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 80199ee:	2300      	movs	r3, #0
 80199f0:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH;
 80199f2:	4b26      	ldr	r3, [pc, #152]	; (8019a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x21c>)
 80199f4:	881b      	ldrh	r3, [r3, #0]
 80199f6:	b21b      	sxth	r3, r3
 80199f8:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT + calculatedValue;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	4b23      	ldr	r3, [pc, #140]	; (8019a90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x220>)
 8019a04:	881b      	ldrh	r3, [r3, #0]
 8019a06:	4413      	add	r3, r2
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	b21b      	sxth	r3, r3
 8019a0c:	837b      	strh	r3, [r7, #26]
                break;
 8019a0e:	e000      	b.n	8019a12 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1a2>
                break;
 8019a10:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8019a12:	f7f5 fc47 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8019a16:	4602      	mov	r2, r0
 8019a18:	6813      	ldr	r3, [r2, #0]
 8019a1a:	3328      	adds	r3, #40	; 0x28
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	4610      	mov	r0, r2
 8019a20:	4798      	blx	r3
 8019a22:	61f8      	str	r0, [r7, #28]
            Rect source;
 8019a24:	f107 030c 	add.w	r3, r7, #12
 8019a28:	4618      	mov	r0, r3
 8019a2a:	f7f5 fa72 	bl	800ef12 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8019a32:	2300      	movs	r3, #0
 8019a34:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8019a36:	4b15      	ldr	r3, [pc, #84]	; (8019a8c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x21c>)
 8019a38:	881b      	ldrh	r3, [r3, #0]
 8019a3a:	b21b      	sxth	r3, r3
 8019a3c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 8019a3e:	4b14      	ldr	r3, [pc, #80]	; (8019a90 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE15handleTickEventEv+0x220>)
 8019a40:	881b      	ldrh	r3, [r3, #0]
 8019a42:	b21b      	sxth	r3, r3
 8019a44:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8019a46:	f7f5 fc2d 	bl	800f2a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8019a4a:	f7f5 fd25 	bl	800f498 <_ZN8touchgfx3HAL3lcdEv>
 8019a4e:	6803      	ldr	r3, [r0, #0]
 8019a50:	3310      	adds	r3, #16
 8019a52:	681c      	ldr	r4, [r3, #0]
 8019a54:	f107 0114 	add.w	r1, r7, #20
 8019a58:	f107 020c 	add.w	r2, r7, #12
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	9301      	str	r3, [sp, #4]
 8019a60:	23ff      	movs	r3, #255	; 0xff
 8019a62:	9300      	str	r3, [sp, #0]
 8019a64:	460b      	mov	r3, r1
 8019a66:	69f9      	ldr	r1, [r7, #28]
 8019a68:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	6858      	ldr	r0, [r3, #4]
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	685b      	ldr	r3, [r3, #4]
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	337c      	adds	r3, #124	; 0x7c
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	687a      	ldr	r2, [r7, #4]
 8019a7a:	320c      	adds	r2, #12
 8019a7c:	4611      	mov	r1, r2
 8019a7e:	4798      	blx	r3
    }
 8019a80:	3724      	adds	r7, #36	; 0x24
 8019a82:	46bd      	mov	sp, r7
 8019a84:	bd90      	pop	{r4, r7, pc}
 8019a86:	bf00      	nop
 8019a88:	20009b12 	.word	0x20009b12
 8019a8c:	20009b08 	.word	0x20009b08
 8019a90:	20009b0a 	.word	0x20009b0a

08019a94 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b082      	sub	sp, #8
 8019a98:	af00      	add	r7, sp, #0
 8019a9a:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6858      	ldr	r0, [r3, #4]
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	3368      	adds	r3, #104	; 0x68
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	687a      	ldr	r2, [r7, #4]
 8019aac:	3228      	adds	r2, #40	; 0x28
 8019aae:	4611      	mov	r1, r2
 8019ab0:	4798      	blx	r3
    }
 8019ab2:	bf00      	nop
 8019ab4:	3708      	adds	r7, #8
 8019ab6:	46bd      	mov	sp, r7
 8019ab8:	bd80      	pop	{r7, pc}
	...

08019abc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b088      	sub	sp, #32
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
        Transition::init();
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	4618      	mov	r0, r3
 8019ac8:	f7fe ff20 	bl	801890c <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8019acc:	4a16      	ldr	r2, [pc, #88]	; (8019b28 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE4initEv+0x6c>)
 8019ace:	f107 0318 	add.w	r3, r7, #24
 8019ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ad6:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ada:	f107 0008 	add.w	r0, r7, #8
 8019ade:	f107 0318 	add.w	r3, r7, #24
 8019ae2:	cb0c      	ldmia	r3, {r2, r3}
 8019ae4:	6879      	ldr	r1, [r7, #4]
 8019ae6:	f7ff fde9 	bl	80196bc <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	685a      	ldr	r2, [r3, #4]
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	685b      	ldr	r3, [r3, #4]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	337c      	adds	r3, #124	; 0x7c
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	f107 0108 	add.w	r1, r7, #8
 8019afc:	4610      	mov	r0, r2
 8019afe:	4798      	blx	r3
        screenContainer->add(solid);
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6858      	ldr	r0, [r3, #4]
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	3364      	adds	r3, #100	; 0x64
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	3228      	adds	r2, #40	; 0x28
 8019b12:	4611      	mov	r1, r2
 8019b14:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 8019b16:	f107 0308 	add.w	r3, r7, #8
 8019b1a:	4618      	mov	r0, r3
 8019b1c:	f7ff fbfe 	bl	801931c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 8019b20:	bf00      	nop
 8019b22:	3720      	adds	r7, #32
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}
 8019b28:	080208a4 	.word	0x080208a4

08019b2c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	6039      	str	r1, [r7, #0]
        switch (direction)
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	7f1b      	ldrb	r3, [r3, #28]
 8019b3a:	2b03      	cmp	r3, #3
 8019b3c:	d83a      	bhi.n	8019bb4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x88>
 8019b3e:	a201      	add	r2, pc, #4	; (adr r2, 8019b44 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x18>)
 8019b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b44:	08019b85 	.word	0x08019b85
 8019b48:	08019b9f 	.word	0x08019b9f
 8019b4c:	08019b55 	.word	0x08019b55
 8019b50:	08019b6b 	.word	0x08019b6b
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	3354      	adds	r3, #84	; 0x54
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	4a18      	ldr	r2, [pc, #96]	; (8019bc0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8019b5e:	8812      	ldrh	r2, [r2, #0]
 8019b60:	b211      	sxth	r1, r2
 8019b62:	2200      	movs	r2, #0
 8019b64:	6838      	ldr	r0, [r7, #0]
 8019b66:	4798      	blx	r3
            break;
 8019b68:	e025      	b.n	8019bb6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	3354      	adds	r3, #84	; 0x54
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	4a13      	ldr	r2, [pc, #76]	; (8019bc0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x94>)
 8019b74:	8812      	ldrh	r2, [r2, #0]
 8019b76:	4252      	negs	r2, r2
 8019b78:	b292      	uxth	r2, r2
 8019b7a:	b211      	sxth	r1, r2
 8019b7c:	2200      	movs	r2, #0
 8019b7e:	6838      	ldr	r0, [r7, #0]
 8019b80:	4798      	blx	r3
            break;
 8019b82:	e018      	b.n	8019bb6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8019b84:	683b      	ldr	r3, [r7, #0]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	3354      	adds	r3, #84	; 0x54
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	4a0d      	ldr	r2, [pc, #52]	; (8019bc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8019b8e:	8812      	ldrh	r2, [r2, #0]
 8019b90:	4252      	negs	r2, r2
 8019b92:	b292      	uxth	r2, r2
 8019b94:	b212      	sxth	r2, r2
 8019b96:	2100      	movs	r1, #0
 8019b98:	6838      	ldr	r0, [r7, #0]
 8019b9a:	4798      	blx	r3
            break;
 8019b9c:	e00b      	b.n	8019bb6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8a>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8019b9e:	683b      	ldr	r3, [r7, #0]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	3354      	adds	r3, #84	; 0x54
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	4a07      	ldr	r2, [pc, #28]	; (8019bc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8019ba8:	8812      	ldrh	r2, [r2, #0]
 8019baa:	b212      	sxth	r2, r2
 8019bac:	2100      	movs	r1, #0
 8019bae:	6838      	ldr	r0, [r7, #0]
 8019bb0:	4798      	blx	r3
            break;
 8019bb2:	e000      	b.n	8019bb6 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8a>
            break;
 8019bb4:	bf00      	nop
    }
 8019bb6:	bf00      	nop
 8019bb8:	3708      	adds	r7, #8
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}
 8019bbe:	bf00      	nop
 8019bc0:	20009b08 	.word	0x20009b08
 8019bc4:	20009b0a 	.word	0x20009b0a

08019bc8 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const { }
 8019bc8:	b480      	push	{r7}
 8019bca:	b083      	sub	sp, #12
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
 8019bd0:	6039      	str	r1, [r7, #0]
 8019bd2:	bf00      	nop
 8019bd4:	370c      	adds	r7, #12
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bdc:	4770      	bx	lr
	...

08019be0 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af02      	add	r7, sp, #8
 8019be6:	6078      	str	r0, [r7, #4]
 8019be8:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8019bea:	4b08      	ldr	r3, [pc, #32]	; (8019c0c <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv+0x2c>)
 8019bec:	881b      	ldrh	r3, [r3, #0]
 8019bee:	b21a      	sxth	r2, r3
 8019bf0:	4b07      	ldr	r3, [pc, #28]	; (8019c10 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv+0x30>)
 8019bf2:	881b      	ldrh	r3, [r3, #0]
 8019bf4:	b21b      	sxth	r3, r3
 8019bf6:	9300      	str	r3, [sp, #0]
 8019bf8:	4613      	mov	r3, r2
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	2100      	movs	r1, #0
 8019bfe:	6878      	ldr	r0, [r7, #4]
 8019c00:	f7f4 fb2c 	bl	800e25c <_ZN8touchgfx4RectC1Essss>
        }
 8019c04:	6878      	ldr	r0, [r7, #4]
 8019c06:	3708      	adds	r7, #8
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	bd80      	pop	{r7, pc}
 8019c0c:	20009b08 	.word	0x20009b08
 8019c10:	20009b0a 	.word	0x20009b0a

08019c14 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
 8019c1c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	687a      	ldr	r2, [r7, #4]
 8019c24:	68d2      	ldr	r2, [r2, #12]
 8019c26:	1052      	asrs	r2, r2, #1
 8019c28:	1898      	adds	r0, r3, r2
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	68db      	ldr	r3, [r3, #12]
 8019c2e:	f003 0301 	and.w	r3, r3, #1
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d102      	bne.n	8019c3c <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	689b      	ldr	r3, [r3, #8]
 8019c3a:	e00a      	b.n	8019c52 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	685b      	ldr	r3, [r3, #4]
 8019c40:	687a      	ldr	r2, [r7, #4]
 8019c42:	68d2      	ldr	r2, [r2, #12]
 8019c44:	1052      	asrs	r2, r2, #1
 8019c46:	4413      	add	r3, r2
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	687a      	ldr	r2, [r7, #4]
 8019c4c:	6892      	ldr	r2, [r2, #8]
 8019c4e:	4413      	add	r3, r2
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	6839      	ldr	r1, [r7, #0]
 8019c54:	4798      	blx	r3
    }
 8019c56:	bf00      	nop
 8019c58:	3708      	adds	r7, #8
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	bd80      	pop	{r7, pc}

08019c5e <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 8019c5e:	b480      	push	{r7}
 8019c60:	b083      	sub	sp, #12
 8019c62:	af00      	add	r7, sp, #0
 8019c64:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	685b      	ldr	r3, [r3, #4]
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d010      	beq.n	8019c90 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	689b      	ldr	r3, [r3, #8]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d107      	bne.n	8019c86 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	68db      	ldr	r3, [r3, #12]
 8019c7a:	f003 0301 	and.w	r3, r3, #1
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d101      	bne.n	8019c86 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 8019c82:	2301      	movs	r3, #1
 8019c84:	e000      	b.n	8019c88 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 8019c86:	2300      	movs	r3, #0
 8019c88:	2b01      	cmp	r3, #1
 8019c8a:	d001      	beq.n	8019c90 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 8019c8c:	2301      	movs	r3, #1
 8019c8e:	e000      	b.n	8019c92 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 8019c90:	2300      	movs	r3, #0
    }
 8019c92:	4618      	mov	r0, r3
 8019c94:	370c      	adds	r7, #12
 8019c96:	46bd      	mov	sp, r7
 8019c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9c:	4770      	bx	lr
	...

08019ca0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>:
    virtual ~SlideTransition()
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b082      	sub	sp, #8
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
    }
 8019ca8:	4a0a      	ldr	r2, [pc, #40]	; (8019cd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	601a      	str	r2, [r3, #0]
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	3340      	adds	r3, #64	; 0x40
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	f7ff fbe6 	bl	8019484 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	330c      	adds	r3, #12
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f7f5 fdbb 	bl	800f838 <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8019cc2:	687b      	ldr	r3, [r7, #4]
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	f7fe fded 	bl	80188a4 <_ZN8touchgfx10TransitionD1Ev>
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	3708      	adds	r7, #8
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}
 8019cd4:	080211f0 	.word	0x080211f0

08019cd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED0Ev>:
    virtual ~SlideTransition()
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
    }
 8019ce0:	6878      	ldr	r0, [r7, #4]
 8019ce2:	f7ff ffdd 	bl	8019ca0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EED1Ev>
 8019ce6:	2158      	movs	r1, #88	; 0x58
 8019ce8:	6878      	ldr	r0, [r7, #4]
 8019cea:	f005 facc 	bl	801f286 <_ZdlPvj>
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	3708      	adds	r7, #8
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	bd80      	pop	{r7, pc}

08019cf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b082      	sub	sp, #8
 8019cfc:	af00      	add	r7, sp, #0
 8019cfe:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 8019d00:	4b59      	ldr	r3, [pc, #356]	; (8019e68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x170>)
 8019d02:	781b      	ldrb	r3, [r3, #0]
 8019d04:	f083 0301 	eor.w	r3, r3, #1
 8019d08:	b2db      	uxtb	r3, r3
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d003      	beq.n	8019d16 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	2201      	movs	r2, #1
 8019d12:	721a      	strb	r2, [r3, #8]
            return;
 8019d14:	e0a5      	b.n	8019e62 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	4618      	mov	r0, r3
 8019d1a:	f7fe fde3 	bl	80188e4 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8019d24:	3301      	adds	r3, #1
 8019d26:	b2da      	uxtb	r2, r3
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        if (animationCounter <= animationSteps)
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	d82f      	bhi.n	8019d9e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8019d44:	b298      	uxth	r0, r3
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019d52:	b29b      	uxth	r3, r3
 8019d54:	2100      	movs	r1, #0
 8019d56:	f002 ffc5 	bl	801cce4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	461a      	mov	r2, r3
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            if (calculatedValue % 2)
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019d6a:	b29b      	uxth	r3, r3
 8019d6c:	f003 0301 	and.w	r3, r3, #1
 8019d70:	b29b      	uxth	r3, r3
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d01b      	beq.n	8019dae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	687a      	ldr	r2, [r7, #4]
 8019d80:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 8019d84:	2a00      	cmp	r2, #0
 8019d86:	dd01      	ble.n	8019d8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>
 8019d88:	2201      	movs	r2, #1
 8019d8a:	e001      	b.n	8019d90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x98>
 8019d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d90:	4413      	add	r3, r2
 8019d92:	b29b      	uxth	r3, r3
 8019d94:	b21a      	sxth	r2, r3
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8019d9c:	e007      	b.n	8019dae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xb6>
            done = true;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2201      	movs	r2, #1
 8019da2:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	2200      	movs	r2, #0
 8019da8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            return;
 8019dac:	e059      	b.n	8019e62 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16a>
        switch (direction)
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019db4:	2b03      	cmp	r3, #3
 8019db6:	d845      	bhi.n	8019e44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x14c>
 8019db8:	a201      	add	r2, pc, #4	; (adr r2, 8019dc0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0xc8>)
 8019dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dbe:	bf00      	nop
 8019dc0:	08019e0b 	.word	0x08019e0b
 8019dc4:	08019e0b 	.word	0x08019e0b
 8019dc8:	08019dd1 	.word	0x08019dd1
 8019dcc:	08019dd1 	.word	0x08019dd1
            calculatedValue -= snapshot.getX();
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	330c      	adds	r3, #12
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7f4 fc7a 	bl	800e6ce <_ZNK8touchgfx8Drawable4getXEv>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	4619      	mov	r1, r3
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019de4:	b29a      	uxth	r2, r3
 8019de6:	b28b      	uxth	r3, r1
 8019de8:	1ad3      	subs	r3, r2, r3
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	b21a      	sxth	r2, r3
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(calculatedValue, 0);
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f103 000c 	add.w	r0, r3, #12
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019e00:	2200      	movs	r2, #0
 8019e02:	4619      	mov	r1, r3
 8019e04:	f002 fb23 	bl	801c44e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8019e08:	e020      	b.n	8019e4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	330c      	adds	r3, #12
 8019e0e:	4618      	mov	r0, r3
 8019e10:	f7f4 fc6a 	bl	800e6e8 <_ZNK8touchgfx8Drawable4getYEv>
 8019e14:	4603      	mov	r3, r0
 8019e16:	4619      	mov	r1, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019e1e:	b29a      	uxth	r2, r3
 8019e20:	b28b      	uxth	r3, r1
 8019e22:	1ad3      	subs	r3, r2, r3
 8019e24:	b29b      	uxth	r3, r3
 8019e26:	b21a      	sxth	r2, r3
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(0, calculatedValue);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	f103 000c 	add.w	r0, r3, #12
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	2100      	movs	r1, #0
 8019e3e:	f002 fb06 	bl	801c44e <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 8019e42:	e003      	b.n	8019e4c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE15handleTickEventEv+0x154>
            done = true;
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	2201      	movs	r2, #1
 8019e48:	721a      	strb	r2, [r3, #8]
            break;
 8019e4a:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6858      	ldr	r0, [r3, #4]
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	337c      	adds	r3, #124	; 0x7c
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	687a      	ldr	r2, [r7, #4]
 8019e5c:	3240      	adds	r2, #64	; 0x40
 8019e5e:	4611      	mov	r1, r2
 8019e60:	4798      	blx	r3
    }
 8019e62:	3708      	adds	r7, #8
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}
 8019e68:	20009b13 	.word	0x20009b13

08019e6c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8019e6c:	b580      	push	{r7, lr}
 8019e6e:	b082      	sub	sp, #8
 8019e70:	af00      	add	r7, sp, #0
 8019e72:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8019e74:	4b09      	ldr	r3, [pc, #36]	; (8019e9c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x30>)
 8019e76:	781b      	ldrb	r3, [r3, #0]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d00a      	beq.n	8019e92 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE8tearDownEv+0x26>
            screenContainer->remove(snapshot);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6858      	ldr	r0, [r3, #4]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	685b      	ldr	r3, [r3, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	3368      	adds	r3, #104	; 0x68
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	687a      	ldr	r2, [r7, #4]
 8019e8c:	320c      	adds	r2, #12
 8019e8e:	4611      	mov	r1, r2
 8019e90:	4798      	blx	r3
    }
 8019e92:	bf00      	nop
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	20009b13 	.word	0x20009b13

08019ea0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8019ea0:	b580      	push	{r7, lr}
 8019ea2:	b088      	sub	sp, #32
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 8019ea8:	4b1a      	ldr	r3, [pc, #104]	; (8019f14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x74>)
 8019eaa:	781b      	ldrb	r3, [r3, #0]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d02d      	beq.n	8019f0c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x6c>
            Transition::init();
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7fe fd2a 	bl	801890c <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8019eb8:	4a17      	ldr	r2, [pc, #92]	; (8019f18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE4initEv+0x78>)
 8019eba:	f107 0318 	add.w	r3, r7, #24
 8019ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ec2:	e883 0003 	stmia.w	r3, {r0, r1}
 8019ec6:	f107 0008 	add.w	r0, r7, #8
 8019eca:	f107 0318 	add.w	r3, r7, #24
 8019ece:	cb0c      	ldmia	r3, {r2, r3}
 8019ed0:	6879      	ldr	r1, [r7, #4]
 8019ed2:	f7ff fc81 	bl	80197d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	685a      	ldr	r2, [r3, #4]
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	685b      	ldr	r3, [r3, #4]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	337c      	adds	r3, #124	; 0x7c
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	f107 0108 	add.w	r1, r7, #8
 8019ee8:	4610      	mov	r0, r2
 8019eea:	4798      	blx	r3
            screenContainer->add(snapshot);
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6858      	ldr	r0, [r3, #4]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	3364      	adds	r3, #100	; 0x64
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	687a      	ldr	r2, [r7, #4]
 8019efc:	320c      	adds	r2, #12
 8019efe:	4611      	mov	r1, r2
 8019f00:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 8019f02:	f107 0308 	add.w	r3, r7, #8
 8019f06:	4618      	mov	r0, r3
 8019f08:	f7ff fabc 	bl	8019484 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 8019f0c:	bf00      	nop
 8019f0e:	3720      	adds	r7, #32
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}
 8019f14:	20009b13 	.word	0x20009b13
 8019f18:	080208ac 	.word	0x080208ac

08019f1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	6039      	str	r1, [r7, #0]
        switch (direction)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019f2c:	2b03      	cmp	r3, #3
 8019f2e:	d83b      	bhi.n	8019fa8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8c>
 8019f30:	a201      	add	r2, pc, #4	; (adr r2, 8019f38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 8019f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f36:	bf00      	nop
 8019f38:	08019f79 	.word	0x08019f79
 8019f3c:	08019f93 	.word	0x08019f93
 8019f40:	08019f49 	.word	0x08019f49
 8019f44:	08019f5f 	.word	0x08019f5f
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	3354      	adds	r3, #84	; 0x54
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	4a18      	ldr	r2, [pc, #96]	; (8019fb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8019f52:	8812      	ldrh	r2, [r2, #0]
 8019f54:	b211      	sxth	r1, r2
 8019f56:	2200      	movs	r2, #0
 8019f58:	6838      	ldr	r0, [r7, #0]
 8019f5a:	4798      	blx	r3
            break;
 8019f5c:	e025      	b.n	8019faa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	3354      	adds	r3, #84	; 0x54
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	4a13      	ldr	r2, [pc, #76]	; (8019fb4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x98>)
 8019f68:	8812      	ldrh	r2, [r2, #0]
 8019f6a:	4252      	negs	r2, r2
 8019f6c:	b292      	uxth	r2, r2
 8019f6e:	b211      	sxth	r1, r2
 8019f70:	2200      	movs	r2, #0
 8019f72:	6838      	ldr	r0, [r7, #0]
 8019f74:	4798      	blx	r3
            break;
 8019f76:	e018      	b.n	8019faa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	3354      	adds	r3, #84	; 0x54
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	4a0d      	ldr	r2, [pc, #52]	; (8019fb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8019f82:	8812      	ldrh	r2, [r2, #0]
 8019f84:	4252      	negs	r2, r2
 8019f86:	b292      	uxth	r2, r2
 8019f88:	b212      	sxth	r2, r2
 8019f8a:	2100      	movs	r1, #0
 8019f8c:	6838      	ldr	r0, [r7, #0]
 8019f8e:	4798      	blx	r3
            break;
 8019f90:	e00b      	b.n	8019faa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 8019f92:	683b      	ldr	r3, [r7, #0]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	3354      	adds	r3, #84	; 0x54
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	4a07      	ldr	r2, [pc, #28]	; (8019fb8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 8019f9c:	8812      	ldrh	r2, [r2, #0]
 8019f9e:	b212      	sxth	r2, r2
 8019fa0:	2100      	movs	r1, #0
 8019fa2:	6838      	ldr	r0, [r7, #0]
 8019fa4:	4798      	blx	r3
            break;
 8019fa6:	e000      	b.n	8019faa <_ZN8touchgfx15SlideTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 8019fa8:	bf00      	nop
    }
 8019faa:	bf00      	nop
 8019fac:	3708      	adds	r7, #8
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	20009b08 	.word	0x20009b08
 8019fb8:	20009b0a 	.word	0x20009b0a

08019fbc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	685b      	ldr	r3, [r3, #4]
 8019fca:	687a      	ldr	r2, [r7, #4]
 8019fcc:	68d2      	ldr	r2, [r2, #12]
 8019fce:	1052      	asrs	r2, r2, #1
 8019fd0:	1898      	adds	r0, r3, r2
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	68db      	ldr	r3, [r3, #12]
 8019fd6:	f003 0301 	and.w	r3, r3, #1
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d102      	bne.n	8019fe4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	689b      	ldr	r3, [r3, #8]
 8019fe2:	e00a      	b.n	8019ffa <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	685b      	ldr	r3, [r3, #4]
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	68d2      	ldr	r2, [r2, #12]
 8019fec:	1052      	asrs	r2, r2, #1
 8019fee:	4413      	add	r3, r2
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	687a      	ldr	r2, [r7, #4]
 8019ff4:	6892      	ldr	r2, [r2, #8]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	6839      	ldr	r1, [r7, #0]
 8019ffc:	4798      	blx	r3
    }
 8019ffe:	bf00      	nop
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}

0801a006 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801a006:	b480      	push	{r7}
 801a008:	b083      	sub	sp, #12
 801a00a:	af00      	add	r7, sp, #0
 801a00c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	685b      	ldr	r3, [r3, #4]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d010      	beq.n	801a038 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	689b      	ldr	r3, [r3, #8]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d107      	bne.n	801a02e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	68db      	ldr	r3, [r3, #12]
 801a022:	f003 0301 	and.w	r3, r3, #1
 801a026:	2b00      	cmp	r3, #0
 801a028:	d101      	bne.n	801a02e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 801a02a:	2301      	movs	r3, #1
 801a02c:	e000      	b.n	801a030 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801a02e:	2300      	movs	r3, #0
 801a030:	2b01      	cmp	r3, #1
 801a032:	d001      	beq.n	801a038 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 801a034:	2301      	movs	r3, #1
 801a036:	e000      	b.n	801a03a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 801a038:	2300      	movs	r3, #0
    }
 801a03a:	4618      	mov	r0, r3
 801a03c:	370c      	adds	r7, #12
 801a03e:	46bd      	mov	sp, r7
 801a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a044:	4770      	bx	lr
	...

0801a048 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	4a06      	ldr	r2, [pc, #24]	; (801a06c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	601a      	str	r2, [r3, #0]
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	3304      	adds	r3, #4
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7f4 fc1e 	bl	800e89c <_ZN8touchgfx9ContainerD1Ev>
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	4618      	mov	r0, r3
 801a064:	3708      	adds	r7, #8
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
 801a06a:	bf00      	nop
 801a06c:	080221ec 	.word	0x080221ec

0801a070 <_ZN8touchgfx6ScreenD0Ev>:
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f7ff ffe5 	bl	801a048 <_ZN8touchgfx6ScreenD1Ev>
 801a07e:	213c      	movs	r1, #60	; 0x3c
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f005 f900 	bl	801f286 <_ZdlPvj>
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	4618      	mov	r0, r3
 801a08a:	3708      	adds	r7, #8
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801a090:	b480      	push	{r7}
 801a092:	b083      	sub	sp, #12
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
 801a098:	bf00      	nop
 801a09a:	370c      	adds	r7, #12
 801a09c:	46bd      	mov	sp, r7
 801a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a2:	4770      	bx	lr

0801a0a4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801a0a4:	b480      	push	{r7}
 801a0a6:	b083      	sub	sp, #12
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	bf00      	nop
 801a0ae:	370c      	adds	r7, #12
 801a0b0:	46bd      	mov	sp, r7
 801a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0b6:	4770      	bx	lr

0801a0b8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801a0b8:	b480      	push	{r7}
 801a0ba:	b083      	sub	sp, #12
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
 801a0c0:	bf00      	nop
 801a0c2:	370c      	adds	r7, #12
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ca:	4770      	bx	lr

0801a0cc <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801a0cc:	b480      	push	{r7}
 801a0ce:	b083      	sub	sp, #12
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
    {
    }
 801a0d4:	bf00      	nop
 801a0d6:	370c      	adds	r7, #12
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0de:	4770      	bx	lr

0801a0e0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801a0e0:	b480      	push	{r7}
 801a0e2:	b083      	sub	sp, #12
 801a0e4:	af00      	add	r7, sp, #0
 801a0e6:	6078      	str	r0, [r7, #4]
 801a0e8:	460b      	mov	r3, r1
 801a0ea:	70fb      	strb	r3, [r7, #3]
    {
    }
 801a0ec:	bf00      	nop
 801a0ee:	370c      	adds	r7, #12
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f6:	4770      	bx	lr

0801a0f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b082      	sub	sp, #8
 801a0fc:	af00      	add	r7, sp, #0
 801a0fe:	6078      	str	r0, [r7, #4]
 801a100:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	3304      	adds	r3, #4
 801a106:	6839      	ldr	r1, [r7, #0]
 801a108:	4618      	mov	r0, r3
 801a10a:	f7f4 fc17 	bl	800e93c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801a10e:	bf00      	nop
 801a110:	3708      	adds	r7, #8
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}
	...

0801a118 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
 801a120:	4a05      	ldr	r2, [pc, #20]	; (801a138 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	601a      	str	r2, [r3, #0]
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	4618      	mov	r0, r3
 801a12a:	f7ff ff8d 	bl	801a048 <_ZN8touchgfx6ScreenD1Ev>
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	4618      	mov	r0, r3
 801a132:	3708      	adds	r7, #8
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}
 801a138:	08021600 	.word	0x08021600

0801a13c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b082      	sub	sp, #8
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	f7ff ffe7 	bl	801a118 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801a14a:	2140      	movs	r1, #64	; 0x40
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	f005 f89a 	bl	801f286 <_ZdlPvj>
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	4618      	mov	r0, r3
 801a156:	3708      	adds	r7, #8
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}

0801a15c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 801a15c:	b580      	push	{r7, lr}
 801a15e:	b082      	sub	sp, #8
 801a160:	af00      	add	r7, sp, #0
 801a162:	6078      	str	r0, [r7, #4]
 801a164:	4a0d      	ldr	r2, [pc, #52]	; (801a19c <_ZN15Screen1ViewBaseD1Ev+0x40>)
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	601a      	str	r2, [r3, #0]
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	33a4      	adds	r3, #164	; 0xa4
 801a16e:	4618      	mov	r0, r3
 801a170:	f000 f902 	bl	801a378 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	3370      	adds	r3, #112	; 0x70
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f5 f911 	bl	800f3a0 <_ZN8touchgfx6ButtonD1Ev>
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	3340      	adds	r3, #64	; 0x40
 801a182:	4618      	mov	r0, r3
 801a184:	f7f4 ffd6 	bl	800f134 <_ZN8touchgfx3BoxD1Ev>
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7ff ffc4 	bl	801a118 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	4618      	mov	r0, r3
 801a194:	3708      	adds	r7, #8
 801a196:	46bd      	mov	sp, r7
 801a198:	bd80      	pop	{r7, pc}
 801a19a:	bf00      	nop
 801a19c:	080215b4 	.word	0x080215b4

0801a1a0 <_ZN15Screen1ViewBaseD0Ev>:
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b082      	sub	sp, #8
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
 801a1a8:	6878      	ldr	r0, [r7, #4]
 801a1aa:	f7ff ffd7 	bl	801a15c <_ZN15Screen1ViewBaseD1Ev>
 801a1ae:	21b4      	movs	r1, #180	; 0xb4
 801a1b0:	6878      	ldr	r0, [r7, #4]
 801a1b2:	f005 f868 	bl	801f286 <_ZdlPvj>
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	3708      	adds	r7, #8
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd80      	pop	{r7, pc}

0801a1c0 <_ZN15Screen1ViewBase11applicationEv>:

    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b082      	sub	sp, #8
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801a1c8:	f001 fd6a 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801a1cc:	4603      	mov	r3, r0
    }
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	3708      	adds	r7, #8
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	bd80      	pop	{r7, pc}
	...

0801a1d8 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

Screen1ViewBase::Screen1ViewBase() :
 801a1d8:	b590      	push	{r4, r7, lr}
 801a1da:	b089      	sub	sp, #36	; 0x24
 801a1dc:	af02      	add	r7, sp, #8
 801a1de:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f000 f892 	bl	801a30c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 801a1e8:	4a36      	ldr	r2, [pc, #216]	; (801a2c4 <_ZN15Screen1ViewBaseC1Ev+0xec>)
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	601a      	str	r2, [r3, #0]
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	3340      	adds	r3, #64	; 0x40
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7f4 ff7e 	bl	800f0f4 <_ZN8touchgfx3BoxC1Ev>
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	3370      	adds	r3, #112	; 0x70
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	f7f5 f8ab 	bl	800f358 <_ZN8touchgfx6ButtonC1Ev>
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801a208:	4b2f      	ldr	r3, [pc, #188]	; (801a2c8 <_ZN15Screen1ViewBaseC1Ev+0xf0>)
 801a20a:	60bb      	str	r3, [r7, #8]
 801a20c:	2300      	movs	r3, #0
 801a20e:	60fb      	str	r3, [r7, #12]
 801a210:	f107 0308 	add.w	r3, r7, #8
 801a214:	cb0c      	ldmia	r3, {r2, r3}
 801a216:	6879      	ldr	r1, [r7, #4]
 801a218:	f000 f88e 	bl	801a338 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 502, 294);
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801a222:	f44f 7393 	mov.w	r3, #294	; 0x126
 801a226:	9300      	str	r3, [sp, #0]
 801a228:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 801a22c:	2200      	movs	r2, #0
 801a22e:	2100      	movs	r1, #0
 801a230:	f7f4 fa20 	bl	800e674 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(181, 36, 36));
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a23a:	2224      	movs	r2, #36	; 0x24
 801a23c:	2124      	movs	r1, #36	; 0x24
 801a23e:	20b5      	movs	r0, #181	; 0xb5
 801a240:	f002 fe50 	bl	801cee4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801a244:	4603      	mov	r3, r0
 801a246:	4619      	mov	r1, r3
 801a248:	4620      	mov	r0, r4
 801a24a:	f7f4 ff95 	bl	800f178 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(150, 87);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	3370      	adds	r3, #112	; 0x70
 801a252:	2257      	movs	r2, #87	; 0x57
 801a254:	2196      	movs	r1, #150	; 0x96
 801a256:	4618      	mov	r0, r3
 801a258:	f7f4 fa71 	bl	800e73e <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801a262:	f107 0310 	add.w	r3, r7, #16
 801a266:	2100      	movs	r1, #0
 801a268:	4618      	mov	r0, r3
 801a26a:	f7f4 fe69 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 801a26e:	f107 0314 	add.w	r3, r7, #20
 801a272:	2101      	movs	r1, #1
 801a274:	4618      	mov	r0, r3
 801a276:	f7f4 fe63 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 801a27a:	f107 0214 	add.w	r2, r7, #20
 801a27e:	f107 0310 	add.w	r3, r7, #16
 801a282:	4619      	mov	r1, r3
 801a284:	4620      	mov	r0, r4
 801a286:	f7f5 fa5b 	bl	800f740 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	33a4      	adds	r3, #164	; 0xa4
 801a294:	4619      	mov	r1, r3
 801a296:	4610      	mov	r0, r2
 801a298:	f7f5 f82e 	bl	800f2f8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801a29c:	687a      	ldr	r2, [r7, #4]
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	3340      	adds	r3, #64	; 0x40
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	4610      	mov	r0, r2
 801a2a6:	f7ff ff27 	bl	801a0f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801a2aa:	687a      	ldr	r2, [r7, #4]
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	3370      	adds	r3, #112	; 0x70
 801a2b0:	4619      	mov	r1, r3
 801a2b2:	4610      	mov	r0, r2
 801a2b4:	f7ff ff20 	bl	801a0f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	371c      	adds	r7, #28
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bd90      	pop	{r4, r7, pc}
 801a2c2:	bf00      	nop
 801a2c4:	080215b4 	.word	0x080215b4
 801a2c8:	0801a2e1 	.word	0x0801a2e1

0801a2cc <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801a2cc:	b480      	push	{r7}
 801a2ce:	b083      	sub	sp, #12
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]

}
 801a2d4:	bf00      	nop
 801a2d6:	370c      	adds	r7, #12
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2de:	4770      	bx	lr

0801a2e0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
 801a2e8:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	3370      	adds	r3, #112	; 0x70
 801a2ee:	683a      	ldr	r2, [r7, #0]
 801a2f0:	429a      	cmp	r2, r3
 801a2f2:	d106      	bne.n	801a302 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenSlideTransitionEast();
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	f7ff ff63 	bl	801a1c0 <_ZN15Screen1ViewBase11applicationEv>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	f7fe fcf5 	bl	8018cec <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionEastEv>
    }
}
 801a302:	bf00      	nop
 801a304:	3708      	adds	r7, #8
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
	...

0801a30c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	4618      	mov	r0, r3
 801a318:	f002 fb4c 	bl	801c9b4 <_ZN8touchgfx6ScreenC1Ev>
 801a31c:	4a05      	ldr	r2, [pc, #20]	; (801a334 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	601a      	str	r2, [r3, #0]
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	2200      	movs	r2, #0
 801a326:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	4618      	mov	r0, r3
 801a32c:	3708      	adds	r7, #8
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}
 801a332:	bf00      	nop
 801a334:	08021600 	.word	0x08021600

0801a338 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801a338:	b580      	push	{r7, lr}
 801a33a:	b084      	sub	sp, #16
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	60f8      	str	r0, [r7, #12]
 801a340:	60b9      	str	r1, [r7, #8]
 801a342:	4639      	mov	r1, r7
 801a344:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	4618      	mov	r0, r3
 801a34c:	f7f5 f84a 	bl	800f3e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801a350:	4a08      	ldr	r2, [pc, #32]	; (801a374 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	68ba      	ldr	r2, [r7, #8]
 801a35a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	3308      	adds	r3, #8
 801a360:	463a      	mov	r2, r7
 801a362:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a366:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	4618      	mov	r0, r3
 801a36e:	3710      	adds	r7, #16
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}
 801a374:	080215e8 	.word	0x080215e8

0801a378 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801a378:	b580      	push	{r7, lr}
 801a37a:	b082      	sub	sp, #8
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
 801a380:	4a05      	ldr	r2, [pc, #20]	; (801a398 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	601a      	str	r2, [r3, #0]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	4618      	mov	r0, r3
 801a38a:	f7f5 f83b 	bl	800f404 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	4618      	mov	r0, r3
 801a392:	3708      	adds	r7, #8
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	080215e8 	.word	0x080215e8

0801a39c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801a39c:	b580      	push	{r7, lr}
 801a39e:	b082      	sub	sp, #8
 801a3a0:	af00      	add	r7, sp, #0
 801a3a2:	6078      	str	r0, [r7, #4]
 801a3a4:	6878      	ldr	r0, [r7, #4]
 801a3a6:	f7ff ffe7 	bl	801a378 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801a3aa:	2110      	movs	r1, #16
 801a3ac:	6878      	ldr	r0, [r7, #4]
 801a3ae:	f004 ff6a 	bl	801f286 <_ZdlPvj>
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	3708      	adds	r7, #8
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}

0801a3bc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b082      	sub	sp, #8
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	6078      	str	r0, [r7, #4]
 801a3c4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	685b      	ldr	r3, [r3, #4]
 801a3ca:	687a      	ldr	r2, [r7, #4]
 801a3cc:	68d2      	ldr	r2, [r2, #12]
 801a3ce:	1052      	asrs	r2, r2, #1
 801a3d0:	1898      	adds	r0, r3, r2
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	68db      	ldr	r3, [r3, #12]
 801a3d6:	f003 0301 	and.w	r3, r3, #1
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d102      	bne.n	801a3e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	689b      	ldr	r3, [r3, #8]
 801a3e2:	e00a      	b.n	801a3fa <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	685b      	ldr	r3, [r3, #4]
 801a3e8:	687a      	ldr	r2, [r7, #4]
 801a3ea:	68d2      	ldr	r2, [r2, #12]
 801a3ec:	1052      	asrs	r2, r2, #1
 801a3ee:	4413      	add	r3, r2
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	687a      	ldr	r2, [r7, #4]
 801a3f4:	6892      	ldr	r2, [r2, #8]
 801a3f6:	4413      	add	r3, r2
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	6839      	ldr	r1, [r7, #0]
 801a3fc:	4798      	blx	r3
    }
 801a3fe:	bf00      	nop
 801a400:	3708      	adds	r7, #8
 801a402:	46bd      	mov	sp, r7
 801a404:	bd80      	pop	{r7, pc}

0801a406 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801a406:	b480      	push	{r7}
 801a408:	b083      	sub	sp, #12
 801a40a:	af00      	add	r7, sp, #0
 801a40c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	685b      	ldr	r3, [r3, #4]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d010      	beq.n	801a438 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	689b      	ldr	r3, [r3, #8]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d107      	bne.n	801a42e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	68db      	ldr	r3, [r3, #12]
 801a422:	f003 0301 	and.w	r3, r3, #1
 801a426:	2b00      	cmp	r3, #0
 801a428:	d101      	bne.n	801a42e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801a42a:	2301      	movs	r3, #1
 801a42c:	e000      	b.n	801a430 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801a42e:	2300      	movs	r3, #0
 801a430:	2b01      	cmp	r3, #1
 801a432:	d001      	beq.n	801a438 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801a434:	2301      	movs	r3, #1
 801a436:	e000      	b.n	801a43a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801a438:	2300      	movs	r3, #0
    }
 801a43a:	4618      	mov	r0, r3
 801a43c:	370c      	adds	r7, #12
 801a43e:	46bd      	mov	sp, r7
 801a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a444:	4770      	bx	lr
	...

0801a448 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 801a448:	b580      	push	{r7, lr}
 801a44a:	b082      	sub	sp, #8
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
 801a450:	4a05      	ldr	r2, [pc, #20]	; (801a468 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	601a      	str	r2, [r3, #0]
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	4618      	mov	r0, r3
 801a45a:	f7ff fdf5 	bl	801a048 <_ZN8touchgfx6ScreenD1Ev>
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	4618      	mov	r0, r3
 801a462:	3708      	adds	r7, #8
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}
 801a468:	08021680 	.word	0x08021680

0801a46c <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 801a46c:	b580      	push	{r7, lr}
 801a46e:	b082      	sub	sp, #8
 801a470:	af00      	add	r7, sp, #0
 801a472:	6078      	str	r0, [r7, #4]
 801a474:	6878      	ldr	r0, [r7, #4]
 801a476:	f7ff ffe7 	bl	801a448 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801a47a:	2140      	movs	r1, #64	; 0x40
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	f004 ff02 	bl	801f286 <_ZdlPvj>
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	4618      	mov	r0, r3
 801a486:	3708      	adds	r7, #8
 801a488:	46bd      	mov	sp, r7
 801a48a:	bd80      	pop	{r7, pc}

0801a48c <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
 801a492:	6078      	str	r0, [r7, #4]
 801a494:	4a0d      	ldr	r2, [pc, #52]	; (801a4cc <_ZN15Screen2ViewBaseD1Ev+0x40>)
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	601a      	str	r2, [r3, #0]
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	33a4      	adds	r3, #164	; 0xa4
 801a49e:	4618      	mov	r0, r3
 801a4a0:	f000 f902 	bl	801a6a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	3370      	adds	r3, #112	; 0x70
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	f7f4 ff79 	bl	800f3a0 <_ZN8touchgfx6ButtonD1Ev>
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	3340      	adds	r3, #64	; 0x40
 801a4b2:	4618      	mov	r0, r3
 801a4b4:	f7f4 fe3e 	bl	800f134 <_ZN8touchgfx3BoxD1Ev>
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	4618      	mov	r0, r3
 801a4bc:	f7ff ffc4 	bl	801a448 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	3708      	adds	r7, #8
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	08021634 	.word	0x08021634

0801a4d0 <_ZN15Screen2ViewBaseD0Ev>:
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	b082      	sub	sp, #8
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	6078      	str	r0, [r7, #4]
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f7ff ffd7 	bl	801a48c <_ZN15Screen2ViewBaseD1Ev>
 801a4de:	21b4      	movs	r1, #180	; 0xb4
 801a4e0:	6878      	ldr	r0, [r7, #4]
 801a4e2:	f004 fed0 	bl	801f286 <_ZdlPvj>
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	3708      	adds	r7, #8
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd80      	pop	{r7, pc}

0801a4f0 <_ZN15Screen2ViewBase11applicationEv>:

    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b082      	sub	sp, #8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801a4f8:	f001 fbd2 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801a4fc:	4603      	mov	r3, r0
    }
 801a4fe:	4618      	mov	r0, r3
 801a500:	3708      	adds	r7, #8
 801a502:	46bd      	mov	sp, r7
 801a504:	bd80      	pop	{r7, pc}
	...

0801a508 <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"

Screen2ViewBase::Screen2ViewBase() :
 801a508:	b590      	push	{r4, r7, lr}
 801a50a:	b089      	sub	sp, #36	; 0x24
 801a50c:	af02      	add	r7, sp, #8
 801a50e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	4618      	mov	r0, r3
 801a514:	f000 f892 	bl	801a63c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801a518:	4a36      	ldr	r2, [pc, #216]	; (801a5f4 <_ZN15Screen2ViewBaseC1Ev+0xec>)
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	601a      	str	r2, [r3, #0]
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	3340      	adds	r3, #64	; 0x40
 801a522:	4618      	mov	r0, r3
 801a524:	f7f4 fde6 	bl	800f0f4 <_ZN8touchgfx3BoxC1Ev>
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	3370      	adds	r3, #112	; 0x70
 801a52c:	4618      	mov	r0, r3
 801a52e:	f7f4 ff13 	bl	800f358 <_ZN8touchgfx6ButtonC1Ev>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801a538:	4b2f      	ldr	r3, [pc, #188]	; (801a5f8 <_ZN15Screen2ViewBaseC1Ev+0xf0>)
 801a53a:	60bb      	str	r3, [r7, #8]
 801a53c:	2300      	movs	r3, #0
 801a53e:	60fb      	str	r3, [r7, #12]
 801a540:	f107 0308 	add.w	r3, r7, #8
 801a544:	cb0c      	ldmia	r3, {r2, r3}
 801a546:	6879      	ldr	r1, [r7, #4]
 801a548:	f000 f88e 	bl	801a668 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 527, 298);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801a552:	f44f 7395 	mov.w	r3, #298	; 0x12a
 801a556:	9300      	str	r3, [sp, #0]
 801a558:	f240 230f 	movw	r3, #527	; 0x20f
 801a55c:	2200      	movs	r2, #0
 801a55e:	2100      	movs	r1, #0
 801a560:	f7f4 f888 	bl	800e674 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(13, 87, 76));
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a56a:	224c      	movs	r2, #76	; 0x4c
 801a56c:	2157      	movs	r1, #87	; 0x57
 801a56e:	200d      	movs	r0, #13
 801a570:	f002 fcb8 	bl	801cee4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801a574:	4603      	mov	r3, r0
 801a576:	4619      	mov	r1, r3
 801a578:	4620      	mov	r0, r4
 801a57a:	f7f4 fdfd 	bl	800f178 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(178, 119);
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	3370      	adds	r3, #112	; 0x70
 801a582:	2277      	movs	r2, #119	; 0x77
 801a584:	21b2      	movs	r1, #178	; 0xb2
 801a586:	4618      	mov	r0, r3
 801a588:	f7f4 f8d9 	bl	800e73e <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801a592:	f107 0310 	add.w	r3, r7, #16
 801a596:	2100      	movs	r1, #0
 801a598:	4618      	mov	r0, r3
 801a59a:	f7f4 fcd1 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 801a59e:	f107 0314 	add.w	r3, r7, #20
 801a5a2:	2101      	movs	r1, #1
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7f4 fccb 	bl	800ef40 <_ZN8touchgfx6BitmapC1Et>
 801a5aa:	f107 0214 	add.w	r2, r7, #20
 801a5ae:	f107 0310 	add.w	r3, r7, #16
 801a5b2:	4619      	mov	r1, r3
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	f7f5 f8c3 	bl	800f740 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	33a4      	adds	r3, #164	; 0xa4
 801a5c4:	4619      	mov	r1, r3
 801a5c6:	4610      	mov	r0, r2
 801a5c8:	f7f4 fe96 	bl	800f2f8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801a5cc:	687a      	ldr	r2, [r7, #4]
 801a5ce:	687b      	ldr	r3, [r7, #4]
 801a5d0:	3340      	adds	r3, #64	; 0x40
 801a5d2:	4619      	mov	r1, r3
 801a5d4:	4610      	mov	r0, r2
 801a5d6:	f7ff fd8f 	bl	801a0f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	3370      	adds	r3, #112	; 0x70
 801a5e0:	4619      	mov	r1, r3
 801a5e2:	4610      	mov	r0, r2
 801a5e4:	f7ff fd88 	bl	801a0f8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	371c      	adds	r7, #28
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd90      	pop	{r4, r7, pc}
 801a5f2:	bf00      	nop
 801a5f4:	08021634 	.word	0x08021634
 801a5f8:	0801a611 	.word	0x0801a611

0801a5fc <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 801a5fc:	b480      	push	{r7}
 801a5fe:	b083      	sub	sp, #12
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]

}
 801a604:	bf00      	nop
 801a606:	370c      	adds	r7, #12
 801a608:	46bd      	mov	sp, r7
 801a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a60e:	4770      	bx	lr

0801a610 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801a610:	b580      	push	{r7, lr}
 801a612:	b082      	sub	sp, #8
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
 801a618:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	3370      	adds	r3, #112	; 0x70
 801a61e:	683a      	ldr	r2, [r7, #0]
 801a620:	429a      	cmp	r2, r3
 801a622:	d106      	bne.n	801a632 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenCoverTransitionWest();
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f7ff ff63 	bl	801a4f0 <_ZN15Screen2ViewBase11applicationEv>
 801a62a:	4603      	mov	r3, r0
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7fe fb17 	bl	8018c60 <_ZN23FrontendApplicationBase36gotoScreen1ScreenCoverTransitionWestEv>
    }
}
 801a632:	bf00      	nop
 801a634:	3708      	adds	r7, #8
 801a636:	46bd      	mov	sp, r7
 801a638:	bd80      	pop	{r7, pc}
	...

0801a63c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b082      	sub	sp, #8
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	4618      	mov	r0, r3
 801a648:	f002 f9b4 	bl	801c9b4 <_ZN8touchgfx6ScreenC1Ev>
 801a64c:	4a05      	ldr	r2, [pc, #20]	; (801a664 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	601a      	str	r2, [r3, #0]
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	2200      	movs	r2, #0
 801a656:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	4618      	mov	r0, r3
 801a65c:	3708      	adds	r7, #8
 801a65e:	46bd      	mov	sp, r7
 801a660:	bd80      	pop	{r7, pc}
 801a662:	bf00      	nop
 801a664:	08021680 	.word	0x08021680

0801a668 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801a668:	b580      	push	{r7, lr}
 801a66a:	b084      	sub	sp, #16
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	60f8      	str	r0, [r7, #12]
 801a670:	60b9      	str	r1, [r7, #8]
 801a672:	4639      	mov	r1, r7
 801a674:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801a678:	68fb      	ldr	r3, [r7, #12]
 801a67a:	4618      	mov	r0, r3
 801a67c:	f7f4 feb2 	bl	800f3e4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801a680:	4a08      	ldr	r2, [pc, #32]	; (801a6a4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	68ba      	ldr	r2, [r7, #8]
 801a68a:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	3308      	adds	r3, #8
 801a690:	463a      	mov	r2, r7
 801a692:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a696:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	4618      	mov	r0, r3
 801a69e:	3710      	adds	r7, #16
 801a6a0:	46bd      	mov	sp, r7
 801a6a2:	bd80      	pop	{r7, pc}
 801a6a4:	08021668 	.word	0x08021668

0801a6a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b082      	sub	sp, #8
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	4a05      	ldr	r2, [pc, #20]	; (801a6c8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	601a      	str	r2, [r3, #0]
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7f4 fea3 	bl	800f404 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	3708      	adds	r7, #8
 801a6c4:	46bd      	mov	sp, r7
 801a6c6:	bd80      	pop	{r7, pc}
 801a6c8:	08021668 	.word	0x08021668

0801a6cc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801a6cc:	b580      	push	{r7, lr}
 801a6ce:	b082      	sub	sp, #8
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	6078      	str	r0, [r7, #4]
 801a6d4:	6878      	ldr	r0, [r7, #4]
 801a6d6:	f7ff ffe7 	bl	801a6a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801a6da:	2110      	movs	r1, #16
 801a6dc:	6878      	ldr	r0, [r7, #4]
 801a6de:	f004 fdd2 	bl	801f286 <_ZdlPvj>
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	3708      	adds	r7, #8
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bd80      	pop	{r7, pc}

0801a6ec <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
 801a6f4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	685b      	ldr	r3, [r3, #4]
 801a6fa:	687a      	ldr	r2, [r7, #4]
 801a6fc:	68d2      	ldr	r2, [r2, #12]
 801a6fe:	1052      	asrs	r2, r2, #1
 801a700:	1898      	adds	r0, r3, r2
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	68db      	ldr	r3, [r3, #12]
 801a706:	f003 0301 	and.w	r3, r3, #1
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d102      	bne.n	801a714 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	689b      	ldr	r3, [r3, #8]
 801a712:	e00a      	b.n	801a72a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	685b      	ldr	r3, [r3, #4]
 801a718:	687a      	ldr	r2, [r7, #4]
 801a71a:	68d2      	ldr	r2, [r2, #12]
 801a71c:	1052      	asrs	r2, r2, #1
 801a71e:	4413      	add	r3, r2
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	687a      	ldr	r2, [r7, #4]
 801a724:	6892      	ldr	r2, [r2, #8]
 801a726:	4413      	add	r3, r2
 801a728:	681b      	ldr	r3, [r3, #0]
 801a72a:	6839      	ldr	r1, [r7, #0]
 801a72c:	4798      	blx	r3
    }
 801a72e:	bf00      	nop
 801a730:	3708      	adds	r7, #8
 801a732:	46bd      	mov	sp, r7
 801a734:	bd80      	pop	{r7, pc}

0801a736 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801a736:	b480      	push	{r7}
 801a738:	b083      	sub	sp, #12
 801a73a:	af00      	add	r7, sp, #0
 801a73c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d010      	beq.n	801a768 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	689b      	ldr	r3, [r3, #8]
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d107      	bne.n	801a75e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	68db      	ldr	r3, [r3, #12]
 801a752:	f003 0301 	and.w	r3, r3, #1
 801a756:	2b00      	cmp	r3, #0
 801a758:	d101      	bne.n	801a75e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801a75a:	2301      	movs	r3, #1
 801a75c:	e000      	b.n	801a760 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801a75e:	2300      	movs	r3, #0
 801a760:	2b01      	cmp	r3, #1
 801a762:	d001      	beq.n	801a768 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801a764:	2301      	movs	r3, #1
 801a766:	e000      	b.n	801a76a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801a768:	2300      	movs	r3, #0
    }
 801a76a:	4618      	mov	r0, r3
 801a76c:	370c      	adds	r7, #12
 801a76e:	46bd      	mov	sp, r7
 801a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a774:	4770      	bx	lr
	...

0801a778 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801a778:	b480      	push	{r7}
 801a77a:	af00      	add	r7, sp, #0
    return bitmap_database;
 801a77c:	4b02      	ldr	r3, [pc, #8]	; (801a788 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801a77e:	4618      	mov	r0, r3
 801a780:	46bd      	mov	sp, r7
 801a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a786:	4770      	bx	lr
 801a788:	080216ac 	.word	0x080216ac

0801a78c <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 801a78c:	b480      	push	{r7}
 801a78e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801a790:	2302      	movs	r3, #2
}
 801a792:	4618      	mov	r0, r3
 801a794:	46bd      	mov	sp, r7
 801a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a79a:	4770      	bx	lr

0801a79c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801a79c:	b480      	push	{r7}
 801a79e:	b085      	sub	sp, #20
 801a7a0:	af00      	add	r7, sp, #0
 801a7a2:	60f8      	str	r0, [r7, #12]
 801a7a4:	60b9      	str	r1, [r7, #8]
 801a7a6:	4613      	mov	r3, r2
 801a7a8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801a7aa:	4a07      	ldr	r2, [pc, #28]	; (801a7c8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	6013      	str	r3, [r2, #0]
        fonts = f;
 801a7b0:	4a06      	ldr	r2, [pc, #24]	; (801a7cc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801a7b2:	68bb      	ldr	r3, [r7, #8]
 801a7b4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801a7b6:	4a06      	ldr	r2, [pc, #24]	; (801a7d0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801a7b8:	88fb      	ldrh	r3, [r7, #6]
 801a7ba:	8013      	strh	r3, [r2, #0]
    }
 801a7bc:	bf00      	nop
 801a7be:	3714      	adds	r7, #20
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c6:	4770      	bx	lr
 801a7c8:	20009b74 	.word	0x20009b74
 801a7cc:	20009b7c 	.word	0x20009b7c
 801a7d0:	20009b78 	.word	0x20009b78

0801a7d4 <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801a7d4:	b5b0      	push	{r4, r5, r7, lr}
 801a7d6:	b082      	sub	sp, #8
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	4603      	mov	r3, r0
 801a7dc:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 801a7de:	4a0d      	ldr	r2, [pc, #52]	; (801a814 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801a7e0:	88fb      	ldrh	r3, [r7, #6]
 801a7e2:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801a7e4:	2200      	movs	r2, #0
 801a7e6:	4b0c      	ldr	r3, [pc, #48]	; (801a818 <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 801a7e8:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801a7ea:	4b0a      	ldr	r3, [pc, #40]	; (801a814 <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801a7ec:	881b      	ldrh	r3, [r3, #0]
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f000 f834 	bl	801a85c <_ZN17TypedTextDatabase11getInstanceEt>
 801a7f4:	4604      	mov	r4, r0
 801a7f6:	f000 f847 	bl	801a888 <_ZN17TypedTextDatabase8getFontsEv>
 801a7fa:	4605      	mov	r5, r0
 801a7fc:	f000 f83c 	bl	801a878 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801a800:	4603      	mov	r3, r0
 801a802:	461a      	mov	r2, r3
 801a804:	4629      	mov	r1, r5
 801a806:	4620      	mov	r0, r4
 801a808:	f7ff ffc8 	bl	801a79c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801a80c:	bf00      	nop
 801a80e:	3708      	adds	r7, #8
 801a810:	46bd      	mov	sp, r7
 801a812:	bdb0      	pop	{r4, r5, r7, pc}
 801a814:	20009af4 	.word	0x20009af4
 801a818:	20009af8 	.word	0x20009af8

0801a81c <_Z41__static_initialization_and_destruction_0ii>:
 801a81c:	b480      	push	{r7}
 801a81e:	b083      	sub	sp, #12
 801a820:	af00      	add	r7, sp, #0
 801a822:	6078      	str	r0, [r7, #4]
 801a824:	6039      	str	r1, [r7, #0]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	2b01      	cmp	r3, #1
 801a82a:	d107      	bne.n	801a83c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801a82c:	683b      	ldr	r3, [r7, #0]
 801a82e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a832:	4293      	cmp	r3, r2
 801a834:	d102      	bne.n	801a83c <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801a836:	2200      	movs	r2, #0
 801a838:	4b03      	ldr	r3, [pc, #12]	; (801a848 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801a83a:	601a      	str	r2, [r3, #0]
}
 801a83c:	bf00      	nop
 801a83e:	370c      	adds	r7, #12
 801a840:	46bd      	mov	sp, r7
 801a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a846:	4770      	bx	lr
 801a848:	20009af8 	.word	0x20009af8

0801a84c <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801a84c:	b580      	push	{r7, lr}
 801a84e:	af00      	add	r7, sp, #0
 801a850:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a854:	2001      	movs	r0, #1
 801a856:	f7ff ffe1 	bl	801a81c <_Z41__static_initialization_and_destruction_0ii>
 801a85a:	bd80      	pop	{r7, pc}

0801a85c <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 801a85c:	b480      	push	{r7}
 801a85e:	b083      	sub	sp, #12
 801a860:	af00      	add	r7, sp, #0
 801a862:	4603      	mov	r3, r0
 801a864:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 801a866:	4b03      	ldr	r3, [pc, #12]	; (801a874 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 801a868:	4618      	mov	r0, r3
 801a86a:	370c      	adds	r7, #12
 801a86c:	46bd      	mov	sp, r7
 801a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a872:	4770      	bx	lr
 801a874:	080367d8 	.word	0x080367d8

0801a878 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801a878:	b480      	push	{r7}
 801a87a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801a87c:	2301      	movs	r3, #1
}
 801a87e:	4618      	mov	r0, r3
 801a880:	46bd      	mov	sp, r7
 801a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a886:	4770      	bx	lr

0801a888 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 801a888:	b480      	push	{r7}
 801a88a:	af00      	add	r7, sp, #0
    return _fonts;
 801a88c:	4b02      	ldr	r3, [pc, #8]	; (801a898 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801a88e:	4618      	mov	r0, r3
 801a890:	46bd      	mov	sp, r7
 801a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a896:	4770      	bx	lr
 801a898:	20009afc 	.word	0x20009afc

0801a89c <_Z41__static_initialization_and_destruction_0ii>:
}
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b082      	sub	sp, #8
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]
 801a8a4:	6039      	str	r1, [r7, #0]
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	2b01      	cmp	r3, #1
 801a8aa:	d113      	bne.n	801a8d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801a8ac:	683b      	ldr	r3, [r7, #0]
 801a8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8b2:	4293      	cmp	r3, r2
 801a8b4:	d10e      	bne.n	801a8d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801a8b6:	f7fd ff3d 	bl	8018734 <_Z23getFont_verdana_20_4bppv>
 801a8ba:	4602      	mov	r2, r0
};
 801a8bc:	4b07      	ldr	r3, [pc, #28]	; (801a8dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801a8be:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801a8c0:	f7fd ff76 	bl	80187b0 <_Z23getFont_verdana_40_4bppv>
 801a8c4:	4602      	mov	r2, r0
};
 801a8c6:	4b05      	ldr	r3, [pc, #20]	; (801a8dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801a8c8:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 801a8ca:	f7fd fef5 	bl	80186b8 <_Z23getFont_verdana_10_4bppv>
 801a8ce:	4602      	mov	r2, r0
};
 801a8d0:	4b02      	ldr	r3, [pc, #8]	; (801a8dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801a8d2:	609a      	str	r2, [r3, #8]
}
 801a8d4:	bf00      	nop
 801a8d6:	3708      	adds	r7, #8
 801a8d8:	46bd      	mov	sp, r7
 801a8da:	bd80      	pop	{r7, pc}
 801a8dc:	20009afc 	.word	0x20009afc

0801a8e0 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	af00      	add	r7, sp, #0
 801a8e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a8e8:	2001      	movs	r0, #1
 801a8ea:	f7ff ffd7 	bl	801a89c <_Z41__static_initialization_and_destruction_0ii>
 801a8ee:	bd80      	pop	{r7, pc}

0801a8f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b084      	sub	sp, #16
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	60f8      	str	r0, [r7, #12]
 801a8f8:	60b9      	str	r1, [r7, #8]
 801a8fa:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	687a      	ldr	r2, [r7, #4]
 801a900:	68b9      	ldr	r1, [r7, #8]
 801a902:	4618      	mov	r0, r3
 801a904:	f7fe f91c 	bl	8018b40 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801a908:	4a03      	ldr	r2, [pc, #12]	; (801a918 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	601a      	str	r2, [r3, #0]
{
}
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	4618      	mov	r0, r3
 801a912:	3710      	adds	r7, #16
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	08020d7c 	.word	0x08020d7c

0801a91c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801a91c:	b480      	push	{r7}
 801a91e:	b083      	sub	sp, #12
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	2200      	movs	r2, #0
 801a928:	601a      	str	r2, [r3, #0]
{
}
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	4618      	mov	r0, r3
 801a92e:	370c      	adds	r7, #12
 801a930:	46bd      	mov	sp, r7
 801a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a936:	4770      	bx	lr

0801a938 <_ZN5Model4tickEv>:

void Model::tick()
{
 801a938:	b480      	push	{r7}
 801a93a:	b083      	sub	sp, #12
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
}
 801a940:	bf00      	nop
 801a942:	370c      	adds	r7, #12
 801a944:	46bd      	mov	sp, r7
 801a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94a:	4770      	bx	lr

0801a94c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801a94c:	b480      	push	{r7}
 801a94e:	b083      	sub	sp, #12
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
    {
    }
 801a954:	bf00      	nop
 801a956:	370c      	adds	r7, #12
 801a958:	46bd      	mov	sp, r7
 801a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a95e:	4770      	bx	lr

0801a960 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801a960:	b480      	push	{r7}
 801a962:	b083      	sub	sp, #12
 801a964:	af00      	add	r7, sp, #0
 801a966:	6078      	str	r0, [r7, #4]
    {
    }
 801a968:	bf00      	nop
 801a96a:	370c      	adds	r7, #12
 801a96c:	46bd      	mov	sp, r7
 801a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a972:	4770      	bx	lr

0801a974 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801a974:	b480      	push	{r7}
 801a976:	b083      	sub	sp, #12
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
    {
 801a97c:	4a04      	ldr	r2, [pc, #16]	; (801a990 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	601a      	str	r2, [r3, #0]
    }
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	4618      	mov	r0, r3
 801a986:	370c      	adds	r7, #12
 801a988:	46bd      	mov	sp, r7
 801a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98e:	4770      	bx	lr
 801a990:	08021714 	.word	0x08021714

0801a994 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801a994:	b580      	push	{r7, lr}
 801a996:	b082      	sub	sp, #8
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
    }
 801a99c:	6878      	ldr	r0, [r7, #4]
 801a99e:	f7ff ffe9 	bl	801a974 <_ZN8touchgfx9PresenterD1Ev>
 801a9a2:	2104      	movs	r1, #4
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	f004 fc6e 	bl	801f286 <_ZdlPvj>
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3708      	adds	r7, #8
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}

0801a9b4 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801a9b4:	b480      	push	{r7}
 801a9b6:	b083      	sub	sp, #12
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	6078      	str	r0, [r7, #4]
    {
 801a9bc:	4a04      	ldr	r2, [pc, #16]	; (801a9d0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	601a      	str	r2, [r3, #0]
    }
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	370c      	adds	r7, #12
 801a9c8:	46bd      	mov	sp, r7
 801a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ce:	4770      	bx	lr
 801a9d0:	08021714 	.word	0x08021714

0801a9d4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801a9d4:	b480      	push	{r7}
 801a9d6:	b083      	sub	sp, #12
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
 801a9dc:	4a06      	ldr	r2, [pc, #24]	; (801a9f8 <_ZN13ModelListenerC1Ev+0x24>)
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	601a      	str	r2, [r3, #0]
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	2200      	movs	r2, #0
 801a9e6:	605a      	str	r2, [r3, #4]
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	370c      	adds	r7, #12
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f4:	4770      	bx	lr
 801a9f6:	bf00      	nop
 801a9f8:	08021704 	.word	0x08021704

0801a9fc <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801a9fc:	b480      	push	{r7}
 801a9fe:	b083      	sub	sp, #12
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	4a04      	ldr	r2, [pc, #16]	; (801aa18 <_ZN13ModelListenerD1Ev+0x1c>)
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	601a      	str	r2, [r3, #0]
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	370c      	adds	r7, #12
 801aa10:	46bd      	mov	sp, r7
 801aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa16:	4770      	bx	lr
 801aa18:	08021704 	.word	0x08021704

0801aa1c <_ZN13ModelListenerD0Ev>:
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b082      	sub	sp, #8
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7ff ffe9 	bl	801a9fc <_ZN13ModelListenerD1Ev>
 801aa2a:	2108      	movs	r1, #8
 801aa2c:	6878      	ldr	r0, [r7, #4]
 801aa2e:	f004 fc2a 	bl	801f286 <_ZdlPvj>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	4618      	mov	r0, r3
 801aa36:	3708      	adds	r7, #8
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}

0801aa3c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b082      	sub	sp, #8
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
 801aa44:	4a09      	ldr	r2, [pc, #36]	; (801aa6c <_ZN16Screen1PresenterD1Ev+0x30>)
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	601a      	str	r2, [r3, #0]
 801aa4a:	4a09      	ldr	r2, [pc, #36]	; (801aa70 <_ZN16Screen1PresenterD1Ev+0x34>)
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	605a      	str	r2, [r3, #4]
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	3304      	adds	r3, #4
 801aa54:	4618      	mov	r0, r3
 801aa56:	f7ff ffd1 	bl	801a9fc <_ZN13ModelListenerD1Ev>
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	f7ff ff89 	bl	801a974 <_ZN8touchgfx9PresenterD1Ev>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	4618      	mov	r0, r3
 801aa66:	3708      	adds	r7, #8
 801aa68:	46bd      	mov	sp, r7
 801aa6a:	bd80      	pop	{r7, pc}
 801aa6c:	080216dc 	.word	0x080216dc
 801aa70:	080216f4 	.word	0x080216f4

0801aa74 <_ZThn4_N16Screen1PresenterD1Ev>:
 801aa74:	f1a0 0004 	sub.w	r0, r0, #4
 801aa78:	e7e0      	b.n	801aa3c <_ZN16Screen1PresenterD1Ev>
 801aa7a:	bf00      	nop

0801aa7c <_ZN16Screen1PresenterD0Ev>:
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b082      	sub	sp, #8
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	f7ff ffd9 	bl	801aa3c <_ZN16Screen1PresenterD1Ev>
 801aa8a:	2110      	movs	r1, #16
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f004 fbfa 	bl	801f286 <_ZdlPvj>
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	4618      	mov	r0, r3
 801aa96:	3708      	adds	r7, #8
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}

0801aa9c <_ZThn4_N16Screen1PresenterD0Ev>:
 801aa9c:	f1a0 0004 	sub.w	r0, r0, #4
 801aaa0:	e7ec      	b.n	801aa7c <_ZN16Screen1PresenterD0Ev>
	...

0801aaa4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 801aaa4:	b580      	push	{r7, lr}
 801aaa6:	b082      	sub	sp, #8
 801aaa8:	af00      	add	r7, sp, #0
 801aaaa:	6078      	str	r0, [r7, #4]
 801aaac:	6039      	str	r1, [r7, #0]
    : view(v)
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	4618      	mov	r0, r3
 801aab2:	f7ff ff7f 	bl	801a9b4 <_ZN8touchgfx9PresenterC1Ev>
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	3304      	adds	r3, #4
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7ff ff8a 	bl	801a9d4 <_ZN13ModelListenerC1Ev>
 801aac0:	4a06      	ldr	r2, [pc, #24]	; (801aadc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	601a      	str	r2, [r3, #0]
 801aac6:	4a06      	ldr	r2, [pc, #24]	; (801aae0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	605a      	str	r2, [r3, #4]
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	683a      	ldr	r2, [r7, #0]
 801aad0:	60da      	str	r2, [r3, #12]
{
}
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	4618      	mov	r0, r3
 801aad6:	3708      	adds	r7, #8
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}
 801aadc:	080216dc 	.word	0x080216dc
 801aae0:	080216f4 	.word	0x080216f4

0801aae4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 801aae4:	b480      	push	{r7}
 801aae6:	b083      	sub	sp, #12
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]

}
 801aaec:	bf00      	nop
 801aaee:	370c      	adds	r7, #12
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf6:	4770      	bx	lr

0801aaf8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b083      	sub	sp, #12
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]

}
 801ab00:	bf00      	nop
 801ab02:	370c      	adds	r7, #12
 801ab04:	46bd      	mov	sp, r7
 801ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0a:	4770      	bx	lr

0801ab0c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801ab0c:	b580      	push	{r7, lr}
 801ab0e:	b082      	sub	sp, #8
 801ab10:	af00      	add	r7, sp, #0
 801ab12:	6078      	str	r0, [r7, #4]
 801ab14:	4a05      	ldr	r2, [pc, #20]	; (801ab2c <_ZN11Screen1ViewD1Ev+0x20>)
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	601a      	str	r2, [r3, #0]
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f7ff fb1d 	bl	801a15c <_ZN15Screen1ViewBaseD1Ev>
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	4618      	mov	r0, r3
 801ab26:	3708      	adds	r7, #8
 801ab28:	46bd      	mov	sp, r7
 801ab2a:	bd80      	pop	{r7, pc}
 801ab2c:	0802172c 	.word	0x0802172c

0801ab30 <_ZN11Screen1ViewD0Ev>:
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b082      	sub	sp, #8
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	6078      	str	r0, [r7, #4]
 801ab38:	6878      	ldr	r0, [r7, #4]
 801ab3a:	f7ff ffe7 	bl	801ab0c <_ZN11Screen1ViewD1Ev>
 801ab3e:	21b4      	movs	r1, #180	; 0xb4
 801ab40:	6878      	ldr	r0, [r7, #4]
 801ab42:	f004 fba0 	bl	801f286 <_ZdlPvj>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	4618      	mov	r0, r3
 801ab4a:	3708      	adds	r7, #8
 801ab4c:	46bd      	mov	sp, r7
 801ab4e:	bd80      	pop	{r7, pc}

0801ab50 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b082      	sub	sp, #8
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7ff fb3c 	bl	801a1d8 <_ZN15Screen1ViewBaseC1Ev>
 801ab60:	4a03      	ldr	r2, [pc, #12]	; (801ab70 <_ZN11Screen1ViewC1Ev+0x20>)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	601a      	str	r2, [r3, #0]
{

}
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	4618      	mov	r0, r3
 801ab6a:	3708      	adds	r7, #8
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bd80      	pop	{r7, pc}
 801ab70:	0802172c 	.word	0x0802172c

0801ab74 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	4618      	mov	r0, r3
 801ab80:	f7ff fba4 	bl	801a2cc <_ZN15Screen1ViewBase11setupScreenEv>
}
 801ab84:	bf00      	nop
 801ab86:	3708      	adds	r7, #8
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}

0801ab8c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	4618      	mov	r0, r3
 801ab98:	f7ff fa8e 	bl	801a0b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801ab9c:	bf00      	nop
 801ab9e:	3708      	adds	r7, #8
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}

0801aba4 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b082      	sub	sp, #8
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	6078      	str	r0, [r7, #4]
 801abac:	4a09      	ldr	r2, [pc, #36]	; (801abd4 <_ZN16Screen2PresenterD1Ev+0x30>)
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	601a      	str	r2, [r3, #0]
 801abb2:	4a09      	ldr	r2, [pc, #36]	; (801abd8 <_ZN16Screen2PresenterD1Ev+0x34>)
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	605a      	str	r2, [r3, #4]
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	3304      	adds	r3, #4
 801abbc:	4618      	mov	r0, r3
 801abbe:	f7ff ff1d 	bl	801a9fc <_ZN13ModelListenerD1Ev>
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff fed5 	bl	801a974 <_ZN8touchgfx9PresenterD1Ev>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	4618      	mov	r0, r3
 801abce:	3708      	adds	r7, #8
 801abd0:	46bd      	mov	sp, r7
 801abd2:	bd80      	pop	{r7, pc}
 801abd4:	08021760 	.word	0x08021760
 801abd8:	08021778 	.word	0x08021778

0801abdc <_ZThn4_N16Screen2PresenterD1Ev>:
 801abdc:	f1a0 0004 	sub.w	r0, r0, #4
 801abe0:	e7e0      	b.n	801aba4 <_ZN16Screen2PresenterD1Ev>
 801abe2:	bf00      	nop

0801abe4 <_ZN16Screen2PresenterD0Ev>:
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b082      	sub	sp, #8
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	6878      	ldr	r0, [r7, #4]
 801abee:	f7ff ffd9 	bl	801aba4 <_ZN16Screen2PresenterD1Ev>
 801abf2:	2110      	movs	r1, #16
 801abf4:	6878      	ldr	r0, [r7, #4]
 801abf6:	f004 fb46 	bl	801f286 <_ZdlPvj>
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	4618      	mov	r0, r3
 801abfe:	3708      	adds	r7, #8
 801ac00:	46bd      	mov	sp, r7
 801ac02:	bd80      	pop	{r7, pc}

0801ac04 <_ZThn4_N16Screen2PresenterD0Ev>:
 801ac04:	f1a0 0004 	sub.w	r0, r0, #4
 801ac08:	e7ec      	b.n	801abe4 <_ZN16Screen2PresenterD0Ev>
	...

0801ac0c <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b082      	sub	sp, #8
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
 801ac14:	6039      	str	r1, [r7, #0]
    : view(v)
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7ff fecb 	bl	801a9b4 <_ZN8touchgfx9PresenterC1Ev>
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	3304      	adds	r3, #4
 801ac22:	4618      	mov	r0, r3
 801ac24:	f7ff fed6 	bl	801a9d4 <_ZN13ModelListenerC1Ev>
 801ac28:	4a06      	ldr	r2, [pc, #24]	; (801ac44 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 801ac2a:	687b      	ldr	r3, [r7, #4]
 801ac2c:	601a      	str	r2, [r3, #0]
 801ac2e:	4a06      	ldr	r2, [pc, #24]	; (801ac48 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	605a      	str	r2, [r3, #4]
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	683a      	ldr	r2, [r7, #0]
 801ac38:	60da      	str	r2, [r3, #12]
{
}
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	4618      	mov	r0, r3
 801ac3e:	3708      	adds	r7, #8
 801ac40:	46bd      	mov	sp, r7
 801ac42:	bd80      	pop	{r7, pc}
 801ac44:	08021760 	.word	0x08021760
 801ac48:	08021778 	.word	0x08021778

0801ac4c <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 801ac4c:	b480      	push	{r7}
 801ac4e:	b083      	sub	sp, #12
 801ac50:	af00      	add	r7, sp, #0
 801ac52:	6078      	str	r0, [r7, #4]

}
 801ac54:	bf00      	nop
 801ac56:	370c      	adds	r7, #12
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac5e:	4770      	bx	lr

0801ac60 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 801ac60:	b480      	push	{r7}
 801ac62:	b083      	sub	sp, #12
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]

}
 801ac68:	bf00      	nop
 801ac6a:	370c      	adds	r7, #12
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac72:	4770      	bx	lr

0801ac74 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 801ac74:	b580      	push	{r7, lr}
 801ac76:	b082      	sub	sp, #8
 801ac78:	af00      	add	r7, sp, #0
 801ac7a:	6078      	str	r0, [r7, #4]
 801ac7c:	4a05      	ldr	r2, [pc, #20]	; (801ac94 <_ZN11Screen2ViewD1Ev+0x20>)
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	601a      	str	r2, [r3, #0]
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f7ff fc01 	bl	801a48c <_ZN15Screen2ViewBaseD1Ev>
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	08021788 	.word	0x08021788

0801ac98 <_ZN11Screen2ViewD0Ev>:
 801ac98:	b580      	push	{r7, lr}
 801ac9a:	b082      	sub	sp, #8
 801ac9c:	af00      	add	r7, sp, #0
 801ac9e:	6078      	str	r0, [r7, #4]
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f7ff ffe7 	bl	801ac74 <_ZN11Screen2ViewD1Ev>
 801aca6:	21b4      	movs	r1, #180	; 0xb4
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f004 faec 	bl	801f286 <_ZdlPvj>
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	4618      	mov	r0, r3
 801acb2:	3708      	adds	r7, #8
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd80      	pop	{r7, pc}

0801acb8 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 801acb8:	b580      	push	{r7, lr}
 801acba:	b082      	sub	sp, #8
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	4618      	mov	r0, r3
 801acc4:	f7ff fc20 	bl	801a508 <_ZN15Screen2ViewBaseC1Ev>
 801acc8:	4a03      	ldr	r2, [pc, #12]	; (801acd8 <_ZN11Screen2ViewC1Ev+0x20>)
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	601a      	str	r2, [r3, #0]
{

}
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	4618      	mov	r0, r3
 801acd2:	3708      	adds	r7, #8
 801acd4:	46bd      	mov	sp, r7
 801acd6:	bd80      	pop	{r7, pc}
 801acd8:	08021788 	.word	0x08021788

0801acdc <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b082      	sub	sp, #8
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	4618      	mov	r0, r3
 801ace8:	f7ff fc88 	bl	801a5fc <_ZN15Screen2ViewBase11setupScreenEv>
}
 801acec:	bf00      	nop
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}

0801acf4 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 801acf4:	b580      	push	{r7, lr}
 801acf6:	b082      	sub	sp, #8
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	4618      	mov	r0, r3
 801ad00:	f7ff f9da 	bl	801a0b8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801ad04:	bf00      	nop
 801ad06:	3708      	adds	r7, #8
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}

0801ad0c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801ad0c:	8880      	ldrh	r0, [r0, #4]
 801ad0e:	4770      	bx	lr

0801ad10 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801ad10:	2300      	movs	r3, #0
 801ad12:	8083      	strh	r3, [r0, #4]
 801ad14:	4770      	bx	lr
	...

0801ad18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad1a:	6803      	ldr	r3, [r0, #0]
 801ad1c:	460e      	mov	r6, r1
 801ad1e:	2100      	movs	r1, #0
 801ad20:	4604      	mov	r4, r0
 801ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad24:	4798      	blx	r3
 801ad26:	4605      	mov	r5, r0
 801ad28:	6823      	ldr	r3, [r4, #0]
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	1b75      	subs	r5, r6, r5
 801ad2e:	6a1b      	ldr	r3, [r3, #32]
 801ad30:	b2ad      	uxth	r5, r5
 801ad32:	4798      	blx	r3
 801ad34:	88a3      	ldrh	r3, [r4, #4]
 801ad36:	fbb5 f0f0 	udiv	r0, r5, r0
 801ad3a:	4298      	cmp	r0, r3
 801ad3c:	b285      	uxth	r5, r0
 801ad3e:	db05      	blt.n	801ad4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801ad40:	4b0e      	ldr	r3, [pc, #56]	; (801ad7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801ad42:	211e      	movs	r1, #30
 801ad44:	4a0e      	ldr	r2, [pc, #56]	; (801ad80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ad46:	480f      	ldr	r0, [pc, #60]	; (801ad84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801ad48:	f004 faba 	bl	801f2c0 <__assert_func>
 801ad4c:	6823      	ldr	r3, [r4, #0]
 801ad4e:	2100      	movs	r1, #0
 801ad50:	4620      	mov	r0, r4
 801ad52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ad54:	4798      	blx	r3
 801ad56:	4607      	mov	r7, r0
 801ad58:	6823      	ldr	r3, [r4, #0]
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	1bf6      	subs	r6, r6, r7
 801ad5e:	6a1b      	ldr	r3, [r3, #32]
 801ad60:	b2b6      	uxth	r6, r6
 801ad62:	4798      	blx	r3
 801ad64:	fbb6 f3f0 	udiv	r3, r6, r0
 801ad68:	fb03 6610 	mls	r6, r3, r0, r6
 801ad6c:	b11e      	cbz	r6, 801ad76 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801ad6e:	4b06      	ldr	r3, [pc, #24]	; (801ad88 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801ad70:	211f      	movs	r1, #31
 801ad72:	4a03      	ldr	r2, [pc, #12]	; (801ad80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801ad74:	e7e7      	b.n	801ad46 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801ad76:	4628      	mov	r0, r5
 801ad78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	080217b4 	.word	0x080217b4
 801ad80:	08021922 	.word	0x08021922
 801ad84:	080217c9 	.word	0x080217c9
 801ad88:	080217f7 	.word	0x080217f7

0801ad8c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801ad8c:	b538      	push	{r3, r4, r5, lr}
 801ad8e:	6803      	ldr	r3, [r0, #0]
 801ad90:	460d      	mov	r5, r1
 801ad92:	4604      	mov	r4, r0
 801ad94:	6a1b      	ldr	r3, [r3, #32]
 801ad96:	4798      	blx	r3
 801ad98:	4285      	cmp	r5, r0
 801ad9a:	d905      	bls.n	801ada8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801ad9c:	4b0c      	ldr	r3, [pc, #48]	; (801add0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801ad9e:	212f      	movs	r1, #47	; 0x2f
 801ada0:	4a0c      	ldr	r2, [pc, #48]	; (801add4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801ada2:	480d      	ldr	r0, [pc, #52]	; (801add8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801ada4:	f004 fa8c 	bl	801f2c0 <__assert_func>
 801ada8:	6823      	ldr	r3, [r4, #0]
 801adaa:	4620      	mov	r0, r4
 801adac:	88a5      	ldrh	r5, [r4, #4]
 801adae:	69db      	ldr	r3, [r3, #28]
 801adb0:	4798      	blx	r3
 801adb2:	4285      	cmp	r5, r0
 801adb4:	db03      	blt.n	801adbe <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801adb6:	4b09      	ldr	r3, [pc, #36]	; (801addc <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801adb8:	2130      	movs	r1, #48	; 0x30
 801adba:	4a06      	ldr	r2, [pc, #24]	; (801add4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801adbc:	e7f1      	b.n	801ada2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801adbe:	6823      	ldr	r3, [r4, #0]
 801adc0:	4620      	mov	r0, r4
 801adc2:	88a1      	ldrh	r1, [r4, #4]
 801adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adc6:	4798      	blx	r3
 801adc8:	88a3      	ldrh	r3, [r4, #4]
 801adca:	3301      	adds	r3, #1
 801adcc:	80a3      	strh	r3, [r4, #4]
 801adce:	bd38      	pop	{r3, r4, r5, pc}
 801add0:	08021871 	.word	0x08021871
 801add4:	08021965 	.word	0x08021965
 801add8:	080217c9 	.word	0x080217c9
 801addc:	08021888 	.word	0x08021888

0801ade0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801ade0:	b570      	push	{r4, r5, r6, lr}
 801ade2:	6803      	ldr	r3, [r0, #0]
 801ade4:	4616      	mov	r6, r2
 801ade6:	4604      	mov	r4, r0
 801ade8:	460d      	mov	r5, r1
 801adea:	6a1b      	ldr	r3, [r3, #32]
 801adec:	4798      	blx	r3
 801adee:	4286      	cmp	r6, r0
 801adf0:	d905      	bls.n	801adfe <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801adf2:	4b06      	ldr	r3, [pc, #24]	; (801ae0c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801adf4:	2139      	movs	r1, #57	; 0x39
 801adf6:	4a06      	ldr	r2, [pc, #24]	; (801ae10 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801adf8:	4806      	ldr	r0, [pc, #24]	; (801ae14 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801adfa:	f004 fa61 	bl	801f2c0 <__assert_func>
 801adfe:	6823      	ldr	r3, [r4, #0]
 801ae00:	4629      	mov	r1, r5
 801ae02:	4620      	mov	r0, r4
 801ae04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ae06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae0a:	4718      	bx	r3
 801ae0c:	08021871 	.word	0x08021871
 801ae10:	080218d8 	.word	0x080218d8
 801ae14:	080217c9 	.word	0x080217c9

0801ae18 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801ae18:	4770      	bx	lr
	...

0801ae1c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801ae1c:	4a02      	ldr	r2, [pc, #8]	; (801ae28 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801ae1e:	6002      	str	r2, [r0, #0]
 801ae20:	2200      	movs	r2, #0
 801ae22:	8082      	strh	r2, [r0, #4]
 801ae24:	4770      	bx	lr
 801ae26:	bf00      	nop
 801ae28:	080218ac 	.word	0x080218ac

0801ae2c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801ae2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae30:	4770      	bx	lr

0801ae32 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801ae32:	2301      	movs	r3, #1
 801ae34:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801ae38:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801ae3c:	4770      	bx	lr

0801ae3e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801ae3e:	2301      	movs	r3, #1
 801ae40:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801ae44:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801ae48:	4770      	bx	lr

0801ae4a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801ae4a:	6843      	ldr	r3, [r0, #4]
 801ae4c:	2201      	movs	r2, #1
 801ae4e:	725a      	strb	r2, [r3, #9]
 801ae50:	6840      	ldr	r0, [r0, #4]
 801ae52:	6803      	ldr	r3, [r0, #0]
 801ae54:	691b      	ldr	r3, [r3, #16]
 801ae56:	4718      	bx	r3

0801ae58 <_ZN8touchgfx3HAL8flushDMAEv>:
 801ae58:	6840      	ldr	r0, [r0, #4]
 801ae5a:	6803      	ldr	r3, [r0, #0]
 801ae5c:	689b      	ldr	r3, [r3, #8]
 801ae5e:	4718      	bx	r3

0801ae60 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801ae60:	4770      	bx	lr

0801ae62 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801ae62:	4608      	mov	r0, r1
 801ae64:	4770      	bx	lr

0801ae66 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801ae66:	4770      	bx	lr

0801ae68 <_ZN8touchgfx3HAL10beginFrameEv>:
 801ae68:	4b04      	ldr	r3, [pc, #16]	; (801ae7c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	b123      	cbz	r3, 801ae78 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801ae6e:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801ae72:	f080 0001 	eor.w	r0, r0, #1
 801ae76:	4770      	bx	lr
 801ae78:	2001      	movs	r0, #1
 801ae7a:	4770      	bx	lr
 801ae7c:	20009b12 	.word	0x20009b12

0801ae80 <_ZN8touchgfx3HAL8endFrameEv>:
 801ae80:	b510      	push	{r4, lr}
 801ae82:	4604      	mov	r4, r0
 801ae84:	6840      	ldr	r0, [r0, #4]
 801ae86:	6803      	ldr	r3, [r0, #0]
 801ae88:	689b      	ldr	r3, [r3, #8]
 801ae8a:	4798      	blx	r3
 801ae8c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801ae90:	b113      	cbz	r3, 801ae98 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801ae92:	2301      	movs	r3, #1
 801ae94:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801ae98:	bd10      	pop	{r4, pc}

0801ae9a <_ZN8touchgfx3HAL9taskEntryEv>:
 801ae9a:	b508      	push	{r3, lr}
 801ae9c:	6803      	ldr	r3, [r0, #0]
 801ae9e:	4604      	mov	r4, r0
 801aea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aea2:	4798      	blx	r3
 801aea4:	6823      	ldr	r3, [r4, #0]
 801aea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aea8:	4620      	mov	r0, r4
 801aeaa:	4798      	blx	r3
 801aeac:	f7f4 fe28 	bl	800fb00 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801aeb0:	6823      	ldr	r3, [r4, #0]
 801aeb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aeb4:	e7f8      	b.n	801aea8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801aeb8 <_ZN8touchgfx3HAL4tickEv>:
 801aeb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801aeba:	6803      	ldr	r3, [r0, #0]
 801aebc:	4604      	mov	r4, r0
 801aebe:	4d5d      	ldr	r5, [pc, #372]	; (801b034 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801aec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aec4:	4798      	blx	r3
 801aec6:	2800      	cmp	r0, #0
 801aec8:	f000 8092 	beq.w	801aff0 <_ZN8touchgfx3HAL4tickEv+0x138>
 801aecc:	2001      	movs	r0, #1
 801aece:	2600      	movs	r6, #0
 801aed0:	f7f9 f837 	bl	8013f42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801aed4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801aed8:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801aedc:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801aee0:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801aee4:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801aee8:	b133      	cbz	r3, 801aef8 <_ZN8touchgfx3HAL4tickEv+0x40>
 801aeea:	6823      	ldr	r3, [r4, #0]
 801aeec:	4620      	mov	r0, r4
 801aeee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aef2:	4798      	blx	r3
 801aef4:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801aef8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801aefc:	2601      	movs	r6, #1
 801aefe:	6862      	ldr	r2, [r4, #4]
 801af00:	f083 0301 	eor.w	r3, r3, #1
 801af04:	702e      	strb	r6, [r5, #0]
 801af06:	7253      	strb	r3, [r2, #9]
 801af08:	f000 feca 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801af0c:	6803      	ldr	r3, [r0, #0]
 801af0e:	4631      	mov	r1, r6
 801af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801af12:	4798      	blx	r3
 801af14:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801af18:	b90b      	cbnz	r3, 801af1e <_ZN8touchgfx3HAL4tickEv+0x66>
 801af1a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801af1e:	f000 febf 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801af22:	6803      	ldr	r3, [r0, #0]
 801af24:	695b      	ldr	r3, [r3, #20]
 801af26:	4798      	blx	r3
 801af28:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801af2a:	6803      	ldr	r3, [r0, #0]
 801af2c:	691b      	ldr	r3, [r3, #16]
 801af2e:	4798      	blx	r3
 801af30:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801af34:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801af38:	3b01      	subs	r3, #1
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801af40:	b10a      	cbz	r2, 801af46 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801af42:	2b00      	cmp	r3, #0
 801af44:	d1eb      	bne.n	801af1e <_ZN8touchgfx3HAL4tickEv+0x66>
 801af46:	4a3c      	ldr	r2, [pc, #240]	; (801b038 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801af48:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801af4c:	7813      	ldrb	r3, [r2, #0]
 801af4e:	3301      	adds	r3, #1
 801af50:	b25b      	sxtb	r3, r3
 801af52:	4299      	cmp	r1, r3
 801af54:	7013      	strb	r3, [r2, #0]
 801af56:	dc10      	bgt.n	801af7a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801af58:	2300      	movs	r3, #0
 801af5a:	68e0      	ldr	r0, [r4, #12]
 801af5c:	a902      	add	r1, sp, #8
 801af5e:	7013      	strb	r3, [r2, #0]
 801af60:	aa03      	add	r2, sp, #12
 801af62:	6803      	ldr	r3, [r0, #0]
 801af64:	68db      	ldr	r3, [r3, #12]
 801af66:	4798      	blx	r3
 801af68:	6823      	ldr	r3, [r4, #0]
 801af6a:	2800      	cmp	r0, #0
 801af6c:	d04c      	beq.n	801b008 <_ZN8touchgfx3HAL4tickEv+0x150>
 801af6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af72:	4620      	mov	r0, r4
 801af74:	9a03      	ldr	r2, [sp, #12]
 801af76:	9902      	ldr	r1, [sp, #8]
 801af78:	4798      	blx	r3
 801af7a:	2300      	movs	r3, #0
 801af7c:	6960      	ldr	r0, [r4, #20]
 801af7e:	f88d 3007 	strb.w	r3, [sp, #7]
 801af82:	b130      	cbz	r0, 801af92 <_ZN8touchgfx3HAL4tickEv+0xda>
 801af84:	6803      	ldr	r3, [r0, #0]
 801af86:	f10d 0107 	add.w	r1, sp, #7
 801af8a:	68db      	ldr	r3, [r3, #12]
 801af8c:	4798      	blx	r3
 801af8e:	2800      	cmp	r0, #0
 801af90:	d149      	bne.n	801b026 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801af92:	f104 0018 	add.w	r0, r4, #24
 801af96:	f004 f8c9 	bl	801f12c <_ZN8touchgfx8Gestures4tickEv>
 801af9a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801af9e:	b30b      	cbz	r3, 801afe4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801afa0:	6920      	ldr	r0, [r4, #16]
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	691b      	ldr	r3, [r3, #16]
 801afa6:	4798      	blx	r3
 801afa8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801afaa:	4606      	mov	r6, r0
 801afac:	b903      	cbnz	r3, 801afb0 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801afae:	6620      	str	r0, [r4, #96]	; 0x60
 801afb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801afb2:	4a22      	ldr	r2, [pc, #136]	; (801b03c <_ZN8touchgfx3HAL4tickEv+0x184>)
 801afb4:	1af3      	subs	r3, r6, r3
 801afb6:	4293      	cmp	r3, r2
 801afb8:	d914      	bls.n	801afe4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801afba:	6920      	ldr	r0, [r4, #16]
 801afbc:	6803      	ldr	r3, [r0, #0]
 801afbe:	699b      	ldr	r3, [r3, #24]
 801afc0:	4798      	blx	r3
 801afc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801afc4:	2264      	movs	r2, #100	; 0x64
 801afc6:	1af3      	subs	r3, r6, r3
 801afc8:	fbb3 f3f2 	udiv	r3, r3, r2
 801afcc:	fbb0 f0f3 	udiv	r0, r0, r3
 801afd0:	2800      	cmp	r0, #0
 801afd2:	dc1e      	bgt.n	801b012 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801afd4:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801afd8:	6920      	ldr	r0, [r4, #16]
 801afda:	2100      	movs	r1, #0
 801afdc:	6803      	ldr	r3, [r0, #0]
 801afde:	69db      	ldr	r3, [r3, #28]
 801afe0:	4798      	blx	r3
 801afe2:	6626      	str	r6, [r4, #96]	; 0x60
 801afe4:	f000 fe5c 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801afe8:	6803      	ldr	r3, [r0, #0]
 801afea:	2100      	movs	r1, #0
 801afec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801afee:	4798      	blx	r3
 801aff0:	6823      	ldr	r3, [r4, #0]
 801aff2:	4620      	mov	r0, r4
 801aff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801aff8:	4798      	blx	r3
 801affa:	2001      	movs	r0, #1
 801affc:	f7f8 ffac 	bl	8013f58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b000:	2300      	movs	r3, #0
 801b002:	702b      	strb	r3, [r5, #0]
 801b004:	b004      	add	sp, #16
 801b006:	bd70      	pop	{r4, r5, r6, pc}
 801b008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b00c:	4620      	mov	r0, r4
 801b00e:	4798      	blx	r3
 801b010:	e7b3      	b.n	801af7a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801b012:	2863      	cmp	r0, #99	; 0x63
 801b014:	bfcb      	itete	gt
 801b016:	2300      	movgt	r3, #0
 801b018:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801b01c:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801b020:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801b024:	e7d8      	b.n	801afd8 <_ZN8touchgfx3HAL4tickEv+0x120>
 801b026:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801b028:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801b02c:	6803      	ldr	r3, [r0, #0]
 801b02e:	68db      	ldr	r3, [r3, #12]
 801b030:	4798      	blx	r3
 801b032:	e7ae      	b.n	801af92 <_ZN8touchgfx3HAL4tickEv+0xda>
 801b034:	20009b18 	.word	0x20009b18
 801b038:	20009b19 	.word	0x20009b19
 801b03c:	05f5e100 	.word	0x05f5e100

0801b040 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801b040:	f7f4 bcfe 	b.w	800fa40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b044 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801b044:	6481      	str	r1, [r0, #72]	; 0x48
 801b046:	3018      	adds	r0, #24
 801b048:	f004 b86e 	b.w	801f128 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801b04c <_ZN8touchgfx3HAL5touchEll>:
 801b04c:	b530      	push	{r4, r5, lr}
 801b04e:	b085      	sub	sp, #20
 801b050:	4604      	mov	r4, r0
 801b052:	a802      	add	r0, sp, #8
 801b054:	9102      	str	r1, [sp, #8]
 801b056:	9203      	str	r2, [sp, #12]
 801b058:	f000 fc52 	bl	801b900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801b05c:	a903      	add	r1, sp, #12
 801b05e:	a802      	add	r0, sp, #8
 801b060:	f000 fc9c 	bl	801b99c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801b064:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801b068:	9d02      	ldr	r5, [sp, #8]
 801b06a:	f104 0018 	add.w	r0, r4, #24
 801b06e:	9b03      	ldr	r3, [sp, #12]
 801b070:	b179      	cbz	r1, 801b092 <_ZN8touchgfx3HAL5touchEll+0x46>
 801b072:	b29b      	uxth	r3, r3
 801b074:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801b078:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801b07c:	9300      	str	r3, [sp, #0]
 801b07e:	b2ab      	uxth	r3, r5
 801b080:	f004 f862 	bl	801f148 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801b084:	b118      	cbz	r0, 801b08e <_ZN8touchgfx3HAL5touchEll+0x42>
 801b086:	9b02      	ldr	r3, [sp, #8]
 801b088:	64e3      	str	r3, [r4, #76]	; 0x4c
 801b08a:	9b03      	ldr	r3, [sp, #12]
 801b08c:	6523      	str	r3, [r4, #80]	; 0x50
 801b08e:	b005      	add	sp, #20
 801b090:	bd30      	pop	{r4, r5, pc}
 801b092:	b29b      	uxth	r3, r3
 801b094:	b2aa      	uxth	r2, r5
 801b096:	f004 f89b 	bl	801f1d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801b09a:	2301      	movs	r3, #1
 801b09c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801b0a0:	e7f1      	b.n	801b086 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801b0a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801b0a2:	b530      	push	{r4, r5, lr}
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d04e      	beq.n	801b146 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801b0a8:	ea81 0002 	eor.w	r0, r1, r2
 801b0ac:	07c0      	lsls	r0, r0, #31
 801b0ae:	d508      	bpl.n	801b0c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801b0b0:	3a01      	subs	r2, #1
 801b0b2:	440b      	add	r3, r1
 801b0b4:	4299      	cmp	r1, r3
 801b0b6:	d046      	beq.n	801b146 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801b0b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801b0bc:	f801 0b01 	strb.w	r0, [r1], #1
 801b0c0:	e7f8      	b.n	801b0b4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801b0c2:	07d5      	lsls	r5, r2, #31
 801b0c4:	bf42      	ittt	mi
 801b0c6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801b0ca:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801b0ce:	f801 0b01 	strbmi.w	r0, [r1], #1
 801b0d2:	2b01      	cmp	r3, #1
 801b0d4:	d915      	bls.n	801b102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b0d6:	ea81 0002 	eor.w	r0, r1, r2
 801b0da:	0784      	lsls	r4, r0, #30
 801b0dc:	d01f      	beq.n	801b11e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801b0de:	1e95      	subs	r5, r2, #2
 801b0e0:	460c      	mov	r4, r1
 801b0e2:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801b0e6:	f824 0b02 	strh.w	r0, [r4], #2
 801b0ea:	1b18      	subs	r0, r3, r4
 801b0ec:	4408      	add	r0, r1
 801b0ee:	2801      	cmp	r0, #1
 801b0f0:	d8f7      	bhi.n	801b0e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801b0f2:	1e98      	subs	r0, r3, #2
 801b0f4:	f003 0301 	and.w	r3, r3, #1
 801b0f8:	f020 0001 	bic.w	r0, r0, #1
 801b0fc:	3002      	adds	r0, #2
 801b0fe:	4401      	add	r1, r0
 801b100:	4402      	add	r2, r0
 801b102:	3a01      	subs	r2, #1
 801b104:	440b      	add	r3, r1
 801b106:	4299      	cmp	r1, r3
 801b108:	d01d      	beq.n	801b146 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801b10a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801b10e:	f801 0b01 	strb.w	r0, [r1], #1
 801b112:	e7f8      	b.n	801b106 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801b114:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801b118:	f840 4b04 	str.w	r4, [r0], #4
 801b11c:	e008      	b.n	801b130 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801b11e:	0790      	lsls	r0, r2, #30
 801b120:	d004      	beq.n	801b12c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801b122:	f832 0b02 	ldrh.w	r0, [r2], #2
 801b126:	3b02      	subs	r3, #2
 801b128:	f821 0b02 	strh.w	r0, [r1], #2
 801b12c:	1f15      	subs	r5, r2, #4
 801b12e:	4608      	mov	r0, r1
 801b130:	1a1c      	subs	r4, r3, r0
 801b132:	440c      	add	r4, r1
 801b134:	2c03      	cmp	r4, #3
 801b136:	d8ed      	bhi.n	801b114 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801b138:	f023 0003 	bic.w	r0, r3, #3
 801b13c:	f003 0303 	and.w	r3, r3, #3
 801b140:	4402      	add	r2, r0
 801b142:	4401      	add	r1, r0
 801b144:	e7dd      	b.n	801b102 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801b146:	2001      	movs	r0, #1
 801b148:	bd30      	pop	{r4, r5, pc}

0801b14a <_ZN8touchgfx3HAL7noTouchEv>:
 801b14a:	b510      	push	{r4, lr}
 801b14c:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801b150:	4604      	mov	r4, r0
 801b152:	b153      	cbz	r3, 801b16a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801b154:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801b158:	2101      	movs	r1, #1
 801b15a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801b15e:	3018      	adds	r0, #24
 801b160:	f004 f836 	bl	801f1d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801b164:	2300      	movs	r3, #0
 801b166:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801b16a:	bd10      	pop	{r4, pc}

0801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801b16c:	4b07      	ldr	r3, [pc, #28]	; (801b18c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801b16e:	b510      	push	{r4, lr}
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	4604      	mov	r4, r0
 801b174:	b12b      	cbz	r3, 801b182 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801b176:	6803      	ldr	r3, [r0, #0]
 801b178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b17a:	4798      	blx	r3
 801b17c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b17e:	4283      	cmp	r3, r0
 801b180:	d001      	beq.n	801b186 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801b182:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b184:	bd10      	pop	{r4, pc}
 801b186:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801b188:	bd10      	pop	{r4, pc}
 801b18a:	bf00      	nop
 801b18c:	20009b12 	.word	0x20009b12

0801b190 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801b190:	4b0a      	ldr	r3, [pc, #40]	; (801b1bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801b192:	b510      	push	{r4, lr}
 801b194:	781b      	ldrb	r3, [r3, #0]
 801b196:	4604      	mov	r4, r0
 801b198:	b12b      	cbz	r3, 801b1a6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801b19a:	f7f4 fc43 	bl	800fa24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b19e:	4620      	mov	r0, r4
 801b1a0:	f7ff ffe4 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b1a4:	bd10      	pop	{r4, pc}
 801b1a6:	6840      	ldr	r0, [r0, #4]
 801b1a8:	f000 fb3e 	bl	801b828 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801b1ac:	2800      	cmp	r0, #0
 801b1ae:	d0f4      	beq.n	801b19a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801b1b0:	6862      	ldr	r2, [r4, #4]
 801b1b2:	7a53      	ldrb	r3, [r2, #9]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d0fc      	beq.n	801b1b2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801b1b8:	e7ef      	b.n	801b19a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801b1ba:	bf00      	nop
 801b1bc:	20009b12 	.word	0x20009b12

0801b1c0 <_ZN8touchgfx3HAL10initializeEv>:
 801b1c0:	b510      	push	{r4, lr}
 801b1c2:	4604      	mov	r4, r0
 801b1c4:	f7f4 fc0a 	bl	800f9dc <_ZN8touchgfx10OSWrappers10initializeEv>
 801b1c8:	6860      	ldr	r0, [r4, #4]
 801b1ca:	6803      	ldr	r3, [r0, #0]
 801b1cc:	68db      	ldr	r3, [r3, #12]
 801b1ce:	4798      	blx	r3
 801b1d0:	68e0      	ldr	r0, [r4, #12]
 801b1d2:	6803      	ldr	r3, [r0, #0]
 801b1d4:	689b      	ldr	r3, [r3, #8]
 801b1d6:	4798      	blx	r3
 801b1d8:	6823      	ldr	r3, [r4, #0]
 801b1da:	4620      	mov	r0, r4
 801b1dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1e2:	4718      	bx	r3

0801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1e6:	461d      	mov	r5, r3
 801b1e8:	4b0b      	ldr	r3, [pc, #44]	; (801b218 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801b1ea:	4617      	mov	r7, r2
 801b1ec:	460e      	mov	r6, r1
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	6898      	ldr	r0, [r3, #8]
 801b1f2:	6803      	ldr	r3, [r0, #0]
 801b1f4:	6a1b      	ldr	r3, [r3, #32]
 801b1f6:	4798      	blx	r3
 801b1f8:	4b08      	ldr	r3, [pc, #32]	; (801b21c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801b1fa:	2810      	cmp	r0, #16
 801b1fc:	bf15      	itete	ne
 801b1fe:	881c      	ldrhne	r4, [r3, #0]
 801b200:	8818      	ldrheq	r0, [r3, #0]
 801b202:	fb07 6204 	mlane	r2, r7, r4, r6
 801b206:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801b20a:	bf16      	itet	ne
 801b20c:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801b210:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801b214:	18a8      	addne	r0, r5, r2
 801b216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b218:	20009b14 	.word	0x20009b14
 801b21c:	20009b0e 	.word	0x20009b0e

0801b220 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801b220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b224:	b088      	sub	sp, #32
 801b226:	4698      	mov	r8, r3
 801b228:	4617      	mov	r7, r2
 801b22a:	2200      	movs	r2, #0
 801b22c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801b230:	4604      	mov	r4, r0
 801b232:	9206      	str	r2, [sp, #24]
 801b234:	2bff      	cmp	r3, #255	; 0xff
 801b236:	f88d 301c 	strb.w	r3, [sp, #28]
 801b23a:	4b1d      	ldr	r3, [pc, #116]	; (801b2b0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801b23c:	bf0c      	ite	eq
 801b23e:	2201      	moveq	r2, #1
 801b240:	2204      	movne	r2, #4
 801b242:	881b      	ldrh	r3, [r3, #0]
 801b244:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801b248:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801b24c:	9201      	str	r2, [sp, #4]
 801b24e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b252:	9102      	str	r1, [sp, #8]
 801b254:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b258:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b25c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801b260:	f8ad 5012 	strh.w	r5, [sp, #18]
 801b264:	f7ff ff82 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b268:	4642      	mov	r2, r8
 801b26a:	4603      	mov	r3, r0
 801b26c:	4639      	mov	r1, r7
 801b26e:	4620      	mov	r0, r4
 801b270:	f7ff ffb8 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b274:	9003      	str	r0, [sp, #12]
 801b276:	b106      	cbz	r6, 801b27a <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801b278:	b935      	cbnz	r5, 801b288 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801b27a:	4b0e      	ldr	r3, [pc, #56]	; (801b2b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801b27c:	f240 1143 	movw	r1, #323	; 0x143
 801b280:	4a0d      	ldr	r2, [pc, #52]	; (801b2b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801b282:	480e      	ldr	r0, [pc, #56]	; (801b2bc <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801b284:	f004 f81c 	bl	801f2c0 <__assert_func>
 801b288:	6823      	ldr	r3, [r4, #0]
 801b28a:	4620      	mov	r0, r4
 801b28c:	9d01      	ldr	r5, [sp, #4]
 801b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b290:	4798      	blx	r3
 801b292:	4228      	tst	r0, r5
 801b294:	d104      	bne.n	801b2a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801b296:	4b0a      	ldr	r3, [pc, #40]	; (801b2c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801b298:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801b29c:	4a06      	ldr	r2, [pc, #24]	; (801b2b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801b29e:	e7f0      	b.n	801b282 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801b2a0:	6860      	ldr	r0, [r4, #4]
 801b2a2:	a901      	add	r1, sp, #4
 801b2a4:	6803      	ldr	r3, [r0, #0]
 801b2a6:	685b      	ldr	r3, [r3, #4]
 801b2a8:	4798      	blx	r3
 801b2aa:	b008      	add	sp, #32
 801b2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2b0:	20009b0e 	.word	0x20009b0e
 801b2b4:	08021a11 	.word	0x08021a11
 801b2b8:	08021cbf 	.word	0x08021cbf
 801b2bc:	08021a49 	.word	0x08021a49
 801b2c0:	08021a6f 	.word	0x08021a6f

0801b2c4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2c8:	4698      	mov	r8, r3
 801b2ca:	b088      	sub	sp, #32
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	4617      	mov	r7, r2
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801b2d6:	9306      	str	r3, [sp, #24]
 801b2d8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801b2dc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801b2e0:	9301      	str	r3, [sp, #4]
 801b2e2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b2e6:	9102      	str	r1, [sp, #8]
 801b2e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b2ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b2f0:	f8ad 6010 	strh.w	r6, [sp, #16]
 801b2f4:	f88d 301c 	strb.w	r3, [sp, #28]
 801b2f8:	f8ad 5012 	strh.w	r5, [sp, #18]
 801b2fc:	f7ff ff36 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b300:	4642      	mov	r2, r8
 801b302:	4603      	mov	r3, r0
 801b304:	4639      	mov	r1, r7
 801b306:	4620      	mov	r0, r4
 801b308:	f7ff ff6c 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b30c:	4b11      	ldr	r3, [pc, #68]	; (801b354 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801b30e:	9003      	str	r0, [sp, #12]
 801b310:	881b      	ldrh	r3, [r3, #0]
 801b312:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b316:	b106      	cbz	r6, 801b31a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801b318:	b935      	cbnz	r5, 801b328 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801b31a:	4b0f      	ldr	r3, [pc, #60]	; (801b358 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801b31c:	f240 1153 	movw	r1, #339	; 0x153
 801b320:	4a0e      	ldr	r2, [pc, #56]	; (801b35c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801b322:	480f      	ldr	r0, [pc, #60]	; (801b360 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801b324:	f003 ffcc 	bl	801f2c0 <__assert_func>
 801b328:	6823      	ldr	r3, [r4, #0]
 801b32a:	4620      	mov	r0, r4
 801b32c:	9d01      	ldr	r5, [sp, #4]
 801b32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b330:	4798      	blx	r3
 801b332:	4228      	tst	r0, r5
 801b334:	d104      	bne.n	801b340 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801b336:	4b0b      	ldr	r3, [pc, #44]	; (801b364 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801b338:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801b33c:	4a07      	ldr	r2, [pc, #28]	; (801b35c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801b33e:	e7f0      	b.n	801b322 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801b340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b342:	a901      	add	r1, sp, #4
 801b344:	6860      	ldr	r0, [r4, #4]
 801b346:	9306      	str	r3, [sp, #24]
 801b348:	6803      	ldr	r3, [r0, #0]
 801b34a:	685b      	ldr	r3, [r3, #4]
 801b34c:	4798      	blx	r3
 801b34e:	b008      	add	sp, #32
 801b350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b354:	20009b0e 	.word	0x20009b0e
 801b358:	08021a11 	.word	0x08021a11
 801b35c:	08021b5c 	.word	0x08021b5c
 801b360:	08021a49 	.word	0x08021a49
 801b364:	08021a6f 	.word	0x08021a6f

0801b368 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801b368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b36c:	b088      	sub	sp, #32
 801b36e:	4698      	mov	r8, r3
 801b370:	4617      	mov	r7, r2
 801b372:	2200      	movs	r2, #0
 801b374:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801b378:	4604      	mov	r4, r0
 801b37a:	9206      	str	r2, [sp, #24]
 801b37c:	2bff      	cmp	r3, #255	; 0xff
 801b37e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801b382:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801b386:	bf0c      	ite	eq
 801b388:	2220      	moveq	r2, #32
 801b38a:	2240      	movne	r2, #64	; 0x40
 801b38c:	9102      	str	r1, [sp, #8]
 801b38e:	9201      	str	r2, [sp, #4]
 801b390:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b394:	f88d 301c 	strb.w	r3, [sp, #28]
 801b398:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b39c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801b3a0:	f8ad 5012 	strh.w	r5, [sp, #18]
 801b3a4:	f7ff fee2 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b3a8:	4642      	mov	r2, r8
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	4639      	mov	r1, r7
 801b3ae:	4620      	mov	r0, r4
 801b3b0:	f7ff ff18 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b3b4:	4b10      	ldr	r3, [pc, #64]	; (801b3f8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801b3b6:	9003      	str	r0, [sp, #12]
 801b3b8:	881b      	ldrh	r3, [r3, #0]
 801b3ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b3be:	b106      	cbz	r6, 801b3c2 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801b3c0:	b935      	cbnz	r5, 801b3d0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801b3c2:	4b0e      	ldr	r3, [pc, #56]	; (801b3fc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801b3c4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801b3c8:	4a0d      	ldr	r2, [pc, #52]	; (801b400 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801b3ca:	480e      	ldr	r0, [pc, #56]	; (801b404 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801b3cc:	f003 ff78 	bl	801f2c0 <__assert_func>
 801b3d0:	6823      	ldr	r3, [r4, #0]
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	9d01      	ldr	r5, [sp, #4]
 801b3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3d8:	4798      	blx	r3
 801b3da:	4228      	tst	r0, r5
 801b3dc:	d104      	bne.n	801b3e8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801b3de:	4b0a      	ldr	r3, [pc, #40]	; (801b408 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801b3e0:	f240 1167 	movw	r1, #359	; 0x167
 801b3e4:	4a06      	ldr	r2, [pc, #24]	; (801b400 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801b3e6:	e7f0      	b.n	801b3ca <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801b3e8:	6860      	ldr	r0, [r4, #4]
 801b3ea:	a901      	add	r1, sp, #4
 801b3ec:	6803      	ldr	r3, [r0, #0]
 801b3ee:	685b      	ldr	r3, [r3, #4]
 801b3f0:	4798      	blx	r3
 801b3f2:	b008      	add	sp, #32
 801b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3f8:	20009b0e 	.word	0x20009b0e
 801b3fc:	08021a11 	.word	0x08021a11
 801b400:	08021c00 	.word	0x08021c00
 801b404:	08021a49 	.word	0x08021a49
 801b408:	08021a6f 	.word	0x08021a6f

0801b40c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801b40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b410:	b089      	sub	sp, #36	; 0x24
 801b412:	4699      	mov	r9, r3
 801b414:	4604      	mov	r4, r0
 801b416:	2500      	movs	r5, #0
 801b418:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801b41c:	4690      	mov	r8, r2
 801b41e:	460f      	mov	r7, r1
 801b420:	9506      	str	r5, [sp, #24]
 801b422:	2eff      	cmp	r6, #255	; 0xff
 801b424:	9502      	str	r5, [sp, #8]
 801b426:	bf0c      	ite	eq
 801b428:	2302      	moveq	r3, #2
 801b42a:	2308      	movne	r3, #8
 801b42c:	9301      	str	r3, [sp, #4]
 801b42e:	f7ff fe9d 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b432:	464a      	mov	r2, r9
 801b434:	4603      	mov	r3, r0
 801b436:	4641      	mov	r1, r8
 801b438:	4620      	mov	r0, r4
 801b43a:	f7ff fed3 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b43e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801b442:	f8ad 5014 	strh.w	r5, [sp, #20]
 801b446:	f8ad 3010 	strh.w	r3, [sp, #16]
 801b44a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b44e:	9d01      	ldr	r5, [sp, #4]
 801b450:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b454:	4b0e      	ldr	r3, [pc, #56]	; (801b490 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801b456:	9003      	str	r0, [sp, #12]
 801b458:	4620      	mov	r0, r4
 801b45a:	881b      	ldrh	r3, [r3, #0]
 801b45c:	9706      	str	r7, [sp, #24]
 801b45e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b462:	6823      	ldr	r3, [r4, #0]
 801b464:	f88d 601c 	strb.w	r6, [sp, #28]
 801b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b46a:	4798      	blx	r3
 801b46c:	4228      	tst	r0, r5
 801b46e:	d106      	bne.n	801b47e <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801b470:	4b08      	ldr	r3, [pc, #32]	; (801b494 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801b472:	f240 1179 	movw	r1, #377	; 0x179
 801b476:	4a08      	ldr	r2, [pc, #32]	; (801b498 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801b478:	4808      	ldr	r0, [pc, #32]	; (801b49c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801b47a:	f003 ff21 	bl	801f2c0 <__assert_func>
 801b47e:	6860      	ldr	r0, [r4, #4]
 801b480:	a901      	add	r1, sp, #4
 801b482:	6803      	ldr	r3, [r0, #0]
 801b484:	685b      	ldr	r3, [r3, #4]
 801b486:	4798      	blx	r3
 801b488:	b009      	add	sp, #36	; 0x24
 801b48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b48e:	bf00      	nop
 801b490:	20009b0e 	.word	0x20009b0e
 801b494:	08021a6f 	.word	0x08021a6f
 801b498:	08021d36 	.word	0x08021d36
 801b49c:	08021a49 	.word	0x08021a49

0801b4a0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801b4a0:	4b1d      	ldr	r3, [pc, #116]	; (801b518 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801b4a2:	b570      	push	{r4, r5, r6, lr}
 801b4a4:	b08a      	sub	sp, #40	; 0x28
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b4ae:	b933      	cbnz	r3, 801b4be <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801b4b0:	4b1a      	ldr	r3, [pc, #104]	; (801b51c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801b4b2:	f240 1185 	movw	r1, #389	; 0x185
 801b4b6:	4a1a      	ldr	r2, [pc, #104]	; (801b520 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801b4b8:	481a      	ldr	r0, [pc, #104]	; (801b524 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801b4ba:	f003 ff01 	bl	801f2c0 <__assert_func>
 801b4be:	2300      	movs	r3, #0
 801b4c0:	f8bd 5000 	ldrh.w	r5, [sp]
 801b4c4:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801b4c8:	9308      	str	r3, [sp, #32]
 801b4ca:	2301      	movs	r3, #1
 801b4cc:	9303      	str	r3, [sp, #12]
 801b4ce:	6803      	ldr	r3, [r0, #0]
 801b4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4d2:	4798      	blx	r3
 801b4d4:	4632      	mov	r2, r6
 801b4d6:	4603      	mov	r3, r0
 801b4d8:	4629      	mov	r1, r5
 801b4da:	4620      	mov	r0, r4
 801b4dc:	f7ff fe82 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b4e2:	9004      	str	r0, [sp, #16]
 801b4e4:	a903      	add	r1, sp, #12
 801b4e6:	9305      	str	r3, [sp, #20]
 801b4e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b4ec:	6860      	ldr	r0, [r4, #4]
 801b4ee:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b4f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b4f6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b4fa:	4b0b      	ldr	r3, [pc, #44]	; (801b528 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801b4fc:	881b      	ldrh	r3, [r3, #0]
 801b4fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b502:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b506:	23ff      	movs	r3, #255	; 0xff
 801b508:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801b50c:	6803      	ldr	r3, [r0, #0]
 801b50e:	685b      	ldr	r3, [r3, #4]
 801b510:	4798      	blx	r3
 801b512:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801b514:	b00a      	add	sp, #40	; 0x28
 801b516:	bd70      	pop	{r4, r5, r6, pc}
 801b518:	20009b13 	.word	0x20009b13
 801b51c:	080219a3 	.word	0x080219a3
 801b520:	08021c79 	.word	0x08021c79
 801b524:	08021a49 	.word	0x08021a49
 801b528:	20009b0e 	.word	0x20009b0e

0801b52c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b52e:	461d      	mov	r5, r3
 801b530:	b08b      	sub	sp, #44	; 0x2c
 801b532:	2300      	movs	r3, #0
 801b534:	4604      	mov	r4, r0
 801b536:	9308      	str	r3, [sp, #32]
 801b538:	2301      	movs	r3, #1
 801b53a:	9303      	str	r3, [sp, #12]
 801b53c:	6803      	ldr	r3, [r0, #0]
 801b53e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801b542:	f8bd 6000 	ldrh.w	r6, [sp]
 801b546:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801b54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b54c:	4798      	blx	r3
 801b54e:	463a      	mov	r2, r7
 801b550:	4603      	mov	r3, r0
 801b552:	4631      	mov	r1, r6
 801b554:	4620      	mov	r0, r4
 801b556:	f7ff fe45 	bl	801b1e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801b55a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b55e:	9004      	str	r0, [sp, #16]
 801b560:	a903      	add	r1, sp, #12
 801b562:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b566:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b56a:	6860      	ldr	r0, [r4, #4]
 801b56c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b570:	4b08      	ldr	r3, [pc, #32]	; (801b594 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801b572:	9505      	str	r5, [sp, #20]
 801b574:	881b      	ldrh	r3, [r3, #0]
 801b576:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b57a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b57c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b580:	23ff      	movs	r3, #255	; 0xff
 801b582:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801b586:	6803      	ldr	r3, [r0, #0]
 801b588:	685b      	ldr	r3, [r3, #4]
 801b58a:	4798      	blx	r3
 801b58c:	4628      	mov	r0, r5
 801b58e:	b00b      	add	sp, #44	; 0x2c
 801b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b592:	bf00      	nop
 801b594:	20009b0e 	.word	0x20009b0e

0801b598 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801b598:	b570      	push	{r4, r5, r6, lr}
 801b59a:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801b59e:	4604      	mov	r4, r0
 801b5a0:	b19b      	cbz	r3, 801b5ca <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801b5a2:	2002      	movs	r0, #2
 801b5a4:	f7f8 fce3 	bl	8013f6e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	4620      	mov	r0, r4
 801b5ac:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801b5b0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801b5b4:	6823      	ldr	r3, [r4, #0]
 801b5b6:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801b5ba:	f7ff fdd7 	bl	801b16c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801b5be:	4601      	mov	r1, r0
 801b5c0:	4620      	mov	r0, r4
 801b5c2:	462b      	mov	r3, r5
 801b5c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b5c8:	4718      	bx	r3
 801b5ca:	bd70      	pop	{r4, r5, r6, pc}

0801b5cc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801b5cc:	b570      	push	{r4, r5, r6, lr}
 801b5ce:	4605      	mov	r5, r0
 801b5d0:	460c      	mov	r4, r1
 801b5d2:	2003      	movs	r0, #3
 801b5d4:	b149      	cbz	r1, 801b5ea <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801b5d6:	f7f8 fcb4 	bl	8013f42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801b5da:	6928      	ldr	r0, [r5, #16]
 801b5dc:	b168      	cbz	r0, 801b5fa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b5de:	6803      	ldr	r3, [r0, #0]
 801b5e0:	2101      	movs	r1, #1
 801b5e2:	695b      	ldr	r3, [r3, #20]
 801b5e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b5e8:	4718      	bx	r3
 801b5ea:	f7f8 fcb5 	bl	8013f58 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801b5ee:	6928      	ldr	r0, [r5, #16]
 801b5f0:	b118      	cbz	r0, 801b5fa <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801b5f2:	6803      	ldr	r3, [r0, #0]
 801b5f4:	4621      	mov	r1, r4
 801b5f6:	695b      	ldr	r3, [r3, #20]
 801b5f8:	e7f4      	b.n	801b5e4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801b5fa:	bd70      	pop	{r4, r5, r6, pc}

0801b5fc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801b5fc:	4770      	bx	lr

0801b5fe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801b5fe:	68c2      	ldr	r2, [r0, #12]
 801b600:	6900      	ldr	r0, [r0, #16]
 801b602:	1a13      	subs	r3, r2, r0
 801b604:	4258      	negs	r0, r3
 801b606:	4158      	adcs	r0, r3
 801b608:	4770      	bx	lr

0801b60a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801b60a:	68c2      	ldr	r2, [r0, #12]
 801b60c:	6903      	ldr	r3, [r0, #16]
 801b60e:	1a9b      	subs	r3, r3, r2
 801b610:	2b00      	cmp	r3, #0
 801b612:	bfdc      	itt	le
 801b614:	6882      	ldrle	r2, [r0, #8]
 801b616:	189b      	addle	r3, r3, r2
 801b618:	2b01      	cmp	r3, #1
 801b61a:	bfcc      	ite	gt
 801b61c:	2000      	movgt	r0, #0
 801b61e:	2001      	movle	r0, #1
 801b620:	4770      	bx	lr

0801b622 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801b622:	6902      	ldr	r2, [r0, #16]
 801b624:	6843      	ldr	r3, [r0, #4]
 801b626:	201c      	movs	r0, #28
 801b628:	fb00 3002 	mla	r0, r0, r2, r3
 801b62c:	4770      	bx	lr

0801b62e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801b62e:	6803      	ldr	r3, [r0, #0]
 801b630:	691b      	ldr	r3, [r3, #16]
 801b632:	4718      	bx	r3

0801b634 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801b634:	4770      	bx	lr

0801b636 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801b636:	4770      	bx	lr

0801b638 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801b638:	2301      	movs	r3, #1
 801b63a:	b570      	push	{r4, r5, r6, lr}
 801b63c:	7203      	strb	r3, [r0, #8]
 801b63e:	4604      	mov	r4, r0
 801b640:	6840      	ldr	r0, [r0, #4]
 801b642:	6803      	ldr	r3, [r0, #0]
 801b644:	699b      	ldr	r3, [r3, #24]
 801b646:	4798      	blx	r3
 801b648:	6803      	ldr	r3, [r0, #0]
 801b64a:	4605      	mov	r5, r0
 801b64c:	2b08      	cmp	r3, #8
 801b64e:	d01e      	beq.n	801b68e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801b650:	d80b      	bhi.n	801b66a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801b652:	2b02      	cmp	r3, #2
 801b654:	d027      	beq.n	801b6a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801b656:	2b04      	cmp	r3, #4
 801b658:	d011      	beq.n	801b67e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801b65a:	2b01      	cmp	r3, #1
 801b65c:	d028      	beq.n	801b6b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b65e:	4b17      	ldr	r3, [pc, #92]	; (801b6bc <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801b660:	218d      	movs	r1, #141	; 0x8d
 801b662:	4a17      	ldr	r2, [pc, #92]	; (801b6c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801b664:	4817      	ldr	r0, [pc, #92]	; (801b6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801b666:	f003 fe2b 	bl	801f2c0 <__assert_func>
 801b66a:	2b40      	cmp	r3, #64	; 0x40
 801b66c:	d020      	beq.n	801b6b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b66e:	d801      	bhi.n	801b674 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801b670:	2b20      	cmp	r3, #32
 801b672:	e7f3      	b.n	801b65c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801b674:	2b80      	cmp	r3, #128	; 0x80
 801b676:	d01b      	beq.n	801b6b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801b678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b67c:	e7ee      	b.n	801b65c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801b67e:	6823      	ldr	r3, [r4, #0]
 801b680:	7e01      	ldrb	r1, [r0, #24]
 801b682:	4620      	mov	r0, r4
 801b684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b686:	4798      	blx	r3
 801b688:	6823      	ldr	r3, [r4, #0]
 801b68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b68c:	e006      	b.n	801b69c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	7e01      	ldrb	r1, [r0, #24]
 801b692:	4620      	mov	r0, r4
 801b694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b696:	4798      	blx	r3
 801b698:	6823      	ldr	r3, [r4, #0]
 801b69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b69c:	4629      	mov	r1, r5
 801b69e:	4620      	mov	r0, r4
 801b6a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b6a4:	4718      	bx	r3
 801b6a6:	6823      	ldr	r3, [r4, #0]
 801b6a8:	4620      	mov	r0, r4
 801b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6ac:	4798      	blx	r3
 801b6ae:	e7f3      	b.n	801b698 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801b6b0:	6823      	ldr	r3, [r4, #0]
 801b6b2:	4620      	mov	r0, r4
 801b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6b6:	4798      	blx	r3
 801b6b8:	e7e6      	b.n	801b688 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801b6ba:	bf00      	nop
 801b6bc:	08021da1 	.word	0x08021da1
 801b6c0:	08021eac 	.word	0x08021eac
 801b6c4:	08021dc6 	.word	0x08021dc6

0801b6c8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801b6c8:	b570      	push	{r4, r5, r6, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	460e      	mov	r6, r1
 801b6ce:	6860      	ldr	r0, [r4, #4]
 801b6d0:	6803      	ldr	r3, [r0, #0]
 801b6d2:	685b      	ldr	r3, [r3, #4]
 801b6d4:	4798      	blx	r3
 801b6d6:	2800      	cmp	r0, #0
 801b6d8:	d1f9      	bne.n	801b6ce <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801b6da:	4d0b      	ldr	r5, [pc, #44]	; (801b708 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801b6dc:	6828      	ldr	r0, [r5, #0]
 801b6de:	6803      	ldr	r3, [r0, #0]
 801b6e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b6e2:	4798      	blx	r3
 801b6e4:	f7f4 f9ba 	bl	800fa5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801b6e8:	6860      	ldr	r0, [r4, #4]
 801b6ea:	4631      	mov	r1, r6
 801b6ec:	6803      	ldr	r3, [r0, #0]
 801b6ee:	689b      	ldr	r3, [r3, #8]
 801b6f0:	4798      	blx	r3
 801b6f2:	6823      	ldr	r3, [r4, #0]
 801b6f4:	4620      	mov	r0, r4
 801b6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6f8:	4798      	blx	r3
 801b6fa:	6828      	ldr	r0, [r5, #0]
 801b6fc:	6803      	ldr	r3, [r0, #0]
 801b6fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b704:	4718      	bx	r3
 801b706:	bf00      	nop
 801b708:	20009b14 	.word	0x20009b14

0801b70c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801b70c:	b508      	push	{r3, lr}
 801b70e:	f7f4 f989 	bl	800fa24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801b712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b716:	f7f4 b993 	b.w	800fa40 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801b71a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801b71a:	b570      	push	{r4, r5, r6, lr}
 801b71c:	4604      	mov	r4, r0
 801b71e:	6840      	ldr	r0, [r0, #4]
 801b720:	6803      	ldr	r3, [r0, #0]
 801b722:	681b      	ldr	r3, [r3, #0]
 801b724:	4798      	blx	r3
 801b726:	4605      	mov	r5, r0
 801b728:	b908      	cbnz	r0, 801b72e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801b72a:	7a23      	ldrb	r3, [r4, #8]
 801b72c:	b973      	cbnz	r3, 801b74c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801b72e:	6860      	ldr	r0, [r4, #4]
 801b730:	6803      	ldr	r3, [r0, #0]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	4798      	blx	r3
 801b736:	b928      	cbnz	r0, 801b744 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801b738:	6823      	ldr	r3, [r4, #0]
 801b73a:	4620      	mov	r0, r4
 801b73c:	6a1b      	ldr	r3, [r3, #32]
 801b73e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b742:	4718      	bx	r3
 801b744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b748:	f7f4 b994 	b.w	800fa74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801b74c:	6860      	ldr	r0, [r4, #4]
 801b74e:	6803      	ldr	r3, [r0, #0]
 801b750:	695b      	ldr	r3, [r3, #20]
 801b752:	4798      	blx	r3
 801b754:	7225      	strb	r5, [r4, #8]
 801b756:	e7ea      	b.n	801b72e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801b758 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801b758:	b510      	push	{r4, lr}
 801b75a:	68c3      	ldr	r3, [r0, #12]
 801b75c:	6902      	ldr	r2, [r0, #16]
 801b75e:	1ad2      	subs	r2, r2, r3
 801b760:	2a00      	cmp	r2, #0
 801b762:	bfdc      	itt	le
 801b764:	6884      	ldrle	r4, [r0, #8]
 801b766:	1912      	addle	r2, r2, r4
 801b768:	2a01      	cmp	r2, #1
 801b76a:	dd17      	ble.n	801b79c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801b76c:	6842      	ldr	r2, [r0, #4]
 801b76e:	241c      	movs	r4, #28
 801b770:	fb04 2303 	mla	r3, r4, r3, r2
 801b774:	f101 0218 	add.w	r2, r1, #24
 801b778:	f851 4b04 	ldr.w	r4, [r1], #4
 801b77c:	4291      	cmp	r1, r2
 801b77e:	f843 4b04 	str.w	r4, [r3], #4
 801b782:	d1f9      	bne.n	801b778 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801b784:	780a      	ldrb	r2, [r1, #0]
 801b786:	701a      	strb	r2, [r3, #0]
 801b788:	68c3      	ldr	r3, [r0, #12]
 801b78a:	6882      	ldr	r2, [r0, #8]
 801b78c:	f3bf 8f5b 	dmb	ish
 801b790:	3301      	adds	r3, #1
 801b792:	4293      	cmp	r3, r2
 801b794:	bfa8      	it	ge
 801b796:	1a9b      	subge	r3, r3, r2
 801b798:	60c3      	str	r3, [r0, #12]
 801b79a:	bd10      	pop	{r4, pc}
 801b79c:	4b02      	ldr	r3, [pc, #8]	; (801b7a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801b79e:	213b      	movs	r1, #59	; 0x3b
 801b7a0:	4a02      	ldr	r2, [pc, #8]	; (801b7ac <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801b7a2:	4803      	ldr	r0, [pc, #12]	; (801b7b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801b7a4:	f003 fd8c 	bl	801f2c0 <__assert_func>
 801b7a8:	08021dec 	.word	0x08021dec
 801b7ac:	08021edc 	.word	0x08021edc
 801b7b0:	08021dc6 	.word	0x08021dc6

0801b7b4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801b7b4:	b510      	push	{r4, lr}
 801b7b6:	6803      	ldr	r3, [r0, #0]
 801b7b8:	4604      	mov	r4, r0
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	4798      	blx	r3
 801b7be:	b128      	cbz	r0, 801b7cc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801b7c0:	4b07      	ldr	r3, [pc, #28]	; (801b7e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801b7c2:	2141      	movs	r1, #65	; 0x41
 801b7c4:	4a07      	ldr	r2, [pc, #28]	; (801b7e4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801b7c6:	4808      	ldr	r0, [pc, #32]	; (801b7e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801b7c8:	f003 fd7a 	bl	801f2c0 <__assert_func>
 801b7cc:	6923      	ldr	r3, [r4, #16]
 801b7ce:	68a2      	ldr	r2, [r4, #8]
 801b7d0:	f3bf 8f5b 	dmb	ish
 801b7d4:	3301      	adds	r3, #1
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	bfa8      	it	ge
 801b7da:	1a9b      	subge	r3, r3, r2
 801b7dc:	6123      	str	r3, [r4, #16]
 801b7de:	bd10      	pop	{r4, pc}
 801b7e0:	08021e0f 	.word	0x08021e0f
 801b7e4:	08021f2a 	.word	0x08021f2a
 801b7e8:	08021dc6 	.word	0x08021dc6

0801b7ec <_ZN8touchgfx13DMA_Interface5startEv>:
 801b7ec:	b510      	push	{r4, lr}
 801b7ee:	4604      	mov	r4, r0
 801b7f0:	6840      	ldr	r0, [r0, #4]
 801b7f2:	6803      	ldr	r3, [r0, #0]
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	4798      	blx	r3
 801b7f8:	b948      	cbnz	r0, 801b80e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b7fa:	7a63      	ldrb	r3, [r4, #9]
 801b7fc:	b13b      	cbz	r3, 801b80e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b7fe:	7a23      	ldrb	r3, [r4, #8]
 801b800:	b92b      	cbnz	r3, 801b80e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801b802:	6823      	ldr	r3, [r4, #0]
 801b804:	4620      	mov	r0, r4
 801b806:	6a1b      	ldr	r3, [r3, #32]
 801b808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b80c:	4718      	bx	r3
 801b80e:	bd10      	pop	{r4, pc}

0801b810 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801b810:	b510      	push	{r4, lr}
 801b812:	6082      	str	r2, [r0, #8]
 801b814:	2200      	movs	r2, #0
 801b816:	4c03      	ldr	r4, [pc, #12]	; (801b824 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801b818:	6041      	str	r1, [r0, #4]
 801b81a:	6004      	str	r4, [r0, #0]
 801b81c:	60c2      	str	r2, [r0, #12]
 801b81e:	6102      	str	r2, [r0, #16]
 801b820:	bd10      	pop	{r4, pc}
 801b822:	bf00      	nop
 801b824:	08021e90 	.word	0x08021e90

0801b828 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801b828:	6840      	ldr	r0, [r0, #4]
 801b82a:	6803      	ldr	r3, [r0, #0]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	4718      	bx	r3

0801b830 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b830:	2b02      	cmp	r3, #2
 801b832:	d00e      	beq.n	801b852 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b834:	2b03      	cmp	r3, #3
 801b836:	d012      	beq.n	801b85e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801b838:	2b01      	cmp	r3, #1
 801b83a:	d003      	beq.n	801b844 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b83c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b840:	1850      	adds	r0, r2, r1
 801b842:	4770      	bx	lr
 801b844:	8803      	ldrh	r3, [r0, #0]
 801b846:	8880      	ldrh	r0, [r0, #4]
 801b848:	4418      	add	r0, r3
 801b84a:	b200      	sxth	r0, r0
 801b84c:	1a80      	subs	r0, r0, r2
 801b84e:	3801      	subs	r0, #1
 801b850:	4770      	bx	lr
 801b852:	8803      	ldrh	r3, [r0, #0]
 801b854:	8880      	ldrh	r0, [r0, #4]
 801b856:	4418      	add	r0, r3
 801b858:	b200      	sxth	r0, r0
 801b85a:	1a40      	subs	r0, r0, r1
 801b85c:	e7f7      	b.n	801b84e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b85e:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b862:	4410      	add	r0, r2
 801b864:	4770      	bx	lr

0801b866 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b866:	2b02      	cmp	r3, #2
 801b868:	d008      	beq.n	801b87c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b86a:	2b03      	cmp	r3, #3
 801b86c:	d00d      	beq.n	801b88a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b86e:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801b872:	2b01      	cmp	r3, #1
 801b874:	bf14      	ite	ne
 801b876:	1880      	addne	r0, r0, r2
 801b878:	1840      	addeq	r0, r0, r1
 801b87a:	4770      	bx	lr
 801b87c:	8843      	ldrh	r3, [r0, #2]
 801b87e:	88c0      	ldrh	r0, [r0, #6]
 801b880:	4418      	add	r0, r3
 801b882:	b200      	sxth	r0, r0
 801b884:	1a80      	subs	r0, r0, r2
 801b886:	3801      	subs	r0, #1
 801b888:	4770      	bx	lr
 801b88a:	8843      	ldrh	r3, [r0, #2]
 801b88c:	88c0      	ldrh	r0, [r0, #6]
 801b88e:	4418      	add	r0, r3
 801b890:	b200      	sxth	r0, r0
 801b892:	1a40      	subs	r0, r0, r1
 801b894:	e7f7      	b.n	801b886 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801b896 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801b896:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b898:	f8dd c014 	ldr.w	ip, [sp, #20]
 801b89c:	1e05      	subs	r5, r0, #0
 801b89e:	f04f 0601 	mov.w	r6, #1
 801b8a2:	9c06      	ldr	r4, [sp, #24]
 801b8a4:	bfba      	itte	lt
 801b8a6:	f04f 37ff 	movlt.w	r7, #4294967295
 801b8aa:	426d      	neglt	r5, r5
 801b8ac:	2701      	movge	r7, #1
 801b8ae:	f1bc 0f00 	cmp.w	ip, #0
 801b8b2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801b8b6:	bfbc      	itt	lt
 801b8b8:	f1cc 0c00 	rsblt	ip, ip, #0
 801b8bc:	427f      	neglt	r7, r7
 801b8be:	2c00      	cmp	r4, #0
 801b8c0:	fa4c f001 	asr.w	r0, ip, r1
 801b8c4:	fa06 f101 	lsl.w	r1, r6, r1
 801b8c8:	bfbc      	itt	lt
 801b8ca:	4264      	neglt	r4, r4
 801b8cc:	427f      	neglt	r7, r7
 801b8ce:	3901      	subs	r1, #1
 801b8d0:	ea01 010c 	and.w	r1, r1, ip
 801b8d4:	434d      	muls	r5, r1
 801b8d6:	f8de 1000 	ldr.w	r1, [lr]
 801b8da:	fb03 1300 	mla	r3, r3, r0, r1
 801b8de:	fb95 f1f4 	sdiv	r1, r5, r4
 801b8e2:	fb04 5511 	mls	r5, r4, r1, r5
 801b8e6:	441d      	add	r5, r3
 801b8e8:	fb95 f3f4 	sdiv	r3, r5, r4
 801b8ec:	4419      	add	r1, r3
 801b8ee:	fb04 5413 	mls	r4, r4, r3, r5
 801b8f2:	fb02 1000 	mla	r0, r2, r0, r1
 801b8f6:	f8ce 4000 	str.w	r4, [lr]
 801b8fa:	4378      	muls	r0, r7
 801b8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801b900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b904:	4c24      	ldr	r4, [pc, #144]	; (801b998 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801b906:	b086      	sub	sp, #24
 801b908:	4605      	mov	r5, r0
 801b90a:	6807      	ldr	r7, [r0, #0]
 801b90c:	69a3      	ldr	r3, [r4, #24]
 801b90e:	b92b      	cbnz	r3, 801b91c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801b910:	6840      	ldr	r0, [r0, #4]
 801b912:	602f      	str	r7, [r5, #0]
 801b914:	6068      	str	r0, [r5, #4]
 801b916:	b006      	add	sp, #24
 801b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b91c:	f04f 0802 	mov.w	r8, #2
 801b920:	68a2      	ldr	r2, [r4, #8]
 801b922:	ae06      	add	r6, sp, #24
 801b924:	6820      	ldr	r0, [r4, #0]
 801b926:	fb93 f1f8 	sdiv	r1, r3, r8
 801b92a:	440a      	add	r2, r1
 801b92c:	69e1      	ldr	r1, [r4, #28]
 801b92e:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b932:	9301      	str	r3, [sp, #4]
 801b934:	9700      	str	r7, [sp, #0]
 801b936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801b938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801b93a:	9602      	str	r6, [sp, #8]
 801b93c:	f7ff ffab 	bl	801b896 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b940:	69a3      	ldr	r3, [r4, #24]
 801b942:	4607      	mov	r7, r0
 801b944:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b946:	9301      	str	r3, [sp, #4]
 801b948:	686b      	ldr	r3, [r5, #4]
 801b94a:	6a21      	ldr	r1, [r4, #32]
 801b94c:	9300      	str	r3, [sp, #0]
 801b94e:	9602      	str	r6, [sp, #8]
 801b950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b952:	6860      	ldr	r0, [r4, #4]
 801b954:	f7ff ff9f 	bl	801b896 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b958:	69a2      	ldr	r2, [r4, #24]
 801b95a:	6963      	ldr	r3, [r4, #20]
 801b95c:	4407      	add	r7, r0
 801b95e:	9201      	str	r2, [sp, #4]
 801b960:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b962:	9602      	str	r6, [sp, #8]
 801b964:	68e0      	ldr	r0, [r4, #12]
 801b966:	fb92 f8f8 	sdiv	r8, r2, r8
 801b96a:	4443      	add	r3, r8
 801b96c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801b96e:	9305      	str	r3, [sp, #20]
 801b970:	682b      	ldr	r3, [r5, #0]
 801b972:	9300      	str	r3, [sp, #0]
 801b974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b976:	f7ff ff8e 	bl	801b896 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b97a:	69a3      	ldr	r3, [r4, #24]
 801b97c:	4680      	mov	r8, r0
 801b97e:	9602      	str	r6, [sp, #8]
 801b980:	9301      	str	r3, [sp, #4]
 801b982:	686b      	ldr	r3, [r5, #4]
 801b984:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b986:	9300      	str	r3, [sp, #0]
 801b988:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b98a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801b98c:	6920      	ldr	r0, [r4, #16]
 801b98e:	f7ff ff82 	bl	801b896 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801b992:	4440      	add	r0, r8
 801b994:	e7bd      	b.n	801b912 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801b996:	bf00      	nop
 801b998:	20009b1c 	.word	0x20009b1c

0801b99c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b99c:	4b07      	ldr	r3, [pc, #28]	; (801b9bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b99e:	b510      	push	{r4, lr}
 801b9a0:	781b      	ldrb	r3, [r3, #0]
 801b9a2:	2b01      	cmp	r3, #1
 801b9a4:	d108      	bne.n	801b9b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b9a6:	4b06      	ldr	r3, [pc, #24]	; (801b9c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b9a8:	880c      	ldrh	r4, [r1, #0]
 801b9aa:	881b      	ldrh	r3, [r3, #0]
 801b9ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b9b0:	3b01      	subs	r3, #1
 801b9b2:	1b1b      	subs	r3, r3, r4
 801b9b4:	8003      	strh	r3, [r0, #0]
 801b9b6:	800a      	strh	r2, [r1, #0]
 801b9b8:	bd10      	pop	{r4, pc}
 801b9ba:	bf00      	nop
 801b9bc:	20009b0c 	.word	0x20009b0c
 801b9c0:	20009b10 	.word	0x20009b10

0801b9c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b9c4:	4b07      	ldr	r3, [pc, #28]	; (801b9e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b9c6:	b510      	push	{r4, lr}
 801b9c8:	781b      	ldrb	r3, [r3, #0]
 801b9ca:	2b01      	cmp	r3, #1
 801b9cc:	d108      	bne.n	801b9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b9ce:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b9d2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b9d6:	8003      	strh	r3, [r0, #0]
 801b9d8:	8893      	ldrh	r3, [r2, #4]
 801b9da:	3b01      	subs	r3, #1
 801b9dc:	1b1b      	subs	r3, r3, r4
 801b9de:	800b      	strh	r3, [r1, #0]
 801b9e0:	bd10      	pop	{r4, pc}
 801b9e2:	bf00      	nop
 801b9e4:	20009b0c 	.word	0x20009b0c

0801b9e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b9e8:	4b0a      	ldr	r3, [pc, #40]	; (801ba14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801b9ea:	b513      	push	{r0, r1, r4, lr}
 801b9ec:	f9b3 4000 	ldrsh.w	r4, [r3]
 801b9f0:	4b09      	ldr	r3, [pc, #36]	; (801ba18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801b9f2:	f8ad 4004 	strh.w	r4, [sp, #4]
 801b9f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ba00:	466a      	mov	r2, sp
 801ba02:	f8ad 3000 	strh.w	r3, [sp]
 801ba06:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ba0a:	f7ff ffdb 	bl	801b9c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ba0e:	b002      	add	sp, #8
 801ba10:	bd10      	pop	{r4, pc}
 801ba12:	bf00      	nop
 801ba14:	20009b08 	.word	0x20009b08
 801ba18:	20009b0a 	.word	0x20009b0a

0801ba1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ba1c:	4b0a      	ldr	r3, [pc, #40]	; (801ba48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ba1e:	460a      	mov	r2, r1
 801ba20:	b510      	push	{r4, lr}
 801ba22:	781b      	ldrb	r3, [r3, #0]
 801ba24:	2b01      	cmp	r3, #1
 801ba26:	d10d      	bne.n	801ba44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ba28:	8881      	ldrh	r1, [r0, #4]
 801ba2a:	8803      	ldrh	r3, [r0, #0]
 801ba2c:	440b      	add	r3, r1
 801ba2e:	4601      	mov	r1, r0
 801ba30:	3b01      	subs	r3, #1
 801ba32:	f821 3b02 	strh.w	r3, [r1], #2
 801ba36:	f7ff ffc5 	bl	801b9c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ba3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ba3e:	88c2      	ldrh	r2, [r0, #6]
 801ba40:	80c3      	strh	r3, [r0, #6]
 801ba42:	8082      	strh	r2, [r0, #4]
 801ba44:	bd10      	pop	{r4, pc}
 801ba46:	bf00      	nop
 801ba48:	20009b0c 	.word	0x20009b0c

0801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801ba4c:	4b0a      	ldr	r3, [pc, #40]	; (801ba78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801ba4e:	b507      	push	{r0, r1, r2, lr}
 801ba50:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ba54:	4b09      	ldr	r3, [pc, #36]	; (801ba7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801ba56:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ba5a:	4669      	mov	r1, sp
 801ba5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ba60:	2300      	movs	r3, #0
 801ba62:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ba66:	f8ad 3000 	strh.w	r3, [sp]
 801ba6a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ba6e:	f7ff ffd5 	bl	801ba1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ba72:	b003      	add	sp, #12
 801ba74:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba78:	20009b08 	.word	0x20009b08
 801ba7c:	20009b0a 	.word	0x20009b0a

0801ba80 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801ba80:	4b03      	ldr	r3, [pc, #12]	; (801ba90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801ba82:	6818      	ldr	r0, [r3, #0]
 801ba84:	b110      	cbz	r0, 801ba8c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801ba86:	6803      	ldr	r3, [r0, #0]
 801ba88:	699b      	ldr	r3, [r3, #24]
 801ba8a:	4718      	bx	r3
 801ba8c:	4770      	bx	lr
 801ba8e:	bf00      	nop
 801ba90:	20009b68 	.word	0x20009b68

0801ba94 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801ba94:	4770      	bx	lr
	...

0801ba98 <_ZN8touchgfx11Application4drawEv>:
 801ba98:	4b0b      	ldr	r3, [pc, #44]	; (801bac8 <_ZN8touchgfx11Application4drawEv+0x30>)
 801ba9a:	b507      	push	{r0, r1, r2, lr}
 801ba9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801baa0:	4b0a      	ldr	r3, [pc, #40]	; (801bacc <_ZN8touchgfx11Application4drawEv+0x34>)
 801baa2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801baa6:	4669      	mov	r1, sp
 801baa8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801baac:	2300      	movs	r3, #0
 801baae:	f8ad 3000 	strh.w	r3, [sp]
 801bab2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bab6:	6803      	ldr	r3, [r0, #0]
 801bab8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801babe:	4798      	blx	r3
 801bac0:	b003      	add	sp, #12
 801bac2:	f85d fb04 	ldr.w	pc, [sp], #4
 801bac6:	bf00      	nop
 801bac8:	20009b08 	.word	0x20009b08
 801bacc:	20009b0a 	.word	0x20009b0a

0801bad0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801bad0:	4b03      	ldr	r3, [pc, #12]	; (801bae0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801bad2:	6818      	ldr	r0, [r3, #0]
 801bad4:	b110      	cbz	r0, 801badc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801bad6:	6803      	ldr	r3, [r0, #0]
 801bad8:	69db      	ldr	r3, [r3, #28]
 801bada:	4718      	bx	r3
 801badc:	4770      	bx	lr
 801bade:	bf00      	nop
 801bae0:	20009b68 	.word	0x20009b68

0801bae4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801bae4:	4b03      	ldr	r3, [pc, #12]	; (801baf4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801bae6:	6818      	ldr	r0, [r3, #0]
 801bae8:	b110      	cbz	r0, 801baf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801baea:	6803      	ldr	r3, [r0, #0]
 801baec:	6a1b      	ldr	r3, [r3, #32]
 801baee:	4718      	bx	r3
 801baf0:	4770      	bx	lr
 801baf2:	bf00      	nop
 801baf4:	20009b68 	.word	0x20009b68

0801baf8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801baf8:	4b03      	ldr	r3, [pc, #12]	; (801bb08 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801bafa:	6818      	ldr	r0, [r3, #0]
 801bafc:	b110      	cbz	r0, 801bb04 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801bafe:	6803      	ldr	r3, [r0, #0]
 801bb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb02:	4718      	bx	r3
 801bb04:	4770      	bx	lr
 801bb06:	bf00      	nop
 801bb08:	20009b68 	.word	0x20009b68

0801bb0c <_ZN8touchgfx11Application15handleTickEventEv>:
 801bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb10:	4d3d      	ldr	r5, [pc, #244]	; (801bc08 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801bb12:	4604      	mov	r4, r0
 801bb14:	6828      	ldr	r0, [r5, #0]
 801bb16:	2800      	cmp	r0, #0
 801bb18:	d047      	beq.n	801bbaa <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801bb1a:	7a03      	ldrb	r3, [r0, #8]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d144      	bne.n	801bbaa <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801bb20:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801bb24:	6803      	ldr	r3, [r0, #0]
 801bb26:	689b      	ldr	r3, [r3, #8]
 801bb28:	e03c      	b.n	801bba4 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801bb2a:	3b01      	subs	r3, #1
 801bb2c:	f04f 0c00 	mov.w	ip, #0
 801bb30:	1c5a      	adds	r2, r3, #1
 801bb32:	d031      	beq.n	801bb98 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801bb34:	18e2      	adds	r2, r4, r3
 801bb36:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801bb3a:	bb59      	cbnz	r1, 801bb94 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801bb3c:	b298      	uxth	r0, r3
 801bb3e:	1d25      	adds	r5, r4, #4
 801bb40:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801bb44:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801bb48:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801bb4c:	428a      	cmp	r2, r1
 801bb4e:	dd14      	ble.n	801bb7a <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801bb50:	682e      	ldr	r6, [r5, #0]
 801bb52:	45b0      	cmp	r8, r6
 801bb54:	d106      	bne.n	801bb64 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801bb56:	46ae      	mov	lr, r5
 801bb58:	460e      	mov	r6, r1
 801bb5a:	2e1e      	cmp	r6, #30
 801bb5c:	dd05      	ble.n	801bb6a <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801bb5e:	3a01      	subs	r2, #1
 801bb60:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801bb64:	3101      	adds	r1, #1
 801bb66:	3504      	adds	r5, #4
 801bb68:	e7ee      	b.n	801bb48 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801bb6a:	3601      	adds	r6, #1
 801bb6c:	f8de 7004 	ldr.w	r7, [lr, #4]
 801bb70:	42b2      	cmp	r2, r6
 801bb72:	f84e 7b04 	str.w	r7, [lr], #4
 801bb76:	dcf0      	bgt.n	801bb5a <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801bb78:	e7f1      	b.n	801bb5e <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801bb7a:	4290      	cmp	r0, r2
 801bb7c:	da07      	bge.n	801bb8e <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801bb7e:	1821      	adds	r1, r4, r0
 801bb80:	3001      	adds	r0, #1
 801bb82:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801bb86:	b280      	uxth	r0, r0
 801bb88:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801bb8c:	e7f5      	b.n	801bb7a <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801bb8e:	4422      	add	r2, r4
 801bb90:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801bb94:	3b01      	subs	r3, #1
 801bb96:	e7cb      	b.n	801bb30 <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801bb98:	4b1c      	ldr	r3, [pc, #112]	; (801bc0c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801bb9a:	6818      	ldr	r0, [r3, #0]
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	d031      	beq.n	801bc04 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801bba0:	6803      	ldr	r3, [r0, #0]
 801bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bba8:	4718      	bx	r3
 801bbaa:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801bbae:	b913      	cbnz	r3, 801bbb6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801bbb0:	b108      	cbz	r0, 801bbb6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801bbb2:	7a03      	ldrb	r3, [r0, #8]
 801bbb4:	b9a3      	cbnz	r3, 801bbe0 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801bbb6:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801bbba:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801bbbe:	2600      	movs	r6, #0
 801bbc0:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801bbc4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801bbc8:	429e      	cmp	r6, r3
 801bbca:	daae      	bge.n	801bb2a <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801bbcc:	f817 3b01 	ldrb.w	r3, [r7], #1
 801bbd0:	b123      	cbz	r3, 801bbdc <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801bbd2:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801bbd6:	6803      	ldr	r3, [r0, #0]
 801bbd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbda:	4798      	blx	r3
 801bbdc:	3601      	adds	r6, #1
 801bbde:	e7f1      	b.n	801bbc4 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801bbe0:	4b0a      	ldr	r3, [pc, #40]	; (801bc0c <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801bbe2:	6818      	ldr	r0, [r3, #0]
 801bbe4:	b110      	cbz	r0, 801bbec <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801bbe6:	6803      	ldr	r3, [r0, #0]
 801bbe8:	691b      	ldr	r3, [r3, #16]
 801bbea:	4798      	blx	r3
 801bbec:	6828      	ldr	r0, [r5, #0]
 801bbee:	6803      	ldr	r3, [r0, #0]
 801bbf0:	68db      	ldr	r3, [r3, #12]
 801bbf2:	4798      	blx	r3
 801bbf4:	6823      	ldr	r3, [r4, #0]
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbfa:	4798      	blx	r3
 801bbfc:	2301      	movs	r3, #1
 801bbfe:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801bc02:	e7d8      	b.n	801bbb6 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc08:	20009b6c 	.word	0x20009b6c
 801bc0c:	20009b68 	.word	0x20009b68

0801bc10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bc10:	b570      	push	{r4, r5, r6, lr}
 801bc12:	4606      	mov	r6, r0
 801bc14:	460c      	mov	r4, r1
 801bc16:	b929      	cbnz	r1, 801bc24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bc18:	4b0c      	ldr	r3, [pc, #48]	; (801bc4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bc1a:	2161      	movs	r1, #97	; 0x61
 801bc1c:	4a0c      	ldr	r2, [pc, #48]	; (801bc50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bc1e:	480d      	ldr	r0, [pc, #52]	; (801bc54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801bc20:	f003 fb4e 	bl	801f2c0 <__assert_func>
 801bc24:	2300      	movs	r3, #0
 801bc26:	4d0c      	ldr	r5, [pc, #48]	; (801bc58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bc28:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801bc2c:	6828      	ldr	r0, [r5, #0]
 801bc2e:	b110      	cbz	r0, 801bc36 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801bc30:	6803      	ldr	r3, [r0, #0]
 801bc32:	695b      	ldr	r3, [r3, #20]
 801bc34:	4798      	blx	r3
 801bc36:	602c      	str	r4, [r5, #0]
 801bc38:	4620      	mov	r0, r4
 801bc3a:	6823      	ldr	r3, [r4, #0]
 801bc3c:	68db      	ldr	r3, [r3, #12]
 801bc3e:	4798      	blx	r3
 801bc40:	6833      	ldr	r3, [r6, #0]
 801bc42:	4630      	mov	r0, r6
 801bc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc4a:	4718      	bx	r3
 801bc4c:	08021f5a 	.word	0x08021f5a
 801bc50:	08022024 	.word	0x08022024
 801bc54:	08021f64 	.word	0x08021f64
 801bc58:	20009b68 	.word	0x20009b68

0801bc5c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bc5c:	b570      	push	{r4, r5, r6, lr}
 801bc5e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bc62:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bc66:	42ac      	cmp	r4, r5
 801bc68:	db18      	blt.n	801bc9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bc6a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bc6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	db12      	blt.n	801bc9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bc76:	8886      	ldrh	r6, [r0, #4]
 801bc78:	4435      	add	r5, r6
 801bc7a:	888e      	ldrh	r6, [r1, #4]
 801bc7c:	4434      	add	r4, r6
 801bc7e:	b22d      	sxth	r5, r5
 801bc80:	b224      	sxth	r4, r4
 801bc82:	42a5      	cmp	r5, r4
 801bc84:	db0a      	blt.n	801bc9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bc86:	88c0      	ldrh	r0, [r0, #6]
 801bc88:	4418      	add	r0, r3
 801bc8a:	88cb      	ldrh	r3, [r1, #6]
 801bc8c:	441a      	add	r2, r3
 801bc8e:	b200      	sxth	r0, r0
 801bc90:	b212      	sxth	r2, r2
 801bc92:	4290      	cmp	r0, r2
 801bc94:	bfb4      	ite	lt
 801bc96:	2000      	movlt	r0, #0
 801bc98:	2001      	movge	r0, #1
 801bc9a:	bd70      	pop	{r4, r5, r6, pc}
 801bc9c:	2000      	movs	r0, #0
 801bc9e:	bd70      	pop	{r4, r5, r6, pc}

0801bca0 <_ZN8touchgfx11Application11getInstanceEv>:
 801bca0:	4b01      	ldr	r3, [pc, #4]	; (801bca8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bca2:	6818      	ldr	r0, [r3, #0]
 801bca4:	4770      	bx	lr
 801bca6:	bf00      	nop
 801bca8:	20009b70 	.word	0x20009b70

0801bcac <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bcac:	2300      	movs	r3, #0
 801bcae:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801bcb2:	30a8      	adds	r0, #168	; 0xa8
 801bcb4:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bcb8:	f802 3b01 	strb.w	r3, [r2], #1
 801bcbc:	4282      	cmp	r2, r0
 801bcbe:	d1fb      	bne.n	801bcb8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801bcc0:	4770      	bx	lr

0801bcc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bcc2:	4603      	mov	r3, r0
 801bcc4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bcc8:	2200      	movs	r2, #0
 801bcca:	801a      	strh	r2, [r3, #0]
 801bccc:	3308      	adds	r3, #8
 801bcce:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bcd2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bcd6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bcda:	428b      	cmp	r3, r1
 801bcdc:	d1f5      	bne.n	801bcca <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bcde:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bce2:	4770      	bx	lr

0801bce4 <_ZN8touchgfx11ApplicationC1Ev>:
 801bce4:	b570      	push	{r4, r5, r6, lr}
 801bce6:	4b16      	ldr	r3, [pc, #88]	; (801bd40 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801bce8:	2500      	movs	r5, #0
 801bcea:	4604      	mov	r4, r0
 801bcec:	30a8      	adds	r0, #168	; 0xa8
 801bcee:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bcf2:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bcf6:	f7ff ffe4 	bl	801bcc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bcfa:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bcfe:	f7ff ffe0 	bl	801bcc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd02:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801bd06:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801bd0a:	490e      	ldr	r1, [pc, #56]	; (801bd44 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801bd0c:	480e      	ldr	r0, [pc, #56]	; (801bd48 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801bd0e:	f003 f9d5 	bl	801f0bc <CRC_Lock>
 801bd12:	4e0e      	ldr	r6, [pc, #56]	; (801bd4c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801bd14:	4b0e      	ldr	r3, [pc, #56]	; (801bd50 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bd16:	b158      	cbz	r0, 801bd30 <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801bd18:	801d      	strh	r5, [r3, #0]
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	4a0d      	ldr	r2, [pc, #52]	; (801bd54 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bd1e:	4620      	mov	r0, r4
 801bd20:	6013      	str	r3, [r2, #0]
 801bd22:	4a0d      	ldr	r2, [pc, #52]	; (801bd58 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bd24:	6033      	str	r3, [r6, #0]
 801bd26:	6013      	str	r3, [r2, #0]
 801bd28:	f7ff ffc0 	bl	801bcac <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bd2c:	4620      	mov	r0, r4
 801bd2e:	bd70      	pop	{r4, r5, r6, pc}
 801bd30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd34:	2002      	movs	r0, #2
 801bd36:	801a      	strh	r2, [r3, #0]
 801bd38:	6030      	str	r0, [r6, #0]
 801bd3a:	f000 fe77 	bl	801ca2c <_ZN8touchgfx6Screen4drawEv>
 801bd3e:	e7ec      	b.n	801bd1a <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801bd40:	08021ff0 	.word	0x08021ff0
 801bd44:	b5e8b5cd 	.word	0xb5e8b5cd
 801bd48:	f407a5c2 	.word	0xf407a5c2
 801bd4c:	20009b68 	.word	0x20009b68
 801bd50:	20000070 	.word	0x20000070
 801bd54:	20009b70 	.word	0x20009b70
 801bd58:	20009b6c 	.word	0x20009b6c

0801bd5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	8003      	strh	r3, [r0, #0]
 801bd60:	8043      	strh	r3, [r0, #2]
 801bd62:	8083      	strh	r3, [r0, #4]
 801bd64:	80c3      	strh	r3, [r0, #6]
 801bd66:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	b530      	push	{r4, r5, lr}
 801bd6e:	da12      	bge.n	801bd96 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bd70:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801bd74:	3b01      	subs	r3, #1
 801bd76:	6825      	ldr	r5, [r4, #0]
 801bd78:	b29b      	uxth	r3, r3
 801bd7a:	6005      	str	r5, [r0, #0]
 801bd7c:	429a      	cmp	r2, r3
 801bd7e:	6865      	ldr	r5, [r4, #4]
 801bd80:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801bd84:	6045      	str	r5, [r0, #4]
 801bd86:	da06      	bge.n	801bd96 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801bd88:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801bd8c:	681d      	ldr	r5, [r3, #0]
 801bd8e:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801bd92:	685d      	ldr	r5, [r3, #4]
 801bd94:	6065      	str	r5, [r4, #4]
 801bd96:	bd30      	pop	{r4, r5, pc}

0801bd98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801bd98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd9a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801bd9e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801bda2:	4604      	mov	r4, r0
 801bda4:	466b      	mov	r3, sp
 801bda6:	2a07      	cmp	r2, #7
 801bda8:	dd06      	ble.n	801bdb8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801bdaa:	4b09      	ldr	r3, [pc, #36]	; (801bdd0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801bdac:	f240 11f9 	movw	r1, #505	; 0x1f9
 801bdb0:	4a08      	ldr	r2, [pc, #32]	; (801bdd4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801bdb2:	4809      	ldr	r0, [pc, #36]	; (801bdd8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801bdb4:	f003 fa84 	bl	801f2c0 <__assert_func>
 801bdb8:	1c51      	adds	r1, r2, #1
 801bdba:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bdbe:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801bdc2:	cb03      	ldmia	r3!, {r0, r1}
 801bdc4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801bdc8:	6069      	str	r1, [r5, #4]
 801bdca:	b003      	add	sp, #12
 801bdcc:	bd30      	pop	{r4, r5, pc}
 801bdce:	bf00      	nop
 801bdd0:	08021f8e 	.word	0x08021f8e
 801bdd4:	08022068 	.word	0x08022068
 801bdd8:	08021fbd 	.word	0x08021fbd

0801bddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bde0:	b089      	sub	sp, #36	; 0x24
 801bde2:	4606      	mov	r6, r0
 801bde4:	4668      	mov	r0, sp
 801bde6:	466c      	mov	r4, sp
 801bde8:	e88d 0006 	stmia.w	sp, {r1, r2}
 801bdec:	f7f2 fbfe 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801bdf0:	bbb0      	cbnz	r0, 801be60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801bdf2:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801bdf6:	b1fd      	cbz	r5, 801be38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801bdf8:	3d01      	subs	r5, #1
 801bdfa:	af04      	add	r7, sp, #16
 801bdfc:	f04f 090a 	mov.w	r9, #10
 801be00:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801be04:	ab02      	add	r3, sp, #8
 801be06:	fa1f f885 	uxth.w	r8, r5
 801be0a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801be0e:	6851      	ldr	r1, [r2, #4]
 801be10:	c303      	stmia	r3!, {r0, r1}
 801be12:	4621      	mov	r1, r4
 801be14:	a802      	add	r0, sp, #8
 801be16:	f7ff ff21 	bl	801bc5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801be1a:	bb08      	cbnz	r0, 801be60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801be1c:	a902      	add	r1, sp, #8
 801be1e:	4620      	mov	r0, r4
 801be20:	f7ff ff1c 	bl	801bc5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801be24:	b1f8      	cbz	r0, 801be66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801be26:	4642      	mov	r2, r8
 801be28:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801be2c:	a806      	add	r0, sp, #24
 801be2e:	f7ff ff95 	bl	801bd5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be32:	f115 35ff 	adds.w	r5, r5, #4294967295
 801be36:	d2e3      	bcs.n	801be00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801be38:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801be3c:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801be40:	2b08      	cmp	r3, #8
 801be42:	d108      	bne.n	801be56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801be44:	4629      	mov	r1, r5
 801be46:	a806      	add	r0, sp, #24
 801be48:	2207      	movs	r2, #7
 801be4a:	f7ff ff87 	bl	801bd5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be4e:	a906      	add	r1, sp, #24
 801be50:	4620      	mov	r0, r4
 801be52:	f7f2 fb3f 	bl	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801be56:	4628      	mov	r0, r5
 801be58:	e894 0006 	ldmia.w	r4, {r1, r2}
 801be5c:	f7ff ff9c 	bl	801bd98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801be60:	b009      	add	sp, #36	; 0x24
 801be62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801be66:	4621      	mov	r1, r4
 801be68:	a802      	add	r0, sp, #8
 801be6a:	f7f2 fa70 	bl	800e34e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be6e:	b150      	cbz	r0, 801be86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801be70:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801be74:	a806      	add	r0, sp, #24
 801be76:	4642      	mov	r2, r8
 801be78:	f7ff ff70 	bl	801bd5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be7c:	a902      	add	r1, sp, #8
 801be7e:	4620      	mov	r0, r4
 801be80:	f7f2 fb28 	bl	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801be84:	e7d5      	b.n	801be32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801be86:	e894 0003 	ldmia.w	r4, {r0, r1}
 801be8a:	e887 0003 	stmia.w	r7, {r0, r1}
 801be8e:	a902      	add	r1, sp, #8
 801be90:	4638      	mov	r0, r7
 801be92:	f7f2 fb1f 	bl	800e4d4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801be96:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801be9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801be9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801bea2:	fb13 f302 	smulbb	r3, r3, r2
 801bea6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801beaa:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801beae:	fb11 f102 	smulbb	r1, r1, r2
 801beb2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801beb6:	fb09 f303 	mul.w	r3, r9, r3
 801beba:	fb12 1100 	smlabb	r1, r2, r0, r1
 801bebe:	220b      	movs	r2, #11
 801bec0:	434a      	muls	r2, r1
 801bec2:	4293      	cmp	r3, r2
 801bec4:	dab5      	bge.n	801be32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801bec6:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801beca:	a806      	add	r0, sp, #24
 801becc:	4642      	mov	r2, r8
 801bece:	f7ff ff45 	bl	801bd5c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bed2:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bed6:	e884 0003 	stmia.w	r4, {r0, r1}
 801beda:	e7aa      	b.n	801be32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801bedc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801bedc:	4b1b      	ldr	r3, [pc, #108]	; (801bf4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801bede:	b530      	push	{r4, r5, lr}
 801bee0:	460c      	mov	r4, r1
 801bee2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bee6:	4b1a      	ldr	r3, [pc, #104]	; (801bf50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801bee8:	b085      	sub	sp, #20
 801beea:	4605      	mov	r5, r0
 801beec:	6820      	ldr	r0, [r4, #0]
 801beee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bef2:	2300      	movs	r3, #0
 801bef4:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bef8:	f8ad 3000 	strh.w	r3, [sp]
 801befc:	6861      	ldr	r1, [r4, #4]
 801befe:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bf02:	ab02      	add	r3, sp, #8
 801bf04:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bf08:	c303      	stmia	r3!, {r0, r1}
 801bf0a:	4669      	mov	r1, sp
 801bf0c:	a802      	add	r0, sp, #8
 801bf0e:	f7f2 fa65 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801bf12:	ab02      	add	r3, sp, #8
 801bf14:	cb03      	ldmia	r3!, {r0, r1}
 801bf16:	4b0f      	ldr	r3, [pc, #60]	; (801bf54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801bf18:	6020      	str	r0, [r4, #0]
 801bf1a:	6818      	ldr	r0, [r3, #0]
 801bf1c:	6061      	str	r1, [r4, #4]
 801bf1e:	b138      	cbz	r0, 801bf30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801bf20:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801bf24:	b133      	cbz	r3, 801bf34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801bf26:	6821      	ldr	r1, [r4, #0]
 801bf28:	4628      	mov	r0, r5
 801bf2a:	6862      	ldr	r2, [r4, #4]
 801bf2c:	f7ff ff56 	bl	801bddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bf30:	b005      	add	sp, #20
 801bf32:	bd30      	pop	{r4, r5, pc}
 801bf34:	6803      	ldr	r3, [r0, #0]
 801bf36:	4621      	mov	r1, r4
 801bf38:	689b      	ldr	r3, [r3, #8]
 801bf3a:	4798      	blx	r3
 801bf3c:	4b06      	ldr	r3, [pc, #24]	; (801bf58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801bf3e:	4621      	mov	r1, r4
 801bf40:	6818      	ldr	r0, [r3, #0]
 801bf42:	6803      	ldr	r3, [r0, #0]
 801bf44:	695b      	ldr	r3, [r3, #20]
 801bf46:	4798      	blx	r3
 801bf48:	e7f2      	b.n	801bf30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801bf4a:	bf00      	nop
 801bf4c:	20009b08 	.word	0x20009b08
 801bf50:	20009b0a 	.word	0x20009b0a
 801bf54:	20009b68 	.word	0x20009b68
 801bf58:	20009b14 	.word	0x20009b14

0801bf5c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801bf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf60:	4604      	mov	r4, r0
 801bf62:	b096      	sub	sp, #88	; 0x58
 801bf64:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801bf68:	b129      	cbz	r1, 801bf76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801bf70:	b016      	add	sp, #88	; 0x58
 801bf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf76:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d0f8      	beq.n	801bf70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801bf7e:	4f6e      	ldr	r7, [pc, #440]	; (801c138 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801bf80:	a805      	add	r0, sp, #20
 801bf82:	f7ff fe9e 	bl	801bcc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bf86:	883d      	ldrh	r5, [r7, #0]
 801bf88:	462e      	mov	r6, r5
 801bf8a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bf8e:	429e      	cmp	r6, r3
 801bf90:	db10      	blt.n	801bfb4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801bf92:	462e      	mov	r6, r5
 801bf94:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801bf98:	429e      	cmp	r6, r3
 801bf9a:	da17      	bge.n	801bfcc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801bf9c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bfa0:	3601      	adds	r6, #1
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bfa8:	b2b6      	uxth	r6, r6
 801bfaa:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bfae:	f7ff ff15 	bl	801bddc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfb2:	e7ef      	b.n	801bf94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801bfb4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801bfb8:	3601      	adds	r6, #1
 801bfba:	a805      	add	r0, sp, #20
 801bfbc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801bfc0:	b2b6      	uxth	r6, r6
 801bfc2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801bfc6:	f7ff fee7 	bl	801bd98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801bfca:	e7de      	b.n	801bf8a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801bfcc:	4e5b      	ldr	r6, [pc, #364]	; (801c13c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801bfce:	6833      	ldr	r3, [r6, #0]
 801bfd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	f040 8094 	bne.w	801c102 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801bfda:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bfde:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801bfe2:	f04f 0900 	mov.w	r9, #0
 801bfe6:	33aa      	adds	r3, #170	; 0xaa
 801bfe8:	42a8      	cmp	r0, r5
 801bfea:	f103 0308 	add.w	r3, r3, #8
 801bfee:	dd0a      	ble.n	801c006 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801bff0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bff4:	3501      	adds	r5, #1
 801bff6:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801bffa:	440a      	add	r2, r1
 801bffc:	b212      	sxth	r2, r2
 801bffe:	4591      	cmp	r9, r2
 801c000:	bfb8      	it	lt
 801c002:	4691      	movlt	r9, r2
 801c004:	e7f0      	b.n	801bfe8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801c006:	4b4e      	ldr	r3, [pc, #312]	; (801c140 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801c008:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801c148 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801c00c:	881d      	ldrh	r5, [r3, #0]
 801c00e:	2300      	movs	r3, #0
 801c010:	08ed      	lsrs	r5, r5, #3
 801c012:	f8ad 3004 	strh.w	r3, [sp, #4]
 801c016:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c01a:	2d01      	cmp	r5, #1
 801c01c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c020:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c024:	bfb8      	it	lt
 801c026:	2501      	movlt	r5, #1
 801c028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c02c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c030:	6830      	ldr	r0, [r6, #0]
 801c032:	4413      	add	r3, r2
 801c034:	b21b      	sxth	r3, r3
 801c036:	4599      	cmp	r9, r3
 801c038:	6803      	ldr	r3, [r0, #0]
 801c03a:	dd45      	ble.n	801c0c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801c03c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c040:	4798      	blx	r3
 801c042:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c046:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801c04a:	4413      	add	r3, r2
 801c04c:	b21b      	sxth	r3, r3
 801c04e:	18ea      	adds	r2, r5, r3
 801c050:	4290      	cmp	r0, r2
 801c052:	da6d      	bge.n	801c130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801c054:	4581      	cmp	r9, r0
 801c056:	dd6b      	ble.n	801c130 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801c058:	4298      	cmp	r0, r3
 801c05a:	da01      	bge.n	801c060 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	dc69      	bgt.n	801c134 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801c060:	6830      	ldr	r0, [r6, #0]
 801c062:	2101      	movs	r1, #1
 801c064:	6803      	ldr	r3, [r0, #0]
 801c066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c068:	4798      	blx	r3
 801c06a:	e7dd      	b.n	801c028 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801c06c:	4548      	cmp	r0, r9
 801c06e:	bfa8      	it	ge
 801c070:	4648      	movge	r0, r9
 801c072:	f9b8 2000 	ldrsh.w	r2, [r8]
 801c076:	2100      	movs	r1, #0
 801c078:	1ac0      	subs	r0, r0, r3
 801c07a:	f8b7 a000 	ldrh.w	sl, [r7]
 801c07e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c082:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c086:	f8ad 2008 	strh.w	r2, [sp, #8]
 801c08a:	f8ad 000a 	strh.w	r0, [sp, #10]
 801c08e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c092:	459a      	cmp	sl, r3
 801c094:	dac8      	bge.n	801c028 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801c096:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c09a:	ab03      	add	r3, sp, #12
 801c09c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c0a0:	6851      	ldr	r1, [r2, #4]
 801c0a2:	c303      	stmia	r3!, {r0, r1}
 801c0a4:	a803      	add	r0, sp, #12
 801c0a6:	a901      	add	r1, sp, #4
 801c0a8:	f7f2 f998 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801c0ac:	a803      	add	r0, sp, #12
 801c0ae:	f7f2 fa9d 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801c0b2:	b920      	cbnz	r0, 801c0be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801c0b4:	6823      	ldr	r3, [r4, #0]
 801c0b6:	a903      	add	r1, sp, #12
 801c0b8:	4620      	mov	r0, r4
 801c0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0bc:	4798      	blx	r3
 801c0be:	f10a 0a01 	add.w	sl, sl, #1
 801c0c2:	fa1f fa8a 	uxth.w	sl, sl
 801c0c6:	e7e2      	b.n	801c08e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801c0c8:	69db      	ldr	r3, [r3, #28]
 801c0ca:	4798      	blx	r3
 801c0cc:	4b1d      	ldr	r3, [pc, #116]	; (801c144 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801c0ce:	781b      	ldrb	r3, [r3, #0]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	f43f af4d 	beq.w	801bf70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	883d      	ldrh	r5, [r7, #0]
 801c0da:	34ea      	adds	r4, #234	; 0xea
 801c0dc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c0e0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801c0e4:	429d      	cmp	r5, r3
 801c0e6:	f6bf af43 	bge.w	801bf70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c0ea:	ab16      	add	r3, sp, #88	; 0x58
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c0f2:	3501      	adds	r5, #1
 801c0f4:	3b44      	subs	r3, #68	; 0x44
 801c0f6:	b2ad      	uxth	r5, r5
 801c0f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c0fc:	f7ff fe4c 	bl	801bd98 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c100:	e7ee      	b.n	801c0e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801c102:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c106:	429d      	cmp	r5, r3
 801c108:	dae0      	bge.n	801c0cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c10a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c10e:	ab03      	add	r3, sp, #12
 801c110:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c114:	6851      	ldr	r1, [r2, #4]
 801c116:	c303      	stmia	r3!, {r0, r1}
 801c118:	a803      	add	r0, sp, #12
 801c11a:	f7f2 fa67 	bl	800e5ec <_ZNK8touchgfx4Rect7isEmptyEv>
 801c11e:	b920      	cbnz	r0, 801c12a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801c120:	6823      	ldr	r3, [r4, #0]
 801c122:	a903      	add	r1, sp, #12
 801c124:	4620      	mov	r0, r4
 801c126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c128:	4798      	blx	r3
 801c12a:	3501      	adds	r5, #1
 801c12c:	b2ad      	uxth	r5, r5
 801c12e:	e7e8      	b.n	801c102 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801c130:	4298      	cmp	r0, r3
 801c132:	da9b      	bge.n	801c06c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801c134:	4648      	mov	r0, r9
 801c136:	e79c      	b.n	801c072 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801c138:	20000070 	.word	0x20000070
 801c13c:	20009b14 	.word	0x20009b14
 801c140:	20009b0a 	.word	0x20009b0a
 801c144:	20009b12 	.word	0x20009b12
 801c148:	20009b08 	.word	0x20009b08

0801c14c <_ZNK8touchgfx4Font8getGlyphEt>:
 801c14c:	b513      	push	{r0, r1, r4, lr}
 801c14e:	2200      	movs	r2, #0
 801c150:	ab02      	add	r3, sp, #8
 801c152:	9201      	str	r2, [sp, #4]
 801c154:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801c158:	6802      	ldr	r2, [r0, #0]
 801c15a:	6894      	ldr	r4, [r2, #8]
 801c15c:	aa01      	add	r2, sp, #4
 801c15e:	47a0      	blx	r4
 801c160:	b002      	add	sp, #8
 801c162:	bd10      	pop	{r4, pc}

0801c164 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801c164:	8940      	ldrh	r0, [r0, #10]
 801c166:	4770      	bx	lr

0801c168 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801c168:	8980      	ldrh	r0, [r0, #12]
 801c16a:	4770      	bx	lr

0801c16c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801c16c:	8880      	ldrh	r0, [r0, #4]
 801c16e:	4770      	bx	lr

0801c170 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801c170:	7983      	ldrb	r3, [r0, #6]
 801c172:	8880      	ldrh	r0, [r0, #4]
 801c174:	4418      	add	r0, r3
 801c176:	b280      	uxth	r0, r0
 801c178:	4770      	bx	lr

0801c17a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801c17a:	79c0      	ldrb	r0, [r0, #7]
 801c17c:	4770      	bx	lr

0801c17e <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801c17e:	2000      	movs	r0, #0
 801c180:	4770      	bx	lr

0801c182 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c182:	b508      	push	{r3, lr}
 801c184:	6803      	ldr	r3, [r0, #0]
 801c186:	68db      	ldr	r3, [r3, #12]
 801c188:	4798      	blx	r3
 801c18a:	b140      	cbz	r0, 801c19e <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801c18c:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801c190:	7a83      	ldrb	r3, [r0, #10]
 801c192:	2a00      	cmp	r2, #0
 801c194:	bfb4      	ite	lt
 801c196:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801c19a:	2000      	movge	r0, #0
 801c19c:	4318      	orrs	r0, r3
 801c19e:	bd08      	pop	{r3, pc}

0801c1a0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801c1a0:	b40e      	push	{r1, r2, r3}
 801c1a2:	b533      	push	{r0, r1, r4, r5, lr}
 801c1a4:	ab05      	add	r3, sp, #20
 801c1a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1aa:	9301      	str	r3, [sp, #4]
 801c1ac:	4b0a      	ldr	r3, [pc, #40]	; (801c1d8 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801c1ae:	685c      	ldr	r4, [r3, #4]
 801c1b0:	f014 0f01 	tst.w	r4, #1
 801c1b4:	ea4f 0464 	mov.w	r4, r4, asr #1
 801c1b8:	bf1c      	itt	ne
 801c1ba:	681b      	ldrne	r3, [r3, #0]
 801c1bc:	5901      	ldrne	r1, [r0, r4]
 801c1be:	4420      	add	r0, r4
 801c1c0:	bf0c      	ite	eq
 801c1c2:	681d      	ldreq	r5, [r3, #0]
 801c1c4:	58cd      	ldrne	r5, [r1, r3]
 801c1c6:	2100      	movs	r1, #0
 801c1c8:	9b01      	ldr	r3, [sp, #4]
 801c1ca:	47a8      	blx	r5
 801c1cc:	b002      	add	sp, #8
 801c1ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c1d2:	b003      	add	sp, #12
 801c1d4:	4770      	bx	lr
 801c1d6:	bf00      	nop
 801c1d8:	20000068 	.word	0x20000068

0801c1dc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801c1dc:	b40c      	push	{r2, r3}
 801c1de:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1e0:	ab06      	add	r3, sp, #24
 801c1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1e6:	9301      	str	r3, [sp, #4]
 801c1e8:	4b09      	ldr	r3, [pc, #36]	; (801c210 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801c1ea:	685c      	ldr	r4, [r3, #4]
 801c1ec:	f014 0f01 	tst.w	r4, #1
 801c1f0:	ea4f 0464 	mov.w	r4, r4, asr #1
 801c1f4:	bf1c      	itt	ne
 801c1f6:	681b      	ldrne	r3, [r3, #0]
 801c1f8:	5905      	ldrne	r5, [r0, r4]
 801c1fa:	4420      	add	r0, r4
 801c1fc:	bf0c      	ite	eq
 801c1fe:	681d      	ldreq	r5, [r3, #0]
 801c200:	58ed      	ldrne	r5, [r5, r3]
 801c202:	9b01      	ldr	r3, [sp, #4]
 801c204:	47a8      	blx	r5
 801c206:	b003      	add	sp, #12
 801c208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c20c:	b002      	add	sp, #8
 801c20e:	4770      	bx	lr
 801c210:	20000068 	.word	0x20000068

0801c214 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c214:	b40e      	push	{r1, r2, r3}
 801c216:	b510      	push	{r4, lr}
 801c218:	b089      	sub	sp, #36	; 0x24
 801c21a:	ab0b      	add	r3, sp, #44	; 0x2c
 801c21c:	a802      	add	r0, sp, #8
 801c21e:	f853 4b04 	ldr.w	r4, [r3], #4
 801c222:	9301      	str	r3, [sp, #4]
 801c224:	f000 fe50 	bl	801cec8 <_ZN8touchgfx12TextProviderC1Ev>
 801c228:	4621      	mov	r1, r4
 801c22a:	9a01      	ldr	r2, [sp, #4]
 801c22c:	a802      	add	r0, sp, #8
 801c22e:	2401      	movs	r4, #1
 801c230:	f000 fe53 	bl	801ceda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801c234:	a802      	add	r0, sp, #8
 801c236:	f000 fdf7 	bl	801ce28 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c23a:	b138      	cbz	r0, 801c24c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801c23c:	280a      	cmp	r0, #10
 801c23e:	a802      	add	r0, sp, #8
 801c240:	bf04      	itt	eq
 801c242:	3401      	addeq	r4, #1
 801c244:	b224      	sxtheq	r4, r4
 801c246:	f000 fdef 	bl	801ce28 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c24a:	e7f6      	b.n	801c23a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801c24c:	b2a0      	uxth	r0, r4
 801c24e:	b009      	add	sp, #36	; 0x24
 801c250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c254:	b003      	add	sp, #12
 801c256:	4770      	bx	lr

0801c258 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c258:	b40e      	push	{r1, r2, r3}
 801c25a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c25c:	b088      	sub	sp, #32
 801c25e:	4604      	mov	r4, r0
 801c260:	2600      	movs	r6, #0
 801c262:	ab0d      	add	r3, sp, #52	; 0x34
 801c264:	a802      	add	r0, sp, #8
 801c266:	f853 5b04 	ldr.w	r5, [r3], #4
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	f000 fe2c 	bl	801cec8 <_ZN8touchgfx12TextProviderC1Ev>
 801c270:	4629      	mov	r1, r5
 801c272:	9a01      	ldr	r2, [sp, #4]
 801c274:	a802      	add	r0, sp, #8
 801c276:	4d1f      	ldr	r5, [pc, #124]	; (801c2f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801c278:	f000 fe2f 	bl	801ceda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801c27c:	2100      	movs	r1, #0
 801c27e:	a802      	add	r0, sp, #8
 801c280:	f000 fddc 	bl	801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c284:	b378      	cbz	r0, 801c2e6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c286:	280a      	cmp	r0, #10
 801c288:	d028      	beq.n	801c2dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801c28a:	6823      	ldr	r3, [r4, #0]
 801c28c:	4601      	mov	r1, r0
 801c28e:	4620      	mov	r0, r4
 801c290:	68db      	ldr	r3, [r3, #12]
 801c292:	4798      	blx	r3
 801c294:	b310      	cbz	r0, 801c2dc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801c296:	7b41      	ldrb	r1, [r0, #13]
 801c298:	f890 e008 	ldrb.w	lr, [r0, #8]
 801c29c:	f011 0f40 	tst.w	r1, #64	; 0x40
 801c2a0:	88a3      	ldrh	r3, [r4, #4]
 801c2a2:	79c0      	ldrb	r0, [r0, #7]
 801c2a4:	bf14      	ite	ne
 801c2a6:	462f      	movne	r7, r5
 801c2a8:	2700      	moveq	r7, #0
 801c2aa:	f011 0f20 	tst.w	r1, #32
 801c2ae:	ea47 070e 	orr.w	r7, r7, lr
 801c2b2:	bf14      	ite	ne
 801c2b4:	f44f 7280 	movne.w	r2, #256	; 0x100
 801c2b8:	2200      	moveq	r2, #0
 801c2ba:	f011 0f10 	tst.w	r1, #16
 801c2be:	ea42 0207 	orr.w	r2, r2, r7
 801c2c2:	eba3 0302 	sub.w	r3, r3, r2
 801c2c6:	bf14      	ite	ne
 801c2c8:	f44f 7280 	movne.w	r2, #256	; 0x100
 801c2cc:	2200      	moveq	r2, #0
 801c2ce:	4302      	orrs	r2, r0
 801c2d0:	fa12 f383 	uxtah	r3, r2, r3
 801c2d4:	b29b      	uxth	r3, r3
 801c2d6:	42b3      	cmp	r3, r6
 801c2d8:	bfc8      	it	gt
 801c2da:	b21e      	sxthgt	r6, r3
 801c2dc:	2100      	movs	r1, #0
 801c2de:	a802      	add	r0, sp, #8
 801c2e0:	f000 fdac 	bl	801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c2e4:	e7ce      	b.n	801c284 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801c2e6:	b2b0      	uxth	r0, r6
 801c2e8:	b008      	add	sp, #32
 801c2ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c2ee:	b003      	add	sp, #12
 801c2f0:	4770      	bx	lr
 801c2f2:	bf00      	nop
 801c2f4:	fffffe00 	.word	0xfffffe00

0801c2f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c2f8:	b40e      	push	{r1, r2, r3}
 801c2fa:	b530      	push	{r4, r5, lr}
 801c2fc:	b088      	sub	sp, #32
 801c2fe:	4605      	mov	r5, r0
 801c300:	ab0b      	add	r3, sp, #44	; 0x2c
 801c302:	a802      	add	r0, sp, #8
 801c304:	f853 4b04 	ldr.w	r4, [r3], #4
 801c308:	9301      	str	r3, [sp, #4]
 801c30a:	f000 fddd 	bl	801cec8 <_ZN8touchgfx12TextProviderC1Ev>
 801c30e:	4621      	mov	r1, r4
 801c310:	9a01      	ldr	r2, [sp, #4]
 801c312:	a802      	add	r0, sp, #8
 801c314:	24ff      	movs	r4, #255	; 0xff
 801c316:	f000 fde0 	bl	801ceda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801c31a:	2100      	movs	r1, #0
 801c31c:	a802      	add	r0, sp, #8
 801c31e:	f000 fd8d 	bl	801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c322:	b1a0      	cbz	r0, 801c34e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801c324:	280a      	cmp	r0, #10
 801c326:	d00d      	beq.n	801c344 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c328:	682b      	ldr	r3, [r5, #0]
 801c32a:	4601      	mov	r1, r0
 801c32c:	4628      	mov	r0, r5
 801c32e:	68db      	ldr	r3, [r3, #12]
 801c330:	4798      	blx	r3
 801c332:	b138      	cbz	r0, 801c344 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801c334:	792b      	ldrb	r3, [r5, #4]
 801c336:	7a02      	ldrb	r2, [r0, #8]
 801c338:	1a9b      	subs	r3, r3, r2
 801c33a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801c33e:	429c      	cmp	r4, r3
 801c340:	bfa8      	it	ge
 801c342:	461c      	movge	r4, r3
 801c344:	2100      	movs	r1, #0
 801c346:	a802      	add	r0, sp, #8
 801c348:	f000 fd78 	bl	801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c34c:	e7e9      	b.n	801c322 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801c34e:	4620      	mov	r0, r4
 801c350:	b008      	add	sp, #32
 801c352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c356:	b003      	add	sp, #12
 801c358:	4770      	bx	lr

0801c35a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c35a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c35e:	f04f 0a00 	mov.w	sl, #0
 801c362:	b087      	sub	sp, #28
 801c364:	4614      	mov	r4, r2
 801c366:	461d      	mov	r5, r3
 801c368:	4606      	mov	r6, r0
 801c36a:	4657      	mov	r7, sl
 801c36c:	4668      	mov	r0, sp
 801c36e:	46d1      	mov	r9, sl
 801c370:	4688      	mov	r8, r1
 801c372:	f000 fda9 	bl	801cec8 <_ZN8touchgfx12TextProviderC1Ev>
 801c376:	462a      	mov	r2, r5
 801c378:	4621      	mov	r1, r4
 801c37a:	4668      	mov	r0, sp
 801c37c:	f000 fdad 	bl	801ceda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801c380:	4641      	mov	r1, r8
 801c382:	4668      	mov	r0, sp
 801c384:	f000 fd5a 	bl	801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c388:	4605      	mov	r5, r0
 801c38a:	b108      	cbz	r0, 801c390 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801c38c:	280a      	cmp	r0, #10
 801c38e:	d107      	bne.n	801c3a0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801c390:	45b9      	cmp	r9, r7
 801c392:	dd00      	ble.n	801c396 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801c394:	464f      	mov	r7, r9
 801c396:	f04f 0900 	mov.w	r9, #0
 801c39a:	e01e      	b.n	801c3da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801c39c:	46aa      	mov	sl, r5
 801c39e:	e7ef      	b.n	801c380 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801c3a0:	6833      	ldr	r3, [r6, #0]
 801c3a2:	4601      	mov	r1, r0
 801c3a4:	4630      	mov	r0, r6
 801c3a6:	68db      	ldr	r3, [r3, #12]
 801c3a8:	4798      	blx	r3
 801c3aa:	4602      	mov	r2, r0
 801c3ac:	2800      	cmp	r0, #0
 801c3ae:	d0f5      	beq.n	801c39c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801c3b0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801c3b4:	4651      	mov	r1, sl
 801c3b6:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	6833      	ldr	r3, [r6, #0]
 801c3be:	8885      	ldrh	r5, [r0, #4]
 801c3c0:	4630      	mov	r0, r6
 801c3c2:	bfb4      	ite	lt
 801c3c4:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801c3c8:	2400      	movge	r4, #0
 801c3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3cc:	ea44 040b 	orr.w	r4, r4, fp
 801c3d0:	4798      	blx	r3
 801c3d2:	4404      	add	r4, r0
 801c3d4:	444c      	add	r4, r9
 801c3d6:	fa1f f984 	uxth.w	r9, r4
 801c3da:	2d00      	cmp	r5, #0
 801c3dc:	d1de      	bne.n	801c39c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801c3de:	4638      	mov	r0, r7
 801c3e0:	b007      	add	sp, #28
 801c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c3e6 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801c3e6:	2000      	movs	r0, #0
 801c3e8:	4770      	bx	lr

0801c3ea <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c3ea:	b513      	push	{r0, r1, r4, lr}
 801c3ec:	1d01      	adds	r1, r0, #4
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	c903      	ldmia	r1, {r0, r1}
 801c3f2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c3f6:	2100      	movs	r1, #0
 801c3f8:	4618      	mov	r0, r3
 801c3fa:	f8ad 1000 	strh.w	r1, [sp]
 801c3fe:	f8ad 1002 	strh.w	r1, [sp, #2]
 801c402:	6819      	ldr	r1, [r3, #0]
 801c404:	690c      	ldr	r4, [r1, #16]
 801c406:	4669      	mov	r1, sp
 801c408:	47a0      	blx	r4
 801c40a:	b002      	add	sp, #8
 801c40c:	bd10      	pop	{r4, pc}

0801c40e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c40e:	b538      	push	{r3, r4, r5, lr}
 801c410:	680b      	ldr	r3, [r1, #0]
 801c412:	460c      	mov	r4, r1
 801c414:	4605      	mov	r5, r0
 801c416:	68db      	ldr	r3, [r3, #12]
 801c418:	4798      	blx	r3
 801c41a:	6823      	ldr	r3, [r4, #0]
 801c41c:	4620      	mov	r0, r4
 801c41e:	4629      	mov	r1, r5
 801c420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c422:	4798      	blx	r3
 801c424:	4628      	mov	r0, r5
 801c426:	bd38      	pop	{r3, r4, r5, pc}

0801c428 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c428:	b410      	push	{r4}
 801c42a:	880a      	ldrh	r2, [r1, #0]
 801c42c:	8884      	ldrh	r4, [r0, #4]
 801c42e:	4422      	add	r2, r4
 801c430:	800a      	strh	r2, [r1, #0]
 801c432:	884a      	ldrh	r2, [r1, #2]
 801c434:	88c4      	ldrh	r4, [r0, #6]
 801c436:	4422      	add	r2, r4
 801c438:	804a      	strh	r2, [r1, #2]
 801c43a:	6940      	ldr	r0, [r0, #20]
 801c43c:	b120      	cbz	r0, 801c448 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c43e:	6803      	ldr	r3, [r0, #0]
 801c440:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c446:	4718      	bx	r3
 801c448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c44c:	4770      	bx	lr

0801c44e <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c44e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c450:	460b      	mov	r3, r1
 801c452:	b085      	sub	sp, #20
 801c454:	4604      	mov	r4, r0
 801c456:	b901      	cbnz	r1, 801c45a <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c458:	b1f2      	cbz	r2, 801c498 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801c45a:	1d27      	adds	r7, r4, #4
 801c45c:	ad02      	add	r5, sp, #8
 801c45e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c462:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c466:	88e1      	ldrh	r1, [r4, #6]
 801c468:	4620      	mov	r0, r4
 801c46a:	440a      	add	r2, r1
 801c46c:	88a1      	ldrh	r1, [r4, #4]
 801c46e:	4419      	add	r1, r3
 801c470:	6823      	ldr	r3, [r4, #0]
 801c472:	b212      	sxth	r2, r2
 801c474:	b209      	sxth	r1, r1
 801c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c478:	4798      	blx	r3
 801c47a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c47e:	e885 0003 	stmia.w	r5, {r0, r1}
 801c482:	6960      	ldr	r0, [r4, #20]
 801c484:	b150      	cbz	r0, 801c49c <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801c486:	6803      	ldr	r3, [r0, #0]
 801c488:	4669      	mov	r1, sp
 801c48a:	691b      	ldr	r3, [r3, #16]
 801c48c:	4798      	blx	r3
 801c48e:	6960      	ldr	r0, [r4, #20]
 801c490:	6803      	ldr	r3, [r0, #0]
 801c492:	691b      	ldr	r3, [r3, #16]
 801c494:	4629      	mov	r1, r5
 801c496:	4798      	blx	r3
 801c498:	b005      	add	sp, #20
 801c49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c49c:	f7ff fc00 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801c4a0:	6803      	ldr	r3, [r0, #0]
 801c4a2:	4669      	mov	r1, sp
 801c4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4a6:	4798      	blx	r3
 801c4a8:	f7ff fbfa 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801c4ac:	6803      	ldr	r3, [r0, #0]
 801c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4b0:	e7f0      	b.n	801c494 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801c4b2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c4b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c4b4:	8882      	ldrh	r2, [r0, #4]
 801c4b6:	4605      	mov	r5, r0
 801c4b8:	880b      	ldrh	r3, [r1, #0]
 801c4ba:	460c      	mov	r4, r1
 801c4bc:	4413      	add	r3, r2
 801c4be:	800b      	strh	r3, [r1, #0]
 801c4c0:	884b      	ldrh	r3, [r1, #2]
 801c4c2:	88c2      	ldrh	r2, [r0, #6]
 801c4c4:	4413      	add	r3, r2
 801c4c6:	4602      	mov	r2, r0
 801c4c8:	804b      	strh	r3, [r1, #2]
 801c4ca:	466b      	mov	r3, sp
 801c4cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801c4d0:	6851      	ldr	r1, [r2, #4]
 801c4d2:	c303      	stmia	r3!, {r0, r1}
 801c4d4:	4621      	mov	r1, r4
 801c4d6:	4668      	mov	r0, sp
 801c4d8:	f7f1 ff80 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801c4dc:	466b      	mov	r3, sp
 801c4de:	cb03      	ldmia	r3!, {r0, r1}
 801c4e0:	6020      	str	r0, [r4, #0]
 801c4e2:	6061      	str	r1, [r4, #4]
 801c4e4:	6968      	ldr	r0, [r5, #20]
 801c4e6:	b128      	cbz	r0, 801c4f4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801c4e8:	6803      	ldr	r3, [r0, #0]
 801c4ea:	691b      	ldr	r3, [r3, #16]
 801c4ec:	4621      	mov	r1, r4
 801c4ee:	4798      	blx	r3
 801c4f0:	b003      	add	sp, #12
 801c4f2:	bd30      	pop	{r4, r5, pc}
 801c4f4:	f7ff fbd4 	bl	801bca0 <_ZN8touchgfx11Application11getInstanceEv>
 801c4f8:	6803      	ldr	r3, [r0, #0]
 801c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4fc:	e7f6      	b.n	801c4ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801c4fe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c4fe:	b570      	push	{r4, r5, r6, lr}
 801c500:	8882      	ldrh	r2, [r0, #4]
 801c502:	460c      	mov	r4, r1
 801c504:	880b      	ldrh	r3, [r1, #0]
 801c506:	4605      	mov	r5, r0
 801c508:	4413      	add	r3, r2
 801c50a:	800b      	strh	r3, [r1, #0]
 801c50c:	884b      	ldrh	r3, [r1, #2]
 801c50e:	88c2      	ldrh	r2, [r0, #6]
 801c510:	4413      	add	r3, r2
 801c512:	804b      	strh	r3, [r1, #2]
 801c514:	1d01      	adds	r1, r0, #4
 801c516:	4620      	mov	r0, r4
 801c518:	f7f1 ff60 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801c51c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c520:	b163      	cbz	r3, 801c53c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c522:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c526:	b933      	cbnz	r3, 801c536 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801c528:	bd70      	pop	{r4, r5, r6, pc}
 801c52a:	6803      	ldr	r3, [r0, #0]
 801c52c:	4621      	mov	r1, r4
 801c52e:	6a1b      	ldr	r3, [r3, #32]
 801c530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c534:	4718      	bx	r3
 801c536:	6968      	ldr	r0, [r5, #20]
 801c538:	2800      	cmp	r0, #0
 801c53a:	d1f6      	bne.n	801c52a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801c53c:	bd70      	pop	{r4, r5, r6, pc}

0801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c53e:	b510      	push	{r4, lr}
 801c540:	2300      	movs	r3, #0
 801c542:	4604      	mov	r4, r0
 801c544:	4608      	mov	r0, r1
 801c546:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c54a:	8023      	strh	r3, [r4, #0]
 801c54c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c550:	8063      	strh	r3, [r4, #2]
 801c552:	6803      	ldr	r3, [r0, #0]
 801c554:	80a1      	strh	r1, [r4, #4]
 801c556:	4621      	mov	r1, r4
 801c558:	80e2      	strh	r2, [r4, #6]
 801c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c55c:	4798      	blx	r3
 801c55e:	4620      	mov	r0, r4
 801c560:	bd10      	pop	{r4, pc}
	...

0801c564 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801c564:	b510      	push	{r4, lr}
 801c566:	8083      	strh	r3, [r0, #4]
 801c568:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801c56c:	6101      	str	r1, [r0, #16]
 801c56e:	7183      	strb	r3, [r0, #6]
 801c570:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c574:	8282      	strh	r2, [r0, #20]
 801c576:	71c3      	strb	r3, [r0, #7]
 801c578:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801c57c:	7203      	strb	r3, [r0, #8]
 801c57e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801c582:	7243      	strb	r3, [r0, #9]
 801c584:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801c588:	8143      	strh	r3, [r0, #10]
 801c58a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801c58e:	8183      	strh	r3, [r0, #12]
 801c590:	4b01      	ldr	r3, [pc, #4]	; (801c598 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801c592:	6003      	str	r3, [r0, #0]
 801c594:	bd10      	pop	{r4, pc}
 801c596:	bf00      	nop
 801c598:	0802218c 	.word	0x0802218c

0801c59c <_ZNK8touchgfx9ConstFont4findEt>:
 801c59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c59e:	8a84      	ldrh	r4, [r0, #20]
 801c5a0:	2500      	movs	r5, #0
 801c5a2:	260e      	movs	r6, #14
 801c5a4:	3c01      	subs	r4, #1
 801c5a6:	42a5      	cmp	r5, r4
 801c5a8:	dc0c      	bgt.n	801c5c4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801c5aa:	192a      	adds	r2, r5, r4
 801c5ac:	6903      	ldr	r3, [r0, #16]
 801c5ae:	1052      	asrs	r2, r2, #1
 801c5b0:	fb06 3302 	mla	r3, r6, r2, r3
 801c5b4:	889f      	ldrh	r7, [r3, #4]
 801c5b6:	42b9      	cmp	r1, r7
 801c5b8:	da01      	bge.n	801c5be <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801c5ba:	1e54      	subs	r4, r2, #1
 801c5bc:	e7f3      	b.n	801c5a6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801c5be:	dd02      	ble.n	801c5c6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801c5c0:	1c55      	adds	r5, r2, #1
 801c5c2:	e7f0      	b.n	801c5a6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c5ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5cc:	4605      	mov	r5, r0
 801c5ce:	4617      	mov	r7, r2
 801c5d0:	461e      	mov	r6, r3
 801c5d2:	f7ff ffe3 	bl	801c59c <_ZNK8touchgfx9ConstFont4findEt>
 801c5d6:	b9e0      	cbnz	r0, 801c612 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801c5d8:	b911      	cbnz	r1, 801c5e0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801c5da:	2400      	movs	r4, #0
 801c5dc:	4620      	mov	r0, r4
 801c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5e0:	290a      	cmp	r1, #10
 801c5e2:	d0fa      	beq.n	801c5da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c5e4:	682b      	ldr	r3, [r5, #0]
 801c5e6:	4628      	mov	r0, r5
 801c5e8:	691b      	ldr	r3, [r3, #16]
 801c5ea:	4798      	blx	r3
 801c5ec:	4601      	mov	r1, r0
 801c5ee:	4628      	mov	r0, r5
 801c5f0:	f7ff ffd4 	bl	801c59c <_ZNK8touchgfx9ConstFont4findEt>
 801c5f4:	4604      	mov	r4, r0
 801c5f6:	2800      	cmp	r0, #0
 801c5f8:	d0ef      	beq.n	801c5da <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c5fa:	682b      	ldr	r3, [r5, #0]
 801c5fc:	4621      	mov	r1, r4
 801c5fe:	4628      	mov	r0, r5
 801c600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c602:	4798      	blx	r3
 801c604:	6038      	str	r0, [r7, #0]
 801c606:	682b      	ldr	r3, [r5, #0]
 801c608:	4628      	mov	r0, r5
 801c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c60c:	4798      	blx	r3
 801c60e:	7030      	strb	r0, [r6, #0]
 801c610:	e7e4      	b.n	801c5dc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801c612:	4604      	mov	r4, r0
 801c614:	e7f1      	b.n	801c5fa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801c616 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c616:	2002      	movs	r0, #2
 801c618:	4770      	bx	lr

0801c61a <_ZN8touchgfx12GestureEventD1Ev>:
 801c61a:	4770      	bx	lr

0801c61c <_ZN8touchgfx12GestureEventD0Ev>:
 801c61c:	b510      	push	{r4, lr}
 801c61e:	4604      	mov	r4, r0
 801c620:	210c      	movs	r1, #12
 801c622:	f002 fe30 	bl	801f286 <_ZdlPvj>
 801c626:	4620      	mov	r0, r4
 801c628:	bd10      	pop	{r4, pc}
	...

0801c62c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c62c:	b530      	push	{r4, r5, lr}
 801c62e:	460d      	mov	r5, r1
 801c630:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c632:	b087      	sub	sp, #28
 801c634:	4604      	mov	r4, r0
 801c636:	b301      	cbz	r1, 801c67a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c638:	a801      	add	r0, sp, #4
 801c63a:	f7ff ff80 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c63e:	892a      	ldrh	r2, [r5, #8]
 801c640:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c644:	7928      	ldrb	r0, [r5, #4]
 801c646:	1ad2      	subs	r2, r2, r3
 801c648:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c64a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c64e:	441a      	add	r2, r3
 801c650:	896b      	ldrh	r3, [r5, #10]
 801c652:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c656:	f88d 0010 	strb.w	r0, [sp, #16]
 801c65a:	1b5b      	subs	r3, r3, r5
 801c65c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c65e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c660:	442b      	add	r3, r5
 801c662:	4d07      	ldr	r5, [pc, #28]	; (801c680 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c664:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c668:	a903      	add	r1, sp, #12
 801c66a:	9503      	str	r5, [sp, #12]
 801c66c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c670:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c674:	6803      	ldr	r3, [r0, #0]
 801c676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c678:	4798      	blx	r3
 801c67a:	b007      	add	sp, #28
 801c67c:	bd30      	pop	{r4, r5, pc}
 801c67e:	bf00      	nop
 801c680:	080221d8 	.word	0x080221d8

0801c684 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c684:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c686:	460c      	mov	r4, r1
 801c688:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c68a:	b089      	sub	sp, #36	; 0x24
 801c68c:	4605      	mov	r5, r0
 801c68e:	2900      	cmp	r1, #0
 801c690:	d053      	beq.n	801c73a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801c692:	4668      	mov	r0, sp
 801c694:	f7ff ff53 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c698:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801c69a:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801c69c:	4668      	mov	r0, sp
 801c69e:	8922      	ldrh	r2, [r4, #8]
 801c6a0:	88e1      	ldrh	r1, [r4, #6]
 801c6a2:	443a      	add	r2, r7
 801c6a4:	4431      	add	r1, r6
 801c6a6:	b212      	sxth	r2, r2
 801c6a8:	b209      	sxth	r1, r1
 801c6aa:	f7f1 fe21 	bl	800e2f0 <_ZNK8touchgfx4Rect9intersectEss>
 801c6ae:	b1c8      	cbz	r0, 801c6e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801c6b0:	89a2      	ldrh	r2, [r4, #12]
 801c6b2:	4668      	mov	r0, sp
 801c6b4:	8961      	ldrh	r1, [r4, #10]
 801c6b6:	443a      	add	r2, r7
 801c6b8:	4431      	add	r1, r6
 801c6ba:	b212      	sxth	r2, r2
 801c6bc:	b209      	sxth	r1, r1
 801c6be:	f7f1 fe17 	bl	800e2f0 <_ZNK8touchgfx4Rect9intersectEss>
 801c6c2:	b978      	cbnz	r0, 801c6e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801c6c4:	4b1e      	ldr	r3, [pc, #120]	; (801c740 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801c6c6:	a904      	add	r1, sp, #16
 801c6c8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c6cc:	9304      	str	r3, [sp, #16]
 801c6ce:	2302      	movs	r3, #2
 801c6d0:	f8ad 0018 	strh.w	r0, [sp, #24]
 801c6d4:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c6d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c6da:	f88d 3014 	strb.w	r3, [sp, #20]
 801c6de:	6803      	ldr	r3, [r0, #0]
 801c6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6e2:	4798      	blx	r3
 801c6e4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801c6e6:	a802      	add	r0, sp, #8
 801c6e8:	f7ff ff29 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6ec:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c6f0:	88e0      	ldrh	r0, [r4, #6]
 801c6f2:	8961      	ldrh	r1, [r4, #10]
 801c6f4:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801c6f8:	1a80      	subs	r0, r0, r2
 801c6fa:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801c6fe:	1a89      	subs	r1, r1, r2
 801c700:	8923      	ldrh	r3, [r4, #8]
 801c702:	4470      	add	r0, lr
 801c704:	89a2      	ldrh	r2, [r4, #12]
 801c706:	4471      	add	r1, lr
 801c708:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c70a:	eba3 030c 	sub.w	r3, r3, ip
 801c70e:	eba2 020c 	sub.w	r2, r2, ip
 801c712:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c716:	7927      	ldrb	r7, [r4, #4]
 801c718:	4433      	add	r3, r6
 801c71a:	4432      	add	r2, r6
 801c71c:	4c09      	ldr	r4, [pc, #36]	; (801c744 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801c71e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c720:	f8ad 101a 	strh.w	r1, [sp, #26]
 801c724:	a904      	add	r1, sp, #16
 801c726:	9404      	str	r4, [sp, #16]
 801c728:	f88d 7014 	strb.w	r7, [sp, #20]
 801c72c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c730:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c734:	6803      	ldr	r3, [r0, #0]
 801c736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c738:	4798      	blx	r3
 801c73a:	b009      	add	sp, #36	; 0x24
 801c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c73e:	bf00      	nop
 801c740:	08020a80 	.word	0x08020a80
 801c744:	08020a6c 	.word	0x08020a6c

0801c748 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c74c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801c74e:	b0a1      	sub	sp, #132	; 0x84
 801c750:	4604      	mov	r4, r0
 801c752:	460d      	mov	r5, r1
 801c754:	790b      	ldrb	r3, [r1, #4]
 801c756:	b16a      	cbz	r2, 801c774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801c758:	b963      	cbnz	r3, 801c774 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801c75a:	b021      	add	sp, #132	; 0x84
 801c75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c760:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c764:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c768:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c76c:	1d20      	adds	r0, r4, #4
 801c76e:	f7f2 fa13 	bl	800eb98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c772:	e0a2      	b.n	801c8ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801c774:	2b00      	cmp	r3, #0
 801c776:	f040 80a0 	bne.w	801c8ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801c77a:	4a66      	ldr	r2, [pc, #408]	; (801c914 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801c77c:	6812      	ldr	r2, [r2, #0]
 801c77e:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801c782:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c784:	f1bb 0f03 	cmp.w	fp, #3
 801c788:	86e3      	strh	r3, [r4, #54]	; 0x36
 801c78a:	dde9      	ble.n	801c760 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801c78c:	f1bb 0f0c 	cmp.w	fp, #12
 801c790:	6323      	str	r3, [r4, #48]	; 0x30
 801c792:	f04f 0303 	mov.w	r3, #3
 801c796:	f04f 0600 	mov.w	r6, #0
 801c79a:	bfd8      	it	le
 801c79c:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801c7a0:	495d      	ldr	r1, [pc, #372]	; (801c918 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801c7a2:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801c7a6:	f04f 0a01 	mov.w	sl, #1
 801c7aa:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801c7ae:	bfd8      	it	le
 801c7b0:	fb92 f3f3 	sdivle	r3, r2, r3
 801c7b4:	9300      	str	r3, [sp, #0]
 801c7b6:	4b59      	ldr	r3, [pc, #356]	; (801c91c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801c7b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c7bc:	4b58      	ldr	r3, [pc, #352]	; (801c920 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801c7be:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801c7c2:	2248      	movs	r2, #72	; 0x48
 801c7c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c7c8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c7cc:	ab0e      	add	r3, sp, #56	; 0x38
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f002 fde6 	bl	801f3a0 <memcpy>
 801c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 801c7d8:	f8cd b008 	str.w	fp, [sp, #8]
 801c7dc:	9206      	str	r2, [sp, #24]
 801c7de:	9007      	str	r0, [sp, #28]
 801c7e0:	9a00      	ldr	r2, [sp, #0]
 801c7e2:	9b02      	ldr	r3, [sp, #8]
 801c7e4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c7e8:	f10a 32ff 	add.w	r2, sl, #4294967295
 801c7ec:	b29b      	uxth	r3, r3
 801c7ee:	9201      	str	r2, [sp, #4]
 801c7f0:	9a07      	ldr	r2, [sp, #28]
 801c7f2:	9303      	str	r3, [sp, #12]
 801c7f4:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801c7f8:	3f04      	subs	r7, #4
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801c800:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801c804:	a80a      	add	r0, sp, #40	; 0x28
 801c806:	9309      	str	r3, [sp, #36]	; 0x24
 801c808:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801c80c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801c810:	fb13 f302 	smulbb	r3, r3, r2
 801c814:	b29b      	uxth	r3, r3
 801c816:	9304      	str	r3, [sp, #16]
 801c818:	683b      	ldr	r3, [r7, #0]
 801c81a:	fb13 f302 	smulbb	r3, r3, r2
 801c81e:	b29b      	uxth	r3, r3
 801c820:	9305      	str	r3, [sp, #20]
 801c822:	9b04      	ldr	r3, [sp, #16]
 801c824:	4498      	add	r8, r3
 801c826:	9b05      	ldr	r3, [sp, #20]
 801c828:	4499      	add	r9, r3
 801c82a:	fa0f f888 	sxth.w	r8, r8
 801c82e:	fa0f f989 	sxth.w	r9, r9
 801c832:	4641      	mov	r1, r8
 801c834:	464a      	mov	r2, r9
 801c836:	f7f1 fd5b 	bl	800e2f0 <_ZNK8touchgfx4Rect9intersectEss>
 801c83a:	b380      	cbz	r0, 801c89e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801c83c:	4641      	mov	r1, r8
 801c83e:	ab09      	add	r3, sp, #36	; 0x24
 801c840:	464a      	mov	r2, r9
 801c842:	1d20      	adds	r0, r4, #4
 801c844:	f7f2 f9a8 	bl	800eb98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801c848:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c84a:	b341      	cbz	r1, 801c89e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801c84c:	42b1      	cmp	r1, r6
 801c84e:	d026      	beq.n	801c89e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801c850:	a80c      	add	r0, sp, #48	; 0x30
 801c852:	f7ff fe74 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c856:	2002      	movs	r0, #2
 801c858:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801c85c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801c860:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801c864:	fb92 f2f0 	sdiv	r2, r2, r0
 801c868:	440a      	add	r2, r1
 801c86a:	1a99      	subs	r1, r3, r2
 801c86c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801c870:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801c874:	fb93 f3f0 	sdiv	r3, r3, r0
 801c878:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801c87c:	4403      	add	r3, r0
 801c87e:	1ad3      	subs	r3, r2, r3
 801c880:	9a06      	ldr	r2, [sp, #24]
 801c882:	435b      	muls	r3, r3
 801c884:	fb01 3301 	mla	r3, r1, r1, r3
 801c888:	4293      	cmp	r3, r2
 801c88a:	d208      	bcs.n	801c89e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801c88c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c890:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801c892:	86a2      	strh	r2, [r4, #52]	; 0x34
 801c894:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c898:	6326      	str	r6, [r4, #48]	; 0x30
 801c89a:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c89c:	9306      	str	r3, [sp, #24]
 801c89e:	9b01      	ldr	r3, [sp, #4]
 801c8a0:	3710      	adds	r7, #16
 801c8a2:	3302      	adds	r3, #2
 801c8a4:	2b08      	cmp	r3, #8
 801c8a6:	9301      	str	r3, [sp, #4]
 801c8a8:	dda7      	ble.n	801c7fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801c8aa:	9b02      	ldr	r3, [sp, #8]
 801c8ac:	f10a 0a01 	add.w	sl, sl, #1
 801c8b0:	445b      	add	r3, fp
 801c8b2:	9302      	str	r3, [sp, #8]
 801c8b4:	9b00      	ldr	r3, [sp, #0]
 801c8b6:	4553      	cmp	r3, sl
 801c8b8:	da92      	bge.n	801c7e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801c8ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c8bc:	2900      	cmp	r1, #0
 801c8be:	f43f af4c 	beq.w	801c75a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801c8c2:	a80c      	add	r0, sp, #48	; 0x30
 801c8c4:	2600      	movs	r6, #0
 801c8c6:	f7ff fe3a 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8ca:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801c8ce:	88ea      	ldrh	r2, [r5, #6]
 801c8d0:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801c8d4:	1ad2      	subs	r2, r2, r3
 801c8d6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c8d8:	7929      	ldrb	r1, [r5, #4]
 801c8da:	441a      	add	r2, r3
 801c8dc:	892b      	ldrh	r3, [r5, #8]
 801c8de:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801c8e2:	a90e      	add	r1, sp, #56	; 0x38
 801c8e4:	1a1b      	subs	r3, r3, r0
 801c8e6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c8e8:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801c8ec:	4403      	add	r3, r0
 801c8ee:	480d      	ldr	r0, [pc, #52]	; (801c924 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801c8f0:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801c8f4:	900e      	str	r0, [sp, #56]	; 0x38
 801c8f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c8f8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c8fc:	6803      	ldr	r3, [r0, #0]
 801c8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c900:	4798      	blx	r3
 801c902:	792b      	ldrb	r3, [r5, #4]
 801c904:	2b00      	cmp	r3, #0
 801c906:	f43f af28 	beq.w	801c75a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801c90a:	6326      	str	r6, [r4, #48]	; 0x30
 801c90c:	86a6      	strh	r6, [r4, #52]	; 0x34
 801c90e:	86e6      	strh	r6, [r4, #54]	; 0x36
 801c910:	e723      	b.n	801c75a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801c912:	bf00      	nop
 801c914:	20009b14 	.word	0x20009b14
 801c918:	080208b4 	.word	0x080208b4
 801c91c:	20009b08 	.word	0x20009b08
 801c920:	20009b0a 	.word	0x20009b0a
 801c924:	08020a80 	.word	0x08020a80

0801c928 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c92a:	4604      	mov	r4, r0
 801c92c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c930:	3201      	adds	r2, #1
 801c932:	d114      	bne.n	801c95e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801c934:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801c938:	2200      	movs	r2, #0
 801c93a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801c93e:	6803      	ldr	r3, [r0, #0]
 801c940:	f8ad 1006 	strh.w	r1, [sp, #6]
 801c944:	4669      	mov	r1, sp
 801c946:	f8ad 2000 	strh.w	r2, [sp]
 801c94a:	f8ad 2002 	strh.w	r2, [sp, #2]
 801c94e:	f8ad 5004 	strh.w	r5, [sp, #4]
 801c952:	6a1b      	ldr	r3, [r3, #32]
 801c954:	4798      	blx	r3
 801c956:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801c95a:	e884 0003 	stmia.w	r4, {r0, r1}
 801c95e:	4620      	mov	r0, r4
 801c960:	b003      	add	sp, #12
 801c962:	bd30      	pop	{r4, r5, pc}

0801c964 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c964:	b513      	push	{r0, r1, r4, lr}
 801c966:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c96a:	4604      	mov	r4, r0
 801c96c:	3301      	adds	r3, #1
 801c96e:	d109      	bne.n	801c984 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c970:	4601      	mov	r1, r0
 801c972:	4668      	mov	r0, sp
 801c974:	f7ff fde3 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c978:	f8bd 3000 	ldrh.w	r3, [sp]
 801c97c:	8423      	strh	r3, [r4, #32]
 801c97e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c982:	8463      	strh	r3, [r4, #34]	; 0x22
 801c984:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c988:	b002      	add	sp, #8
 801c98a:	bd10      	pop	{r4, pc}

0801c98c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c98c:	b513      	push	{r0, r1, r4, lr}
 801c98e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c992:	4604      	mov	r4, r0
 801c994:	3301      	adds	r3, #1
 801c996:	d109      	bne.n	801c9ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c998:	4601      	mov	r1, r0
 801c99a:	4668      	mov	r0, sp
 801c99c:	f7ff fdcf 	bl	801c53e <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9a0:	f8bd 3000 	ldrh.w	r3, [sp]
 801c9a4:	8423      	strh	r3, [r4, #32]
 801c9a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c9aa:	8463      	strh	r3, [r4, #34]	; 0x22
 801c9ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c9b0:	b002      	add	sp, #8
 801c9b2:	bd10      	pop	{r4, pc}

0801c9b4 <_ZN8touchgfx6ScreenC1Ev>:
 801c9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9b6:	4605      	mov	r5, r0
 801c9b8:	4b18      	ldr	r3, [pc, #96]	; (801ca1c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c9ba:	2200      	movs	r2, #0
 801c9bc:	4918      	ldr	r1, [pc, #96]	; (801ca20 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c9be:	f845 3b04 	str.w	r3, [r5], #4
 801c9c2:	2301      	movs	r3, #1
 801c9c4:	8102      	strh	r2, [r0, #8]
 801c9c6:	4604      	mov	r4, r0
 801c9c8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801c9cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801c9d0:	4b14      	ldr	r3, [pc, #80]	; (801ca24 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801c9d2:	8142      	strh	r2, [r0, #10]
 801c9d4:	f9b3 7000 	ldrsh.w	r7, [r3]
 801c9d8:	4b13      	ldr	r3, [pc, #76]	; (801ca28 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801c9da:	8182      	strh	r2, [r0, #12]
 801c9dc:	81c2      	strh	r2, [r0, #14]
 801c9de:	8202      	strh	r2, [r0, #16]
 801c9e0:	8242      	strh	r2, [r0, #18]
 801c9e2:	8282      	strh	r2, [r0, #20]
 801c9e4:	82c2      	strh	r2, [r0, #22]
 801c9e6:	6182      	str	r2, [r0, #24]
 801c9e8:	61c2      	str	r2, [r0, #28]
 801c9ea:	6202      	str	r2, [r0, #32]
 801c9ec:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801c9f0:	62c2      	str	r2, [r0, #44]	; 0x2c
 801c9f2:	6302      	str	r2, [r0, #48]	; 0x30
 801c9f4:	8682      	strh	r2, [r0, #52]	; 0x34
 801c9f6:	86c2      	strh	r2, [r0, #54]	; 0x36
 801c9f8:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c9fc:	6041      	str	r1, [r0, #4]
 801c9fe:	4611      	mov	r1, r2
 801ca00:	4628      	mov	r0, r5
 801ca02:	f7f1 fe9c 	bl	800e73e <_ZN8touchgfx8Drawable5setXYEss>
 801ca06:	4639      	mov	r1, r7
 801ca08:	4628      	mov	r0, r5
 801ca0a:	f7f1 feb6 	bl	800e77a <_ZN8touchgfx8Drawable8setWidthEs>
 801ca0e:	4628      	mov	r0, r5
 801ca10:	4631      	mov	r1, r6
 801ca12:	f7f1 fec1 	bl	800e798 <_ZN8touchgfx8Drawable9setHeightEs>
 801ca16:	4620      	mov	r0, r4
 801ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca1a:	bf00      	nop
 801ca1c:	080221ec 	.word	0x080221ec
 801ca20:	0802091c 	.word	0x0802091c
 801ca24:	20009b08 	.word	0x20009b08
 801ca28:	20009b0a 	.word	0x20009b0a

0801ca2c <_ZN8touchgfx6Screen4drawEv>:
 801ca2c:	4b0b      	ldr	r3, [pc, #44]	; (801ca5c <_ZN8touchgfx6Screen4drawEv+0x30>)
 801ca2e:	b507      	push	{r0, r1, r2, lr}
 801ca30:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ca34:	4b0a      	ldr	r3, [pc, #40]	; (801ca60 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801ca36:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ca3a:	4669      	mov	r1, sp
 801ca3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ca40:	2300      	movs	r3, #0
 801ca42:	f8ad 3000 	strh.w	r3, [sp]
 801ca46:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ca4a:	6803      	ldr	r3, [r0, #0]
 801ca4c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ca50:	689b      	ldr	r3, [r3, #8]
 801ca52:	4798      	blx	r3
 801ca54:	b003      	add	sp, #12
 801ca56:	f85d fb04 	ldr.w	pc, [sp], #4
 801ca5a:	bf00      	nop
 801ca5c:	20009b08 	.word	0x20009b08
 801ca60:	20009b0a 	.word	0x20009b0a

0801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801ca64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca68:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801ca6c:	b087      	sub	sp, #28
 801ca6e:	4681      	mov	r9, r0
 801ca70:	460c      	mov	r4, r1
 801ca72:	4615      	mov	r5, r2
 801ca74:	b16b      	cbz	r3, 801ca92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ca76:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801ca7a:	b153      	cbz	r3, 801ca92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	f7ff ff53 	bl	801c928 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801ca82:	4621      	mov	r1, r4
 801ca84:	f7f1 fc63 	bl	800e34e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ca88:	69eb      	ldr	r3, [r5, #28]
 801ca8a:	b928      	cbnz	r0, 801ca98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801ca8c:	461d      	mov	r5, r3
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d1f4      	bne.n	801ca7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801ca92:	b007      	add	sp, #28
 801ca94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca98:	ae02      	add	r6, sp, #8
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d04a      	beq.n	801cb34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801ca9e:	682b      	ldr	r3, [r5, #0]
 801caa0:	4629      	mov	r1, r5
 801caa2:	4668      	mov	r0, sp
 801caa4:	68db      	ldr	r3, [r3, #12]
 801caa6:	4798      	blx	r3
 801caa8:	4628      	mov	r0, r5
 801caaa:	f7ff ff5b 	bl	801c964 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801caae:	f8bd 7000 	ldrh.w	r7, [sp]
 801cab2:	4407      	add	r7, r0
 801cab4:	4628      	mov	r0, r5
 801cab6:	f7ff ff69 	bl	801c98c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801caba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cabe:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801cac2:	b23f      	sxth	r7, r7
 801cac4:	4418      	add	r0, r3
 801cac6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801caca:	4621      	mov	r1, r4
 801cacc:	f8ad 200c 	strh.w	r2, [sp, #12]
 801cad0:	f8ad 000a 	strh.w	r0, [sp, #10]
 801cad4:	4630      	mov	r0, r6
 801cad6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cada:	f8ad 7008 	strh.w	r7, [sp, #8]
 801cade:	f7f1 fc7d 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7ff ff20 	bl	801c928 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cae8:	ab04      	add	r3, sp, #16
 801caea:	4602      	mov	r2, r0
 801caec:	e896 0003 	ldmia.w	r6, {r0, r1}
 801caf0:	e883 0003 	stmia.w	r3, {r0, r1}
 801caf4:	4611      	mov	r1, r2
 801caf6:	4618      	mov	r0, r3
 801caf8:	f7f1 fc70 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801cafc:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801cb00:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cb04:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801cb08:	455a      	cmp	r2, fp
 801cb0a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801cb0e:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801cb12:	f040 8096 	bne.w	801cc42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801cb16:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801cb1a:	4553      	cmp	r3, sl
 801cb1c:	f040 8091 	bne.w	801cc42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801cb20:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cb24:	4543      	cmp	r3, r8
 801cb26:	f040 808c 	bne.w	801cc42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801cb2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cb2e:	42bb      	cmp	r3, r7
 801cb30:	f040 8087 	bne.w	801cc42 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801cb34:	4628      	mov	r0, r5
 801cb36:	f7ff fef7 	bl	801c928 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cb3a:	6861      	ldr	r1, [r4, #4]
 801cb3c:	4602      	mov	r2, r0
 801cb3e:	4633      	mov	r3, r6
 801cb40:	6820      	ldr	r0, [r4, #0]
 801cb42:	c303      	stmia	r3!, {r0, r1}
 801cb44:	4611      	mov	r1, r2
 801cb46:	4630      	mov	r0, r6
 801cb48:	f7f1 fc48 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801cb4c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d09e      	beq.n	801ca92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cb54:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d09a      	beq.n	801ca92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cb5c:	4628      	mov	r0, r5
 801cb5e:	f7ff ff01 	bl	801c964 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cb62:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb66:	1a18      	subs	r0, r3, r0
 801cb68:	f8ad 0008 	strh.w	r0, [sp, #8]
 801cb6c:	4628      	mov	r0, r5
 801cb6e:	f7ff ff0d 	bl	801c98c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cb72:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cb76:	4631      	mov	r1, r6
 801cb78:	1a18      	subs	r0, r3, r0
 801cb7a:	f8ad 000a 	strh.w	r0, [sp, #10]
 801cb7e:	4628      	mov	r0, r5
 801cb80:	682b      	ldr	r3, [r5, #0]
 801cb82:	689b      	ldr	r3, [r3, #8]
 801cb84:	4798      	blx	r3
 801cb86:	e784      	b.n	801ca92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801cb88:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801cb8c:	4553      	cmp	r3, sl
 801cb8e:	da10      	bge.n	801cbb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801cb90:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cb94:	4648      	mov	r0, r9
 801cb96:	f8ad 300a 	strh.w	r3, [sp, #10]
 801cb9a:	ebaa 0303 	sub.w	r3, sl, r3
 801cb9e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801cba2:	4631      	mov	r1, r6
 801cba4:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cba8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cbac:	69ea      	ldr	r2, [r5, #28]
 801cbae:	f7ff ff59 	bl	801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cbb2:	f9b4 3000 	ldrsh.w	r3, [r4]
 801cbb6:	455b      	cmp	r3, fp
 801cbb8:	da0e      	bge.n	801cbd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801cbba:	f8ad 3008 	strh.w	r3, [sp, #8]
 801cbbe:	ebab 0303 	sub.w	r3, fp, r3
 801cbc2:	f8ad a00a 	strh.w	sl, [sp, #10]
 801cbc6:	4631      	mov	r1, r6
 801cbc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cbcc:	4648      	mov	r0, r9
 801cbce:	f8ad 700e 	strh.w	r7, [sp, #14]
 801cbd2:	69ea      	ldr	r2, [r5, #28]
 801cbd4:	f7ff ff46 	bl	801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cbd8:	8822      	ldrh	r2, [r4, #0]
 801cbda:	44d8      	add	r8, fp
 801cbdc:	88a3      	ldrh	r3, [r4, #4]
 801cbde:	fa1f f888 	uxth.w	r8, r8
 801cbe2:	4413      	add	r3, r2
 801cbe4:	fa0f f288 	sxth.w	r2, r8
 801cbe8:	b29b      	uxth	r3, r3
 801cbea:	b219      	sxth	r1, r3
 801cbec:	4291      	cmp	r1, r2
 801cbee:	dd0e      	ble.n	801cc0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cbf0:	eba3 0308 	sub.w	r3, r3, r8
 801cbf4:	f8ad 2008 	strh.w	r2, [sp, #8]
 801cbf8:	f8ad a00a 	strh.w	sl, [sp, #10]
 801cbfc:	4631      	mov	r1, r6
 801cbfe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801cc02:	4648      	mov	r0, r9
 801cc04:	f8ad 700e 	strh.w	r7, [sp, #14]
 801cc08:	69ea      	ldr	r2, [r5, #28]
 801cc0a:	f7ff ff2b 	bl	801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc0e:	88e2      	ldrh	r2, [r4, #6]
 801cc10:	4457      	add	r7, sl
 801cc12:	8863      	ldrh	r3, [r4, #2]
 801cc14:	b2bf      	uxth	r7, r7
 801cc16:	4413      	add	r3, r2
 801cc18:	b23a      	sxth	r2, r7
 801cc1a:	b29b      	uxth	r3, r3
 801cc1c:	b219      	sxth	r1, r3
 801cc1e:	428a      	cmp	r2, r1
 801cc20:	da88      	bge.n	801cb34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801cc22:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cc26:	1bdb      	subs	r3, r3, r7
 801cc28:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cc2c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801cc30:	4631      	mov	r1, r6
 801cc32:	f8ad 0008 	strh.w	r0, [sp, #8]
 801cc36:	f8ad 200a 	strh.w	r2, [sp, #10]
 801cc3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cc3e:	69ea      	ldr	r2, [r5, #28]
 801cc40:	e006      	b.n	801cc50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801cc42:	f1b8 0f00 	cmp.w	r8, #0
 801cc46:	d001      	beq.n	801cc4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801cc48:	2f00      	cmp	r7, #0
 801cc4a:	d19d      	bne.n	801cb88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801cc4c:	69ea      	ldr	r2, [r5, #28]
 801cc4e:	4621      	mov	r1, r4
 801cc50:	4648      	mov	r0, r9
 801cc52:	f7ff ff07 	bl	801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc56:	e76d      	b.n	801cb34 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801cc58 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801cc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	aa02      	add	r2, sp, #8
 801cc5e:	4604      	mov	r4, r0
 801cc60:	3004      	adds	r0, #4
 801cc62:	f842 3d04 	str.w	r3, [r2, #-4]!
 801cc66:	460d      	mov	r5, r1
 801cc68:	f7f2 f897 	bl	800ed9a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cc6c:	9a01      	ldr	r2, [sp, #4]
 801cc6e:	b11a      	cbz	r2, 801cc78 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801cc70:	4629      	mov	r1, r5
 801cc72:	4620      	mov	r0, r4
 801cc74:	f7ff fef6 	bl	801ca64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc78:	b003      	add	sp, #12
 801cc7a:	bd30      	pop	{r4, r5, pc}

0801cc7c <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc7e:	4602      	mov	r2, r0
 801cc80:	4604      	mov	r4, r0
 801cc82:	460d      	mov	r5, r1
 801cc84:	466b      	mov	r3, sp
 801cc86:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cc8a:	6851      	ldr	r1, [r2, #4]
 801cc8c:	c303      	stmia	r3!, {r0, r1}
 801cc8e:	4629      	mov	r1, r5
 801cc90:	4668      	mov	r0, sp
 801cc92:	f7f1 fba3 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801cc96:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cc9a:	4669      	mov	r1, sp
 801cc9c:	b123      	cbz	r3, 801cca8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801cc9e:	4620      	mov	r0, r4
 801cca0:	f7ff ffda 	bl	801cc58 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801cca4:	b003      	add	sp, #12
 801cca6:	bd30      	pop	{r4, r5, pc}
 801cca8:	1d20      	adds	r0, r4, #4
 801ccaa:	f7f1 ff0a 	bl	800eac2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801ccae:	e7f9      	b.n	801cca4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801ccb0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801ccb0:	460b      	mov	r3, r1
 801ccb2:	680a      	ldr	r2, [r1, #0]
 801ccb4:	1d01      	adds	r1, r0, #4
 801ccb6:	6952      	ldr	r2, [r2, #20]
 801ccb8:	4618      	mov	r0, r3
 801ccba:	4710      	bx	r2

0801ccbc <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801ccbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ccc0:	b082      	sub	sp, #8
 801ccc2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ccc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccca:	bfcc      	ite	gt
 801cccc:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801ccd0:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801ccd4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ccd8:	edcd 7a01 	vstr	s15, [sp, #4]
 801ccdc:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801cce0:	b002      	add	sp, #8
 801cce2:	4770      	bx	lr

0801cce4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cce4:	b510      	push	{r4, lr}
 801cce6:	4298      	cmp	r0, r3
 801cce8:	eb01 0402 	add.w	r4, r1, r2
 801ccec:	b224      	sxth	r4, r4
 801ccee:	da1f      	bge.n	801cd30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801ccf0:	b1f3      	cbz	r3, 801cd30 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801ccf2:	ee07 0a90 	vmov	s15, r0
 801ccf6:	ee06 1a10 	vmov	s12, r1
 801ccfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ccfe:	ee07 3a90 	vmov	s15, r3
 801cd02:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801cd06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cd0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cd0e:	ee06 2a90 	vmov	s13, r2
 801cd12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd16:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cd1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cd1e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801cd22:	eea7 7a86 	vfma.f32	s14, s15, s12
 801cd26:	eea6 0a87 	vfma.f32	s0, s13, s14
 801cd2a:	f7ff ffc7 	bl	801ccbc <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801cd2e:	4604      	mov	r4, r0
 801cd30:	4620      	mov	r0, r4
 801cd32:	bd10      	pop	{r4, pc}

0801cd34 <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801cd34:	680b      	ldr	r3, [r1, #0]
 801cd36:	6980      	ldr	r0, [r0, #24]
 801cd38:	4418      	add	r0, r3
 801cd3a:	4770      	bx	lr

0801cd3c <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801cd3c:	b530      	push	{r4, r5, lr}
 801cd3e:	b19a      	cbz	r2, 801cd68 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801cd40:	7b13      	ldrb	r3, [r2, #12]
 801cd42:	b18b      	cbz	r3, 801cd68 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801cd44:	7ad2      	ldrb	r2, [r2, #11]
 801cd46:	b294      	uxth	r4, r2
 801cd48:	4413      	add	r3, r2
 801cd4a:	429c      	cmp	r4, r3
 801cd4c:	da0c      	bge.n	801cd68 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801cd4e:	69c2      	ldr	r2, [r0, #28]
 801cd50:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801cd54:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801cd58:	428a      	cmp	r2, r1
 801cd5a:	d102      	bne.n	801cd62 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801cd5c:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801cd60:	bd30      	pop	{r4, r5, pc}
 801cd62:	3401      	adds	r4, #1
 801cd64:	b2a4      	uxth	r4, r4
 801cd66:	e7f0      	b.n	801cd4a <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801cd68:	2000      	movs	r0, #0
 801cd6a:	bd30      	pop	{r4, r5, pc}

0801cd6c <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801cd6c:	b530      	push	{r4, r5, lr}
 801cd6e:	b087      	sub	sp, #28
 801cd70:	4604      	mov	r4, r0
 801cd72:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801cd76:	9505      	str	r5, [sp, #20]
 801cd78:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801cd7c:	9504      	str	r5, [sp, #16]
 801cd7e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801cd82:	9503      	str	r5, [sp, #12]
 801cd84:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cd88:	9502      	str	r5, [sp, #8]
 801cd8a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801cd8e:	9501      	str	r5, [sp, #4]
 801cd90:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801cd94:	9500      	str	r5, [sp, #0]
 801cd96:	f7ff fbe5 	bl	801c564 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801cd9a:	4b04      	ldr	r3, [pc, #16]	; (801cdac <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801cd9c:	4620      	mov	r0, r4
 801cd9e:	6023      	str	r3, [r4, #0]
 801cda0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cda2:	61a3      	str	r3, [r4, #24]
 801cda4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cda6:	61e3      	str	r3, [r4, #28]
 801cda8:	b007      	add	sp, #28
 801cdaa:	bd30      	pop	{r4, r5, pc}
 801cdac:	08022220 	.word	0x08022220

0801cdb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdb2:	4604      	mov	r4, r0
 801cdb4:	4d1b      	ldr	r5, [pc, #108]	; (801ce24 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801cdb6:	2700      	movs	r7, #0
 801cdb8:	2601      	movs	r6, #1
 801cdba:	6863      	ldr	r3, [r4, #4]
 801cdbc:	b93b      	cbnz	r3, 801cdce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801cdbe:	6821      	ldr	r1, [r4, #0]
 801cdc0:	2900      	cmp	r1, #0
 801cdc2:	d02c      	beq.n	801ce1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801cdc4:	6828      	ldr	r0, [r5, #0]
 801cdc6:	6803      	ldr	r3, [r0, #0]
 801cdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cdca:	4798      	blx	r3
 801cdcc:	6060      	str	r0, [r4, #4]
 801cdce:	7c23      	ldrb	r3, [r4, #16]
 801cdd0:	b16b      	cbz	r3, 801cdee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801cdd2:	68e3      	ldr	r3, [r4, #12]
 801cdd4:	b12b      	cbz	r3, 801cde2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801cdd6:	881a      	ldrh	r2, [r3, #0]
 801cdd8:	b11a      	cbz	r2, 801cde2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801cdda:	1c9a      	adds	r2, r3, #2
 801cddc:	60e2      	str	r2, [r4, #12]
 801cdde:	8818      	ldrh	r0, [r3, #0]
 801cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cde2:	6828      	ldr	r0, [r5, #0]
 801cde4:	7427      	strb	r7, [r4, #16]
 801cde6:	6803      	ldr	r3, [r0, #0]
 801cde8:	6821      	ldr	r1, [r4, #0]
 801cdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cdec:	4798      	blx	r3
 801cdee:	6863      	ldr	r3, [r4, #4]
 801cdf0:	881a      	ldrh	r2, [r3, #0]
 801cdf2:	b1a2      	cbz	r2, 801ce1e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801cdf4:	2a02      	cmp	r2, #2
 801cdf6:	f103 0202 	add.w	r2, r3, #2
 801cdfa:	6062      	str	r2, [r4, #4]
 801cdfc:	d1ef      	bne.n	801cdde <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801cdfe:	6828      	ldr	r0, [r5, #0]
 801ce00:	6803      	ldr	r3, [r0, #0]
 801ce02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ce04:	68a3      	ldr	r3, [r4, #8]
 801ce06:	1d19      	adds	r1, r3, #4
 801ce08:	60a1      	str	r1, [r4, #8]
 801ce0a:	6819      	ldr	r1, [r3, #0]
 801ce0c:	4790      	blx	r2
 801ce0e:	60e0      	str	r0, [r4, #12]
 801ce10:	2800      	cmp	r0, #0
 801ce12:	d0d2      	beq.n	801cdba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801ce14:	8803      	ldrh	r3, [r0, #0]
 801ce16:	2b00      	cmp	r3, #0
 801ce18:	d0cf      	beq.n	801cdba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801ce1a:	7426      	strb	r6, [r4, #16]
 801ce1c:	e7cd      	b.n	801cdba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801ce1e:	2000      	movs	r0, #0
 801ce20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce22:	bf00      	nop
 801ce24:	20009b14 	.word	0x20009b14

0801ce28 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ce28:	b538      	push	{r3, r4, r5, lr}
 801ce2a:	8a83      	ldrh	r3, [r0, #20]
 801ce2c:	4604      	mov	r4, r0
 801ce2e:	8a45      	ldrh	r5, [r0, #18]
 801ce30:	8243      	strh	r3, [r0, #18]
 801ce32:	f7ff ffbd 	bl	801cdb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ce36:	82a0      	strh	r0, [r4, #20]
 801ce38:	4628      	mov	r0, r5
 801ce3a:	bd38      	pop	{r3, r4, r5, pc}

0801ce3c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801ce3c:	b570      	push	{r4, r5, r6, lr}
 801ce3e:	460e      	mov	r6, r1
 801ce40:	4605      	mov	r5, r0
 801ce42:	f7ff fff1 	bl	801ce28 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ce46:	4a0d      	ldr	r2, [pc, #52]	; (801ce7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801ce48:	4601      	mov	r1, r0
 801ce4a:	6814      	ldr	r4, [r2, #0]
 801ce4c:	4613      	mov	r3, r2
 801ce4e:	b914      	cbnz	r4, 801ce56 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801ce50:	6852      	ldr	r2, [r2, #4]
 801ce52:	07d2      	lsls	r2, r2, #31
 801ce54:	d510      	bpl.n	801ce78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801ce56:	6858      	ldr	r0, [r3, #4]
 801ce58:	f105 0212 	add.w	r2, r5, #18
 801ce5c:	f010 0f01 	tst.w	r0, #1
 801ce60:	ea4f 0060 	mov.w	r0, r0, asr #1
 801ce64:	bf18      	it	ne
 801ce66:	582b      	ldrne	r3, [r5, r0]
 801ce68:	4428      	add	r0, r5
 801ce6a:	bf18      	it	ne
 801ce6c:	591c      	ldrne	r4, [r3, r4]
 801ce6e:	4633      	mov	r3, r6
 801ce70:	46a4      	mov	ip, r4
 801ce72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ce76:	4760      	bx	ip
 801ce78:	bd70      	pop	{r4, r5, r6, pc}
 801ce7a:	bf00      	nop
 801ce7c:	20009aec 	.word	0x20009aec

0801ce80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801ce80:	2300      	movs	r3, #0
 801ce82:	b510      	push	{r4, lr}
 801ce84:	4604      	mov	r4, r0
 801ce86:	6043      	str	r3, [r0, #4]
 801ce88:	60c3      	str	r3, [r0, #12]
 801ce8a:	7403      	strb	r3, [r0, #16]
 801ce8c:	f7ff ff90 	bl	801cdb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ce90:	8260      	strh	r0, [r4, #18]
 801ce92:	4620      	mov	r0, r4
 801ce94:	f7ff ff8c 	bl	801cdb0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ce98:	4a0a      	ldr	r2, [pc, #40]	; (801cec4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801ce9a:	82a0      	strh	r0, [r4, #20]
 801ce9c:	6813      	ldr	r3, [r2, #0]
 801ce9e:	4611      	mov	r1, r2
 801cea0:	b913      	cbnz	r3, 801cea8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801cea2:	6852      	ldr	r2, [r2, #4]
 801cea4:	07d2      	lsls	r2, r2, #31
 801cea6:	d50c      	bpl.n	801cec2 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801cea8:	6848      	ldr	r0, [r1, #4]
 801ceaa:	f010 0f01 	tst.w	r0, #1
 801ceae:	ea4f 0060 	mov.w	r0, r0, asr #1
 801ceb2:	bf18      	it	ne
 801ceb4:	5822      	ldrne	r2, [r4, r0]
 801ceb6:	4420      	add	r0, r4
 801ceb8:	bf18      	it	ne
 801ceba:	58d3      	ldrne	r3, [r2, r3]
 801cebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cec0:	4718      	bx	r3
 801cec2:	bd10      	pop	{r4, pc}
 801cec4:	20009ae4 	.word	0x20009ae4

0801cec8 <_ZN8touchgfx12TextProviderC1Ev>:
 801cec8:	2300      	movs	r3, #0
 801ceca:	b510      	push	{r4, lr}
 801cecc:	4604      	mov	r4, r0
 801cece:	6003      	str	r3, [r0, #0]
 801ced0:	6043      	str	r3, [r0, #4]
 801ced2:	f7ff ffd5 	bl	801ce80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ced6:	4620      	mov	r0, r4
 801ced8:	bd10      	pop	{r4, pc}

0801ceda <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801ceda:	6082      	str	r2, [r0, #8]
 801cedc:	6001      	str	r1, [r0, #0]
 801cede:	f7ff bfcf 	b.w	801ce80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801cee4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 801cee4:	4b26      	ldr	r3, [pc, #152]	; (801cf80 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 801cee6:	b570      	push	{r4, r5, r6, lr}
 801cee8:	681b      	ldr	r3, [r3, #0]
 801ceea:	4605      	mov	r5, r0
 801ceec:	460c      	mov	r4, r1
 801ceee:	4616      	mov	r6, r2
 801cef0:	b92b      	cbnz	r3, 801cefe <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 801cef2:	4b24      	ldr	r3, [pc, #144]	; (801cf84 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 801cef4:	2116      	movs	r1, #22
 801cef6:	4a24      	ldr	r2, [pc, #144]	; (801cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801cef8:	4824      	ldr	r0, [pc, #144]	; (801cf8c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 801cefa:	f002 f9e1 	bl	801f2c0 <__assert_func>
 801cefe:	6898      	ldr	r0, [r3, #8]
 801cf00:	6803      	ldr	r3, [r0, #0]
 801cf02:	6a1b      	ldr	r3, [r3, #32]
 801cf04:	4798      	blx	r3
 801cf06:	2810      	cmp	r0, #16
 801cf08:	d109      	bne.n	801cf1e <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 801cf0a:	00e0      	lsls	r0, r4, #3
 801cf0c:	022c      	lsls	r4, r5, #8
 801cf0e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cf12:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801cf16:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 801cf1a:	4320      	orrs	r0, r4
 801cf1c:	bd70      	pop	{r4, r5, r6, pc}
 801cf1e:	2818      	cmp	r0, #24
 801cf20:	d104      	bne.n	801cf2c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 801cf22:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 801cf26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801cf2a:	bd70      	pop	{r4, r5, r6, pc}
 801cf2c:	2804      	cmp	r0, #4
 801cf2e:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 801cf32:	d109      	bne.n	801cf48 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 801cf34:	fb14 f401 	smulbb	r4, r4, r1
 801cf38:	2036      	movs	r0, #54	; 0x36
 801cf3a:	fb10 4405 	smlabb	r4, r0, r5, r4
 801cf3e:	2013      	movs	r0, #19
 801cf40:	fb10 4006 	smlabb	r0, r0, r6, r4
 801cf44:	1300      	asrs	r0, r0, #12
 801cf46:	bd70      	pop	{r4, r5, r6, pc}
 801cf48:	2802      	cmp	r0, #2
 801cf4a:	d109      	bne.n	801cf60 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 801cf4c:	fb14 f401 	smulbb	r4, r4, r1
 801cf50:	2036      	movs	r0, #54	; 0x36
 801cf52:	fb10 4405 	smlabb	r4, r0, r5, r4
 801cf56:	2013      	movs	r0, #19
 801cf58:	fb10 4006 	smlabb	r0, r0, r6, r4
 801cf5c:	1380      	asrs	r0, r0, #14
 801cf5e:	bd70      	pop	{r4, r5, r6, pc}
 801cf60:	2801      	cmp	r0, #1
 801cf62:	d109      	bne.n	801cf78 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 801cf64:	fb14 f401 	smulbb	r4, r4, r1
 801cf68:	2036      	movs	r0, #54	; 0x36
 801cf6a:	fb10 4405 	smlabb	r4, r0, r5, r4
 801cf6e:	2013      	movs	r0, #19
 801cf70:	fb10 4006 	smlabb	r0, r0, r6, r4
 801cf74:	13c0      	asrs	r0, r0, #15
 801cf76:	bd70      	pop	{r4, r5, r6, pc}
 801cf78:	4b05      	ldr	r3, [pc, #20]	; (801cf90 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 801cf7a:	212f      	movs	r1, #47	; 0x2f
 801cf7c:	4a02      	ldr	r2, [pc, #8]	; (801cf88 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 801cf7e:	e7bb      	b.n	801cef8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 801cf80:	20009b14 	.word	0x20009b14
 801cf84:	08022264 	.word	0x08022264
 801cf88:	080222e7 	.word	0x080222e7
 801cf8c:	080222a7 	.word	0x080222a7
 801cf90:	080222cb 	.word	0x080222cb

0801cf94 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cf94:	4b01      	ldr	r3, [pc, #4]	; (801cf9c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cf96:	6018      	str	r0, [r3, #0]
 801cf98:	4770      	bx	lr
 801cf9a:	bf00      	nop
 801cf9c:	20009b84 	.word	0x20009b84

0801cfa0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfa4:	4f24      	ldr	r7, [pc, #144]	; (801d038 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801cfa6:	683b      	ldr	r3, [r7, #0]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d042      	beq.n	801d032 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801cfac:	4923      	ldr	r1, [pc, #140]	; (801d03c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801cfae:	4d24      	ldr	r5, [pc, #144]	; (801d040 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801cfb0:	8808      	ldrh	r0, [r1, #0]
 801cfb2:	882a      	ldrh	r2, [r5, #0]
 801cfb4:	4e23      	ldr	r6, [pc, #140]	; (801d044 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801cfb6:	4410      	add	r0, r2
 801cfb8:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 801cfbc:	4c22      	ldr	r4, [pc, #136]	; (801d048 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801cfbe:	1c41      	adds	r1, r0, #1
 801cfc0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801cfc4:	f021 0101 	bic.w	r1, r1, #1
 801cfc8:	eb03 0208 	add.w	r2, r3, r8
 801cfcc:	0409      	lsls	r1, r1, #16
 801cfce:	6032      	str	r2, [r6, #0]
 801cfd0:	0c09      	lsrs	r1, r1, #16
 801cfd2:	0049      	lsls	r1, r1, #1
 801cfd4:	eb08 0c01 	add.w	ip, r8, r1
 801cfd8:	eb03 020c 	add.w	r2, r3, ip
 801cfdc:	44f4      	add	ip, lr
 801cfde:	6022      	str	r2, [r4, #0]
 801cfe0:	4463      	add	r3, ip
 801cfe2:	4a1a      	ldr	r2, [pc, #104]	; (801d04c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801cfe4:	6013      	str	r3, [r2, #0]
 801cfe6:	2300      	movs	r3, #0
 801cfe8:	4a19      	ldr	r2, [pc, #100]	; (801d050 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801cfea:	8013      	strh	r3, [r2, #0]
 801cfec:	4a19      	ldr	r2, [pc, #100]	; (801d054 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801cfee:	6812      	ldr	r2, [r2, #0]
 801cff0:	eba2 0208 	sub.w	r2, r2, r8
 801cff4:	1a52      	subs	r2, r2, r1
 801cff6:	4918      	ldr	r1, [pc, #96]	; (801d058 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801cff8:	eba2 020e 	sub.w	r2, r2, lr
 801cffc:	469e      	mov	lr, r3
 801cffe:	600a      	str	r2, [r1, #0]
 801d000:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d004:	4a15      	ldr	r2, [pc, #84]	; (801d05c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801d006:	8013      	strh	r3, [r2, #0]
 801d008:	4283      	cmp	r3, r0
 801d00a:	d007      	beq.n	801d01c <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 801d00c:	683a      	ldr	r2, [r7, #0]
 801d00e:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801d012:	6832      	ldr	r2, [r6, #0]
 801d014:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801d018:	3301      	adds	r3, #1
 801d01a:	e7f5      	b.n	801d008 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 801d01c:	2300      	movs	r3, #0
 801d01e:	882d      	ldrh	r5, [r5, #0]
 801d020:	6820      	ldr	r0, [r4, #0]
 801d022:	4619      	mov	r1, r3
 801d024:	42ab      	cmp	r3, r5
 801d026:	d204      	bcs.n	801d032 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801d028:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 801d02c:	3301      	adds	r3, #1
 801d02e:	7391      	strb	r1, [r2, #14]
 801d030:	e7f8      	b.n	801d024 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 801d032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d036:	bf00      	nop
 801d038:	20009b88 	.word	0x20009b88
 801d03c:	20009ba4 	.word	0x20009ba4
 801d040:	20009ba8 	.word	0x20009ba8
 801d044:	20009b9c 	.word	0x20009b9c
 801d048:	20009b8c 	.word	0x20009b8c
 801d04c:	20009b94 	.word	0x20009b94
 801d050:	20009ba6 	.word	0x20009ba6
 801d054:	20009b90 	.word	0x20009b90
 801d058:	20009ba0 	.word	0x20009ba0
 801d05c:	20009b98 	.word	0x20009b98

0801d060 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d060:	4b0f      	ldr	r3, [pc, #60]	; (801d0a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 801d062:	b510      	push	{r4, lr}
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	b9d3      	cbnz	r3, 801d09e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801d068:	b1c9      	cbz	r1, 801d09e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 801d06a:	4b0e      	ldr	r3, [pc, #56]	; (801d0a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801d06c:	2406      	movs	r4, #6
 801d06e:	801a      	strh	r2, [r3, #0]
 801d070:	b292      	uxth	r2, r2
 801d072:	4b0d      	ldr	r3, [pc, #52]	; (801d0a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801d074:	881b      	ldrh	r3, [r3, #0]
 801d076:	4413      	add	r3, r2
 801d078:	0112      	lsls	r2, r2, #4
 801d07a:	fb04 2203 	mla	r2, r4, r3, r2
 801d07e:	4291      	cmp	r1, r2
 801d080:	d805      	bhi.n	801d08e <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 801d082:	4b0a      	ldr	r3, [pc, #40]	; (801d0ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801d084:	2138      	movs	r1, #56	; 0x38
 801d086:	4a0a      	ldr	r2, [pc, #40]	; (801d0b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801d088:	480a      	ldr	r0, [pc, #40]	; (801d0b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801d08a:	f002 f919 	bl	801f2c0 <__assert_func>
 801d08e:	4b0a      	ldr	r3, [pc, #40]	; (801d0b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801d090:	6019      	str	r1, [r3, #0]
 801d092:	4b0a      	ldr	r3, [pc, #40]	; (801d0bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801d094:	6018      	str	r0, [r3, #0]
 801d096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d09a:	f7ff bf81 	b.w	801cfa0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d09e:	bd10      	pop	{r4, pc}
 801d0a0:	20009b94 	.word	0x20009b94
 801d0a4:	20009ba8 	.word	0x20009ba8
 801d0a8:	20009ba4 	.word	0x20009ba4
 801d0ac:	080223a7 	.word	0x080223a7
 801d0b0:	0802243c 	.word	0x0802243c
 801d0b4:	08022382 	.word	0x08022382
 801d0b8:	20009b90 	.word	0x20009b90
 801d0bc:	20009b88 	.word	0x20009b88

0801d0c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d0c0:	b470      	push	{r4, r5, r6}
 801d0c2:	4c07      	ldr	r4, [pc, #28]	; (801d0e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d0c4:	4605      	mov	r5, r0
 801d0c6:	4610      	mov	r0, r2
 801d0c8:	9a03      	ldr	r2, [sp, #12]
 801d0ca:	6826      	ldr	r6, [r4, #0]
 801d0cc:	b936      	cbnz	r6, 801d0dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d0ce:	6025      	str	r5, [r4, #0]
 801d0d0:	4c04      	ldr	r4, [pc, #16]	; (801d0e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d0d2:	8021      	strh	r1, [r4, #0]
 801d0d4:	4619      	mov	r1, r3
 801d0d6:	bc70      	pop	{r4, r5, r6}
 801d0d8:	f7ff bfc2 	b.w	801d060 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d0dc:	bc70      	pop	{r4, r5, r6}
 801d0de:	4770      	bx	lr
 801d0e0:	20009bac 	.word	0x20009bac
 801d0e4:	20009ba4 	.word	0x20009ba4

0801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d0e8:	b508      	push	{r3, lr}
 801d0ea:	4b13      	ldr	r3, [pc, #76]	; (801d138 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d0ec:	6819      	ldr	r1, [r3, #0]
 801d0ee:	b931      	cbnz	r1, 801d0fe <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801d0f0:	4b12      	ldr	r3, [pc, #72]	; (801d13c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d0f2:	f44f 710d 	mov.w	r1, #564	; 0x234
 801d0f6:	4a12      	ldr	r2, [pc, #72]	; (801d140 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d0f8:	4812      	ldr	r0, [pc, #72]	; (801d144 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d0fa:	f002 f8e1 	bl	801f2c0 <__assert_func>
 801d0fe:	4a12      	ldr	r2, [pc, #72]	; (801d148 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d100:	8803      	ldrh	r3, [r0, #0]
 801d102:	8812      	ldrh	r2, [r2, #0]
 801d104:	4293      	cmp	r3, r2
 801d106:	da04      	bge.n	801d112 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801d108:	2214      	movs	r2, #20
 801d10a:	fb02 1303 	mla	r3, r2, r3, r1
 801d10e:	8918      	ldrh	r0, [r3, #8]
 801d110:	bd08      	pop	{r3, pc}
 801d112:	490e      	ldr	r1, [pc, #56]	; (801d14c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d114:	8809      	ldrh	r1, [r1, #0]
 801d116:	4411      	add	r1, r2
 801d118:	428b      	cmp	r3, r1
 801d11a:	da05      	bge.n	801d128 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 801d11c:	1a9b      	subs	r3, r3, r2
 801d11e:	4a0c      	ldr	r2, [pc, #48]	; (801d150 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801d120:	6812      	ldr	r2, [r2, #0]
 801d122:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801d126:	e7f2      	b.n	801d10e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801d128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d12c:	4293      	cmp	r3, r2
 801d12e:	bf06      	itte	eq
 801d130:	4b08      	ldreq	r3, [pc, #32]	; (801d154 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801d132:	8818      	ldrheq	r0, [r3, #0]
 801d134:	2000      	movne	r0, #0
 801d136:	bd08      	pop	{r3, pc}
 801d138:	20009bac 	.word	0x20009bac
 801d13c:	08022400 	.word	0x08022400
 801d140:	080224e9 	.word	0x080224e9
 801d144:	08022382 	.word	0x08022382
 801d148:	20009ba4 	.word	0x20009ba4
 801d14c:	20009ba8 	.word	0x20009ba8
 801d150:	20009b8c 	.word	0x20009b8c
 801d154:	20009b08 	.word	0x20009b08

0801d158 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d158:	b508      	push	{r3, lr}
 801d15a:	4b13      	ldr	r3, [pc, #76]	; (801d1a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d15c:	6819      	ldr	r1, [r3, #0]
 801d15e:	b931      	cbnz	r1, 801d16e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d160:	4b12      	ldr	r3, [pc, #72]	; (801d1ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d162:	f44f 7112 	mov.w	r1, #584	; 0x248
 801d166:	4a12      	ldr	r2, [pc, #72]	; (801d1b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d168:	4812      	ldr	r0, [pc, #72]	; (801d1b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d16a:	f002 f8a9 	bl	801f2c0 <__assert_func>
 801d16e:	4a12      	ldr	r2, [pc, #72]	; (801d1b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d170:	8803      	ldrh	r3, [r0, #0]
 801d172:	8812      	ldrh	r2, [r2, #0]
 801d174:	4293      	cmp	r3, r2
 801d176:	da04      	bge.n	801d182 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d178:	2214      	movs	r2, #20
 801d17a:	fb02 1303 	mla	r3, r2, r3, r1
 801d17e:	8958      	ldrh	r0, [r3, #10]
 801d180:	bd08      	pop	{r3, pc}
 801d182:	490e      	ldr	r1, [pc, #56]	; (801d1bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d184:	8809      	ldrh	r1, [r1, #0]
 801d186:	4411      	add	r1, r2
 801d188:	428b      	cmp	r3, r1
 801d18a:	da05      	bge.n	801d198 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 801d18c:	1a9b      	subs	r3, r3, r2
 801d18e:	4a0c      	ldr	r2, [pc, #48]	; (801d1c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d190:	6812      	ldr	r2, [r2, #0]
 801d192:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801d196:	e7f2      	b.n	801d17e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d198:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d19c:	4293      	cmp	r3, r2
 801d19e:	bf06      	itte	eq
 801d1a0:	4b08      	ldreq	r3, [pc, #32]	; (801d1c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d1a2:	8818      	ldrheq	r0, [r3, #0]
 801d1a4:	2000      	movne	r0, #0
 801d1a6:	bd08      	pop	{r3, pc}
 801d1a8:	20009bac 	.word	0x20009bac
 801d1ac:	08022400 	.word	0x08022400
 801d1b0:	08022515 	.word	0x08022515
 801d1b4:	08022382 	.word	0x08022382
 801d1b8:	20009ba4 	.word	0x20009ba4
 801d1bc:	20009ba8 	.word	0x20009ba8
 801d1c0:	20009b8c 	.word	0x20009b8c
 801d1c4:	20009b0a 	.word	0x20009b0a

0801d1c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d1c8:	4b22      	ldr	r3, [pc, #136]	; (801d254 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801d1ca:	b510      	push	{r4, lr}
 801d1cc:	681c      	ldr	r4, [r3, #0]
 801d1ce:	b934      	cbnz	r4, 801d1de <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d1d0:	4b21      	ldr	r3, [pc, #132]	; (801d258 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d1d2:	f44f 7117 	mov.w	r1, #604	; 0x25c
 801d1d6:	4a21      	ldr	r2, [pc, #132]	; (801d25c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d1d8:	4821      	ldr	r0, [pc, #132]	; (801d260 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d1da:	f002 f871 	bl	801f2c0 <__assert_func>
 801d1de:	4a21      	ldr	r2, [pc, #132]	; (801d264 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d1e0:	880b      	ldrh	r3, [r1, #0]
 801d1e2:	8812      	ldrh	r2, [r2, #0]
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	da10      	bge.n	801d20a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 801d1e8:	2214      	movs	r2, #20
 801d1ea:	fb02 4303 	mla	r3, r2, r3, r4
 801d1ee:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d1f2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d1f6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 801d1fa:	8a5b      	ldrh	r3, [r3, #18]
 801d1fc:	8004      	strh	r4, [r0, #0]
 801d1fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d202:	8041      	strh	r1, [r0, #2]
 801d204:	8082      	strh	r2, [r0, #4]
 801d206:	80c3      	strh	r3, [r0, #6]
 801d208:	bd10      	pop	{r4, pc}
 801d20a:	4917      	ldr	r1, [pc, #92]	; (801d268 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d20c:	8809      	ldrh	r1, [r1, #0]
 801d20e:	4411      	add	r1, r2
 801d210:	428b      	cmp	r3, r1
 801d212:	da09      	bge.n	801d228 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801d214:	1a9b      	subs	r3, r3, r2
 801d216:	4a15      	ldr	r2, [pc, #84]	; (801d26c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d218:	6812      	ldr	r2, [r2, #0]
 801d21a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801d21e:	681a      	ldr	r2, [r3, #0]
 801d220:	6002      	str	r2, [r0, #0]
 801d222:	685a      	ldr	r2, [r3, #4]
 801d224:	6042      	str	r2, [r0, #4]
 801d226:	bd10      	pop	{r4, pc}
 801d228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d22c:	4293      	cmp	r3, r2
 801d22e:	d10b      	bne.n	801d248 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801d230:	4b0f      	ldr	r3, [pc, #60]	; (801d270 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d232:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d236:	4b0f      	ldr	r3, [pc, #60]	; (801d274 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d238:	8081      	strh	r1, [r0, #4]
 801d23a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d23e:	2300      	movs	r3, #0
 801d240:	80c2      	strh	r2, [r0, #6]
 801d242:	8003      	strh	r3, [r0, #0]
 801d244:	8043      	strh	r3, [r0, #2]
 801d246:	bd10      	pop	{r4, pc}
 801d248:	2300      	movs	r3, #0
 801d24a:	8003      	strh	r3, [r0, #0]
 801d24c:	8043      	strh	r3, [r0, #2]
 801d24e:	8083      	strh	r3, [r0, #4]
 801d250:	e7d9      	b.n	801d206 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 801d252:	bf00      	nop
 801d254:	20009bac 	.word	0x20009bac
 801d258:	08022400 	.word	0x08022400
 801d25c:	08022482 	.word	0x08022482
 801d260:	08022382 	.word	0x08022382
 801d264:	20009ba4 	.word	0x20009ba4
 801d268:	20009ba8 	.word	0x20009ba8
 801d26c:	20009b8c 	.word	0x20009b8c
 801d270:	20009b08 	.word	0x20009b08
 801d274:	20009b0a 	.word	0x20009b0a

0801d278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d278:	4b16      	ldr	r3, [pc, #88]	; (801d2d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	b333      	cbz	r3, 801d2cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801d27e:	4a16      	ldr	r2, [pc, #88]	; (801d2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d280:	8800      	ldrh	r0, [r0, #0]
 801d282:	8812      	ldrh	r2, [r2, #0]
 801d284:	4290      	cmp	r0, r2
 801d286:	da0f      	bge.n	801d2a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 801d288:	2214      	movs	r2, #20
 801d28a:	fb02 3300 	mla	r3, r2, r0, r3
 801d28e:	8a19      	ldrh	r1, [r3, #16]
 801d290:	891a      	ldrh	r2, [r3, #8]
 801d292:	4291      	cmp	r1, r2
 801d294:	db1c      	blt.n	801d2d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d296:	8a58      	ldrh	r0, [r3, #18]
 801d298:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d29c:	895b      	ldrh	r3, [r3, #10]
 801d29e:	4298      	cmp	r0, r3
 801d2a0:	bfac      	ite	ge
 801d2a2:	2000      	movge	r0, #0
 801d2a4:	2001      	movlt	r0, #1
 801d2a6:	4770      	bx	lr
 801d2a8:	4b0c      	ldr	r3, [pc, #48]	; (801d2dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d2aa:	881b      	ldrh	r3, [r3, #0]
 801d2ac:	4413      	add	r3, r2
 801d2ae:	4298      	cmp	r0, r3
 801d2b0:	da0c      	bge.n	801d2cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 801d2b2:	4b0b      	ldr	r3, [pc, #44]	; (801d2e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d2b4:	1a80      	subs	r0, r0, r2
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801d2bc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d2c0:	891a      	ldrh	r2, [r3, #8]
 801d2c2:	4291      	cmp	r1, r2
 801d2c4:	db04      	blt.n	801d2d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d2c6:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d2ca:	e7e7      	b.n	801d29c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 801d2cc:	2000      	movs	r0, #0
 801d2ce:	4770      	bx	lr
 801d2d0:	2001      	movs	r0, #1
 801d2d2:	4770      	bx	lr
 801d2d4:	20009bac 	.word	0x20009bac
 801d2d8:	20009ba4 	.word	0x20009ba4
 801d2dc:	20009ba8 	.word	0x20009ba8
 801d2e0:	20009b8c 	.word	0x20009b8c

0801d2e4 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d2e4:	b508      	push	{r3, lr}
 801d2e6:	4b11      	ldr	r3, [pc, #68]	; (801d32c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801d2e8:	6819      	ldr	r1, [r3, #0]
 801d2ea:	b931      	cbnz	r1, 801d2fa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d2ec:	4b10      	ldr	r3, [pc, #64]	; (801d330 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d2ee:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d2f2:	4a10      	ldr	r2, [pc, #64]	; (801d334 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d2f4:	4810      	ldr	r0, [pc, #64]	; (801d338 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d2f6:	f001 ffe3 	bl	801f2c0 <__assert_func>
 801d2fa:	8803      	ldrh	r3, [r0, #0]
 801d2fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d300:	4293      	cmp	r3, r2
 801d302:	d011      	beq.n	801d328 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801d304:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d308:	4293      	cmp	r3, r2
 801d30a:	d103      	bne.n	801d314 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d30c:	4b0b      	ldr	r3, [pc, #44]	; (801d33c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801d312:	bd08      	pop	{r3, pc}
 801d314:	4a0a      	ldr	r2, [pc, #40]	; (801d340 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d316:	6812      	ldr	r2, [r2, #0]
 801d318:	b112      	cbz	r2, 801d320 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801d31a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d31e:	b920      	cbnz	r0, 801d32a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d320:	2214      	movs	r2, #20
 801d322:	4353      	muls	r3, r2
 801d324:	58c8      	ldr	r0, [r1, r3]
 801d326:	bd08      	pop	{r3, pc}
 801d328:	2000      	movs	r0, #0
 801d32a:	bd08      	pop	{r3, pc}
 801d32c:	20009bac 	.word	0x20009bac
 801d330:	08022400 	.word	0x08022400
 801d334:	080224b8 	.word	0x080224b8
 801d338:	08022382 	.word	0x08022382
 801d33c:	20009b14 	.word	0x20009b14
 801d340:	20009b88 	.word	0x20009b88

0801d344 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 801d344:	8802      	ldrh	r2, [r0, #0]
 801d346:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d34a:	429a      	cmp	r2, r3
 801d34c:	dc19      	bgt.n	801d382 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801d34e:	4b0e      	ldr	r3, [pc, #56]	; (801d388 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 801d350:	881b      	ldrh	r3, [r3, #0]
 801d352:	429a      	cmp	r2, r3
 801d354:	da15      	bge.n	801d382 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 801d356:	4b0d      	ldr	r3, [pc, #52]	; (801d38c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 801d358:	6819      	ldr	r1, [r3, #0]
 801d35a:	2314      	movs	r3, #20
 801d35c:	fb03 1302 	mla	r3, r3, r2, r1
 801d360:	6858      	ldr	r0, [r3, #4]
 801d362:	b178      	cbz	r0, 801d384 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801d364:	490a      	ldr	r1, [pc, #40]	; (801d390 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 801d366:	6809      	ldr	r1, [r1, #0]
 801d368:	b161      	cbz	r1, 801d384 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801d36a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801d36e:	b14a      	cbz	r2, 801d384 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 801d370:	8919      	ldrh	r1, [r3, #8]
 801d372:	8958      	ldrh	r0, [r3, #10]
 801d374:	4348      	muls	r0, r1
 801d376:	0040      	lsls	r0, r0, #1
 801d378:	3003      	adds	r0, #3
 801d37a:	f020 0003 	bic.w	r0, r0, #3
 801d37e:	4410      	add	r0, r2
 801d380:	4770      	bx	lr
 801d382:	2000      	movs	r0, #0
 801d384:	4770      	bx	lr
 801d386:	bf00      	nop
 801d388:	20009ba4 	.word	0x20009ba4
 801d38c:	20009bac 	.word	0x20009bac
 801d390:	20009b88 	.word	0x20009b88

0801d394 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d394:	b508      	push	{r3, lr}
 801d396:	4b1c      	ldr	r3, [pc, #112]	; (801d408 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d398:	6819      	ldr	r1, [r3, #0]
 801d39a:	8803      	ldrh	r3, [r0, #0]
 801d39c:	b1a9      	cbz	r1, 801d3ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801d39e:	4a1b      	ldr	r2, [pc, #108]	; (801d40c <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801d3a0:	8812      	ldrh	r2, [r2, #0]
 801d3a2:	4293      	cmp	r3, r2
 801d3a4:	da05      	bge.n	801d3b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 801d3a6:	2214      	movs	r2, #20
 801d3a8:	fb02 1303 	mla	r3, r2, r3, r1
 801d3ac:	7cd8      	ldrb	r0, [r3, #19]
 801d3ae:	0940      	lsrs	r0, r0, #5
 801d3b0:	bd08      	pop	{r3, pc}
 801d3b2:	4917      	ldr	r1, [pc, #92]	; (801d410 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 801d3b4:	8809      	ldrh	r1, [r1, #0]
 801d3b6:	4411      	add	r1, r2
 801d3b8:	428b      	cmp	r3, r1
 801d3ba:	da06      	bge.n	801d3ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 801d3bc:	1a9b      	subs	r3, r3, r2
 801d3be:	4a15      	ldr	r2, [pc, #84]	; (801d414 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801d3c0:	6812      	ldr	r2, [r2, #0]
 801d3c2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 801d3c6:	7b18      	ldrb	r0, [r3, #12]
 801d3c8:	bd08      	pop	{r3, pc}
 801d3ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d3ce:	4293      	cmp	r3, r2
 801d3d0:	d10c      	bne.n	801d3ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801d3d2:	4b11      	ldr	r3, [pc, #68]	; (801d418 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	6898      	ldr	r0, [r3, #8]
 801d3d8:	6803      	ldr	r3, [r0, #0]
 801d3da:	6a1b      	ldr	r3, [r3, #32]
 801d3dc:	4798      	blx	r3
 801d3de:	2804      	cmp	r0, #4
 801d3e0:	d00e      	beq.n	801d400 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 801d3e2:	d805      	bhi.n	801d3f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801d3e4:	2801      	cmp	r0, #1
 801d3e6:	d00d      	beq.n	801d404 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 801d3e8:	2802      	cmp	r0, #2
 801d3ea:	d007      	beq.n	801d3fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 801d3ec:	2000      	movs	r0, #0
 801d3ee:	bd08      	pop	{r3, pc}
 801d3f0:	2810      	cmp	r0, #16
 801d3f2:	d0fb      	beq.n	801d3ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801d3f4:	2818      	cmp	r0, #24
 801d3f6:	d1f9      	bne.n	801d3ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801d3f8:	2001      	movs	r0, #1
 801d3fa:	bd08      	pop	{r3, pc}
 801d3fc:	2005      	movs	r0, #5
 801d3fe:	bd08      	pop	{r3, pc}
 801d400:	2006      	movs	r0, #6
 801d402:	bd08      	pop	{r3, pc}
 801d404:	2003      	movs	r0, #3
 801d406:	bd08      	pop	{r3, pc}
 801d408:	20009bac 	.word	0x20009bac
 801d40c:	20009ba4 	.word	0x20009ba4
 801d410:	20009ba8 	.word	0x20009ba8
 801d414:	20009b8c 	.word	0x20009b8c
 801d418:	20009b14 	.word	0x20009b14

0801d41c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d41c:	2010      	movs	r0, #16
 801d41e:	4770      	bx	lr

0801d420 <_ZN8touchgfx8LCD16bpp4initEv>:
 801d420:	4770      	bx	lr
	...

0801d424 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 801d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d428:	b086      	sub	sp, #24
 801d42a:	6808      	ldr	r0, [r1, #0]
 801d42c:	6849      	ldr	r1, [r1, #4]
 801d42e:	4617      	mov	r7, r2
 801d430:	ab04      	add	r3, sp, #16
 801d432:	ac04      	add	r4, sp, #16
 801d434:	c303      	stmia	r3!, {r0, r1}
 801d436:	4620      	mov	r0, r4
 801d438:	f7fe fb08 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d43c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d440:	429f      	cmp	r7, r3
 801d442:	d109      	bne.n	801d458 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801d444:	4b33      	ldr	r3, [pc, #204]	; (801d514 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 801d446:	781b      	ldrb	r3, [r3, #0]
 801d448:	b933      	cbnz	r3, 801d458 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 801d44a:	4b33      	ldr	r3, [pc, #204]	; (801d518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 801d44c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801d450:	4a32      	ldr	r2, [pc, #200]	; (801d51c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 801d452:	4833      	ldr	r0, [pc, #204]	; (801d520 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 801d454:	f001 ff34 	bl	801f2c0 <__assert_func>
 801d458:	4e32      	ldr	r6, [pc, #200]	; (801d524 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 801d45a:	6830      	ldr	r0, [r6, #0]
 801d45c:	46b0      	mov	r8, r6
 801d45e:	6803      	ldr	r3, [r0, #0]
 801d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d462:	4798      	blx	r3
 801d464:	f010 0a01 	ands.w	sl, r0, #1
 801d468:	d020      	beq.n	801d4ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 801d46a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d46e:	429f      	cmp	r7, r3
 801d470:	d108      	bne.n	801d484 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 801d472:	6830      	ldr	r0, [r6, #0]
 801d474:	6803      	ldr	r3, [r0, #0]
 801d476:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d47a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d47c:	4798      	blx	r3
 801d47e:	b006      	add	sp, #24
 801d480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d484:	ad06      	add	r5, sp, #24
 801d486:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801d48a:	4628      	mov	r0, r5
 801d48c:	f7ff ff2a 	bl	801d2e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d490:	6836      	ldr	r6, [r6, #0]
 801d492:	4680      	mov	r8, r0
 801d494:	4628      	mov	r0, r5
 801d496:	6833      	ldr	r3, [r6, #0]
 801d498:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801d49a:	f7ff fe25 	bl	801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d49e:	4643      	mov	r3, r8
 801d4a0:	9000      	str	r0, [sp, #0]
 801d4a2:	4630      	mov	r0, r6
 801d4a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 801d4a8:	47b8      	blx	r7
 801d4aa:	e7e8      	b.n	801d47e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801d4ac:	6830      	ldr	r0, [r6, #0]
 801d4ae:	ad06      	add	r5, sp, #24
 801d4b0:	4e1d      	ldr	r6, [pc, #116]	; (801d528 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 801d4b2:	6803      	ldr	r3, [r0, #0]
 801d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4b6:	4798      	blx	r3
 801d4b8:	8834      	ldrh	r4, [r6, #0]
 801d4ba:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 801d4be:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801d4c2:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 801d4c6:	4657      	mov	r7, sl
 801d4c8:	fb02 3404 	mla	r4, r2, r4, r3
 801d4cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	f7ff ff07 	bl	801d2e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d4d6:	4681      	mov	r9, r0
 801d4d8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d4dc:	429f      	cmp	r7, r3
 801d4de:	da14      	bge.n	801d50a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 801d4e0:	f8d8 0000 	ldr.w	r0, [r8]
 801d4e4:	4649      	mov	r1, r9
 801d4e6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d4ea:	3701      	adds	r7, #1
 801d4ec:	6802      	ldr	r2, [r0, #0]
 801d4ee:	005b      	lsls	r3, r3, #1
 801d4f0:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801d4f4:	4622      	mov	r2, r4
 801d4f6:	47d0      	blx	sl
 801d4f8:	8833      	ldrh	r3, [r6, #0]
 801d4fa:	4628      	mov	r0, r5
 801d4fc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d500:	f7ff fdf2 	bl	801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801d504:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 801d508:	e7e6      	b.n	801d4d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 801d50a:	4628      	mov	r0, r5
 801d50c:	f7ff feea 	bl	801d2e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801d510:	e7b5      	b.n	801d47e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 801d512:	bf00      	nop
 801d514:	20009b13 	.word	0x20009b13
 801d518:	08022597 	.word	0x08022597
 801d51c:	080226f4 	.word	0x080226f4
 801d520:	080225d2 	.word	0x080225d2
 801d524:	20009b14 	.word	0x20009b14
 801d528:	20009b0e 	.word	0x20009b0e

0801d52c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d530:	b08d      	sub	sp, #52	; 0x34
 801d532:	4688      	mov	r8, r1
 801d534:	4614      	mov	r4, r2
 801d536:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 801d53a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801d53e:	2f00      	cmp	r7, #0
 801d540:	d047      	beq.n	801d5d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801d542:	6810      	ldr	r0, [r2, #0]
 801d544:	ae08      	add	r6, sp, #32
 801d546:	6851      	ldr	r1, [r2, #4]
 801d548:	c603      	stmia	r6!, {r0, r1}
 801d54a:	6818      	ldr	r0, [r3, #0]
 801d54c:	ae0a      	add	r6, sp, #40	; 0x28
 801d54e:	6859      	ldr	r1, [r3, #4]
 801d550:	c603      	stmia	r6!, {r0, r1}
 801d552:	a808      	add	r0, sp, #32
 801d554:	f7fe fa7a 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d558:	4621      	mov	r1, r4
 801d55a:	a80a      	add	r0, sp, #40	; 0x28
 801d55c:	f7fe fa5e 	bl	801ba1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d560:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d564:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801d568:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801d56c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801d570:	fb14 2103 	smlabb	r1, r4, r3, r2
 801d574:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 801d578:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801d57c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 801d798 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 801d580:	440a      	add	r2, r1
 801d582:	f8d8 0000 	ldr.w	r0, [r8]
 801d586:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801d58a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801d58e:	4413      	add	r3, r2
 801d590:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801d594:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801d598:	9306      	str	r3, [sp, #24]
 801d59a:	6803      	ldr	r3, [r0, #0]
 801d59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d59e:	4798      	blx	r3
 801d5a0:	2fff      	cmp	r7, #255	; 0xff
 801d5a2:	d019      	beq.n	801d5d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801d5a4:	f010 0f04 	tst.w	r0, #4
 801d5a8:	d01a      	beq.n	801d5e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d5aa:	f8d8 0000 	ldr.w	r0, [r8]
 801d5ae:	b2b6      	uxth	r6, r6
 801d5b0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d5b4:	6801      	ldr	r1, [r0, #0]
 801d5b6:	9504      	str	r5, [sp, #16]
 801d5b8:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801d5bc:	9703      	str	r7, [sp, #12]
 801d5be:	9502      	str	r5, [sp, #8]
 801d5c0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 801d5c4:	9600      	str	r6, [sp, #0]
 801d5c6:	9501      	str	r5, [sp, #4]
 801d5c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801d5cc:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 801d5ce:	4621      	mov	r1, r4
 801d5d0:	47a8      	blx	r5
 801d5d2:	b00d      	add	sp, #52	; 0x34
 801d5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5d8:	b915      	cbnz	r5, 801d5e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 801d5da:	f010 0f01 	tst.w	r0, #1
 801d5de:	e7e3      	b.n	801d5a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801d5e0:	f8d8 0000 	ldr.w	r0, [r8]
 801d5e4:	6803      	ldr	r3, [r0, #0]
 801d5e6:	6a1b      	ldr	r3, [r3, #32]
 801d5e8:	4798      	blx	r3
 801d5ea:	4b69      	ldr	r3, [pc, #420]	; (801d790 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801d5ec:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801d5f0:	2fff      	cmp	r7, #255	; 0xff
 801d5f2:	881d      	ldrh	r5, [r3, #0]
 801d5f4:	4699      	mov	r9, r3
 801d5f6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801d5fa:	fb01 2505 	mla	r5, r1, r5, r2
 801d5fe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801d602:	f000 80a6 	beq.w	801d752 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 801d606:	ea44 0205 	orr.w	r2, r4, r5
 801d60a:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 801d60e:	f012 0f03 	tst.w	r2, #3
 801d612:	d154      	bne.n	801d6be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801d614:	07f2      	lsls	r2, r6, #31
 801d616:	d452      	bmi.n	801d6be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801d618:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 801d61c:	f01e 0e01 	ands.w	lr, lr, #1
 801d620:	d14d      	bne.n	801d6be <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 801d622:	2202      	movs	r2, #2
 801d624:	9307      	str	r3, [sp, #28]
 801d626:	fb96 f8f2 	sdiv	r8, r6, r2
 801d62a:	4693      	mov	fp, r2
 801d62c:	f1c8 0800 	rsb	r8, r8, #0
 801d630:	9b06      	ldr	r3, [sp, #24]
 801d632:	459e      	cmp	lr, r3
 801d634:	f280 80a5 	bge.w	801d782 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801d638:	f04f 0900 	mov.w	r9, #0
 801d63c:	45b1      	cmp	r9, r6
 801d63e:	da2e      	bge.n	801d69e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 801d640:	6829      	ldr	r1, [r5, #0]
 801d642:	f109 0902 	add.w	r9, r9, #2
 801d646:	f854 2b04 	ldr.w	r2, [r4], #4
 801d64a:	0a0b      	lsrs	r3, r1, #8
 801d64c:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 801d650:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801d654:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 801d658:	fb00 fa0a 	mul.w	sl, r0, sl
 801d65c:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 801d660:	0949      	lsrs	r1, r1, #5
 801d662:	4343      	muls	r3, r0
 801d664:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 801d668:	fb07 3c0c 	mla	ip, r7, ip, r3
 801d66c:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 801d670:	0952      	lsrs	r2, r2, #5
 801d672:	4341      	muls	r1, r0
 801d674:	fb07 a303 	mla	r3, r7, r3, sl
 801d678:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 801d67c:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 801d680:	0a1b      	lsrs	r3, r3, #8
 801d682:	fb07 1202 	mla	r2, r7, r2, r1
 801d686:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 801d68a:	ea4c 0c03 	orr.w	ip, ip, r3
 801d68e:	4b41      	ldr	r3, [pc, #260]	; (801d794 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 801d690:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 801d694:	ea4c 0202 	orr.w	r2, ip, r2
 801d698:	f845 2b04 	str.w	r2, [r5], #4
 801d69c:	e7ce      	b.n	801d63c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 801d69e:	9b07      	ldr	r3, [sp, #28]
 801d6a0:	f10e 0e01 	add.w	lr, lr, #1
 801d6a4:	881b      	ldrh	r3, [r3, #0]
 801d6a6:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 801d6aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801d6ae:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d6b2:	fb93 f3fb 	sdiv	r3, r3, fp
 801d6b6:	4443      	add	r3, r8
 801d6b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d6bc:	e7b8      	b.n	801d630 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 801d6be:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801d6c2:	f04f 0800 	mov.w	r8, #0
 801d6c6:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801d79c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 801d6ca:	005b      	lsls	r3, r3, #1
 801d6cc:	9307      	str	r3, [sp, #28]
 801d6ce:	9b06      	ldr	r3, [sp, #24]
 801d6d0:	4598      	cmp	r8, r3
 801d6d2:	da56      	bge.n	801d782 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801d6d4:	46aa      	mov	sl, r5
 801d6d6:	f04f 0c00 	mov.w	ip, #0
 801d6da:	45b4      	cmp	ip, r6
 801d6dc:	da29      	bge.n	801d732 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 801d6de:	f8ba 1000 	ldrh.w	r1, [sl]
 801d6e2:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 801d6e6:	f10c 0c01 	add.w	ip, ip, #1
 801d6ea:	ea01 0309 	and.w	r3, r1, r9
 801d6ee:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 801d6f2:	ea02 0e09 	and.w	lr, r2, r9
 801d6f6:	f001 011f 	and.w	r1, r1, #31
 801d6fa:	4343      	muls	r3, r0
 801d6fc:	fb00 fb0b 	mul.w	fp, r0, fp
 801d700:	fb07 3e0e 	mla	lr, r7, lr, r3
 801d704:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801d708:	4341      	muls	r1, r0
 801d70a:	f002 021f 	and.w	r2, r2, #31
 801d70e:	fb07 b303 	mla	r3, r7, r3, fp
 801d712:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 801d716:	fb07 1202 	mla	r2, r7, r2, r1
 801d71a:	121b      	asrs	r3, r3, #8
 801d71c:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801d720:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d724:	ea4e 0e03 	orr.w	lr, lr, r3
 801d728:	ea4e 0e02 	orr.w	lr, lr, r2
 801d72c:	f82a eb02 	strh.w	lr, [sl], #2
 801d730:	e7d3      	b.n	801d6da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801d732:	4b17      	ldr	r3, [pc, #92]	; (801d790 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 801d734:	f108 0801 	add.w	r8, r8, #1
 801d738:	9a07      	ldr	r2, [sp, #28]
 801d73a:	881b      	ldrh	r3, [r3, #0]
 801d73c:	1b9b      	subs	r3, r3, r6
 801d73e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d742:	441d      	add	r5, r3
 801d744:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d748:	1b9b      	subs	r3, r3, r6
 801d74a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d74e:	441c      	add	r4, r3
 801d750:	e7bd      	b.n	801d6ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 801d752:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801d756:	2700      	movs	r7, #0
 801d758:	9b06      	ldr	r3, [sp, #24]
 801d75a:	429f      	cmp	r7, r3
 801d75c:	da11      	bge.n	801d782 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 801d75e:	f8d8 0000 	ldr.w	r0, [r8]
 801d762:	4622      	mov	r2, r4
 801d764:	4629      	mov	r1, r5
 801d766:	3701      	adds	r7, #1
 801d768:	6803      	ldr	r3, [r0, #0]
 801d76a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801d76c:	4653      	mov	r3, sl
 801d76e:	47b0      	blx	r6
 801d770:	f8b9 3000 	ldrh.w	r3, [r9]
 801d774:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801d778:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d77c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d780:	e7ea      	b.n	801d758 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 801d782:	4b05      	ldr	r3, [pc, #20]	; (801d798 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 801d784:	6818      	ldr	r0, [r3, #0]
 801d786:	6803      	ldr	r3, [r0, #0]
 801d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d78a:	4798      	blx	r3
 801d78c:	e721      	b.n	801d5d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801d78e:	bf00      	nop
 801d790:	20009b0e 	.word	0x20009b0e
 801d794:	07e007e0 	.word	0x07e007e0
 801d798:	20009b14 	.word	0x20009b14
 801d79c:	fffff800 	.word	0xfffff800

0801d7a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801d7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a4:	4615      	mov	r5, r2
 801d7a6:	b08b      	sub	sp, #44	; 0x2c
 801d7a8:	4699      	mov	r9, r3
 801d7aa:	b13b      	cbz	r3, 801d7bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801d7ac:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d7b0:	b123      	cbz	r3, 801d7bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801d7b2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	f040 808c 	bne.w	801d8d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 801d7bc:	b00b      	add	sp, #44	; 0x2c
 801d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7c2:	f010 0f08 	tst.w	r0, #8
 801d7c6:	d011      	beq.n	801d7ec <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 801d7c8:	6818      	ldr	r0, [r3, #0]
 801d7ca:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801d7ce:	6801      	ldr	r1, [r0, #0]
 801d7d0:	9401      	str	r4, [sp, #4]
 801d7d2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801d7d6:	f8cd 9008 	str.w	r9, [sp, #8]
 801d7da:	9400      	str	r4, [sp, #0]
 801d7dc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801d7e0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 801d7e2:	4629      	mov	r1, r5
 801d7e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d7e8:	47a0      	blx	r4
 801d7ea:	e7e7      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801d7ec:	6818      	ldr	r0, [r3, #0]
 801d7ee:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801d7f2:	6803      	ldr	r3, [r0, #0]
 801d7f4:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 801d7f8:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801d7fc:	6a1b      	ldr	r3, [r3, #32]
 801d7fe:	4798      	blx	r3
 801d800:	4a3e      	ldr	r2, [pc, #248]	; (801d8fc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 801d802:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d806:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d80a:	8816      	ldrh	r6, [r2, #0]
 801d80c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801d810:	fb06 1303 	mla	r3, r6, r3, r1
 801d814:	4616      	mov	r6, r2
 801d816:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 801d81a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d81e:	d041      	beq.n	801d8a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 801d820:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 801d824:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 801d828:	f005 051f 	and.w	r5, r5, #31
 801d82c:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 801d830:	fb09 fe0e 	mul.w	lr, r9, lr
 801d834:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 801d904 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 801d838:	fb09 f305 	mul.w	r3, r9, r5
 801d83c:	2500      	movs	r5, #0
 801d83e:	fb09 f707 	mul.w	r7, r9, r7
 801d842:	9306      	str	r3, [sp, #24]
 801d844:	004b      	lsls	r3, r1, #1
 801d846:	9207      	str	r2, [sp, #28]
 801d848:	9305      	str	r3, [sp, #20]
 801d84a:	4545      	cmp	r5, r8
 801d84c:	da3c      	bge.n	801d8c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801d84e:	4681      	mov	r9, r0
 801d850:	f04f 0c00 	mov.w	ip, #0
 801d854:	45a4      	cmp	ip, r4
 801d856:	da1c      	bge.n	801d892 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 801d858:	f8b9 2000 	ldrh.w	r2, [r9]
 801d85c:	f10c 0c01 	add.w	ip, ip, #1
 801d860:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801d864:	ea02 010b 	and.w	r1, r2, fp
 801d868:	fb06 7303 	mla	r3, r6, r3, r7
 801d86c:	fb06 e101 	mla	r1, r6, r1, lr
 801d870:	0a1b      	lsrs	r3, r3, #8
 801d872:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 801d876:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d87a:	430b      	orrs	r3, r1
 801d87c:	f002 011f 	and.w	r1, r2, #31
 801d880:	9a06      	ldr	r2, [sp, #24]
 801d882:	fb06 2101 	mla	r1, r6, r1, r2
 801d886:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801d88a:	430b      	orrs	r3, r1
 801d88c:	f829 3b02 	strh.w	r3, [r9], #2
 801d890:	e7e0      	b.n	801d854 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 801d892:	9b07      	ldr	r3, [sp, #28]
 801d894:	3501      	adds	r5, #1
 801d896:	9a05      	ldr	r2, [sp, #20]
 801d898:	881b      	ldrh	r3, [r3, #0]
 801d89a:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801d89e:	4413      	add	r3, r2
 801d8a0:	4418      	add	r0, r3
 801d8a2:	e7d2      	b.n	801d84a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 801d8a4:	0049      	lsls	r1, r1, #1
 801d8a6:	2200      	movs	r2, #0
 801d8a8:	4542      	cmp	r2, r8
 801d8aa:	da0d      	bge.n	801d8c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 801d8ac:	2300      	movs	r3, #0
 801d8ae:	42a3      	cmp	r3, r4
 801d8b0:	da03      	bge.n	801d8ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 801d8b2:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801d8b6:	3301      	adds	r3, #1
 801d8b8:	e7f9      	b.n	801d8ae <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 801d8ba:	8833      	ldrh	r3, [r6, #0]
 801d8bc:	3201      	adds	r2, #1
 801d8be:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 801d8c2:	440b      	add	r3, r1
 801d8c4:	4418      	add	r0, r3
 801d8c6:	e7ef      	b.n	801d8a8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 801d8c8:	4b0d      	ldr	r3, [pc, #52]	; (801d900 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801d8ca:	6818      	ldr	r0, [r3, #0]
 801d8cc:	6803      	ldr	r3, [r0, #0]
 801d8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d8d0:	4798      	blx	r3
 801d8d2:	e773      	b.n	801d7bc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801d8d4:	6808      	ldr	r0, [r1, #0]
 801d8d6:	ab08      	add	r3, sp, #32
 801d8d8:	6849      	ldr	r1, [r1, #4]
 801d8da:	4c09      	ldr	r4, [pc, #36]	; (801d900 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 801d8dc:	c303      	stmia	r3!, {r0, r1}
 801d8de:	a808      	add	r0, sp, #32
 801d8e0:	f7fe f8b4 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d8e4:	6820      	ldr	r0, [r4, #0]
 801d8e6:	6803      	ldr	r3, [r0, #0]
 801d8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8ea:	4798      	blx	r3
 801d8ec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d8f0:	4623      	mov	r3, r4
 801d8f2:	f47f af66 	bne.w	801d7c2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801d8f6:	f010 0f02 	tst.w	r0, #2
 801d8fa:	e764      	b.n	801d7c6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801d8fc:	20009b0e 	.word	0x20009b0e
 801d900:	20009b14 	.word	0x20009b14
 801d904:	fffff800 	.word	0xfffff800

0801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 801d908:	ee07 0a90 	vmov	s15, r0
 801d90c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801d910:	ee71 1ac1 	vsub.f32	s3, s3, s2
 801d914:	eddf 6a08 	vldr	s13, [pc, #32]	; 801d938 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 801d918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d91c:	eea0 0a82 	vfma.f32	s0, s1, s4
 801d920:	eea1 1a82 	vfma.f32	s2, s3, s4
 801d924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d928:	ee31 1a40 	vsub.f32	s2, s2, s0
 801d92c:	eea2 0a81 	vfma.f32	s0, s5, s2
 801d930:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d934:	4770      	bx	lr
 801d936:	bf00      	nop
 801d938:	437f0000 	.word	0x437f0000

0801d93c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d940:	ed2d 8b0e 	vpush	{d8-d14}
 801d944:	b095      	sub	sp, #84	; 0x54
 801d946:	461e      	mov	r6, r3
 801d948:	2700      	movs	r7, #0
 801d94a:	4690      	mov	r8, r2
 801d94c:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 801d950:	a812      	add	r0, sp, #72	; 0x48
 801d952:	468a      	mov	sl, r1
 801d954:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 801d956:	9311      	str	r3, [sp, #68]	; 0x44
 801d958:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d95c:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 801d960:	9301      	str	r3, [sp, #4]
 801d962:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d964:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 801d968:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d96c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d970:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 801d974:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 801d978:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 801d97c:	f7fe f866 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d980:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d982:	6835      	ldr	r5, [r6, #0]
 801d984:	6818      	ldr	r0, [r3, #0]
 801d986:	f9b4 3000 	ldrsh.w	r3, [r4]
 801d98a:	f9b9 e000 	ldrsh.w	lr, [r9]
 801d98e:	1b40      	subs	r0, r0, r5
 801d990:	18e9      	adds	r1, r5, r3
 801d992:	ebae 0c01 	sub.w	ip, lr, r1
 801d996:	4560      	cmp	r0, ip
 801d998:	f340 86a2 	ble.w	801e6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d99c:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801d9a0:	44f1      	add	r9, lr
 801d9a2:	fa0f f989 	sxth.w	r9, r9
 801d9a6:	4549      	cmp	r1, r9
 801d9a8:	f300 869a 	bgt.w	801e6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801d9ac:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 801d9b0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801d9b4:	6972      	ldr	r2, [r6, #20]
 801d9b6:	ed96 6a07 	vldr	s12, [r6, #28]
 801d9ba:	4422      	add	r2, r4
 801d9bc:	f8da 4004 	ldr.w	r4, [sl, #4]
 801d9c0:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 801d9c4:	fb04 5402 	mla	r4, r4, r2, r5
 801d9c8:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 801d9cc:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 801d9d0:	4282      	cmp	r2, r0
 801d9d2:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 801d9d6:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 801d9da:	441c      	add	r4, r3
 801d9dc:	bfa8      	it	ge
 801d9de:	4602      	movge	r2, r0
 801d9e0:	f8da b000 	ldr.w	fp, [sl]
 801d9e4:	458e      	cmp	lr, r1
 801d9e6:	ee06 2a90 	vmov	s13, r2
 801d9ea:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 801d9ee:	9208      	str	r2, [sp, #32]
 801d9f0:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 801d9f4:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 801d9f8:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801d9fc:	ee69 ba2b 	vmul.f32	s23, s18, s23
 801da00:	ee29 9a26 	vmul.f32	s18, s18, s13
 801da04:	eecc 6a06 	vdiv.f32	s13, s24, s12
 801da08:	ee37 aaab 	vadd.f32	s20, s15, s23
 801da0c:	ee77 aa09 	vadd.f32	s21, s14, s18
 801da10:	ee76 9a0b 	vadd.f32	s19, s12, s22
 801da14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da18:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da1c:	dc01      	bgt.n	801da22 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 801da1e:	970a      	str	r7, [sp, #40]	; 0x28
 801da20:	e029      	b.n	801da76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801da22:	9a08      	ldr	r2, [sp, #32]
 801da24:	fb9c f1f2 	sdiv	r1, ip, r2
 801da28:	ee06 1a90 	vmov	s13, r1
 801da2c:	434a      	muls	r2, r1
 801da2e:	2900      	cmp	r1, #0
 801da30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801da34:	ebac 0602 	sub.w	r6, ip, r2
 801da38:	960a      	str	r6, [sp, #40]	; 0x28
 801da3a:	eeeb 9a26 	vfma.f32	s19, s22, s13
 801da3e:	eeab aaa6 	vfma.f32	s20, s23, s13
 801da42:	eee9 aa26 	vfma.f32	s21, s18, s13
 801da46:	dd12      	ble.n	801da6e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 801da48:	ee79 7acb 	vsub.f32	s15, s19, s22
 801da4c:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 801da50:	eef5 7a40 	vcmp.f32	s15, #0.0
 801da54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da58:	bf14      	ite	ne
 801da5a:	eecc 6a27 	vdivne.f32	s13, s24, s15
 801da5e:	eef0 6a4c 	vmoveq.f32	s13, s24
 801da62:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 801da66:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da6e:	1a80      	subs	r0, r0, r2
 801da70:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801da74:	4415      	add	r5, r2
 801da76:	18ea      	adds	r2, r5, r3
 801da78:	4402      	add	r2, r0
 801da7a:	4591      	cmp	r9, r2
 801da7c:	bfbc      	itt	lt
 801da7e:	eba9 0003 	sublt.w	r0, r9, r3
 801da82:	1b40      	sublt	r0, r0, r5
 801da84:	2800      	cmp	r0, #0
 801da86:	f340 862b 	ble.w	801e6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801da8a:	9b08      	ldr	r3, [sp, #32]
 801da8c:	9a08      	ldr	r2, [sp, #32]
 801da8e:	fb90 f3f3 	sdiv	r3, r0, r3
 801da92:	9309      	str	r3, [sp, #36]	; 0x24
 801da94:	fb02 0313 	mls	r3, r2, r3, r0
 801da98:	930c      	str	r3, [sp, #48]	; 0x30
 801da9a:	b91b      	cbnz	r3, 801daa4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 801da9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da9e:	920c      	str	r2, [sp, #48]	; 0x30
 801daa0:	3b01      	subs	r3, #1
 801daa2:	9309      	str	r3, [sp, #36]	; 0x24
 801daa4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801daa6:	eddf ca40 	vldr	s25, [pc, #256]	; 801dba8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	9304      	str	r3, [sp, #16]
 801daae:	9b01      	ldr	r3, [sp, #4]
 801dab0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801dab4:	9305      	str	r3, [sp, #20]
 801dab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dab8:	2b00      	cmp	r3, #0
 801daba:	dc03      	bgt.n	801dac4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801dabc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	f340 860e 	ble.w	801e6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801dac4:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 801dac8:	9b08      	ldr	r3, [sp, #32]
 801daca:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dacc:	eef0 6a67 	vmov.f32	s13, s15
 801dad0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dad4:	ee16 ba90 	vmov	fp, s13
 801dad8:	eef0 6a47 	vmov.f32	s13, s14
 801dadc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dae0:	ee6a 8a08 	vmul.f32	s17, s20, s16
 801dae4:	ee2a 8a88 	vmul.f32	s16, s21, s16
 801dae8:	ee16 5a90 	vmov	r5, s13
 801daec:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801daf0:	ee38 7a47 	vsub.f32	s14, s16, s14
 801daf4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801daf8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801dafc:	ee17 2a90 	vmov	r2, s15
 801db00:	fb92 f3f3 	sdiv	r3, r2, r3
 801db04:	ee17 2a10 	vmov	r2, s14
 801db08:	9306      	str	r3, [sp, #24]
 801db0a:	9b08      	ldr	r3, [sp, #32]
 801db0c:	fb92 f3f3 	sdiv	r3, r2, r3
 801db10:	9a08      	ldr	r2, [sp, #32]
 801db12:	9307      	str	r3, [sp, #28]
 801db14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db16:	2900      	cmp	r1, #0
 801db18:	bfc8      	it	gt
 801db1a:	4613      	movgt	r3, r2
 801db1c:	9302      	str	r3, [sp, #8]
 801db1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db20:	2b00      	cmp	r3, #0
 801db22:	dd0d      	ble.n	801db40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 801db24:	9a06      	ldr	r2, [sp, #24]
 801db26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801db2a:	fb02 bb03 	mla	fp, r2, r3, fp
 801db2e:	9a07      	ldr	r2, [sp, #28]
 801db30:	fb02 5503 	mla	r5, r2, r3, r5
 801db34:	9b02      	ldr	r3, [sp, #8]
 801db36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801db38:	1a9b      	subs	r3, r3, r2
 801db3a:	9302      	str	r3, [sp, #8]
 801db3c:	2300      	movs	r3, #0
 801db3e:	930a      	str	r3, [sp, #40]	; 0x28
 801db40:	ea5f 432b 	movs.w	r3, fp, asr #16
 801db44:	d42e      	bmi.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db46:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 801db4a:	4283      	cmp	r3, r0
 801db4c:	da2a      	bge.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db4e:	142b      	asrs	r3, r5, #16
 801db50:	d428      	bmi.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db52:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801db56:	428b      	cmp	r3, r1
 801db58:	da24      	bge.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db5a:	9b02      	ldr	r3, [sp, #8]
 801db5c:	9a06      	ldr	r2, [sp, #24]
 801db5e:	3b01      	subs	r3, #1
 801db60:	fb03 b202 	mla	r2, r3, r2, fp
 801db64:	1412      	asrs	r2, r2, #16
 801db66:	d41d      	bmi.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db68:	4282      	cmp	r2, r0
 801db6a:	da1b      	bge.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db6c:	9a07      	ldr	r2, [sp, #28]
 801db6e:	fb03 5302 	mla	r3, r3, r2, r5
 801db72:	141b      	asrs	r3, r3, #16
 801db74:	d416      	bmi.n	801dba4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 801db76:	428b      	cmp	r3, r1
 801db78:	bfb4      	ite	lt
 801db7a:	2300      	movlt	r3, #0
 801db7c:	2301      	movge	r3, #1
 801db7e:	9303      	str	r3, [sp, #12]
 801db80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801db82:	2b0b      	cmp	r3, #11
 801db84:	f200 82d7 	bhi.w	801e136 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 801db88:	e8df f013 	tbh	[pc, r3, lsl #1]
 801db8c:	03430531 	.word	0x03430531
 801db90:	02ca02e8 	.word	0x02ca02e8
 801db94:	02d502d5 	.word	0x02d502d5
 801db98:	02d502d5 	.word	0x02d502d5
 801db9c:	01c5026b 	.word	0x01c5026b
 801dba0:	00100160 	.word	0x00100160
 801dba4:	2301      	movs	r3, #1
 801dba6:	e7ea      	b.n	801db7e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 801dba8:	3d800000 	.word	0x3d800000
 801dbac:	f04f 0a00 	mov.w	sl, #0
 801dbb0:	9b02      	ldr	r3, [sp, #8]
 801dbb2:	4553      	cmp	r3, sl
 801dbb4:	f340 82bb 	ble.w	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801dbb8:	9a03      	ldr	r2, [sp, #12]
 801dbba:	ea4f 412b 	mov.w	r1, fp, asr #16
 801dbbe:	142b      	asrs	r3, r5, #16
 801dbc0:	b17a      	cbz	r2, 801dbe2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801dbc2:	2900      	cmp	r1, #0
 801dbc4:	f2c0 813b 	blt.w	801de3e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801dbc8:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801dbcc:	4291      	cmp	r1, r2
 801dbce:	f280 8136 	bge.w	801de3e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801dbd2:	2b00      	cmp	r3, #0
 801dbd4:	f2c0 8133 	blt.w	801de3e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801dbd8:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801dbdc:	4293      	cmp	r3, r2
 801dbde:	f280 812e 	bge.w	801de3e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801dbe2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801dbe6:	9804      	ldr	r0, [sp, #16]
 801dbe8:	fb03 1102 	mla	r1, r3, r2, r1
 801dbec:	9b04      	ldr	r3, [sp, #16]
 801dbee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dbf2:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 801dbf6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dbfa:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 801dbfe:	6859      	ldr	r1, [r3, #4]
 801dc00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dc04:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 801dc08:	685a      	ldr	r2, [r3, #4]
 801dc0a:	0e3b      	lsrs	r3, r7, #24
 801dc0c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dc10:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801dc14:	435e      	muls	r6, r3
 801dc16:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 801dc1a:	435f      	muls	r7, r3
 801dc1c:	ee06 ea90 	vmov	s13, lr
 801dc20:	0a36      	lsrs	r6, r6, #8
 801dc22:	ee07 3a90 	vmov	s15, r3
 801dc26:	0a3f      	lsrs	r7, r7, #8
 801dc28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dc2c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dc30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801dc34:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801dc38:	433e      	orrs	r6, r7
 801dc3a:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801dc3e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dc42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801dc46:	fb0e f707 	mul.w	r7, lr, r7
 801dc4a:	fb0e f101 	mul.w	r1, lr, r1
 801dc4e:	0a3f      	lsrs	r7, r7, #8
 801dc50:	960b      	str	r6, [sp, #44]	; 0x2c
 801dc52:	0a09      	lsrs	r1, r1, #8
 801dc54:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801dc58:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dc5c:	430f      	orrs	r7, r1
 801dc5e:	0e01      	lsrs	r1, r0, #24
 801dc60:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc64:	fb01 f808 	mul.w	r8, r1, r8
 801dc68:	ee07 1a10 	vmov	s14, r1
 801dc6c:	4348      	muls	r0, r1
 801dc6e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801dc72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801dc76:	0a00      	lsrs	r0, r0, #8
 801dc78:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 801dc7c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dc80:	ea48 0800 	orr.w	r8, r8, r0
 801dc84:	0e10      	lsrs	r0, r2, #24
 801dc86:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dc8a:	fb00 f909 	mul.w	r9, r0, r9
 801dc8e:	4342      	muls	r2, r0
 801dc90:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc94:	0a12      	lsrs	r2, r2, #8
 801dc96:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 801dc9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dc9e:	ea49 0902 	orr.w	r9, r9, r2
 801dca2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dca6:	ee0d 2a10 	vmov	s26, r2
 801dcaa:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801dcae:	ea4f 4319 	mov.w	r3, r9, lsr #16
 801dcb2:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801dcb6:	ee0d 2a90 	vmov	s27, r2
 801dcba:	ee01 3a90 	vmov	s3, r3
 801dcbe:	ea4f 4318 	mov.w	r3, r8, lsr #16
 801dcc2:	eef8 daed 	vcvt.f32.s32	s27, s27
 801dcc6:	ee2d da2c 	vmul.f32	s26, s26, s25
 801dcca:	ee01 3a10 	vmov	s2, r3
 801dcce:	0c3b      	lsrs	r3, r7, #16
 801dcd0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dcd4:	ee6d daac 	vmul.f32	s27, s27, s25
 801dcd8:	eeed 7a26 	vfma.f32	s15, s26, s13
 801dcdc:	ee06 0a90 	vmov	s13, r0
 801dce0:	ee00 3a90 	vmov	s1, r3
 801dce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dce6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dcea:	0c1b      	lsrs	r3, r3, #16
 801dcec:	eef0 2a6d 	vmov.f32	s5, s27
 801dcf0:	eeb0 2a4d 	vmov.f32	s4, s26
 801dcf4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801dcf8:	ee00 3a10 	vmov	s0, r3
 801dcfc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dd00:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dd04:	eead 7a26 	vfma.f32	s14, s26, s13
 801dd08:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dd0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dd10:	eeed 7a87 	vfma.f32	s15, s27, s14
 801dd14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd18:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801dd1c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801dd20:	4630      	mov	r0, r6
 801dd22:	f7ff fdf1 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801dd26:	f3c9 2307 	ubfx	r3, r9, #8, #8
 801dd2a:	eeb0 ea40 	vmov.f32	s28, s0
 801dd2e:	4630      	mov	r0, r6
 801dd30:	ee01 3a90 	vmov	s3, r3
 801dd34:	f3c8 2307 	ubfx	r3, r8, #8, #8
 801dd38:	eef0 2a6d 	vmov.f32	s5, s27
 801dd3c:	ee01 3a10 	vmov	s2, r3
 801dd40:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801dd44:	eeb0 2a4d 	vmov.f32	s4, s26
 801dd48:	ee00 3a90 	vmov	s1, r3
 801dd4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd4e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd56:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dd5a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dd5e:	ee00 3a10 	vmov	s0, r3
 801dd62:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dd66:	f7ff fdcf 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801dd6a:	eef0 ea40 	vmov.f32	s29, s0
 801dd6e:	fa5f f389 	uxtb.w	r3, r9
 801dd72:	4630      	mov	r0, r6
 801dd74:	eef0 2a6d 	vmov.f32	s5, s27
 801dd78:	ee01 3a90 	vmov	s3, r3
 801dd7c:	fa5f f388 	uxtb.w	r3, r8
 801dd80:	eeb0 2a4d 	vmov.f32	s4, s26
 801dd84:	ee01 3a10 	vmov	s2, r3
 801dd88:	b2fb      	uxtb	r3, r7
 801dd8a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801dd8e:	ee00 3a90 	vmov	s1, r3
 801dd92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801dd96:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801dd9a:	ee00 3a10 	vmov	s0, r3
 801dd9e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801dda2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801dda6:	f7ff fdaf 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801ddaa:	2e00      	cmp	r6, #0
 801ddac:	d047      	beq.n	801de3e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 801ddae:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801ddb2:	2eff      	cmp	r6, #255	; 0xff
 801ddb4:	ee17 2a90 	vmov	r2, s15
 801ddb8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ddbc:	f3c2 0285 	ubfx	r2, r2, #2, #6
 801ddc0:	ee17 3a90 	vmov	r3, s15
 801ddc4:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801ddc8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ddcc:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 801ddd0:	ee17 3a90 	vmov	r3, s15
 801ddd4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ddd8:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 801dddc:	d102      	bne.n	801dde4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 801ddde:	9a01      	ldr	r2, [sp, #4]
 801dde0:	2aff      	cmp	r2, #255	; 0xff
 801dde2:	d02a      	beq.n	801de3a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 801dde4:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 801dde8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ddec:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 801ddf0:	fb12 fe06 	smulbb	lr, r2, r6
 801ddf4:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801ddf8:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801ddfc:	f000 001f 	and.w	r0, r0, #31
 801de00:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 801de04:	f022 0207 	bic.w	r2, r2, #7
 801de08:	f026 0607 	bic.w	r6, r6, #7
 801de0c:	434a      	muls	r2, r1
 801de0e:	434f      	muls	r7, r1
 801de10:	fb0e 2606 	mla	r6, lr, r6, r2
 801de14:	4ad0      	ldr	r2, [pc, #832]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801de16:	4348      	muls	r0, r1
 801de18:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 801de1c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801de20:	f003 031f 	and.w	r3, r3, #31
 801de24:	fb0e 7202 	mla	r2, lr, r2, r7
 801de28:	fb0e 0303 	mla	r3, lr, r3, r0
 801de2c:	0c12      	lsrs	r2, r2, #16
 801de2e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801de32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de36:	4316      	orrs	r6, r2
 801de38:	4333      	orrs	r3, r6
 801de3a:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 801de3e:	9b06      	ldr	r3, [sp, #24]
 801de40:	f10a 0a01 	add.w	sl, sl, #1
 801de44:	449b      	add	fp, r3
 801de46:	9b07      	ldr	r3, [sp, #28]
 801de48:	441d      	add	r5, r3
 801de4a:	e6b1      	b.n	801dbb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 801de4c:	2000      	movs	r0, #0
 801de4e:	9b02      	ldr	r3, [sp, #8]
 801de50:	4283      	cmp	r3, r0
 801de52:	f340 816c 	ble.w	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801de56:	9b03      	ldr	r3, [sp, #12]
 801de58:	ea4f 422b 	mov.w	r2, fp, asr #16
 801de5c:	1429      	asrs	r1, r5, #16
 801de5e:	b15b      	cbz	r3, 801de78 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 801de60:	2a00      	cmp	r2, #0
 801de62:	db52      	blt.n	801df0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801de64:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801de68:	429a      	cmp	r2, r3
 801de6a:	da4e      	bge.n	801df0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801de6c:	2900      	cmp	r1, #0
 801de6e:	db4c      	blt.n	801df0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801de70:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801de74:	4299      	cmp	r1, r3
 801de76:	da48      	bge.n	801df0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801de78:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801de7c:	fb01 2303 	mla	r3, r1, r3, r2
 801de80:	9a04      	ldr	r2, [sp, #16]
 801de82:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801de86:	0e31      	lsrs	r1, r6, #24
 801de88:	d03f      	beq.n	801df0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 801de8a:	0972      	lsrs	r2, r6, #5
 801de8c:	4bb2      	ldr	r3, [pc, #712]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801de8e:	29ff      	cmp	r1, #255	; 0xff
 801de90:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 801de94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de98:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801de9c:	ea43 0302 	orr.w	r3, r3, r2
 801dea0:	ea43 0306 	orr.w	r3, r3, r6
 801dea4:	b29b      	uxth	r3, r3
 801dea6:	d102      	bne.n	801deae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 801dea8:	9a01      	ldr	r2, [sp, #4]
 801deaa:	2aff      	cmp	r2, #255	; 0xff
 801deac:	d02b      	beq.n	801df06 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 801deae:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801deb2:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801deb6:	9a01      	ldr	r2, [sp, #4]
 801deb8:	f02e 0e07 	bic.w	lr, lr, #7
 801debc:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801dec0:	4351      	muls	r1, r2
 801dec2:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801dec6:	f007 071f 	and.w	r7, r7, #31
 801deca:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801dece:	f022 0207 	bic.w	r2, r2, #7
 801ded2:	4372      	muls	r2, r6
 801ded4:	fb06 fc0c 	mul.w	ip, r6, ip
 801ded8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801dedc:	4a9e      	ldr	r2, [pc, #632]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801dede:	4377      	muls	r7, r6
 801dee0:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801dee4:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801dee8:	f003 031f 	and.w	r3, r3, #31
 801deec:	fb01 c202 	mla	r2, r1, r2, ip
 801def0:	fb01 7303 	mla	r3, r1, r3, r7
 801def4:	0c12      	lsrs	r2, r2, #16
 801def6:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801defa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801defe:	ea4e 0e02 	orr.w	lr, lr, r2
 801df02:	ea4e 0303 	orr.w	r3, lr, r3
 801df06:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801df0a:	9b06      	ldr	r3, [sp, #24]
 801df0c:	3001      	adds	r0, #1
 801df0e:	449b      	add	fp, r3
 801df10:	9b07      	ldr	r3, [sp, #28]
 801df12:	441d      	add	r5, r3
 801df14:	e79b      	b.n	801de4e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 801df16:	f04f 0e00 	mov.w	lr, #0
 801df1a:	9b02      	ldr	r3, [sp, #8]
 801df1c:	4573      	cmp	r3, lr
 801df1e:	f340 8106 	ble.w	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801df22:	9903      	ldr	r1, [sp, #12]
 801df24:	ea4f 422b 	mov.w	r2, fp, asr #16
 801df28:	142b      	asrs	r3, r5, #16
 801df2a:	b179      	cbz	r1, 801df4c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 801df2c:	2a00      	cmp	r2, #0
 801df2e:	f2c0 8091 	blt.w	801e054 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801df32:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801df36:	428a      	cmp	r2, r1
 801df38:	f280 808c 	bge.w	801e054 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	f2c0 8089 	blt.w	801e054 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801df42:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801df46:	428b      	cmp	r3, r1
 801df48:	f280 8084 	bge.w	801e054 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 801df4c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801df50:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 801df54:	9804      	ldr	r0, [sp, #16]
 801df56:	fb03 2301 	mla	r3, r3, r1, r2
 801df5a:	9a04      	ldr	r2, [sp, #16]
 801df5c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801df60:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 801df64:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801df68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801df70:	f3c5 2107 	ubfx	r1, r5, #8, #8
 801df74:	6850      	ldr	r0, [r2, #4]
 801df76:	fb01 f70a 	mul.w	r7, r1, sl
 801df7a:	0a3f      	lsrs	r7, r7, #8
 801df7c:	ebaa 0607 	sub.w	r6, sl, r7
 801df80:	eba1 0907 	sub.w	r9, r1, r7
 801df84:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 801df88:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801df8c:	fb01 f10a 	mul.w	r1, r1, sl
 801df90:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 801df94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801df98:	0a0a      	lsrs	r2, r1, #8
 801df9a:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 801df9e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801dfa2:	4371      	muls	r1, r6
 801dfa4:	fb06 f808 	mul.w	r8, r6, r8
 801dfa8:	fb02 110a 	mla	r1, r2, sl, r1
 801dfac:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 801dfb0:	fb02 8c0c 	mla	ip, r2, ip, r8
 801dfb4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dfb8:	fb07 110a 	mla	r1, r7, sl, r1
 801dfbc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801dfc0:	fb07 cc00 	mla	ip, r7, r0, ip
 801dfc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfc8:	fb09 110a 	mla	r1, r9, sl, r1
 801dfcc:	fb09 cc03 	mla	ip, r9, r3, ip
 801dfd0:	4b61      	ldr	r3, [pc, #388]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801dfd2:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 801dfd6:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 801dfda:	ea41 0a0a 	orr.w	sl, r1, sl
 801dfde:	ea4f 315a 	mov.w	r1, sl, lsr #13
 801dfe2:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 801dfe6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801dfea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801dfee:	4319      	orrs	r1, r3
 801dff0:	9b01      	ldr	r3, [sp, #4]
 801dff2:	2bff      	cmp	r3, #255	; 0xff
 801dff4:	ea41 010a 	orr.w	r1, r1, sl
 801dff8:	d02a      	beq.n	801e050 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 801dffa:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 801dffe:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801e002:	9e05      	ldr	r6, [sp, #20]
 801e004:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 801e008:	f023 0307 	bic.w	r3, r3, #7
 801e00c:	9f05      	ldr	r7, [sp, #20]
 801e00e:	f020 0007 	bic.w	r0, r0, #7
 801e012:	4370      	muls	r0, r6
 801e014:	9e01      	ldr	r6, [sp, #4]
 801e016:	fb06 0303 	mla	r3, r6, r3, r0
 801e01a:	484f      	ldr	r0, [pc, #316]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801e01c:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 801e020:	f002 021f 	and.w	r2, r2, #31
 801e024:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 801e028:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 801e02c:	437e      	muls	r6, r7
 801e02e:	9f01      	ldr	r7, [sp, #4]
 801e030:	f001 011f 	and.w	r1, r1, #31
 801e034:	fb07 6000 	mla	r0, r7, r0, r6
 801e038:	0a00      	lsrs	r0, r0, #8
 801e03a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e03e:	4303      	orrs	r3, r0
 801e040:	9805      	ldr	r0, [sp, #20]
 801e042:	4342      	muls	r2, r0
 801e044:	b29b      	uxth	r3, r3
 801e046:	fb07 2101 	mla	r1, r7, r1, r2
 801e04a:	f3c1 2104 	ubfx	r1, r1, #8, #5
 801e04e:	4319      	orrs	r1, r3
 801e050:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 801e054:	9b06      	ldr	r3, [sp, #24]
 801e056:	f10e 0e01 	add.w	lr, lr, #1
 801e05a:	449b      	add	fp, r3
 801e05c:	9b07      	ldr	r3, [sp, #28]
 801e05e:	441d      	add	r5, r3
 801e060:	e75b      	b.n	801df1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 801e062:	2600      	movs	r6, #0
 801e064:	9b02      	ldr	r3, [sp, #8]
 801e066:	42b3      	cmp	r3, r6
 801e068:	dd61      	ble.n	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e06a:	9b03      	ldr	r3, [sp, #12]
 801e06c:	ea4f 422b 	mov.w	r2, fp, asr #16
 801e070:	1429      	asrs	r1, r5, #16
 801e072:	b15b      	cbz	r3, 801e08c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 801e074:	2a00      	cmp	r2, #0
 801e076:	db4d      	blt.n	801e114 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801e078:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e07c:	429a      	cmp	r2, r3
 801e07e:	da49      	bge.n	801e114 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801e080:	2900      	cmp	r1, #0
 801e082:	db47      	blt.n	801e114 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801e084:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e088:	4299      	cmp	r1, r3
 801e08a:	da43      	bge.n	801e114 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 801e08c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e090:	fb01 2303 	mla	r3, r1, r3, r2
 801e094:	9a04      	ldr	r2, [sp, #16]
 801e096:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801e09a:	4b2f      	ldr	r3, [pc, #188]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801e09c:	094a      	lsrs	r2, r1, #5
 801e09e:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 801e0a2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801e0a6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e0aa:	4313      	orrs	r3, r2
 801e0ac:	9a01      	ldr	r2, [sp, #4]
 801e0ae:	430b      	orrs	r3, r1
 801e0b0:	2aff      	cmp	r2, #255	; 0xff
 801e0b2:	b29b      	uxth	r3, r3
 801e0b4:	d02c      	beq.n	801e110 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 801e0b6:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 801e0ba:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801e0be:	9f05      	ldr	r7, [sp, #20]
 801e0c0:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 801e0c4:	f022 0207 	bic.w	r2, r2, #7
 801e0c8:	f020 0007 	bic.w	r0, r0, #7
 801e0cc:	4378      	muls	r0, r7
 801e0ce:	9f01      	ldr	r7, [sp, #4]
 801e0d0:	fb07 0202 	mla	r2, r7, r2, r0
 801e0d4:	4820      	ldr	r0, [pc, #128]	; (801e158 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 801e0d6:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801e0da:	f001 011f 	and.w	r1, r1, #31
 801e0de:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 801e0e2:	9a05      	ldr	r2, [sp, #20]
 801e0e4:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 801e0e8:	f003 031f 	and.w	r3, r3, #31
 801e0ec:	4357      	muls	r7, r2
 801e0ee:	9a01      	ldr	r2, [sp, #4]
 801e0f0:	fb02 7000 	mla	r0, r2, r0, r7
 801e0f4:	0a00      	lsrs	r0, r0, #8
 801e0f6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e0fa:	ea4e 0200 	orr.w	r2, lr, r0
 801e0fe:	9805      	ldr	r0, [sp, #20]
 801e100:	4341      	muls	r1, r0
 801e102:	9801      	ldr	r0, [sp, #4]
 801e104:	b292      	uxth	r2, r2
 801e106:	fb00 1303 	mla	r3, r0, r3, r1
 801e10a:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801e10e:	4313      	orrs	r3, r2
 801e110:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 801e114:	9b06      	ldr	r3, [sp, #24]
 801e116:	3601      	adds	r6, #1
 801e118:	449b      	add	fp, r3
 801e11a:	9b07      	ldr	r3, [sp, #28]
 801e11c:	441d      	add	r5, r3
 801e11e:	e7a1      	b.n	801e064 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 801e120:	2300      	movs	r3, #0
 801e122:	930b      	str	r3, [sp, #44]	; 0x2c
 801e124:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e126:	9b02      	ldr	r3, [sp, #8]
 801e128:	4293      	cmp	r3, r2
 801e12a:	f300 811b 	bgt.w	801e364 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 801e12e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e132:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e138:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e13c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e140:	2b00      	cmp	r3, #0
 801e142:	ee7a aa89 	vadd.f32	s21, s21, s18
 801e146:	f340 82cb 	ble.w	801e6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 801e14a:	3b01      	subs	r3, #1
 801e14c:	eeb0 7a48 	vmov.f32	s14, s16
 801e150:	eef0 7a68 	vmov.f32	s15, s17
 801e154:	9309      	str	r3, [sp, #36]	; 0x24
 801e156:	e4ae      	b.n	801dab6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 801e158:	fffff800 	.word	0xfffff800
 801e15c:	2000      	movs	r0, #0
 801e15e:	9b02      	ldr	r3, [sp, #8]
 801e160:	4283      	cmp	r3, r0
 801e162:	dde4      	ble.n	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e164:	9a03      	ldr	r2, [sp, #12]
 801e166:	ea4f 432b 	mov.w	r3, fp, asr #16
 801e16a:	1429      	asrs	r1, r5, #16
 801e16c:	b15a      	cbz	r2, 801e186 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 801e16e:	2b00      	cmp	r3, #0
 801e170:	db49      	blt.n	801e206 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801e172:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e176:	4293      	cmp	r3, r2
 801e178:	da45      	bge.n	801e206 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801e17a:	2900      	cmp	r1, #0
 801e17c:	db43      	blt.n	801e206 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801e17e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801e182:	4291      	cmp	r1, r2
 801e184:	da3f      	bge.n	801e206 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801e186:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e18a:	fb01 3202 	mla	r2, r1, r2, r3
 801e18e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801e190:	685b      	ldr	r3, [r3, #4]
 801e192:	5c99      	ldrb	r1, [r3, r2]
 801e194:	b3b9      	cbz	r1, 801e206 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 801e196:	9b04      	ldr	r3, [sp, #16]
 801e198:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801e19c:	9a01      	ldr	r2, [sp, #4]
 801e19e:	2aff      	cmp	r2, #255	; 0xff
 801e1a0:	d101      	bne.n	801e1a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 801e1a2:	29ff      	cmp	r1, #255	; 0xff
 801e1a4:	d02d      	beq.n	801e202 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 801e1a6:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 801e1aa:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 801e1ae:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e1b2:	f02e 0e07 	bic.w	lr, lr, #7
 801e1b6:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 801e1ba:	fb12 f101 	smulbb	r1, r2, r1
 801e1be:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 801e1c2:	f007 071f 	and.w	r7, r7, #31
 801e1c6:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 801e1ca:	f022 0207 	bic.w	r2, r2, #7
 801e1ce:	4372      	muls	r2, r6
 801e1d0:	fb06 fc0c 	mul.w	ip, r6, ip
 801e1d4:	fb01 2e0e 	mla	lr, r1, lr, r2
 801e1d8:	4a61      	ldr	r2, [pc, #388]	; (801e360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801e1da:	4377      	muls	r7, r6
 801e1dc:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 801e1e0:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801e1e4:	f003 031f 	and.w	r3, r3, #31
 801e1e8:	fb01 c202 	mla	r2, r1, r2, ip
 801e1ec:	fb01 7303 	mla	r3, r1, r3, r7
 801e1f0:	0c12      	lsrs	r2, r2, #16
 801e1f2:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801e1f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e1fa:	ea4e 0e02 	orr.w	lr, lr, r2
 801e1fe:	ea4e 0303 	orr.w	r3, lr, r3
 801e202:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 801e206:	9b06      	ldr	r3, [sp, #24]
 801e208:	3001      	adds	r0, #1
 801e20a:	449b      	add	fp, r3
 801e20c:	9b07      	ldr	r3, [sp, #28]
 801e20e:	441d      	add	r5, r3
 801e210:	e7a5      	b.n	801e15e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 801e212:	2300      	movs	r3, #0
 801e214:	930b      	str	r3, [sp, #44]	; 0x2c
 801e216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e218:	9b02      	ldr	r3, [sp, #8]
 801e21a:	4293      	cmp	r3, r2
 801e21c:	dd87      	ble.n	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e21e:	9b03      	ldr	r3, [sp, #12]
 801e220:	ea4f 422b 	mov.w	r2, fp, asr #16
 801e224:	1429      	asrs	r1, r5, #16
 801e226:	b17b      	cbz	r3, 801e248 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 801e228:	2a00      	cmp	r2, #0
 801e22a:	f2c0 8092 	blt.w	801e352 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801e22e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e232:	429a      	cmp	r2, r3
 801e234:	f280 808d 	bge.w	801e352 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801e238:	2900      	cmp	r1, #0
 801e23a:	f2c0 808a 	blt.w	801e352 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801e23e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e242:	4299      	cmp	r1, r3
 801e244:	f280 8085 	bge.w	801e352 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 801e248:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e24c:	f3c5 3603 	ubfx	r6, r5, #12, #4
 801e250:	9804      	ldr	r0, [sp, #16]
 801e252:	fb01 2103 	mla	r1, r1, r3, r2
 801e256:	9a04      	ldr	r2, [sp, #16]
 801e258:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801e25c:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 801e260:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e264:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e268:	8879      	ldrh	r1, [r7, #2]
 801e26a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e26e:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 801e272:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e276:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 801e27a:	fb06 f302 	mul.w	r3, r6, r2
 801e27e:	ea4e 0e09 	orr.w	lr, lr, r9
 801e282:	ea4f 4901 	mov.w	r9, r1, lsl #16
 801e286:	10db      	asrs	r3, r3, #3
 801e288:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 801e28c:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801e290:	f1c6 0710 	rsb	r7, r6, #16
 801e294:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e298:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 801e29c:	1abf      	subs	r7, r7, r2
 801e29e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e2a2:	ea49 0101 	orr.w	r1, r9, r1
 801e2a6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e2aa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801e2ae:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801e2b2:	4351      	muls	r1, r2
 801e2b4:	9a01      	ldr	r2, [sp, #4]
 801e2b6:	ea4a 0808 	orr.w	r8, sl, r8
 801e2ba:	fb0e 1107 	mla	r1, lr, r7, r1
 801e2be:	2aff      	cmp	r2, #255	; 0xff
 801e2c0:	fb03 1108 	mla	r1, r3, r8, r1
 801e2c4:	ea4f 480c 	mov.w	r8, ip, lsl #16
 801e2c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801e2cc:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 801e2d0:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801e2d4:	ea48 0c0c 	orr.w	ip, r8, ip
 801e2d8:	fb03 110c 	mla	r1, r3, ip, r1
 801e2dc:	ea4f 5951 	mov.w	r9, r1, lsr #21
 801e2e0:	ea4f 1351 	mov.w	r3, r1, lsr #5
 801e2e4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e2e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e2ec:	ea49 0303 	orr.w	r3, r9, r3
 801e2f0:	b29b      	uxth	r3, r3
 801e2f2:	d02b      	beq.n	801e34c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 801e2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e2f6:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 801e2fa:	9805      	ldr	r0, [sp, #20]
 801e2fc:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 801e300:	f026 0607 	bic.w	r6, r6, #7
 801e304:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 801e308:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801e30c:	f001 011f 	and.w	r1, r1, #31
 801e310:	f022 0207 	bic.w	r2, r2, #7
 801e314:	4342      	muls	r2, r0
 801e316:	9801      	ldr	r0, [sp, #4]
 801e318:	fb00 2606 	mla	r6, r0, r6, r2
 801e31c:	4a10      	ldr	r2, [pc, #64]	; (801e360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 801e31e:	9805      	ldr	r0, [sp, #20]
 801e320:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 801e324:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801e328:	4347      	muls	r7, r0
 801e32a:	9801      	ldr	r0, [sp, #4]
 801e32c:	f003 031f 	and.w	r3, r3, #31
 801e330:	fb00 7202 	mla	r2, r0, r2, r7
 801e334:	0a12      	lsrs	r2, r2, #8
 801e336:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e33a:	4316      	orrs	r6, r2
 801e33c:	9a05      	ldr	r2, [sp, #20]
 801e33e:	4351      	muls	r1, r2
 801e340:	fb00 1303 	mla	r3, r0, r3, r1
 801e344:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801e348:	4333      	orrs	r3, r6
 801e34a:	b29b      	uxth	r3, r3
 801e34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e34e:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801e352:	9b06      	ldr	r3, [sp, #24]
 801e354:	449b      	add	fp, r3
 801e356:	9b07      	ldr	r3, [sp, #28]
 801e358:	441d      	add	r5, r3
 801e35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e35c:	3301      	adds	r3, #1
 801e35e:	e759      	b.n	801e214 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 801e360:	fffff800 	.word	0xfffff800
 801e364:	9903      	ldr	r1, [sp, #12]
 801e366:	ea4f 432b 	mov.w	r3, fp, asr #16
 801e36a:	142a      	asrs	r2, r5, #16
 801e36c:	b179      	cbz	r1, 801e38e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 801e36e:	2b00      	cmp	r3, #0
 801e370:	f2c0 8136 	blt.w	801e5e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801e374:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801e378:	428b      	cmp	r3, r1
 801e37a:	f280 8131 	bge.w	801e5e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801e37e:	2a00      	cmp	r2, #0
 801e380:	f2c0 812e 	blt.w	801e5e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801e384:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 801e388:	428a      	cmp	r2, r1
 801e38a:	f280 8129 	bge.w	801e5e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801e38e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 801e392:	fb02 3301 	mla	r3, r2, r1, r3
 801e396:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e398:	6850      	ldr	r0, [r2, #4]
 801e39a:	18c2      	adds	r2, r0, r3
 801e39c:	5cc0      	ldrb	r0, [r0, r3]
 801e39e:	900d      	str	r0, [sp, #52]	; 0x34
 801e3a0:	7850      	ldrb	r0, [r2, #1]
 801e3a2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 801e3a6:	900e      	str	r0, [sp, #56]	; 0x38
 801e3a8:	5c50      	ldrb	r0, [r2, r1]
 801e3aa:	440a      	add	r2, r1
 801e3ac:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 801e3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e3b4:	7852      	ldrb	r2, [r2, #1]
 801e3b6:	ee07 0a10 	vmov	s14, r0
 801e3ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801e3be:	900f      	str	r0, [sp, #60]	; 0x3c
 801e3c0:	9210      	str	r2, [sp, #64]	; 0x40
 801e3c2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801e3c6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801e3ca:	ee0d 2a10 	vmov	s26, r2
 801e3ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801e3d2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e3d6:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 801e3da:	ee0d 2a90 	vmov	s27, r2
 801e3de:	ee2d da2c 	vmul.f32	s26, s26, s25
 801e3e2:	eef8 daed 	vcvt.f32.s32	s27, s27
 801e3e6:	eeed 7a26 	vfma.f32	s15, s26, s13
 801e3ea:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 801e3ee:	ee6d daac 	vmul.f32	s27, s27, s25
 801e3f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801e3f6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801e3fa:	eead 7a26 	vfma.f32	s14, s26, s13
 801e3fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e402:	eeed 7a87 	vfma.f32	s15, s27, s14
 801e406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e40a:	ee17 6a90 	vmov	r6, s15
 801e40e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 801e412:	f000 80e5 	beq.w	801e5e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 801e416:	9a04      	ldr	r2, [sp, #16]
 801e418:	eef0 2a6d 	vmov.f32	s5, s27
 801e41c:	eeb0 2a4d 	vmov.f32	s4, s26
 801e420:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 801e424:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 801e428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e42a:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 801e42e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801e432:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 801e436:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 801e43a:	f00a 001f 	and.w	r0, sl, #31
 801e43e:	4358      	muls	r0, r3
 801e440:	1203      	asrs	r3, r0, #8
 801e442:	f009 001f 	and.w	r0, r9, #31
 801e446:	ee01 3a90 	vmov	s3, r3
 801e44a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e44c:	4358      	muls	r0, r3
 801e44e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e452:	1203      	asrs	r3, r0, #8
 801e454:	f008 001f 	and.w	r0, r8, #31
 801e458:	ee01 3a10 	vmov	s2, r3
 801e45c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e45e:	4358      	muls	r0, r3
 801e460:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e464:	1203      	asrs	r3, r0, #8
 801e466:	f007 001f 	and.w	r0, r7, #31
 801e46a:	ee00 3a90 	vmov	s1, r3
 801e46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e470:	4358      	muls	r0, r3
 801e472:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e476:	1203      	asrs	r3, r0, #8
 801e478:	4630      	mov	r0, r6
 801e47a:	ee00 3a10 	vmov	s0, r3
 801e47e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e482:	f7ff fa41 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e486:	f3ca 1045 	ubfx	r0, sl, #5, #6
 801e48a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e48c:	eeb0 ea40 	vmov.f32	s28, s0
 801e490:	eef0 2a6d 	vmov.f32	s5, s27
 801e494:	4358      	muls	r0, r3
 801e496:	eeb0 2a4d 	vmov.f32	s4, s26
 801e49a:	1203      	asrs	r3, r0, #8
 801e49c:	f3c9 1045 	ubfx	r0, r9, #5, #6
 801e4a0:	ee01 3a90 	vmov	s3, r3
 801e4a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4a6:	4358      	muls	r0, r3
 801e4a8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e4ac:	1203      	asrs	r3, r0, #8
 801e4ae:	f3c8 1045 	ubfx	r0, r8, #5, #6
 801e4b2:	ee01 3a10 	vmov	s2, r3
 801e4b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4b8:	4358      	muls	r0, r3
 801e4ba:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e4be:	1203      	asrs	r3, r0, #8
 801e4c0:	f3c7 1045 	ubfx	r0, r7, #5, #6
 801e4c4:	0aff      	lsrs	r7, r7, #11
 801e4c6:	ee00 3a90 	vmov	s1, r3
 801e4ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4cc:	4358      	muls	r0, r3
 801e4ce:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e4d2:	1203      	asrs	r3, r0, #8
 801e4d4:	4630      	mov	r0, r6
 801e4d6:	ee00 3a10 	vmov	s0, r3
 801e4da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e4de:	f7ff fa13 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e4e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e4e4:	ea4f 21da 	mov.w	r1, sl, lsr #11
 801e4e8:	eef0 ea40 	vmov.f32	s29, s0
 801e4ec:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 801e4f0:	4630      	mov	r0, r6
 801e4f2:	fb03 fa01 	mul.w	sl, r3, r1
 801e4f6:	eef0 2a6d 	vmov.f32	s5, s27
 801e4fa:	eeb0 2a4d 	vmov.f32	s4, s26
 801e4fe:	ea4f 232a 	mov.w	r3, sl, asr #8
 801e502:	ee01 3a90 	vmov	s3, r3
 801e506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e508:	fb03 f902 	mul.w	r9, r3, r2
 801e50c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e50e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e512:	ea4f 2329 	mov.w	r3, r9, asr #8
 801e516:	ee01 3a10 	vmov	s2, r3
 801e51a:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 801e51e:	fb02 f803 	mul.w	r8, r2, r3
 801e522:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e526:	ea4f 2328 	mov.w	r3, r8, asr #8
 801e52a:	ee00 3a90 	vmov	s1, r3
 801e52e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e530:	437b      	muls	r3, r7
 801e532:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801e536:	121b      	asrs	r3, r3, #8
 801e538:	ee00 3a10 	vmov	s0, r3
 801e53c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801e540:	f7ff f9e2 	bl	801d908 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 801e544:	eefc 7aee 	vcvt.u32.f32	s15, s29
 801e548:	2eff      	cmp	r6, #255	; 0xff
 801e54a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801e54e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801e552:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801e556:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801e55a:	eefc 7ace 	vcvt.u32.f32	s15, s28
 801e55e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 801e562:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 801e566:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 801e56a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801e56e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801e572:	ea43 0302 	orr.w	r3, r3, r2
 801e576:	b29b      	uxth	r3, r3
 801e578:	d102      	bne.n	801e580 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 801e57a:	9a01      	ldr	r2, [sp, #4]
 801e57c:	2aff      	cmp	r2, #255	; 0xff
 801e57e:	d02c      	beq.n	801e5da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 801e580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e582:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 801e586:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 801e58a:	f027 0707 	bic.w	r7, r7, #7
 801e58e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801e592:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 801e596:	fb12 f606 	smulbb	r6, r2, r6
 801e59a:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 801e59e:	f000 001f 	and.w	r0, r0, #31
 801e5a2:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 801e5a6:	f022 0207 	bic.w	r2, r2, #7
 801e5aa:	434a      	muls	r2, r1
 801e5ac:	fb01 fe0e 	mul.w	lr, r1, lr
 801e5b0:	fb06 2707 	mla	r7, r6, r7, r2
 801e5b4:	4a4d      	ldr	r2, [pc, #308]	; (801e6ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801e5b6:	4348      	muls	r0, r1
 801e5b8:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 801e5bc:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 801e5c0:	f003 031f 	and.w	r3, r3, #31
 801e5c4:	fb06 e202 	mla	r2, r6, r2, lr
 801e5c8:	fb06 0303 	mla	r3, r6, r3, r0
 801e5cc:	0c12      	lsrs	r2, r2, #16
 801e5ce:	f3c3 4304 	ubfx	r3, r3, #16, #5
 801e5d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e5d6:	4317      	orrs	r7, r2
 801e5d8:	433b      	orrs	r3, r7
 801e5da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e5dc:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 801e5e0:	9b06      	ldr	r3, [sp, #24]
 801e5e2:	449b      	add	fp, r3
 801e5e4:	9b07      	ldr	r3, [sp, #28]
 801e5e6:	441d      	add	r5, r3
 801e5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e5ea:	3301      	adds	r3, #1
 801e5ec:	e599      	b.n	801e122 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 801e5ee:	9b01      	ldr	r3, [sp, #4]
 801e5f0:	2bff      	cmp	r3, #255	; 0xff
 801e5f2:	d105      	bne.n	801e600 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	9a02      	ldr	r2, [sp, #8]
 801e5f8:	429a      	cmp	r2, r3
 801e5fa:	dc51      	bgt.n	801e6a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 801e5fc:	4613      	mov	r3, r2
 801e5fe:	e596      	b.n	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e600:	2000      	movs	r0, #0
 801e602:	9b02      	ldr	r3, [sp, #8]
 801e604:	4283      	cmp	r3, r0
 801e606:	f77f ad92 	ble.w	801e12e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 801e60a:	9b03      	ldr	r3, [sp, #12]
 801e60c:	ea4f 422b 	mov.w	r2, fp, asr #16
 801e610:	1429      	asrs	r1, r5, #16
 801e612:	b15b      	cbz	r3, 801e62c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 801e614:	2a00      	cmp	r2, #0
 801e616:	db3d      	blt.n	801e694 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801e618:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e61c:	429a      	cmp	r2, r3
 801e61e:	da39      	bge.n	801e694 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801e620:	2900      	cmp	r1, #0
 801e622:	db37      	blt.n	801e694 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801e624:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801e628:	4299      	cmp	r1, r3
 801e62a:	da33      	bge.n	801e694 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 801e62c:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 801e630:	9f05      	ldr	r7, [sp, #20]
 801e632:	fb01 2303 	mla	r3, r1, r3, r2
 801e636:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 801e63a:	9a04      	ldr	r2, [sp, #16]
 801e63c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801e640:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 801e644:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 801e648:	f023 0307 	bic.w	r3, r3, #7
 801e64c:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 801e650:	f002 021f 	and.w	r2, r2, #31
 801e654:	437b      	muls	r3, r7
 801e656:	f026 0607 	bic.w	r6, r6, #7
 801e65a:	9f01      	ldr	r7, [sp, #4]
 801e65c:	fb07 3606 	mla	r6, r7, r6, r3
 801e660:	4b22      	ldr	r3, [pc, #136]	; (801e6ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 801e662:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 801e666:	f001 011f 	and.w	r1, r1, #31
 801e66a:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 801e66e:	9b05      	ldr	r3, [sp, #20]
 801e670:	435f      	muls	r7, r3
 801e672:	9b01      	ldr	r3, [sp, #4]
 801e674:	fb03 730e 	mla	r3, r3, lr, r7
 801e678:	0a1b      	lsrs	r3, r3, #8
 801e67a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e67e:	431e      	orrs	r6, r3
 801e680:	9b05      	ldr	r3, [sp, #20]
 801e682:	4359      	muls	r1, r3
 801e684:	9b01      	ldr	r3, [sp, #4]
 801e686:	fb03 1202 	mla	r2, r3, r2, r1
 801e68a:	f3c2 2204 	ubfx	r2, r2, #8, #5
 801e68e:	4316      	orrs	r6, r2
 801e690:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 801e694:	9b06      	ldr	r3, [sp, #24]
 801e696:	3001      	adds	r0, #1
 801e698:	449b      	add	fp, r3
 801e69a:	9b07      	ldr	r3, [sp, #28]
 801e69c:	441d      	add	r5, r3
 801e69e:	e7b0      	b.n	801e602 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 801e6a0:	9a03      	ldr	r2, [sp, #12]
 801e6a2:	ea4f 412b 	mov.w	r1, fp, asr #16
 801e6a6:	1428      	asrs	r0, r5, #16
 801e6a8:	b15a      	cbz	r2, 801e6c2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 801e6aa:	2900      	cmp	r1, #0
 801e6ac:	db12      	blt.n	801e6d4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801e6ae:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e6b2:	4291      	cmp	r1, r2
 801e6b4:	da0e      	bge.n	801e6d4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801e6b6:	2800      	cmp	r0, #0
 801e6b8:	db0c      	blt.n	801e6d4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801e6ba:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 801e6be:	4290      	cmp	r0, r2
 801e6c0:	da08      	bge.n	801e6d4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 801e6c2:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 801e6c6:	fb00 1202 	mla	r2, r0, r2, r1
 801e6ca:	9904      	ldr	r1, [sp, #16]
 801e6cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801e6d0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 801e6d4:	9a06      	ldr	r2, [sp, #24]
 801e6d6:	3301      	adds	r3, #1
 801e6d8:	4493      	add	fp, r2
 801e6da:	9a07      	ldr	r2, [sp, #28]
 801e6dc:	4415      	add	r5, r2
 801e6de:	e78a      	b.n	801e5f6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 801e6e0:	b015      	add	sp, #84	; 0x54
 801e6e2:	ecbd 8b0e 	vpop	{d8-d14}
 801e6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6ea:	bf00      	nop
 801e6ec:	fffff800 	.word	0xfffff800

0801e6f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6f4:	b08f      	sub	sp, #60	; 0x3c
 801e6f6:	460c      	mov	r4, r1
 801e6f8:	4680      	mov	r8, r0
 801e6fa:	4699      	mov	r9, r3
 801e6fc:	6808      	ldr	r0, [r1, #0]
 801e6fe:	ab0a      	add	r3, sp, #40	; 0x28
 801e700:	6849      	ldr	r1, [r1, #4]
 801e702:	c303      	stmia	r3!, {r0, r1}
 801e704:	6810      	ldr	r0, [r2, #0]
 801e706:	ab0c      	add	r3, sp, #48	; 0x30
 801e708:	6851      	ldr	r1, [r2, #4]
 801e70a:	c303      	stmia	r3!, {r0, r1}
 801e70c:	a80a      	add	r0, sp, #40	; 0x28
 801e70e:	f7fd f99d 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e712:	4621      	mov	r1, r4
 801e714:	a80c      	add	r0, sp, #48	; 0x30
 801e716:	4c58      	ldr	r4, [pc, #352]	; (801e878 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e718:	f7fd f980 	bl	801ba1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e71c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e720:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e724:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e728:	6820      	ldr	r0, [r4, #0]
 801e72a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e72e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801e732:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801e736:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e73a:	440a      	add	r2, r1
 801e73c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e740:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e744:	4413      	add	r3, r2
 801e746:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e74a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e74e:	9305      	str	r3, [sp, #20]
 801e750:	6803      	ldr	r3, [r0, #0]
 801e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e754:	4798      	blx	r3
 801e756:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e75a:	d118      	bne.n	801e78e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801e75c:	f010 0f20 	tst.w	r0, #32
 801e760:	6820      	ldr	r0, [r4, #0]
 801e762:	d017      	beq.n	801e794 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801e764:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801e768:	b2bf      	uxth	r7, r7
 801e76a:	6801      	ldr	r1, [r0, #0]
 801e76c:	9402      	str	r4, [sp, #8]
 801e76e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801e772:	f8cd 900c 	str.w	r9, [sp, #12]
 801e776:	9401      	str	r4, [sp, #4]
 801e778:	9700      	str	r7, [sp, #0]
 801e77a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e77e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801e780:	4641      	mov	r1, r8
 801e782:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e786:	47a0      	blx	r4
 801e788:	b00f      	add	sp, #60	; 0x3c
 801e78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e78e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e792:	e7e5      	b.n	801e760 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801e794:	6803      	ldr	r3, [r0, #0]
 801e796:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801e880 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 801e79a:	6a1b      	ldr	r3, [r3, #32]
 801e79c:	4798      	blx	r3
 801e79e:	4a37      	ldr	r2, [pc, #220]	; (801e87c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e7a0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801e7a4:	f04f 0c00 	mov.w	ip, #0
 801e7a8:	8813      	ldrh	r3, [r2, #0]
 801e7aa:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801e7ae:	9209      	str	r2, [sp, #36]	; 0x24
 801e7b0:	fb04 1303 	mla	r3, r4, r3, r1
 801e7b4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801e7b8:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801e7bc:	0099      	lsls	r1, r3, #2
 801e7be:	005b      	lsls	r3, r3, #1
 801e7c0:	9108      	str	r1, [sp, #32]
 801e7c2:	9307      	str	r3, [sp, #28]
 801e7c4:	9b05      	ldr	r3, [sp, #20]
 801e7c6:	459c      	cmp	ip, r3
 801e7c8:	da4f      	bge.n	801e86a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 801e7ca:	4686      	mov	lr, r0
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	42bb      	cmp	r3, r7
 801e7d0:	da3a      	bge.n	801e848 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 801e7d2:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 801e7d6:	0e2e      	lsrs	r6, r5, #24
 801e7d8:	d012      	beq.n	801e800 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e7da:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 801e7de:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 801e7e2:	0969      	lsrs	r1, r5, #5
 801e7e4:	2eff      	cmp	r6, #255	; 0xff
 801e7e6:	b2a4      	uxth	r4, r4
 801e7e8:	9206      	str	r2, [sp, #24]
 801e7ea:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e7ee:	d10b      	bne.n	801e808 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801e7f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e7f4:	d108      	bne.n	801e808 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 801e7f6:	430c      	orrs	r4, r1
 801e7f8:	4322      	orrs	r2, r4
 801e7fa:	4614      	mov	r4, r2
 801e7fc:	f8ae 4000 	strh.w	r4, [lr]
 801e800:	f10e 0e02 	add.w	lr, lr, #2
 801e804:	3301      	adds	r3, #1
 801e806:	e7e2      	b.n	801e7ce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 801e808:	fb06 f609 	mul.w	r6, r6, r9
 801e80c:	f8be 5000 	ldrh.w	r5, [lr]
 801e810:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 801e814:	ea05 020a 	and.w	r2, r5, sl
 801e818:	4374      	muls	r4, r6
 801e81a:	4371      	muls	r1, r6
 801e81c:	fb0b 4402 	mla	r4, fp, r2, r4
 801e820:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 801e824:	f005 051f 	and.w	r5, r5, #31
 801e828:	fb0b 1102 	mla	r1, fp, r2, r1
 801e82c:	9a06      	ldr	r2, [sp, #24]
 801e82e:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 801e832:	0c09      	lsrs	r1, r1, #16
 801e834:	4356      	muls	r6, r2
 801e836:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e83a:	fb0b 6505 	mla	r5, fp, r5, r6
 801e83e:	430c      	orrs	r4, r1
 801e840:	f3c5 4504 	ubfx	r5, r5, #16, #5
 801e844:	432c      	orrs	r4, r5
 801e846:	e7d9      	b.n	801e7fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801e848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e84a:	f10c 0c01 	add.w	ip, ip, #1
 801e84e:	9a07      	ldr	r2, [sp, #28]
 801e850:	881b      	ldrh	r3, [r3, #0]
 801e852:	1bdb      	subs	r3, r3, r7
 801e854:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e858:	9a08      	ldr	r2, [sp, #32]
 801e85a:	4418      	add	r0, r3
 801e85c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e860:	1bdb      	subs	r3, r3, r7
 801e862:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e866:	4498      	add	r8, r3
 801e868:	e7ac      	b.n	801e7c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 801e86a:	4b03      	ldr	r3, [pc, #12]	; (801e878 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e86c:	6818      	ldr	r0, [r3, #0]
 801e86e:	6803      	ldr	r3, [r0, #0]
 801e870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e872:	4798      	blx	r3
 801e874:	e788      	b.n	801e788 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801e876:	bf00      	nop
 801e878:	20009b14 	.word	0x20009b14
 801e87c:	20009b0e 	.word	0x20009b0e
 801e880:	fffff800 	.word	0xfffff800

0801e884 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801e884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e888:	9d06      	ldr	r5, [sp, #24]
 801e88a:	461c      	mov	r4, r3
 801e88c:	460e      	mov	r6, r1
 801e88e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801e892:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801e896:	b142      	cbz	r2, 801e8aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801e898:	2a02      	cmp	r2, #2
 801e89a:	d010      	beq.n	801e8be <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 801e89c:	4b0b      	ldr	r3, [pc, #44]	; (801e8cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 801e89e:	f240 11b9 	movw	r1, #441	; 0x1b9
 801e8a2:	4a0b      	ldr	r2, [pc, #44]	; (801e8d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 801e8a4:	480b      	ldr	r0, [pc, #44]	; (801e8d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 801e8a6:	f000 fd0b 	bl	801f2c0 <__assert_func>
 801e8aa:	6802      	ldr	r2, [r0, #0]
 801e8ac:	9306      	str	r3, [sp, #24]
 801e8ae:	462b      	mov	r3, r5
 801e8b0:	9707      	str	r7, [sp, #28]
 801e8b2:	6916      	ldr	r6, [r2, #16]
 801e8b4:	4622      	mov	r2, r4
 801e8b6:	46b4      	mov	ip, r6
 801e8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e8bc:	4760      	bx	ip
 801e8be:	462a      	mov	r2, r5
 801e8c0:	4621      	mov	r1, r4
 801e8c2:	4630      	mov	r0, r6
 801e8c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e8c8:	f7ff bf12 	b.w	801e6f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801e8cc:	08022604 	.word	0x08022604
 801e8d0:	08022763 	.word	0x08022763
 801e8d4:	080225d2 	.word	0x080225d2

0801e8d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8dc:	b08b      	sub	sp, #44	; 0x2c
 801e8de:	460e      	mov	r6, r1
 801e8e0:	4604      	mov	r4, r0
 801e8e2:	6851      	ldr	r1, [r2, #4]
 801e8e4:	6810      	ldr	r0, [r2, #0]
 801e8e6:	ad06      	add	r5, sp, #24
 801e8e8:	4617      	mov	r7, r2
 801e8ea:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801e8ee:	c503      	stmia	r5!, {r0, r1}
 801e8f0:	6818      	ldr	r0, [r3, #0]
 801e8f2:	ad08      	add	r5, sp, #32
 801e8f4:	6859      	ldr	r1, [r3, #4]
 801e8f6:	c503      	stmia	r5!, {r0, r1}
 801e8f8:	a806      	add	r0, sp, #24
 801e8fa:	f7fd f8a7 	bl	801ba4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8fe:	4639      	mov	r1, r7
 801e900:	a808      	add	r0, sp, #32
 801e902:	f7fd f88b 	bl	801ba1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e906:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e90a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e90e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e912:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 801e916:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e91a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801e91e:	1871      	adds	r1, r6, r1
 801e920:	9101      	str	r1, [sp, #4]
 801e922:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e926:	440a      	add	r2, r1
 801e928:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e92c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e930:	4413      	add	r3, r2
 801e932:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e936:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 801e93a:	9302      	str	r3, [sp, #8]
 801e93c:	4b64      	ldr	r3, [pc, #400]	; (801ead0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801e93e:	6818      	ldr	r0, [r3, #0]
 801e940:	6803      	ldr	r3, [r0, #0]
 801e942:	6a1b      	ldr	r3, [r3, #32]
 801e944:	4798      	blx	r3
 801e946:	4b63      	ldr	r3, [pc, #396]	; (801ead4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 801e948:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 801e94c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e950:	881a      	ldrh	r2, [r3, #0]
 801e952:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e956:	fb06 1202 	mla	r2, r6, r2, r1
 801e95a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801e95e:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801e962:	b212      	sxth	r2, r2
 801e964:	9204      	str	r2, [sp, #16]
 801e966:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801e96a:	9203      	str	r2, [sp, #12]
 801e96c:	d051      	beq.n	801ea12 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 801e96e:	f04f 0800 	mov.w	r8, #0
 801e972:	f8df 9164 	ldr.w	r9, [pc, #356]	; 801ead8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801e976:	9305      	str	r3, [sp, #20]
 801e978:	9b02      	ldr	r3, [sp, #8]
 801e97a:	4598      	cmp	r8, r3
 801e97c:	f280 809f 	bge.w	801eabe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801e980:	2100      	movs	r1, #0
 801e982:	42a9      	cmp	r1, r5
 801e984:	da30      	bge.n	801e9e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 801e986:	9b01      	ldr	r3, [sp, #4]
 801e988:	5c5e      	ldrb	r6, [r3, r1]
 801e98a:	b35e      	cbz	r6, 801e9e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 801e98c:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801e990:	fb1b f606 	smulbb	r6, fp, r6
 801e994:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 801e998:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 801e99c:	ea0e 0309 	and.w	r3, lr, r9
 801e9a0:	ea02 0c09 	and.w	ip, r2, r9
 801e9a4:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 801e9a8:	437b      	muls	r3, r7
 801e9aa:	f00e 0e1f 	and.w	lr, lr, #31
 801e9ae:	fb07 fa0a 	mul.w	sl, r7, sl
 801e9b2:	fb06 3c0c 	mla	ip, r6, ip, r3
 801e9b6:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801e9ba:	fb07 fe0e 	mul.w	lr, r7, lr
 801e9be:	f002 021f 	and.w	r2, r2, #31
 801e9c2:	fb06 a303 	mla	r3, r6, r3, sl
 801e9c6:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 801e9ca:	fb06 ee02 	mla	lr, r6, r2, lr
 801e9ce:	0c1b      	lsrs	r3, r3, #16
 801e9d0:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 801e9d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e9d8:	ea4c 0c03 	orr.w	ip, ip, r3
 801e9dc:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e9e0:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801e9e4:	3101      	adds	r1, #1
 801e9e6:	e7cc      	b.n	801e982 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 801e9e8:	9b05      	ldr	r3, [sp, #20]
 801e9ea:	f108 0801 	add.w	r8, r8, #1
 801e9ee:	9a03      	ldr	r2, [sp, #12]
 801e9f0:	881b      	ldrh	r3, [r3, #0]
 801e9f2:	1b5b      	subs	r3, r3, r5
 801e9f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e9f8:	4418      	add	r0, r3
 801e9fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e9fe:	1b5b      	subs	r3, r3, r5
 801ea00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ea04:	4414      	add	r4, r2
 801ea06:	9a04      	ldr	r2, [sp, #16]
 801ea08:	4413      	add	r3, r2
 801ea0a:	9a01      	ldr	r2, [sp, #4]
 801ea0c:	441a      	add	r2, r3
 801ea0e:	9201      	str	r2, [sp, #4]
 801ea10:	e7b2      	b.n	801e978 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 801ea12:	f04f 0900 	mov.w	r9, #0
 801ea16:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801ead8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 801ea1a:	9305      	str	r3, [sp, #20]
 801ea1c:	9b02      	ldr	r3, [sp, #8]
 801ea1e:	4599      	cmp	r9, r3
 801ea20:	da4d      	bge.n	801eabe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 801ea22:	4607      	mov	r7, r0
 801ea24:	2600      	movs	r6, #0
 801ea26:	42ae      	cmp	r6, r5
 801ea28:	da34      	bge.n	801ea94 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 801ea2a:	9b01      	ldr	r3, [sp, #4]
 801ea2c:	5d99      	ldrb	r1, [r3, r6]
 801ea2e:	b121      	cbz	r1, 801ea3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801ea30:	29ff      	cmp	r1, #255	; 0xff
 801ea32:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 801ea36:	d103      	bne.n	801ea40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 801ea38:	803a      	strh	r2, [r7, #0]
 801ea3a:	3702      	adds	r7, #2
 801ea3c:	3601      	adds	r6, #1
 801ea3e:	e7f2      	b.n	801ea26 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 801ea40:	f8b7 c000 	ldrh.w	ip, [r7]
 801ea44:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 801ea48:	ea02 080a 	and.w	r8, r2, sl
 801ea4c:	ea0c 030a 	and.w	r3, ip, sl
 801ea50:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 801ea54:	f00c 0c1f 	and.w	ip, ip, #31
 801ea58:	fb0e f303 	mul.w	r3, lr, r3
 801ea5c:	fb0e fb0b 	mul.w	fp, lr, fp
 801ea60:	fb01 3808 	mla	r8, r1, r8, r3
 801ea64:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 801ea68:	fb0e fc0c 	mul.w	ip, lr, ip
 801ea6c:	f002 021f 	and.w	r2, r2, #31
 801ea70:	fb01 b303 	mla	r3, r1, r3, fp
 801ea74:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 801ea78:	fb01 cc02 	mla	ip, r1, r2, ip
 801ea7c:	0a1b      	lsrs	r3, r3, #8
 801ea7e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 801ea82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ea86:	ea48 0803 	orr.w	r8, r8, r3
 801ea8a:	ea48 080c 	orr.w	r8, r8, ip
 801ea8e:	f8a7 8000 	strh.w	r8, [r7]
 801ea92:	e7d2      	b.n	801ea3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 801ea94:	9b05      	ldr	r3, [sp, #20]
 801ea96:	f109 0901 	add.w	r9, r9, #1
 801ea9a:	9a03      	ldr	r2, [sp, #12]
 801ea9c:	881b      	ldrh	r3, [r3, #0]
 801ea9e:	1b5b      	subs	r3, r3, r5
 801eaa0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801eaa4:	4418      	add	r0, r3
 801eaa6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801eaaa:	1b5b      	subs	r3, r3, r5
 801eaac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801eab0:	4414      	add	r4, r2
 801eab2:	9a04      	ldr	r2, [sp, #16]
 801eab4:	4413      	add	r3, r2
 801eab6:	9a01      	ldr	r2, [sp, #4]
 801eab8:	441a      	add	r2, r3
 801eaba:	9201      	str	r2, [sp, #4]
 801eabc:	e7ae      	b.n	801ea1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801eabe:	4b04      	ldr	r3, [pc, #16]	; (801ead0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 801eac0:	6818      	ldr	r0, [r3, #0]
 801eac2:	6803      	ldr	r3, [r0, #0]
 801eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eac6:	4798      	blx	r3
 801eac8:	b00b      	add	sp, #44	; 0x2c
 801eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eace:	bf00      	nop
 801ead0:	20009b14 	.word	0x20009b14
 801ead4:	20009b0e 	.word	0x20009b0e
 801ead8:	fffff800 	.word	0xfffff800

0801eadc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae0:	b089      	sub	sp, #36	; 0x24
 801eae2:	4682      	mov	sl, r0
 801eae4:	4689      	mov	r9, r1
 801eae6:	4690      	mov	r8, r2
 801eae8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801eaec:	461f      	mov	r7, r3
 801eaee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801eaf0:	b365      	cbz	r5, 801eb4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801eaf2:	4608      	mov	r0, r1
 801eaf4:	f7fe faf8 	bl	801d0e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801eaf8:	4606      	mov	r6, r0
 801eafa:	4648      	mov	r0, r9
 801eafc:	f7fe fb2c 	bl	801d158 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801eb00:	f8ad 000e 	strh.w	r0, [sp, #14]
 801eb04:	4648      	mov	r0, r9
 801eb06:	f8ad 8008 	strh.w	r8, [sp, #8]
 801eb0a:	f8ad 700a 	strh.w	r7, [sp, #10]
 801eb0e:	f8ad 600c 	strh.w	r6, [sp, #12]
 801eb12:	f7fe fc3f 	bl	801d394 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eb16:	2801      	cmp	r0, #1
 801eb18:	d105      	bne.n	801eb26 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 801eb1a:	4b64      	ldr	r3, [pc, #400]	; (801ecac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 801eb1c:	2160      	movs	r1, #96	; 0x60
 801eb1e:	4a64      	ldr	r2, [pc, #400]	; (801ecb0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 801eb20:	4864      	ldr	r0, [pc, #400]	; (801ecb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 801eb22:	f000 fbcd 	bl	801f2c0 <__assert_func>
 801eb26:	4648      	mov	r0, r9
 801eb28:	f7fe fbdc 	bl	801d2e4 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eb2c:	4606      	mov	r6, r0
 801eb2e:	4648      	mov	r0, r9
 801eb30:	f7fe fc08 	bl	801d344 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 801eb34:	4680      	mov	r8, r0
 801eb36:	4648      	mov	r0, r9
 801eb38:	f7fe fc2c 	bl	801d394 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801eb3c:	2802      	cmp	r0, #2
 801eb3e:	d108      	bne.n	801eb52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 801eb40:	462b      	mov	r3, r5
 801eb42:	4622      	mov	r2, r4
 801eb44:	a902      	add	r1, sp, #8
 801eb46:	4630      	mov	r0, r6
 801eb48:	f7ff fdd2 	bl	801e6f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eb4c:	b009      	add	sp, #36	; 0x24
 801eb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb52:	4648      	mov	r0, r9
 801eb54:	f7fe fb90 	bl	801d278 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801eb58:	b950      	cbnz	r0, 801eb70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 801eb5a:	f8da 3000 	ldr.w	r3, [sl]
 801eb5e:	aa02      	add	r2, sp, #8
 801eb60:	9001      	str	r0, [sp, #4]
 801eb62:	4631      	mov	r1, r6
 801eb64:	9500      	str	r5, [sp, #0]
 801eb66:	4650      	mov	r0, sl
 801eb68:	691d      	ldr	r5, [r3, #16]
 801eb6a:	4623      	mov	r3, r4
 801eb6c:	47a8      	blx	r5
 801eb6e:	e7ed      	b.n	801eb4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801eb70:	af06      	add	r7, sp, #24
 801eb72:	4649      	mov	r1, r9
 801eb74:	f10d 0910 	add.w	r9, sp, #16
 801eb78:	4638      	mov	r0, r7
 801eb7a:	f7fe fb25 	bl	801d1c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801eb7e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801eb82:	e889 0003 	stmia.w	r9, {r0, r1}
 801eb86:	4621      	mov	r1, r4
 801eb88:	4648      	mov	r0, r9
 801eb8a:	f7ef fc27 	bl	800e3dc <_ZN8touchgfx4RectaNERKS0_>
 801eb8e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801eb92:	b113      	cbz	r3, 801eb9a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 801eb94:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801eb98:	b913      	cbnz	r3, 801eba0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 801eb9a:	9500      	str	r5, [sp, #0]
 801eb9c:	4623      	mov	r3, r4
 801eb9e:	e07f      	b.n	801eca0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 801eba0:	f8da 3000 	ldr.w	r3, [sl]
 801eba4:	2200      	movs	r2, #0
 801eba6:	9500      	str	r5, [sp, #0]
 801eba8:	4631      	mov	r1, r6
 801ebaa:	9201      	str	r2, [sp, #4]
 801ebac:	4650      	mov	r0, sl
 801ebae:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801ebb2:	aa02      	add	r2, sp, #8
 801ebb4:	464b      	mov	r3, r9
 801ebb6:	47d8      	blx	fp
 801ebb8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801ebbc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801ebc0:	4293      	cmp	r3, r2
 801ebc2:	dd13      	ble.n	801ebec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 801ebc4:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ebc8:	1a9b      	subs	r3, r3, r2
 801ebca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ebce:	f8ad 0018 	strh.w	r0, [sp, #24]
 801ebd2:	4630      	mov	r0, r6
 801ebd4:	f8ad 201a 	strh.w	r2, [sp, #26]
 801ebd8:	aa02      	add	r2, sp, #8
 801ebda:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ebde:	4641      	mov	r1, r8
 801ebe0:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ebe4:	463b      	mov	r3, r7
 801ebe6:	9500      	str	r5, [sp, #0]
 801ebe8:	f7ff fe76 	bl	801e8d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ebec:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801ebf0:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ebf4:	4293      	cmp	r3, r2
 801ebf6:	dd13      	ble.n	801ec20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 801ebf8:	1a9b      	subs	r3, r3, r2
 801ebfa:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801ebfe:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801ec02:	f8ad 2018 	strh.w	r2, [sp, #24]
 801ec06:	aa02      	add	r2, sp, #8
 801ec08:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ec0c:	4630      	mov	r0, r6
 801ec0e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec12:	463b      	mov	r3, r7
 801ec14:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ec18:	4641      	mov	r1, r8
 801ec1a:	9500      	str	r5, [sp, #0]
 801ec1c:	f7ff fe5c 	bl	801e8d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ec20:	88a2      	ldrh	r2, [r4, #4]
 801ec22:	8823      	ldrh	r3, [r4, #0]
 801ec24:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ec28:	4413      	add	r3, r2
 801ec2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801ec2e:	440a      	add	r2, r1
 801ec30:	b29b      	uxth	r3, r3
 801ec32:	b292      	uxth	r2, r2
 801ec34:	b218      	sxth	r0, r3
 801ec36:	b211      	sxth	r1, r2
 801ec38:	4288      	cmp	r0, r1
 801ec3a:	dd13      	ble.n	801ec64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 801ec3c:	1a9b      	subs	r3, r3, r2
 801ec3e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801ec42:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 801ec46:	aa02      	add	r2, sp, #8
 801ec48:	f8ad 1018 	strh.w	r1, [sp, #24]
 801ec4c:	4641      	mov	r1, r8
 801ec4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ec52:	463b      	mov	r3, r7
 801ec54:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ec58:	4630      	mov	r0, r6
 801ec5a:	9500      	str	r5, [sp, #0]
 801ec5c:	f8ad e01a 	strh.w	lr, [sp, #26]
 801ec60:	f7ff fe3a 	bl	801e8d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ec64:	88e2      	ldrh	r2, [r4, #6]
 801ec66:	8863      	ldrh	r3, [r4, #2]
 801ec68:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801ec6c:	4413      	add	r3, r2
 801ec6e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801ec72:	440a      	add	r2, r1
 801ec74:	b29b      	uxth	r3, r3
 801ec76:	b292      	uxth	r2, r2
 801ec78:	b218      	sxth	r0, r3
 801ec7a:	b211      	sxth	r1, r2
 801ec7c:	4288      	cmp	r0, r1
 801ec7e:	f77f af65 	ble.w	801eb4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801ec82:	1a9b      	subs	r3, r3, r2
 801ec84:	f9b4 e000 	ldrsh.w	lr, [r4]
 801ec88:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801ec8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ec90:	463b      	mov	r3, r7
 801ec92:	f8ad e018 	strh.w	lr, [sp, #24]
 801ec96:	f8ad 101a 	strh.w	r1, [sp, #26]
 801ec9a:	f8ad 001c 	strh.w	r0, [sp, #28]
 801ec9e:	9500      	str	r5, [sp, #0]
 801eca0:	aa02      	add	r2, sp, #8
 801eca2:	4641      	mov	r1, r8
 801eca4:	4630      	mov	r0, r6
 801eca6:	f7ff fe17 	bl	801e8d8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801ecaa:	e74f      	b.n	801eb4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 801ecac:	08022542 	.word	0x08022542
 801ecb0:	08022670 	.word	0x08022670
 801ecb4:	080225d2 	.word	0x080225d2

0801ecb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801ecb8:	b138      	cbz	r0, 801ecca <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 801ecba:	2902      	cmp	r1, #2
 801ecbc:	d00b      	beq.n	801ecd6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 801ecbe:	2903      	cmp	r1, #3
 801ecc0:	d00c      	beq.n	801ecdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ecc2:	2901      	cmp	r1, #1
 801ecc4:	d10d      	bne.n	801ece2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801ecc6:	2001      	movs	r0, #1
 801ecc8:	4770      	bx	lr
 801ecca:	2902      	cmp	r1, #2
 801eccc:	d006      	beq.n	801ecdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801ecce:	2903      	cmp	r1, #3
 801ecd0:	d007      	beq.n	801ece2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 801ecd2:	2901      	cmp	r1, #1
 801ecd4:	d1f7      	bne.n	801ecc6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 801ecd6:	4b05      	ldr	r3, [pc, #20]	; (801ecec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ecd8:	8818      	ldrh	r0, [r3, #0]
 801ecda:	4770      	bx	lr
 801ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 801ece0:	4770      	bx	lr
 801ece2:	4b02      	ldr	r3, [pc, #8]	; (801ecec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 801ece4:	8818      	ldrh	r0, [r3, #0]
 801ece6:	4240      	negs	r0, r0
 801ece8:	4770      	bx	lr
 801ecea:	bf00      	nop
 801ecec:	20009b0e 	.word	0x20009b0e

0801ecf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ecf0:	b140      	cbz	r0, 801ed04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 801ecf2:	2902      	cmp	r1, #2
 801ecf4:	d00c      	beq.n	801ed10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 801ecf6:	2903      	cmp	r1, #3
 801ecf8:	d00d      	beq.n	801ed16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801ecfa:	2901      	cmp	r1, #1
 801ecfc:	d10f      	bne.n	801ed1e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801ecfe:	4b09      	ldr	r3, [pc, #36]	; (801ed24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ed00:	8818      	ldrh	r0, [r3, #0]
 801ed02:	4770      	bx	lr
 801ed04:	2902      	cmp	r1, #2
 801ed06:	d006      	beq.n	801ed16 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801ed08:	2903      	cmp	r1, #3
 801ed0a:	d008      	beq.n	801ed1e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 801ed0c:	2901      	cmp	r1, #1
 801ed0e:	d1f6      	bne.n	801ecfe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 801ed10:	f04f 30ff 	mov.w	r0, #4294967295
 801ed14:	4770      	bx	lr
 801ed16:	4b03      	ldr	r3, [pc, #12]	; (801ed24 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 801ed18:	8818      	ldrh	r0, [r3, #0]
 801ed1a:	4240      	negs	r0, r0
 801ed1c:	4770      	bx	lr
 801ed1e:	2001      	movs	r0, #1
 801ed20:	4770      	bx	lr
 801ed22:	bf00      	nop
 801ed24:	20009b0e 	.word	0x20009b0e

0801ed28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 801ed28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed2c:	b097      	sub	sp, #92	; 0x5c
 801ed2e:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801ed32:	910d      	str	r1, [sp, #52]	; 0x34
 801ed34:	a912      	add	r1, sp, #72	; 0x48
 801ed36:	f899 000d 	ldrb.w	r0, [r9, #13]
 801ed3a:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 801ed3e:	f010 0f08 	tst.w	r0, #8
 801ed42:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 801ed46:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 801ed4a:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 801ed4e:	e881 000c 	stmia.w	r1, {r2, r3}
 801ed52:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 801ed56:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801ed5a:	920b      	str	r2, [sp, #44]	; 0x2c
 801ed5c:	bf0c      	ite	eq
 801ed5e:	2200      	moveq	r2, #0
 801ed60:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ed64:	f899 1006 	ldrb.w	r1, [r9, #6]
 801ed68:	f010 0f10 	tst.w	r0, #16
 801ed6c:	9307      	str	r3, [sp, #28]
 801ed6e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 801ed72:	bf0c      	ite	eq
 801ed74:	2000      	moveq	r0, #0
 801ed76:	f44f 7080 	movne.w	r0, #256	; 0x100
 801ed7a:	430a      	orrs	r2, r1
 801ed7c:	9308      	str	r3, [sp, #32]
 801ed7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed80:	920a      	str	r2, [sp, #40]	; 0x28
 801ed82:	f000 813b 	beq.w	801effc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801ed86:	f899 2007 	ldrb.w	r2, [r9, #7]
 801ed8a:	4302      	orrs	r2, r0
 801ed8c:	9209      	str	r2, [sp, #36]	; 0x24
 801ed8e:	f000 8135 	beq.w	801effc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801ed92:	f999 1009 	ldrsb.w	r1, [r9, #9]
 801ed96:	2c00      	cmp	r4, #0
 801ed98:	f000 80db 	beq.w	801ef52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 801ed9c:	1a61      	subs	r1, r4, r1
 801ed9e:	b28c      	uxth	r4, r1
 801eda0:	0422      	lsls	r2, r4, #16
 801eda2:	d504      	bpl.n	801edae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801eda4:	eba8 0404 	sub.w	r4, r8, r4
 801eda8:	fa0f f884 	sxth.w	r8, r4
 801edac:	2400      	movs	r4, #0
 801edae:	f9b3 0000 	ldrsh.w	r0, [r3]
 801edb2:	88df      	ldrh	r7, [r3, #6]
 801edb4:	4580      	cmp	r8, r0
 801edb6:	b282      	uxth	r2, r0
 801edb8:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 801edbc:	bfb8      	it	lt
 801edbe:	18a1      	addlt	r1, r4, r2
 801edc0:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 801edc4:	44be      	add	lr, r7
 801edc6:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801edca:	bfbc      	itt	lt
 801edcc:	eba1 0108 	sublt.w	r1, r1, r8
 801edd0:	4680      	movlt	r8, r0
 801edd2:	a812      	add	r0, sp, #72	; 0x48
 801edd4:	bfb8      	it	lt
 801edd6:	b28c      	uxthlt	r4, r1
 801edd8:	8899      	ldrh	r1, [r3, #4]
 801edda:	fa0f f38e 	sxth.w	r3, lr
 801edde:	440a      	add	r2, r1
 801ede0:	4641      	mov	r1, r8
 801ede2:	930e      	str	r3, [sp, #56]	; 0x38
 801ede4:	4bb1      	ldr	r3, [pc, #708]	; (801f0ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801ede6:	b212      	sxth	r2, r2
 801ede8:	f893 b000 	ldrb.w	fp, [r3]
 801edec:	920f      	str	r2, [sp, #60]	; 0x3c
 801edee:	f10b 3eff 	add.w	lr, fp, #4294967295
 801edf2:	9a07      	ldr	r2, [sp, #28]
 801edf4:	f1de 0300 	rsbs	r3, lr, #0
 801edf8:	eb43 030e 	adc.w	r3, r3, lr
 801edfc:	930c      	str	r3, [sp, #48]	; 0x30
 801edfe:	4653      	mov	r3, sl
 801ee00:	f7fc fd16 	bl	801b830 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ee04:	4641      	mov	r1, r8
 801ee06:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ee0a:	4653      	mov	r3, sl
 801ee0c:	9a07      	ldr	r2, [sp, #28]
 801ee0e:	a812      	add	r0, sp, #72	; 0x48
 801ee10:	f7fc fd29 	bl	801b866 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ee14:	a916      	add	r1, sp, #88	; 0x58
 801ee16:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ee1a:	a815      	add	r0, sp, #84	; 0x54
 801ee1c:	f7fc fde4 	bl	801b9e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ee20:	f1ba 0f00 	cmp.w	sl, #0
 801ee24:	f040 8099 	bne.w	801ef5a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 801ee28:	f1bb 0f01 	cmp.w	fp, #1
 801ee2c:	f040 809d 	bne.w	801ef6a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 801ee30:	4a9f      	ldr	r2, [pc, #636]	; (801f0b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ee32:	2d04      	cmp	r5, #4
 801ee34:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801ee38:	8811      	ldrh	r1, [r2, #0]
 801ee3a:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ee3e:	fb01 2303 	mla	r3, r1, r3, r2
 801ee42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ee44:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801ee48:	f04f 03ff 	mov.w	r3, #255	; 0xff
 801ee4c:	fa43 f305 	asr.w	r3, r3, r5
 801ee50:	b2db      	uxtb	r3, r3
 801ee52:	930d      	str	r3, [sp, #52]	; 0x34
 801ee54:	ea6f 0303 	mvn.w	r3, r3
 801ee58:	b2db      	uxtb	r3, r3
 801ee5a:	9310      	str	r3, [sp, #64]	; 0x40
 801ee5c:	f1c5 0308 	rsb	r3, r5, #8
 801ee60:	b2db      	uxtb	r3, r3
 801ee62:	9309      	str	r3, [sp, #36]	; 0x24
 801ee64:	d104      	bne.n	801ee70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801ee66:	f899 300d 	ldrb.w	r3, [r9, #13]
 801ee6a:	07da      	lsls	r2, r3, #31
 801ee6c:	f100 8118 	bmi.w	801f0a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ee70:	b91c      	cbnz	r4, 801ee7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 801ee72:	9b08      	ldr	r3, [sp, #32]
 801ee74:	2b00      	cmp	r3, #0
 801ee76:	f000 80c4 	beq.w	801f002 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 801ee7a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801ee7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee80:	fb16 4303 	smlabb	r3, r6, r3, r4
 801ee84:	fb13 f305 	smulbb	r3, r3, r5
 801ee88:	b29b      	uxth	r3, r3
 801ee8a:	f003 0207 	and.w	r2, r3, #7
 801ee8e:	1a8a      	subs	r2, r1, r2
 801ee90:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ee92:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 801ee96:	b2d2      	uxtb	r2, r2
 801ee98:	9326      	str	r3, [sp, #152]	; 0x98
 801ee9a:	9b08      	ldr	r3, [sp, #32]
 801ee9c:	1aff      	subs	r7, r7, r3
 801ee9e:	b2bf      	uxth	r7, r7
 801eea0:	4651      	mov	r1, sl
 801eea2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eea4:	f7ff ff08 	bl	801ecb8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801eea8:	4651      	mov	r1, sl
 801eeaa:	4681      	mov	r9, r0
 801eeac:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eeae:	f7ff ff1f 	bl	801ecf0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801eeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eeb4:	9907      	ldr	r1, [sp, #28]
 801eeb6:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 801eeba:	eba3 0e01 	sub.w	lr, r3, r1
 801eebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eec0:	eba8 0104 	sub.w	r1, r8, r4
 801eec4:	1a59      	subs	r1, r3, r1
 801eec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eec8:	4299      	cmp	r1, r3
 801eeca:	bfd4      	ite	le
 801eecc:	ebc4 0101 	rsble	r1, r4, r1
 801eed0:	ebc4 0103 	rsbgt	r1, r4, r3
 801eed4:	4577      	cmp	r7, lr
 801eed6:	fb09 0011 	mls	r0, r9, r1, r0
 801eeda:	eba6 0301 	sub.w	r3, r6, r1
 801eede:	bfa8      	it	ge
 801eee0:	4677      	movge	r7, lr
 801eee2:	0040      	lsls	r0, r0, #1
 801eee4:	436b      	muls	r3, r5
 801eee6:	9008      	str	r0, [sp, #32]
 801eee8:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 801eeec:	fb0a f000 	mul.w	r0, sl, r0
 801eef0:	9007      	str	r0, [sp, #28]
 801eef2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801eef4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801eef8:	900e      	str	r0, [sp, #56]	; 0x38
 801eefa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801eefc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef00:	900f      	str	r0, [sp, #60]	; 0x3c
 801ef02:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ef04:	f000 001f 	and.w	r0, r0, #31
 801ef08:	9011      	str	r0, [sp, #68]	; 0x44
 801ef0a:	2f00      	cmp	r7, #0
 801ef0c:	dd76      	ble.n	801effc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 801ef0e:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 801ef12:	4689      	mov	r9, r1
 801ef14:	46d8      	mov	r8, fp
 801ef16:	900c      	str	r0, [sp, #48]	; 0x30
 801ef18:	f1b9 0f00 	cmp.w	r9, #0
 801ef1c:	f340 80a6 	ble.w	801f06c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801ef20:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ef22:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ef24:	7800      	ldrb	r0, [r0, #0]
 801ef26:	4090      	lsls	r0, r2
 801ef28:	4020      	ands	r0, r4
 801ef2a:	d009      	beq.n	801ef40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 801ef2c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ef2e:	4320      	orrs	r0, r4
 801ef30:	28ff      	cmp	r0, #255	; 0xff
 801ef32:	d168      	bne.n	801f006 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ef34:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ef36:	2cff      	cmp	r4, #255	; 0xff
 801ef38:	d165      	bne.n	801f006 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801ef3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ef3c:	f8a8 4000 	strh.w	r4, [r8]
 801ef40:	2a00      	cmp	r2, #0
 801ef42:	f000 808e 	beq.w	801f062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 801ef46:	1b52      	subs	r2, r2, r5
 801ef48:	b2d2      	uxtb	r2, r2
 801ef4a:	44d0      	add	r8, sl
 801ef4c:	f109 39ff 	add.w	r9, r9, #4294967295
 801ef50:	e7e2      	b.n	801ef18 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 801ef52:	4488      	add	r8, r1
 801ef54:	fa0f f888 	sxth.w	r8, r8
 801ef58:	e729      	b.n	801edae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 801ef5a:	f1ba 0f01 	cmp.w	sl, #1
 801ef5e:	f47f af67 	bne.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801ef62:	f1bb 0f01 	cmp.w	fp, #1
 801ef66:	f47f af63 	bne.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801ef6a:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801f0b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 801ef6e:	f8db 0000 	ldr.w	r0, [fp]
 801ef72:	6803      	ldr	r3, [r0, #0]
 801ef74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef76:	4798      	blx	r3
 801ef78:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 801ef7c:	465a      	mov	r2, fp
 801ef7e:	d006      	beq.n	801ef8e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 801ef80:	2d04      	cmp	r5, #4
 801ef82:	bf0a      	itet	eq
 801ef84:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 801ef88:	2300      	movne	r3, #0
 801ef8a:	f003 0301 	andeq.w	r3, r3, #1
 801ef8e:	05c0      	lsls	r0, r0, #23
 801ef90:	f140 8081 	bpl.w	801f096 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801ef94:	2d08      	cmp	r5, #8
 801ef96:	d17e      	bne.n	801f096 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	bf0c      	ite	eq
 801ef9c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 801efa0:	2180      	movne	r1, #128	; 0x80
 801efa2:	2c00      	cmp	r4, #0
 801efa4:	f47f af44 	bne.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801efa8:	9b08      	ldr	r3, [sp, #32]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	f47f af40 	bne.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801efb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801efb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801efb4:	4443      	add	r3, r8
 801efb6:	4298      	cmp	r0, r3
 801efb8:	f6ff af3a 	blt.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801efbc:	9807      	ldr	r0, [sp, #28]
 801efbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801efc0:	4403      	add	r3, r0
 801efc2:	980e      	ldr	r0, [sp, #56]	; 0x38
 801efc4:	4298      	cmp	r0, r3
 801efc6:	f6ff af33 	blt.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801efca:	2d08      	cmp	r5, #8
 801efcc:	6810      	ldr	r0, [r2, #0]
 801efce:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801efd2:	bf18      	it	ne
 801efd4:	3601      	addne	r6, #1
 801efd6:	6804      	ldr	r4, [r0, #0]
 801efd8:	9105      	str	r1, [sp, #20]
 801efda:	bf18      	it	ne
 801efdc:	f026 0601 	bicne.w	r6, r6, #1
 801efe0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801efe2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801efe6:	bf18      	it	ne
 801efe8:	b2b6      	uxthne	r6, r6
 801efea:	9104      	str	r1, [sp, #16]
 801efec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801efee:	9602      	str	r6, [sp, #8]
 801eff0:	9103      	str	r1, [sp, #12]
 801eff2:	9926      	ldr	r1, [sp, #152]	; 0x98
 801eff4:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801eff8:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 801effa:	47a0      	blx	r4
 801effc:	b017      	add	sp, #92	; 0x5c
 801effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f004:	e74c      	b.n	801eea0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 801f006:	f8b8 c000 	ldrh.w	ip, [r8]
 801f00a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801f00e:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 801f012:	fb10 f004 	smulbb	r0, r0, r4
 801f016:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f018:	f026 0607 	bic.w	r6, r6, #7
 801f01c:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 801f020:	fb0e f606 	mul.w	r6, lr, r6
 801f024:	fb00 6604 	mla	r6, r0, r4, r6
 801f028:	4c22      	ldr	r4, [pc, #136]	; (801f0b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 801f02a:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 801f02e:	940a      	str	r4, [sp, #40]	; 0x28
 801f030:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 801f034:	f00c 0c1f 	and.w	ip, ip, #31
 801f038:	fb0e f404 	mul.w	r4, lr, r4
 801f03c:	fb0e fc0c 	mul.w	ip, lr, ip
 801f040:	4626      	mov	r6, r4
 801f042:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f044:	fb00 6404 	mla	r4, r0, r4, r6
 801f048:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801f04a:	0c24      	lsrs	r4, r4, #16
 801f04c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f050:	4334      	orrs	r4, r6
 801f052:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f054:	fb00 cc06 	mla	ip, r0, r6, ip
 801f058:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 801f05c:	ea44 040c 	orr.w	r4, r4, ip
 801f060:	e76c      	b.n	801ef3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 801f062:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801f064:	3201      	adds	r2, #1
 801f066:	9226      	str	r2, [sp, #152]	; 0x98
 801f068:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f06a:	e76e      	b.n	801ef4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 801f06c:	b16b      	cbz	r3, 801f08a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 801f06e:	4293      	cmp	r3, r2
 801f070:	dd08      	ble.n	801f084 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 801f072:	1b58      	subs	r0, r3, r5
 801f074:	2408      	movs	r4, #8
 801f076:	1a80      	subs	r0, r0, r2
 801f078:	fb90 f0f4 	sdiv	r0, r0, r4
 801f07c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 801f07e:	3001      	adds	r0, #1
 801f080:	4404      	add	r4, r0
 801f082:	9426      	str	r4, [sp, #152]	; 0x98
 801f084:	1ad2      	subs	r2, r2, r3
 801f086:	f002 0207 	and.w	r2, r2, #7
 801f08a:	9807      	ldr	r0, [sp, #28]
 801f08c:	3f01      	subs	r7, #1
 801f08e:	9c08      	ldr	r4, [sp, #32]
 801f090:	4420      	add	r0, r4
 801f092:	4483      	add	fp, r0
 801f094:	e739      	b.n	801ef0a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801f096:	2b00      	cmp	r3, #0
 801f098:	f43f aeca 	beq.w	801ee30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 801f09c:	2180      	movs	r1, #128	; 0x80
 801f09e:	e780      	b.n	801efa2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 801f0a0:	07f3      	lsls	r3, r6, #31
 801f0a2:	f57f aee5 	bpl.w	801ee70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801f0a6:	3601      	adds	r6, #1
 801f0a8:	b2b6      	uxth	r6, r6
 801f0aa:	e6e1      	b.n	801ee70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 801f0ac:	20009b0c 	.word	0x20009b0c
 801f0b0:	20009b0e 	.word	0x20009b0e
 801f0b4:	fffff800 	.word	0xfffff800
 801f0b8:	20009b14 	.word	0x20009b14

0801f0bc <CRC_Lock>:
 801f0bc:	4a13      	ldr	r2, [pc, #76]	; (801f10c <CRC_Lock+0x50>)
 801f0be:	6813      	ldr	r3, [r2, #0]
 801f0c0:	f023 0301 	bic.w	r3, r3, #1
 801f0c4:	6013      	str	r3, [r2, #0]
 801f0c6:	4b12      	ldr	r3, [pc, #72]	; (801f110 <CRC_Lock+0x54>)
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	b9a3      	cbnz	r3, 801f0f6 <CRC_Lock+0x3a>
 801f0cc:	4b11      	ldr	r3, [pc, #68]	; (801f114 <CRC_Lock+0x58>)
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f0d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801f0d8:	d10d      	bne.n	801f0f6 <CRC_Lock+0x3a>
 801f0da:	4b0f      	ldr	r3, [pc, #60]	; (801f118 <CRC_Lock+0x5c>)
 801f0dc:	2201      	movs	r2, #1
 801f0de:	601a      	str	r2, [r3, #0]
 801f0e0:	681a      	ldr	r2, [r3, #0]
 801f0e2:	2a00      	cmp	r2, #0
 801f0e4:	d1fc      	bne.n	801f0e0 <CRC_Lock+0x24>
 801f0e6:	4b0d      	ldr	r3, [pc, #52]	; (801f11c <CRC_Lock+0x60>)
 801f0e8:	6018      	str	r0, [r3, #0]
 801f0ea:	6818      	ldr	r0, [r3, #0]
 801f0ec:	4288      	cmp	r0, r1
 801f0ee:	bf14      	ite	ne
 801f0f0:	2000      	movne	r0, #0
 801f0f2:	2001      	moveq	r0, #1
 801f0f4:	4770      	bx	lr
 801f0f6:	4b0a      	ldr	r3, [pc, #40]	; (801f120 <CRC_Lock+0x64>)
 801f0f8:	2201      	movs	r2, #1
 801f0fa:	601a      	str	r2, [r3, #0]
 801f0fc:	681a      	ldr	r2, [r3, #0]
 801f0fe:	2a00      	cmp	r2, #0
 801f100:	d1fc      	bne.n	801f0fc <CRC_Lock+0x40>
 801f102:	4b08      	ldr	r3, [pc, #32]	; (801f124 <CRC_Lock+0x68>)
 801f104:	6018      	str	r0, [r3, #0]
 801f106:	6818      	ldr	r0, [r3, #0]
 801f108:	4281      	cmp	r1, r0
 801f10a:	e7f0      	b.n	801f0ee <CRC_Lock+0x32>
 801f10c:	e0002000 	.word	0xe0002000
 801f110:	e0042000 	.word	0xe0042000
 801f114:	5c001000 	.word	0x5c001000
 801f118:	58024c08 	.word	0x58024c08
 801f11c:	58024c00 	.word	0x58024c00
 801f120:	40023008 	.word	0x40023008
 801f124:	40023000 	.word	0x40023000

0801f128 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f128:	6101      	str	r1, [r0, #16]
 801f12a:	4770      	bx	lr

0801f12c <_ZN8touchgfx8Gestures4tickEv>:
 801f12c:	7b83      	ldrb	r3, [r0, #14]
 801f12e:	b14b      	cbz	r3, 801f144 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f130:	8903      	ldrh	r3, [r0, #8]
 801f132:	3301      	adds	r3, #1
 801f134:	b29b      	uxth	r3, r3
 801f136:	2b07      	cmp	r3, #7
 801f138:	8103      	strh	r3, [r0, #8]
 801f13a:	bf81      	itttt	hi
 801f13c:	2300      	movhi	r3, #0
 801f13e:	8143      	strhhi	r3, [r0, #10]
 801f140:	8183      	strhhi	r3, [r0, #12]
 801f142:	7383      	strbhi	r3, [r0, #14]
 801f144:	4770      	bx	lr
	...

0801f148 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f14c:	4604      	mov	r4, r0
 801f14e:	4698      	mov	r8, r3
 801f150:	8880      	ldrh	r0, [r0, #4]
 801f152:	4617      	mov	r7, r2
 801f154:	4b1d      	ldr	r3, [pc, #116]	; (801f1cc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801f156:	460e      	mov	r6, r1
 801f158:	f8ad 0006 	strh.w	r0, [sp, #6]
 801f15c:	eba8 0000 	sub.w	r0, r8, r0
 801f160:	9300      	str	r3, [sp, #0]
 801f162:	2300      	movs	r3, #0
 801f164:	b280      	uxth	r0, r0
 801f166:	8aa2      	ldrh	r2, [r4, #20]
 801f168:	f88d 3004 	strb.w	r3, [sp, #4]
 801f16c:	b203      	sxth	r3, r0
 801f16e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801f172:	88e1      	ldrh	r1, [r4, #6]
 801f174:	2b00      	cmp	r3, #0
 801f176:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f17a:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f17e:	bfb8      	it	lt
 801f180:	4240      	neglt	r0, r0
 801f182:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f186:	bfb8      	it	lt
 801f188:	b203      	sxthlt	r3, r0
 801f18a:	4293      	cmp	r3, r2
 801f18c:	dc0c      	bgt.n	801f1a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801f18e:	1a69      	subs	r1, r5, r1
 801f190:	b289      	uxth	r1, r1
 801f192:	b20b      	sxth	r3, r1
 801f194:	2b00      	cmp	r3, #0
 801f196:	bfbc      	itt	lt
 801f198:	4249      	neglt	r1, r1
 801f19a:	b20b      	sxthlt	r3, r1
 801f19c:	429a      	cmp	r2, r3
 801f19e:	db03      	blt.n	801f1a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 801f1a0:	2000      	movs	r0, #0
 801f1a2:	b004      	add	sp, #16
 801f1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1a8:	6920      	ldr	r0, [r4, #16]
 801f1aa:	4669      	mov	r1, sp
 801f1ac:	eba8 0606 	sub.w	r6, r8, r6
 801f1b0:	1bef      	subs	r7, r5, r7
 801f1b2:	6803      	ldr	r3, [r0, #0]
 801f1b4:	685b      	ldr	r3, [r3, #4]
 801f1b6:	4798      	blx	r3
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	2001      	movs	r0, #1
 801f1bc:	8166      	strh	r6, [r4, #10]
 801f1be:	8123      	strh	r3, [r4, #8]
 801f1c0:	81a7      	strh	r7, [r4, #12]
 801f1c2:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f1c6:	80e5      	strh	r5, [r4, #6]
 801f1c8:	73a0      	strb	r0, [r4, #14]
 801f1ca:	e7ea      	b.n	801f1a2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 801f1cc:	08020a6c 	.word	0x08020a6c

0801f1d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1d2:	461e      	mov	r6, r3
 801f1d4:	1e4b      	subs	r3, r1, #1
 801f1d6:	b085      	sub	sp, #20
 801f1d8:	4604      	mov	r4, r0
 801f1da:	2b01      	cmp	r3, #1
 801f1dc:	460d      	mov	r5, r1
 801f1de:	4617      	mov	r7, r2
 801f1e0:	d845      	bhi.n	801f26e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 801f1e2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f1e6:	1cd3      	adds	r3, r2, #3
 801f1e8:	b29b      	uxth	r3, r3
 801f1ea:	2b06      	cmp	r3, #6
 801f1ec:	d913      	bls.n	801f216 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 801f1ee:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801f1f2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801f1f6:	4820      	ldr	r0, [pc, #128]	; (801f278 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801f1f8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f1fc:	a901      	add	r1, sp, #4
 801f1fe:	9001      	str	r0, [sp, #4]
 801f200:	2000      	movs	r0, #0
 801f202:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f206:	f88d 0008 	strb.w	r0, [sp, #8]
 801f20a:	6920      	ldr	r0, [r4, #16]
 801f20c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f210:	6803      	ldr	r3, [r0, #0]
 801f212:	689b      	ldr	r3, [r3, #8]
 801f214:	4798      	blx	r3
 801f216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f21a:	1cd3      	adds	r3, r2, #3
 801f21c:	b29b      	uxth	r3, r3
 801f21e:	2b06      	cmp	r3, #6
 801f220:	d913      	bls.n	801f24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f222:	4815      	ldr	r0, [pc, #84]	; (801f278 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 801f224:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f228:	9001      	str	r0, [sp, #4]
 801f22a:	2001      	movs	r0, #1
 801f22c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f230:	f88d 0008 	strb.w	r0, [sp, #8]
 801f234:	6920      	ldr	r0, [r4, #16]
 801f236:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f23a:	a901      	add	r1, sp, #4
 801f23c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f240:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f244:	6803      	ldr	r3, [r0, #0]
 801f246:	689b      	ldr	r3, [r3, #8]
 801f248:	4798      	blx	r3
 801f24a:	4b0c      	ldr	r3, [pc, #48]	; (801f27c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 801f24c:	a901      	add	r1, sp, #4
 801f24e:	6920      	ldr	r0, [r4, #16]
 801f250:	9301      	str	r3, [sp, #4]
 801f252:	2300      	movs	r3, #0
 801f254:	f88d 5008 	strb.w	r5, [sp, #8]
 801f258:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f25c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f260:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f264:	6803      	ldr	r3, [r0, #0]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	4798      	blx	r3
 801f26a:	b005      	add	sp, #20
 801f26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f26e:	2900      	cmp	r1, #0
 801f270:	d1eb      	bne.n	801f24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f272:	80a2      	strh	r2, [r4, #4]
 801f274:	80c6      	strh	r6, [r0, #6]
 801f276:	e7e8      	b.n	801f24a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 801f278:	080221d8 	.word	0x080221d8
 801f27c:	08020a80 	.word	0x08020a80

0801f280 <__cxa_pure_virtual>:
 801f280:	b508      	push	{r3, lr}
 801f282:	f000 f811 	bl	801f2a8 <_ZSt9terminatev>

0801f286 <_ZdlPvj>:
 801f286:	f000 b800 	b.w	801f28a <_ZdlPv>

0801f28a <_ZdlPv>:
 801f28a:	f000 b881 	b.w	801f390 <free>

0801f28e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f28e:	b508      	push	{r3, lr}
 801f290:	4780      	blx	r0
 801f292:	f000 f80e 	bl	801f2b2 <abort>
	...

0801f298 <_ZSt13get_terminatev>:
 801f298:	4b02      	ldr	r3, [pc, #8]	; (801f2a4 <_ZSt13get_terminatev+0xc>)
 801f29a:	6818      	ldr	r0, [r3, #0]
 801f29c:	f3bf 8f5b 	dmb	ish
 801f2a0:	4770      	bx	lr
 801f2a2:	bf00      	nop
 801f2a4:	20000074 	.word	0x20000074

0801f2a8 <_ZSt9terminatev>:
 801f2a8:	b508      	push	{r3, lr}
 801f2aa:	f7ff fff5 	bl	801f298 <_ZSt13get_terminatev>
 801f2ae:	f7ff ffee 	bl	801f28e <_ZN10__cxxabiv111__terminateEPFvvE>

0801f2b2 <abort>:
 801f2b2:	b508      	push	{r3, lr}
 801f2b4:	2006      	movs	r0, #6
 801f2b6:	f000 fc2f 	bl	801fb18 <raise>
 801f2ba:	2001      	movs	r0, #1
 801f2bc:	f7f8 fd9a 	bl	8017df4 <_exit>

0801f2c0 <__assert_func>:
 801f2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f2c2:	461c      	mov	r4, r3
 801f2c4:	4b09      	ldr	r3, [pc, #36]	; (801f2ec <__assert_func+0x2c>)
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	4605      	mov	r5, r0
 801f2ca:	68d8      	ldr	r0, [r3, #12]
 801f2cc:	b152      	cbz	r2, 801f2e4 <__assert_func+0x24>
 801f2ce:	4b08      	ldr	r3, [pc, #32]	; (801f2f0 <__assert_func+0x30>)
 801f2d0:	9100      	str	r1, [sp, #0]
 801f2d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801f2d6:	4907      	ldr	r1, [pc, #28]	; (801f2f4 <__assert_func+0x34>)
 801f2d8:	462b      	mov	r3, r5
 801f2da:	4622      	mov	r2, r4
 801f2dc:	f000 f81a 	bl	801f314 <fiprintf>
 801f2e0:	f7ff ffe7 	bl	801f2b2 <abort>
 801f2e4:	4b04      	ldr	r3, [pc, #16]	; (801f2f8 <__assert_func+0x38>)
 801f2e6:	461a      	mov	r2, r3
 801f2e8:	e7f2      	b.n	801f2d0 <__assert_func+0x10>
 801f2ea:	bf00      	nop
 801f2ec:	20000078 	.word	0x20000078
 801f2f0:	080227fa 	.word	0x080227fa
 801f2f4:	08022807 	.word	0x08022807
 801f2f8:	08022835 	.word	0x08022835

0801f2fc <atexit>:
 801f2fc:	2300      	movs	r3, #0
 801f2fe:	4601      	mov	r1, r0
 801f300:	461a      	mov	r2, r3
 801f302:	4618      	mov	r0, r3
 801f304:	f000 bce4 	b.w	801fcd0 <__register_exitproc>

0801f308 <__errno>:
 801f308:	4b01      	ldr	r3, [pc, #4]	; (801f310 <__errno+0x8>)
 801f30a:	6818      	ldr	r0, [r3, #0]
 801f30c:	4770      	bx	lr
 801f30e:	bf00      	nop
 801f310:	20000078 	.word	0x20000078

0801f314 <fiprintf>:
 801f314:	b40e      	push	{r1, r2, r3}
 801f316:	b503      	push	{r0, r1, lr}
 801f318:	4601      	mov	r1, r0
 801f31a:	ab03      	add	r3, sp, #12
 801f31c:	4805      	ldr	r0, [pc, #20]	; (801f334 <fiprintf+0x20>)
 801f31e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f322:	6800      	ldr	r0, [r0, #0]
 801f324:	9301      	str	r3, [sp, #4]
 801f326:	f000 f921 	bl	801f56c <_vfiprintf_r>
 801f32a:	b002      	add	sp, #8
 801f32c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f330:	b003      	add	sp, #12
 801f332:	4770      	bx	lr
 801f334:	20000078 	.word	0x20000078

0801f338 <__libc_init_array>:
 801f338:	b570      	push	{r4, r5, r6, lr}
 801f33a:	4e0d      	ldr	r6, [pc, #52]	; (801f370 <__libc_init_array+0x38>)
 801f33c:	4c0d      	ldr	r4, [pc, #52]	; (801f374 <__libc_init_array+0x3c>)
 801f33e:	1ba4      	subs	r4, r4, r6
 801f340:	10a4      	asrs	r4, r4, #2
 801f342:	2500      	movs	r5, #0
 801f344:	42a5      	cmp	r5, r4
 801f346:	d109      	bne.n	801f35c <__libc_init_array+0x24>
 801f348:	4e0b      	ldr	r6, [pc, #44]	; (801f378 <__libc_init_array+0x40>)
 801f34a:	4c0c      	ldr	r4, [pc, #48]	; (801f37c <__libc_init_array+0x44>)
 801f34c:	f000 ffb0 	bl	80202b0 <_init>
 801f350:	1ba4      	subs	r4, r4, r6
 801f352:	10a4      	asrs	r4, r4, #2
 801f354:	2500      	movs	r5, #0
 801f356:	42a5      	cmp	r5, r4
 801f358:	d105      	bne.n	801f366 <__libc_init_array+0x2e>
 801f35a:	bd70      	pop	{r4, r5, r6, pc}
 801f35c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f360:	4798      	blx	r3
 801f362:	3501      	adds	r5, #1
 801f364:	e7ee      	b.n	801f344 <__libc_init_array+0xc>
 801f366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801f36a:	4798      	blx	r3
 801f36c:	3501      	adds	r5, #1
 801f36e:	e7f2      	b.n	801f356 <__libc_init_array+0x1e>
 801f370:	080367e8 	.word	0x080367e8
 801f374:	080367e8 	.word	0x080367e8
 801f378:	080367e8 	.word	0x080367e8
 801f37c:	080367f8 	.word	0x080367f8

0801f380 <malloc>:
 801f380:	4b02      	ldr	r3, [pc, #8]	; (801f38c <malloc+0xc>)
 801f382:	4601      	mov	r1, r0
 801f384:	6818      	ldr	r0, [r3, #0]
 801f386:	f000 b86d 	b.w	801f464 <_malloc_r>
 801f38a:	bf00      	nop
 801f38c:	20000078 	.word	0x20000078

0801f390 <free>:
 801f390:	4b02      	ldr	r3, [pc, #8]	; (801f39c <free+0xc>)
 801f392:	4601      	mov	r1, r0
 801f394:	6818      	ldr	r0, [r3, #0]
 801f396:	f000 b817 	b.w	801f3c8 <_free_r>
 801f39a:	bf00      	nop
 801f39c:	20000078 	.word	0x20000078

0801f3a0 <memcpy>:
 801f3a0:	b510      	push	{r4, lr}
 801f3a2:	1e43      	subs	r3, r0, #1
 801f3a4:	440a      	add	r2, r1
 801f3a6:	4291      	cmp	r1, r2
 801f3a8:	d100      	bne.n	801f3ac <memcpy+0xc>
 801f3aa:	bd10      	pop	{r4, pc}
 801f3ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f3b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f3b4:	e7f7      	b.n	801f3a6 <memcpy+0x6>

0801f3b6 <memset>:
 801f3b6:	4402      	add	r2, r0
 801f3b8:	4603      	mov	r3, r0
 801f3ba:	4293      	cmp	r3, r2
 801f3bc:	d100      	bne.n	801f3c0 <memset+0xa>
 801f3be:	4770      	bx	lr
 801f3c0:	f803 1b01 	strb.w	r1, [r3], #1
 801f3c4:	e7f9      	b.n	801f3ba <memset+0x4>
	...

0801f3c8 <_free_r>:
 801f3c8:	b538      	push	{r3, r4, r5, lr}
 801f3ca:	4605      	mov	r5, r0
 801f3cc:	2900      	cmp	r1, #0
 801f3ce:	d045      	beq.n	801f45c <_free_r+0x94>
 801f3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3d4:	1f0c      	subs	r4, r1, #4
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	bfb8      	it	lt
 801f3da:	18e4      	addlt	r4, r4, r3
 801f3dc:	f000 feba 	bl	8020154 <__malloc_lock>
 801f3e0:	4a1f      	ldr	r2, [pc, #124]	; (801f460 <_free_r+0x98>)
 801f3e2:	6813      	ldr	r3, [r2, #0]
 801f3e4:	4610      	mov	r0, r2
 801f3e6:	b933      	cbnz	r3, 801f3f6 <_free_r+0x2e>
 801f3e8:	6063      	str	r3, [r4, #4]
 801f3ea:	6014      	str	r4, [r2, #0]
 801f3ec:	4628      	mov	r0, r5
 801f3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f3f2:	f000 beb0 	b.w	8020156 <__malloc_unlock>
 801f3f6:	42a3      	cmp	r3, r4
 801f3f8:	d90c      	bls.n	801f414 <_free_r+0x4c>
 801f3fa:	6821      	ldr	r1, [r4, #0]
 801f3fc:	1862      	adds	r2, r4, r1
 801f3fe:	4293      	cmp	r3, r2
 801f400:	bf04      	itt	eq
 801f402:	681a      	ldreq	r2, [r3, #0]
 801f404:	685b      	ldreq	r3, [r3, #4]
 801f406:	6063      	str	r3, [r4, #4]
 801f408:	bf04      	itt	eq
 801f40a:	1852      	addeq	r2, r2, r1
 801f40c:	6022      	streq	r2, [r4, #0]
 801f40e:	6004      	str	r4, [r0, #0]
 801f410:	e7ec      	b.n	801f3ec <_free_r+0x24>
 801f412:	4613      	mov	r3, r2
 801f414:	685a      	ldr	r2, [r3, #4]
 801f416:	b10a      	cbz	r2, 801f41c <_free_r+0x54>
 801f418:	42a2      	cmp	r2, r4
 801f41a:	d9fa      	bls.n	801f412 <_free_r+0x4a>
 801f41c:	6819      	ldr	r1, [r3, #0]
 801f41e:	1858      	adds	r0, r3, r1
 801f420:	42a0      	cmp	r0, r4
 801f422:	d10b      	bne.n	801f43c <_free_r+0x74>
 801f424:	6820      	ldr	r0, [r4, #0]
 801f426:	4401      	add	r1, r0
 801f428:	1858      	adds	r0, r3, r1
 801f42a:	4282      	cmp	r2, r0
 801f42c:	6019      	str	r1, [r3, #0]
 801f42e:	d1dd      	bne.n	801f3ec <_free_r+0x24>
 801f430:	6810      	ldr	r0, [r2, #0]
 801f432:	6852      	ldr	r2, [r2, #4]
 801f434:	605a      	str	r2, [r3, #4]
 801f436:	4401      	add	r1, r0
 801f438:	6019      	str	r1, [r3, #0]
 801f43a:	e7d7      	b.n	801f3ec <_free_r+0x24>
 801f43c:	d902      	bls.n	801f444 <_free_r+0x7c>
 801f43e:	230c      	movs	r3, #12
 801f440:	602b      	str	r3, [r5, #0]
 801f442:	e7d3      	b.n	801f3ec <_free_r+0x24>
 801f444:	6820      	ldr	r0, [r4, #0]
 801f446:	1821      	adds	r1, r4, r0
 801f448:	428a      	cmp	r2, r1
 801f44a:	bf04      	itt	eq
 801f44c:	6811      	ldreq	r1, [r2, #0]
 801f44e:	6852      	ldreq	r2, [r2, #4]
 801f450:	6062      	str	r2, [r4, #4]
 801f452:	bf04      	itt	eq
 801f454:	1809      	addeq	r1, r1, r0
 801f456:	6021      	streq	r1, [r4, #0]
 801f458:	605c      	str	r4, [r3, #4]
 801f45a:	e7c7      	b.n	801f3ec <_free_r+0x24>
 801f45c:	bd38      	pop	{r3, r4, r5, pc}
 801f45e:	bf00      	nop
 801f460:	20009bb0 	.word	0x20009bb0

0801f464 <_malloc_r>:
 801f464:	b570      	push	{r4, r5, r6, lr}
 801f466:	1ccd      	adds	r5, r1, #3
 801f468:	f025 0503 	bic.w	r5, r5, #3
 801f46c:	3508      	adds	r5, #8
 801f46e:	2d0c      	cmp	r5, #12
 801f470:	bf38      	it	cc
 801f472:	250c      	movcc	r5, #12
 801f474:	2d00      	cmp	r5, #0
 801f476:	4606      	mov	r6, r0
 801f478:	db01      	blt.n	801f47e <_malloc_r+0x1a>
 801f47a:	42a9      	cmp	r1, r5
 801f47c:	d903      	bls.n	801f486 <_malloc_r+0x22>
 801f47e:	230c      	movs	r3, #12
 801f480:	6033      	str	r3, [r6, #0]
 801f482:	2000      	movs	r0, #0
 801f484:	bd70      	pop	{r4, r5, r6, pc}
 801f486:	f000 fe65 	bl	8020154 <__malloc_lock>
 801f48a:	4a21      	ldr	r2, [pc, #132]	; (801f510 <_malloc_r+0xac>)
 801f48c:	6814      	ldr	r4, [r2, #0]
 801f48e:	4621      	mov	r1, r4
 801f490:	b991      	cbnz	r1, 801f4b8 <_malloc_r+0x54>
 801f492:	4c20      	ldr	r4, [pc, #128]	; (801f514 <_malloc_r+0xb0>)
 801f494:	6823      	ldr	r3, [r4, #0]
 801f496:	b91b      	cbnz	r3, 801f4a0 <_malloc_r+0x3c>
 801f498:	4630      	mov	r0, r6
 801f49a:	f000 fb05 	bl	801faa8 <_sbrk_r>
 801f49e:	6020      	str	r0, [r4, #0]
 801f4a0:	4629      	mov	r1, r5
 801f4a2:	4630      	mov	r0, r6
 801f4a4:	f000 fb00 	bl	801faa8 <_sbrk_r>
 801f4a8:	1c43      	adds	r3, r0, #1
 801f4aa:	d124      	bne.n	801f4f6 <_malloc_r+0x92>
 801f4ac:	230c      	movs	r3, #12
 801f4ae:	6033      	str	r3, [r6, #0]
 801f4b0:	4630      	mov	r0, r6
 801f4b2:	f000 fe50 	bl	8020156 <__malloc_unlock>
 801f4b6:	e7e4      	b.n	801f482 <_malloc_r+0x1e>
 801f4b8:	680b      	ldr	r3, [r1, #0]
 801f4ba:	1b5b      	subs	r3, r3, r5
 801f4bc:	d418      	bmi.n	801f4f0 <_malloc_r+0x8c>
 801f4be:	2b0b      	cmp	r3, #11
 801f4c0:	d90f      	bls.n	801f4e2 <_malloc_r+0x7e>
 801f4c2:	600b      	str	r3, [r1, #0]
 801f4c4:	50cd      	str	r5, [r1, r3]
 801f4c6:	18cc      	adds	r4, r1, r3
 801f4c8:	4630      	mov	r0, r6
 801f4ca:	f000 fe44 	bl	8020156 <__malloc_unlock>
 801f4ce:	f104 000b 	add.w	r0, r4, #11
 801f4d2:	1d23      	adds	r3, r4, #4
 801f4d4:	f020 0007 	bic.w	r0, r0, #7
 801f4d8:	1ac3      	subs	r3, r0, r3
 801f4da:	d0d3      	beq.n	801f484 <_malloc_r+0x20>
 801f4dc:	425a      	negs	r2, r3
 801f4de:	50e2      	str	r2, [r4, r3]
 801f4e0:	e7d0      	b.n	801f484 <_malloc_r+0x20>
 801f4e2:	428c      	cmp	r4, r1
 801f4e4:	684b      	ldr	r3, [r1, #4]
 801f4e6:	bf16      	itet	ne
 801f4e8:	6063      	strne	r3, [r4, #4]
 801f4ea:	6013      	streq	r3, [r2, #0]
 801f4ec:	460c      	movne	r4, r1
 801f4ee:	e7eb      	b.n	801f4c8 <_malloc_r+0x64>
 801f4f0:	460c      	mov	r4, r1
 801f4f2:	6849      	ldr	r1, [r1, #4]
 801f4f4:	e7cc      	b.n	801f490 <_malloc_r+0x2c>
 801f4f6:	1cc4      	adds	r4, r0, #3
 801f4f8:	f024 0403 	bic.w	r4, r4, #3
 801f4fc:	42a0      	cmp	r0, r4
 801f4fe:	d005      	beq.n	801f50c <_malloc_r+0xa8>
 801f500:	1a21      	subs	r1, r4, r0
 801f502:	4630      	mov	r0, r6
 801f504:	f000 fad0 	bl	801faa8 <_sbrk_r>
 801f508:	3001      	adds	r0, #1
 801f50a:	d0cf      	beq.n	801f4ac <_malloc_r+0x48>
 801f50c:	6025      	str	r5, [r4, #0]
 801f50e:	e7db      	b.n	801f4c8 <_malloc_r+0x64>
 801f510:	20009bb0 	.word	0x20009bb0
 801f514:	20009bb4 	.word	0x20009bb4

0801f518 <__sfputc_r>:
 801f518:	6893      	ldr	r3, [r2, #8]
 801f51a:	3b01      	subs	r3, #1
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	b410      	push	{r4}
 801f520:	6093      	str	r3, [r2, #8]
 801f522:	da08      	bge.n	801f536 <__sfputc_r+0x1e>
 801f524:	6994      	ldr	r4, [r2, #24]
 801f526:	42a3      	cmp	r3, r4
 801f528:	db01      	blt.n	801f52e <__sfputc_r+0x16>
 801f52a:	290a      	cmp	r1, #10
 801f52c:	d103      	bne.n	801f536 <__sfputc_r+0x1e>
 801f52e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f532:	f000 bb0d 	b.w	801fb50 <__swbuf_r>
 801f536:	6813      	ldr	r3, [r2, #0]
 801f538:	1c58      	adds	r0, r3, #1
 801f53a:	6010      	str	r0, [r2, #0]
 801f53c:	7019      	strb	r1, [r3, #0]
 801f53e:	4608      	mov	r0, r1
 801f540:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f544:	4770      	bx	lr

0801f546 <__sfputs_r>:
 801f546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f548:	4606      	mov	r6, r0
 801f54a:	460f      	mov	r7, r1
 801f54c:	4614      	mov	r4, r2
 801f54e:	18d5      	adds	r5, r2, r3
 801f550:	42ac      	cmp	r4, r5
 801f552:	d101      	bne.n	801f558 <__sfputs_r+0x12>
 801f554:	2000      	movs	r0, #0
 801f556:	e007      	b.n	801f568 <__sfputs_r+0x22>
 801f558:	463a      	mov	r2, r7
 801f55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f55e:	4630      	mov	r0, r6
 801f560:	f7ff ffda 	bl	801f518 <__sfputc_r>
 801f564:	1c43      	adds	r3, r0, #1
 801f566:	d1f3      	bne.n	801f550 <__sfputs_r+0xa>
 801f568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f56c <_vfiprintf_r>:
 801f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f570:	460c      	mov	r4, r1
 801f572:	b09d      	sub	sp, #116	; 0x74
 801f574:	4617      	mov	r7, r2
 801f576:	461d      	mov	r5, r3
 801f578:	4606      	mov	r6, r0
 801f57a:	b118      	cbz	r0, 801f584 <_vfiprintf_r+0x18>
 801f57c:	6983      	ldr	r3, [r0, #24]
 801f57e:	b90b      	cbnz	r3, 801f584 <_vfiprintf_r+0x18>
 801f580:	f000 fcfa 	bl	801ff78 <__sinit>
 801f584:	4b7c      	ldr	r3, [pc, #496]	; (801f778 <_vfiprintf_r+0x20c>)
 801f586:	429c      	cmp	r4, r3
 801f588:	d158      	bne.n	801f63c <_vfiprintf_r+0xd0>
 801f58a:	6874      	ldr	r4, [r6, #4]
 801f58c:	89a3      	ldrh	r3, [r4, #12]
 801f58e:	0718      	lsls	r0, r3, #28
 801f590:	d55e      	bpl.n	801f650 <_vfiprintf_r+0xe4>
 801f592:	6923      	ldr	r3, [r4, #16]
 801f594:	2b00      	cmp	r3, #0
 801f596:	d05b      	beq.n	801f650 <_vfiprintf_r+0xe4>
 801f598:	2300      	movs	r3, #0
 801f59a:	9309      	str	r3, [sp, #36]	; 0x24
 801f59c:	2320      	movs	r3, #32
 801f59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f5a2:	2330      	movs	r3, #48	; 0x30
 801f5a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f5a8:	9503      	str	r5, [sp, #12]
 801f5aa:	f04f 0b01 	mov.w	fp, #1
 801f5ae:	46b8      	mov	r8, r7
 801f5b0:	4645      	mov	r5, r8
 801f5b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801f5b6:	b10b      	cbz	r3, 801f5bc <_vfiprintf_r+0x50>
 801f5b8:	2b25      	cmp	r3, #37	; 0x25
 801f5ba:	d154      	bne.n	801f666 <_vfiprintf_r+0xfa>
 801f5bc:	ebb8 0a07 	subs.w	sl, r8, r7
 801f5c0:	d00b      	beq.n	801f5da <_vfiprintf_r+0x6e>
 801f5c2:	4653      	mov	r3, sl
 801f5c4:	463a      	mov	r2, r7
 801f5c6:	4621      	mov	r1, r4
 801f5c8:	4630      	mov	r0, r6
 801f5ca:	f7ff ffbc 	bl	801f546 <__sfputs_r>
 801f5ce:	3001      	adds	r0, #1
 801f5d0:	f000 80c2 	beq.w	801f758 <_vfiprintf_r+0x1ec>
 801f5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5d6:	4453      	add	r3, sl
 801f5d8:	9309      	str	r3, [sp, #36]	; 0x24
 801f5da:	f898 3000 	ldrb.w	r3, [r8]
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	f000 80ba 	beq.w	801f758 <_vfiprintf_r+0x1ec>
 801f5e4:	2300      	movs	r3, #0
 801f5e6:	f04f 32ff 	mov.w	r2, #4294967295
 801f5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f5ee:	9304      	str	r3, [sp, #16]
 801f5f0:	9307      	str	r3, [sp, #28]
 801f5f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f5f6:	931a      	str	r3, [sp, #104]	; 0x68
 801f5f8:	46a8      	mov	r8, r5
 801f5fa:	2205      	movs	r2, #5
 801f5fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 801f600:	485e      	ldr	r0, [pc, #376]	; (801f77c <_vfiprintf_r+0x210>)
 801f602:	f7e0 fe05 	bl	8000210 <memchr>
 801f606:	9b04      	ldr	r3, [sp, #16]
 801f608:	bb78      	cbnz	r0, 801f66a <_vfiprintf_r+0xfe>
 801f60a:	06d9      	lsls	r1, r3, #27
 801f60c:	bf44      	itt	mi
 801f60e:	2220      	movmi	r2, #32
 801f610:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f614:	071a      	lsls	r2, r3, #28
 801f616:	bf44      	itt	mi
 801f618:	222b      	movmi	r2, #43	; 0x2b
 801f61a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801f61e:	782a      	ldrb	r2, [r5, #0]
 801f620:	2a2a      	cmp	r2, #42	; 0x2a
 801f622:	d02a      	beq.n	801f67a <_vfiprintf_r+0x10e>
 801f624:	9a07      	ldr	r2, [sp, #28]
 801f626:	46a8      	mov	r8, r5
 801f628:	2000      	movs	r0, #0
 801f62a:	250a      	movs	r5, #10
 801f62c:	4641      	mov	r1, r8
 801f62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f632:	3b30      	subs	r3, #48	; 0x30
 801f634:	2b09      	cmp	r3, #9
 801f636:	d969      	bls.n	801f70c <_vfiprintf_r+0x1a0>
 801f638:	b360      	cbz	r0, 801f694 <_vfiprintf_r+0x128>
 801f63a:	e024      	b.n	801f686 <_vfiprintf_r+0x11a>
 801f63c:	4b50      	ldr	r3, [pc, #320]	; (801f780 <_vfiprintf_r+0x214>)
 801f63e:	429c      	cmp	r4, r3
 801f640:	d101      	bne.n	801f646 <_vfiprintf_r+0xda>
 801f642:	68b4      	ldr	r4, [r6, #8]
 801f644:	e7a2      	b.n	801f58c <_vfiprintf_r+0x20>
 801f646:	4b4f      	ldr	r3, [pc, #316]	; (801f784 <_vfiprintf_r+0x218>)
 801f648:	429c      	cmp	r4, r3
 801f64a:	bf08      	it	eq
 801f64c:	68f4      	ldreq	r4, [r6, #12]
 801f64e:	e79d      	b.n	801f58c <_vfiprintf_r+0x20>
 801f650:	4621      	mov	r1, r4
 801f652:	4630      	mov	r0, r6
 801f654:	f000 face 	bl	801fbf4 <__swsetup_r>
 801f658:	2800      	cmp	r0, #0
 801f65a:	d09d      	beq.n	801f598 <_vfiprintf_r+0x2c>
 801f65c:	f04f 30ff 	mov.w	r0, #4294967295
 801f660:	b01d      	add	sp, #116	; 0x74
 801f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f666:	46a8      	mov	r8, r5
 801f668:	e7a2      	b.n	801f5b0 <_vfiprintf_r+0x44>
 801f66a:	4a44      	ldr	r2, [pc, #272]	; (801f77c <_vfiprintf_r+0x210>)
 801f66c:	1a80      	subs	r0, r0, r2
 801f66e:	fa0b f000 	lsl.w	r0, fp, r0
 801f672:	4318      	orrs	r0, r3
 801f674:	9004      	str	r0, [sp, #16]
 801f676:	4645      	mov	r5, r8
 801f678:	e7be      	b.n	801f5f8 <_vfiprintf_r+0x8c>
 801f67a:	9a03      	ldr	r2, [sp, #12]
 801f67c:	1d11      	adds	r1, r2, #4
 801f67e:	6812      	ldr	r2, [r2, #0]
 801f680:	9103      	str	r1, [sp, #12]
 801f682:	2a00      	cmp	r2, #0
 801f684:	db01      	blt.n	801f68a <_vfiprintf_r+0x11e>
 801f686:	9207      	str	r2, [sp, #28]
 801f688:	e004      	b.n	801f694 <_vfiprintf_r+0x128>
 801f68a:	4252      	negs	r2, r2
 801f68c:	f043 0302 	orr.w	r3, r3, #2
 801f690:	9207      	str	r2, [sp, #28]
 801f692:	9304      	str	r3, [sp, #16]
 801f694:	f898 3000 	ldrb.w	r3, [r8]
 801f698:	2b2e      	cmp	r3, #46	; 0x2e
 801f69a:	d10e      	bne.n	801f6ba <_vfiprintf_r+0x14e>
 801f69c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f6a0:	2b2a      	cmp	r3, #42	; 0x2a
 801f6a2:	d138      	bne.n	801f716 <_vfiprintf_r+0x1aa>
 801f6a4:	9b03      	ldr	r3, [sp, #12]
 801f6a6:	1d1a      	adds	r2, r3, #4
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	9203      	str	r2, [sp, #12]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	bfb8      	it	lt
 801f6b0:	f04f 33ff 	movlt.w	r3, #4294967295
 801f6b4:	f108 0802 	add.w	r8, r8, #2
 801f6b8:	9305      	str	r3, [sp, #20]
 801f6ba:	4d33      	ldr	r5, [pc, #204]	; (801f788 <_vfiprintf_r+0x21c>)
 801f6bc:	f898 1000 	ldrb.w	r1, [r8]
 801f6c0:	2203      	movs	r2, #3
 801f6c2:	4628      	mov	r0, r5
 801f6c4:	f7e0 fda4 	bl	8000210 <memchr>
 801f6c8:	b140      	cbz	r0, 801f6dc <_vfiprintf_r+0x170>
 801f6ca:	2340      	movs	r3, #64	; 0x40
 801f6cc:	1b40      	subs	r0, r0, r5
 801f6ce:	fa03 f000 	lsl.w	r0, r3, r0
 801f6d2:	9b04      	ldr	r3, [sp, #16]
 801f6d4:	4303      	orrs	r3, r0
 801f6d6:	f108 0801 	add.w	r8, r8, #1
 801f6da:	9304      	str	r3, [sp, #16]
 801f6dc:	f898 1000 	ldrb.w	r1, [r8]
 801f6e0:	482a      	ldr	r0, [pc, #168]	; (801f78c <_vfiprintf_r+0x220>)
 801f6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f6e6:	2206      	movs	r2, #6
 801f6e8:	f108 0701 	add.w	r7, r8, #1
 801f6ec:	f7e0 fd90 	bl	8000210 <memchr>
 801f6f0:	2800      	cmp	r0, #0
 801f6f2:	d037      	beq.n	801f764 <_vfiprintf_r+0x1f8>
 801f6f4:	4b26      	ldr	r3, [pc, #152]	; (801f790 <_vfiprintf_r+0x224>)
 801f6f6:	bb1b      	cbnz	r3, 801f740 <_vfiprintf_r+0x1d4>
 801f6f8:	9b03      	ldr	r3, [sp, #12]
 801f6fa:	3307      	adds	r3, #7
 801f6fc:	f023 0307 	bic.w	r3, r3, #7
 801f700:	3308      	adds	r3, #8
 801f702:	9303      	str	r3, [sp, #12]
 801f704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f706:	444b      	add	r3, r9
 801f708:	9309      	str	r3, [sp, #36]	; 0x24
 801f70a:	e750      	b.n	801f5ae <_vfiprintf_r+0x42>
 801f70c:	fb05 3202 	mla	r2, r5, r2, r3
 801f710:	2001      	movs	r0, #1
 801f712:	4688      	mov	r8, r1
 801f714:	e78a      	b.n	801f62c <_vfiprintf_r+0xc0>
 801f716:	2300      	movs	r3, #0
 801f718:	f108 0801 	add.w	r8, r8, #1
 801f71c:	9305      	str	r3, [sp, #20]
 801f71e:	4619      	mov	r1, r3
 801f720:	250a      	movs	r5, #10
 801f722:	4640      	mov	r0, r8
 801f724:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f728:	3a30      	subs	r2, #48	; 0x30
 801f72a:	2a09      	cmp	r2, #9
 801f72c:	d903      	bls.n	801f736 <_vfiprintf_r+0x1ca>
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d0c3      	beq.n	801f6ba <_vfiprintf_r+0x14e>
 801f732:	9105      	str	r1, [sp, #20]
 801f734:	e7c1      	b.n	801f6ba <_vfiprintf_r+0x14e>
 801f736:	fb05 2101 	mla	r1, r5, r1, r2
 801f73a:	2301      	movs	r3, #1
 801f73c:	4680      	mov	r8, r0
 801f73e:	e7f0      	b.n	801f722 <_vfiprintf_r+0x1b6>
 801f740:	ab03      	add	r3, sp, #12
 801f742:	9300      	str	r3, [sp, #0]
 801f744:	4622      	mov	r2, r4
 801f746:	4b13      	ldr	r3, [pc, #76]	; (801f794 <_vfiprintf_r+0x228>)
 801f748:	a904      	add	r1, sp, #16
 801f74a:	4630      	mov	r0, r6
 801f74c:	f3af 8000 	nop.w
 801f750:	f1b0 3fff 	cmp.w	r0, #4294967295
 801f754:	4681      	mov	r9, r0
 801f756:	d1d5      	bne.n	801f704 <_vfiprintf_r+0x198>
 801f758:	89a3      	ldrh	r3, [r4, #12]
 801f75a:	065b      	lsls	r3, r3, #25
 801f75c:	f53f af7e 	bmi.w	801f65c <_vfiprintf_r+0xf0>
 801f760:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f762:	e77d      	b.n	801f660 <_vfiprintf_r+0xf4>
 801f764:	ab03      	add	r3, sp, #12
 801f766:	9300      	str	r3, [sp, #0]
 801f768:	4622      	mov	r2, r4
 801f76a:	4b0a      	ldr	r3, [pc, #40]	; (801f794 <_vfiprintf_r+0x228>)
 801f76c:	a904      	add	r1, sp, #16
 801f76e:	4630      	mov	r0, r6
 801f770:	f000 f888 	bl	801f884 <_printf_i>
 801f774:	e7ec      	b.n	801f750 <_vfiprintf_r+0x1e4>
 801f776:	bf00      	nop
 801f778:	08022890 	.word	0x08022890
 801f77c:	0802283c 	.word	0x0802283c
 801f780:	080228b0 	.word	0x080228b0
 801f784:	08022870 	.word	0x08022870
 801f788:	08022842 	.word	0x08022842
 801f78c:	08022846 	.word	0x08022846
 801f790:	00000000 	.word	0x00000000
 801f794:	0801f547 	.word	0x0801f547

0801f798 <_printf_common>:
 801f798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f79c:	4691      	mov	r9, r2
 801f79e:	461f      	mov	r7, r3
 801f7a0:	688a      	ldr	r2, [r1, #8]
 801f7a2:	690b      	ldr	r3, [r1, #16]
 801f7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f7a8:	4293      	cmp	r3, r2
 801f7aa:	bfb8      	it	lt
 801f7ac:	4613      	movlt	r3, r2
 801f7ae:	f8c9 3000 	str.w	r3, [r9]
 801f7b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f7b6:	4606      	mov	r6, r0
 801f7b8:	460c      	mov	r4, r1
 801f7ba:	b112      	cbz	r2, 801f7c2 <_printf_common+0x2a>
 801f7bc:	3301      	adds	r3, #1
 801f7be:	f8c9 3000 	str.w	r3, [r9]
 801f7c2:	6823      	ldr	r3, [r4, #0]
 801f7c4:	0699      	lsls	r1, r3, #26
 801f7c6:	bf42      	ittt	mi
 801f7c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801f7cc:	3302      	addmi	r3, #2
 801f7ce:	f8c9 3000 	strmi.w	r3, [r9]
 801f7d2:	6825      	ldr	r5, [r4, #0]
 801f7d4:	f015 0506 	ands.w	r5, r5, #6
 801f7d8:	d107      	bne.n	801f7ea <_printf_common+0x52>
 801f7da:	f104 0a19 	add.w	sl, r4, #25
 801f7de:	68e3      	ldr	r3, [r4, #12]
 801f7e0:	f8d9 2000 	ldr.w	r2, [r9]
 801f7e4:	1a9b      	subs	r3, r3, r2
 801f7e6:	42ab      	cmp	r3, r5
 801f7e8:	dc28      	bgt.n	801f83c <_printf_common+0xa4>
 801f7ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801f7ee:	6822      	ldr	r2, [r4, #0]
 801f7f0:	3300      	adds	r3, #0
 801f7f2:	bf18      	it	ne
 801f7f4:	2301      	movne	r3, #1
 801f7f6:	0692      	lsls	r2, r2, #26
 801f7f8:	d42d      	bmi.n	801f856 <_printf_common+0xbe>
 801f7fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f7fe:	4639      	mov	r1, r7
 801f800:	4630      	mov	r0, r6
 801f802:	47c0      	blx	r8
 801f804:	3001      	adds	r0, #1
 801f806:	d020      	beq.n	801f84a <_printf_common+0xb2>
 801f808:	6823      	ldr	r3, [r4, #0]
 801f80a:	68e5      	ldr	r5, [r4, #12]
 801f80c:	f8d9 2000 	ldr.w	r2, [r9]
 801f810:	f003 0306 	and.w	r3, r3, #6
 801f814:	2b04      	cmp	r3, #4
 801f816:	bf08      	it	eq
 801f818:	1aad      	subeq	r5, r5, r2
 801f81a:	68a3      	ldr	r3, [r4, #8]
 801f81c:	6922      	ldr	r2, [r4, #16]
 801f81e:	bf0c      	ite	eq
 801f820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f824:	2500      	movne	r5, #0
 801f826:	4293      	cmp	r3, r2
 801f828:	bfc4      	itt	gt
 801f82a:	1a9b      	subgt	r3, r3, r2
 801f82c:	18ed      	addgt	r5, r5, r3
 801f82e:	f04f 0900 	mov.w	r9, #0
 801f832:	341a      	adds	r4, #26
 801f834:	454d      	cmp	r5, r9
 801f836:	d11a      	bne.n	801f86e <_printf_common+0xd6>
 801f838:	2000      	movs	r0, #0
 801f83a:	e008      	b.n	801f84e <_printf_common+0xb6>
 801f83c:	2301      	movs	r3, #1
 801f83e:	4652      	mov	r2, sl
 801f840:	4639      	mov	r1, r7
 801f842:	4630      	mov	r0, r6
 801f844:	47c0      	blx	r8
 801f846:	3001      	adds	r0, #1
 801f848:	d103      	bne.n	801f852 <_printf_common+0xba>
 801f84a:	f04f 30ff 	mov.w	r0, #4294967295
 801f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f852:	3501      	adds	r5, #1
 801f854:	e7c3      	b.n	801f7de <_printf_common+0x46>
 801f856:	18e1      	adds	r1, r4, r3
 801f858:	1c5a      	adds	r2, r3, #1
 801f85a:	2030      	movs	r0, #48	; 0x30
 801f85c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f860:	4422      	add	r2, r4
 801f862:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f86a:	3302      	adds	r3, #2
 801f86c:	e7c5      	b.n	801f7fa <_printf_common+0x62>
 801f86e:	2301      	movs	r3, #1
 801f870:	4622      	mov	r2, r4
 801f872:	4639      	mov	r1, r7
 801f874:	4630      	mov	r0, r6
 801f876:	47c0      	blx	r8
 801f878:	3001      	adds	r0, #1
 801f87a:	d0e6      	beq.n	801f84a <_printf_common+0xb2>
 801f87c:	f109 0901 	add.w	r9, r9, #1
 801f880:	e7d8      	b.n	801f834 <_printf_common+0x9c>
	...

0801f884 <_printf_i>:
 801f884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f888:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801f88c:	460c      	mov	r4, r1
 801f88e:	7e09      	ldrb	r1, [r1, #24]
 801f890:	b085      	sub	sp, #20
 801f892:	296e      	cmp	r1, #110	; 0x6e
 801f894:	4617      	mov	r7, r2
 801f896:	4606      	mov	r6, r0
 801f898:	4698      	mov	r8, r3
 801f89a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f89c:	f000 80b3 	beq.w	801fa06 <_printf_i+0x182>
 801f8a0:	d822      	bhi.n	801f8e8 <_printf_i+0x64>
 801f8a2:	2963      	cmp	r1, #99	; 0x63
 801f8a4:	d036      	beq.n	801f914 <_printf_i+0x90>
 801f8a6:	d80a      	bhi.n	801f8be <_printf_i+0x3a>
 801f8a8:	2900      	cmp	r1, #0
 801f8aa:	f000 80b9 	beq.w	801fa20 <_printf_i+0x19c>
 801f8ae:	2958      	cmp	r1, #88	; 0x58
 801f8b0:	f000 8083 	beq.w	801f9ba <_printf_i+0x136>
 801f8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f8b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801f8bc:	e032      	b.n	801f924 <_printf_i+0xa0>
 801f8be:	2964      	cmp	r1, #100	; 0x64
 801f8c0:	d001      	beq.n	801f8c6 <_printf_i+0x42>
 801f8c2:	2969      	cmp	r1, #105	; 0x69
 801f8c4:	d1f6      	bne.n	801f8b4 <_printf_i+0x30>
 801f8c6:	6820      	ldr	r0, [r4, #0]
 801f8c8:	6813      	ldr	r3, [r2, #0]
 801f8ca:	0605      	lsls	r5, r0, #24
 801f8cc:	f103 0104 	add.w	r1, r3, #4
 801f8d0:	d52a      	bpl.n	801f928 <_printf_i+0xa4>
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	6011      	str	r1, [r2, #0]
 801f8d6:	2b00      	cmp	r3, #0
 801f8d8:	da03      	bge.n	801f8e2 <_printf_i+0x5e>
 801f8da:	222d      	movs	r2, #45	; 0x2d
 801f8dc:	425b      	negs	r3, r3
 801f8de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801f8e2:	486f      	ldr	r0, [pc, #444]	; (801faa0 <_printf_i+0x21c>)
 801f8e4:	220a      	movs	r2, #10
 801f8e6:	e039      	b.n	801f95c <_printf_i+0xd8>
 801f8e8:	2973      	cmp	r1, #115	; 0x73
 801f8ea:	f000 809d 	beq.w	801fa28 <_printf_i+0x1a4>
 801f8ee:	d808      	bhi.n	801f902 <_printf_i+0x7e>
 801f8f0:	296f      	cmp	r1, #111	; 0x6f
 801f8f2:	d020      	beq.n	801f936 <_printf_i+0xb2>
 801f8f4:	2970      	cmp	r1, #112	; 0x70
 801f8f6:	d1dd      	bne.n	801f8b4 <_printf_i+0x30>
 801f8f8:	6823      	ldr	r3, [r4, #0]
 801f8fa:	f043 0320 	orr.w	r3, r3, #32
 801f8fe:	6023      	str	r3, [r4, #0]
 801f900:	e003      	b.n	801f90a <_printf_i+0x86>
 801f902:	2975      	cmp	r1, #117	; 0x75
 801f904:	d017      	beq.n	801f936 <_printf_i+0xb2>
 801f906:	2978      	cmp	r1, #120	; 0x78
 801f908:	d1d4      	bne.n	801f8b4 <_printf_i+0x30>
 801f90a:	2378      	movs	r3, #120	; 0x78
 801f90c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f910:	4864      	ldr	r0, [pc, #400]	; (801faa4 <_printf_i+0x220>)
 801f912:	e055      	b.n	801f9c0 <_printf_i+0x13c>
 801f914:	6813      	ldr	r3, [r2, #0]
 801f916:	1d19      	adds	r1, r3, #4
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	6011      	str	r1, [r2, #0]
 801f91c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f924:	2301      	movs	r3, #1
 801f926:	e08c      	b.n	801fa42 <_printf_i+0x1be>
 801f928:	681b      	ldr	r3, [r3, #0]
 801f92a:	6011      	str	r1, [r2, #0]
 801f92c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f930:	bf18      	it	ne
 801f932:	b21b      	sxthne	r3, r3
 801f934:	e7cf      	b.n	801f8d6 <_printf_i+0x52>
 801f936:	6813      	ldr	r3, [r2, #0]
 801f938:	6825      	ldr	r5, [r4, #0]
 801f93a:	1d18      	adds	r0, r3, #4
 801f93c:	6010      	str	r0, [r2, #0]
 801f93e:	0628      	lsls	r0, r5, #24
 801f940:	d501      	bpl.n	801f946 <_printf_i+0xc2>
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	e002      	b.n	801f94c <_printf_i+0xc8>
 801f946:	0668      	lsls	r0, r5, #25
 801f948:	d5fb      	bpl.n	801f942 <_printf_i+0xbe>
 801f94a:	881b      	ldrh	r3, [r3, #0]
 801f94c:	4854      	ldr	r0, [pc, #336]	; (801faa0 <_printf_i+0x21c>)
 801f94e:	296f      	cmp	r1, #111	; 0x6f
 801f950:	bf14      	ite	ne
 801f952:	220a      	movne	r2, #10
 801f954:	2208      	moveq	r2, #8
 801f956:	2100      	movs	r1, #0
 801f958:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f95c:	6865      	ldr	r5, [r4, #4]
 801f95e:	60a5      	str	r5, [r4, #8]
 801f960:	2d00      	cmp	r5, #0
 801f962:	f2c0 8095 	blt.w	801fa90 <_printf_i+0x20c>
 801f966:	6821      	ldr	r1, [r4, #0]
 801f968:	f021 0104 	bic.w	r1, r1, #4
 801f96c:	6021      	str	r1, [r4, #0]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d13d      	bne.n	801f9ee <_printf_i+0x16a>
 801f972:	2d00      	cmp	r5, #0
 801f974:	f040 808e 	bne.w	801fa94 <_printf_i+0x210>
 801f978:	4665      	mov	r5, ip
 801f97a:	2a08      	cmp	r2, #8
 801f97c:	d10b      	bne.n	801f996 <_printf_i+0x112>
 801f97e:	6823      	ldr	r3, [r4, #0]
 801f980:	07db      	lsls	r3, r3, #31
 801f982:	d508      	bpl.n	801f996 <_printf_i+0x112>
 801f984:	6923      	ldr	r3, [r4, #16]
 801f986:	6862      	ldr	r2, [r4, #4]
 801f988:	429a      	cmp	r2, r3
 801f98a:	bfde      	ittt	le
 801f98c:	2330      	movle	r3, #48	; 0x30
 801f98e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f992:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f996:	ebac 0305 	sub.w	r3, ip, r5
 801f99a:	6123      	str	r3, [r4, #16]
 801f99c:	f8cd 8000 	str.w	r8, [sp]
 801f9a0:	463b      	mov	r3, r7
 801f9a2:	aa03      	add	r2, sp, #12
 801f9a4:	4621      	mov	r1, r4
 801f9a6:	4630      	mov	r0, r6
 801f9a8:	f7ff fef6 	bl	801f798 <_printf_common>
 801f9ac:	3001      	adds	r0, #1
 801f9ae:	d14d      	bne.n	801fa4c <_printf_i+0x1c8>
 801f9b0:	f04f 30ff 	mov.w	r0, #4294967295
 801f9b4:	b005      	add	sp, #20
 801f9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f9ba:	4839      	ldr	r0, [pc, #228]	; (801faa0 <_printf_i+0x21c>)
 801f9bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801f9c0:	6813      	ldr	r3, [r2, #0]
 801f9c2:	6821      	ldr	r1, [r4, #0]
 801f9c4:	1d1d      	adds	r5, r3, #4
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	6015      	str	r5, [r2, #0]
 801f9ca:	060a      	lsls	r2, r1, #24
 801f9cc:	d50b      	bpl.n	801f9e6 <_printf_i+0x162>
 801f9ce:	07ca      	lsls	r2, r1, #31
 801f9d0:	bf44      	itt	mi
 801f9d2:	f041 0120 	orrmi.w	r1, r1, #32
 801f9d6:	6021      	strmi	r1, [r4, #0]
 801f9d8:	b91b      	cbnz	r3, 801f9e2 <_printf_i+0x15e>
 801f9da:	6822      	ldr	r2, [r4, #0]
 801f9dc:	f022 0220 	bic.w	r2, r2, #32
 801f9e0:	6022      	str	r2, [r4, #0]
 801f9e2:	2210      	movs	r2, #16
 801f9e4:	e7b7      	b.n	801f956 <_printf_i+0xd2>
 801f9e6:	064d      	lsls	r5, r1, #25
 801f9e8:	bf48      	it	mi
 801f9ea:	b29b      	uxthmi	r3, r3
 801f9ec:	e7ef      	b.n	801f9ce <_printf_i+0x14a>
 801f9ee:	4665      	mov	r5, ip
 801f9f0:	fbb3 f1f2 	udiv	r1, r3, r2
 801f9f4:	fb02 3311 	mls	r3, r2, r1, r3
 801f9f8:	5cc3      	ldrb	r3, [r0, r3]
 801f9fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801f9fe:	460b      	mov	r3, r1
 801fa00:	2900      	cmp	r1, #0
 801fa02:	d1f5      	bne.n	801f9f0 <_printf_i+0x16c>
 801fa04:	e7b9      	b.n	801f97a <_printf_i+0xf6>
 801fa06:	6813      	ldr	r3, [r2, #0]
 801fa08:	6825      	ldr	r5, [r4, #0]
 801fa0a:	6961      	ldr	r1, [r4, #20]
 801fa0c:	1d18      	adds	r0, r3, #4
 801fa0e:	6010      	str	r0, [r2, #0]
 801fa10:	0628      	lsls	r0, r5, #24
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	d501      	bpl.n	801fa1a <_printf_i+0x196>
 801fa16:	6019      	str	r1, [r3, #0]
 801fa18:	e002      	b.n	801fa20 <_printf_i+0x19c>
 801fa1a:	066a      	lsls	r2, r5, #25
 801fa1c:	d5fb      	bpl.n	801fa16 <_printf_i+0x192>
 801fa1e:	8019      	strh	r1, [r3, #0]
 801fa20:	2300      	movs	r3, #0
 801fa22:	6123      	str	r3, [r4, #16]
 801fa24:	4665      	mov	r5, ip
 801fa26:	e7b9      	b.n	801f99c <_printf_i+0x118>
 801fa28:	6813      	ldr	r3, [r2, #0]
 801fa2a:	1d19      	adds	r1, r3, #4
 801fa2c:	6011      	str	r1, [r2, #0]
 801fa2e:	681d      	ldr	r5, [r3, #0]
 801fa30:	6862      	ldr	r2, [r4, #4]
 801fa32:	2100      	movs	r1, #0
 801fa34:	4628      	mov	r0, r5
 801fa36:	f7e0 fbeb 	bl	8000210 <memchr>
 801fa3a:	b108      	cbz	r0, 801fa40 <_printf_i+0x1bc>
 801fa3c:	1b40      	subs	r0, r0, r5
 801fa3e:	6060      	str	r0, [r4, #4]
 801fa40:	6863      	ldr	r3, [r4, #4]
 801fa42:	6123      	str	r3, [r4, #16]
 801fa44:	2300      	movs	r3, #0
 801fa46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa4a:	e7a7      	b.n	801f99c <_printf_i+0x118>
 801fa4c:	6923      	ldr	r3, [r4, #16]
 801fa4e:	462a      	mov	r2, r5
 801fa50:	4639      	mov	r1, r7
 801fa52:	4630      	mov	r0, r6
 801fa54:	47c0      	blx	r8
 801fa56:	3001      	adds	r0, #1
 801fa58:	d0aa      	beq.n	801f9b0 <_printf_i+0x12c>
 801fa5a:	6823      	ldr	r3, [r4, #0]
 801fa5c:	079b      	lsls	r3, r3, #30
 801fa5e:	d413      	bmi.n	801fa88 <_printf_i+0x204>
 801fa60:	68e0      	ldr	r0, [r4, #12]
 801fa62:	9b03      	ldr	r3, [sp, #12]
 801fa64:	4298      	cmp	r0, r3
 801fa66:	bfb8      	it	lt
 801fa68:	4618      	movlt	r0, r3
 801fa6a:	e7a3      	b.n	801f9b4 <_printf_i+0x130>
 801fa6c:	2301      	movs	r3, #1
 801fa6e:	464a      	mov	r2, r9
 801fa70:	4639      	mov	r1, r7
 801fa72:	4630      	mov	r0, r6
 801fa74:	47c0      	blx	r8
 801fa76:	3001      	adds	r0, #1
 801fa78:	d09a      	beq.n	801f9b0 <_printf_i+0x12c>
 801fa7a:	3501      	adds	r5, #1
 801fa7c:	68e3      	ldr	r3, [r4, #12]
 801fa7e:	9a03      	ldr	r2, [sp, #12]
 801fa80:	1a9b      	subs	r3, r3, r2
 801fa82:	42ab      	cmp	r3, r5
 801fa84:	dcf2      	bgt.n	801fa6c <_printf_i+0x1e8>
 801fa86:	e7eb      	b.n	801fa60 <_printf_i+0x1dc>
 801fa88:	2500      	movs	r5, #0
 801fa8a:	f104 0919 	add.w	r9, r4, #25
 801fa8e:	e7f5      	b.n	801fa7c <_printf_i+0x1f8>
 801fa90:	2b00      	cmp	r3, #0
 801fa92:	d1ac      	bne.n	801f9ee <_printf_i+0x16a>
 801fa94:	7803      	ldrb	r3, [r0, #0]
 801fa96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fa9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801fa9e:	e76c      	b.n	801f97a <_printf_i+0xf6>
 801faa0:	0802284d 	.word	0x0802284d
 801faa4:	0802285e 	.word	0x0802285e

0801faa8 <_sbrk_r>:
 801faa8:	b538      	push	{r3, r4, r5, lr}
 801faaa:	4c06      	ldr	r4, [pc, #24]	; (801fac4 <_sbrk_r+0x1c>)
 801faac:	2300      	movs	r3, #0
 801faae:	4605      	mov	r5, r0
 801fab0:	4608      	mov	r0, r1
 801fab2:	6023      	str	r3, [r4, #0]
 801fab4:	f7f8 fa16 	bl	8017ee4 <_sbrk>
 801fab8:	1c43      	adds	r3, r0, #1
 801faba:	d102      	bne.n	801fac2 <_sbrk_r+0x1a>
 801fabc:	6823      	ldr	r3, [r4, #0]
 801fabe:	b103      	cbz	r3, 801fac2 <_sbrk_r+0x1a>
 801fac0:	602b      	str	r3, [r5, #0]
 801fac2:	bd38      	pop	{r3, r4, r5, pc}
 801fac4:	2000a794 	.word	0x2000a794

0801fac8 <_raise_r>:
 801fac8:	291f      	cmp	r1, #31
 801faca:	b538      	push	{r3, r4, r5, lr}
 801facc:	4604      	mov	r4, r0
 801face:	460d      	mov	r5, r1
 801fad0:	d904      	bls.n	801fadc <_raise_r+0x14>
 801fad2:	2316      	movs	r3, #22
 801fad4:	6003      	str	r3, [r0, #0]
 801fad6:	f04f 30ff 	mov.w	r0, #4294967295
 801fada:	bd38      	pop	{r3, r4, r5, pc}
 801fadc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fade:	b112      	cbz	r2, 801fae6 <_raise_r+0x1e>
 801fae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fae4:	b94b      	cbnz	r3, 801fafa <_raise_r+0x32>
 801fae6:	4620      	mov	r0, r4
 801fae8:	f000 f830 	bl	801fb4c <_getpid_r>
 801faec:	462a      	mov	r2, r5
 801faee:	4601      	mov	r1, r0
 801faf0:	4620      	mov	r0, r4
 801faf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801faf6:	f000 b817 	b.w	801fb28 <_kill_r>
 801fafa:	2b01      	cmp	r3, #1
 801fafc:	d00a      	beq.n	801fb14 <_raise_r+0x4c>
 801fafe:	1c59      	adds	r1, r3, #1
 801fb00:	d103      	bne.n	801fb0a <_raise_r+0x42>
 801fb02:	2316      	movs	r3, #22
 801fb04:	6003      	str	r3, [r0, #0]
 801fb06:	2001      	movs	r0, #1
 801fb08:	e7e7      	b.n	801fada <_raise_r+0x12>
 801fb0a:	2400      	movs	r4, #0
 801fb0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fb10:	4628      	mov	r0, r5
 801fb12:	4798      	blx	r3
 801fb14:	2000      	movs	r0, #0
 801fb16:	e7e0      	b.n	801fada <_raise_r+0x12>

0801fb18 <raise>:
 801fb18:	4b02      	ldr	r3, [pc, #8]	; (801fb24 <raise+0xc>)
 801fb1a:	4601      	mov	r1, r0
 801fb1c:	6818      	ldr	r0, [r3, #0]
 801fb1e:	f7ff bfd3 	b.w	801fac8 <_raise_r>
 801fb22:	bf00      	nop
 801fb24:	20000078 	.word	0x20000078

0801fb28 <_kill_r>:
 801fb28:	b538      	push	{r3, r4, r5, lr}
 801fb2a:	4c07      	ldr	r4, [pc, #28]	; (801fb48 <_kill_r+0x20>)
 801fb2c:	2300      	movs	r3, #0
 801fb2e:	4605      	mov	r5, r0
 801fb30:	4608      	mov	r0, r1
 801fb32:	4611      	mov	r1, r2
 801fb34:	6023      	str	r3, [r4, #0]
 801fb36:	f7f8 f94d 	bl	8017dd4 <_kill>
 801fb3a:	1c43      	adds	r3, r0, #1
 801fb3c:	d102      	bne.n	801fb44 <_kill_r+0x1c>
 801fb3e:	6823      	ldr	r3, [r4, #0]
 801fb40:	b103      	cbz	r3, 801fb44 <_kill_r+0x1c>
 801fb42:	602b      	str	r3, [r5, #0]
 801fb44:	bd38      	pop	{r3, r4, r5, pc}
 801fb46:	bf00      	nop
 801fb48:	2000a794 	.word	0x2000a794

0801fb4c <_getpid_r>:
 801fb4c:	f7f8 b93a 	b.w	8017dc4 <_getpid>

0801fb50 <__swbuf_r>:
 801fb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb52:	460e      	mov	r6, r1
 801fb54:	4614      	mov	r4, r2
 801fb56:	4605      	mov	r5, r0
 801fb58:	b118      	cbz	r0, 801fb62 <__swbuf_r+0x12>
 801fb5a:	6983      	ldr	r3, [r0, #24]
 801fb5c:	b90b      	cbnz	r3, 801fb62 <__swbuf_r+0x12>
 801fb5e:	f000 fa0b 	bl	801ff78 <__sinit>
 801fb62:	4b21      	ldr	r3, [pc, #132]	; (801fbe8 <__swbuf_r+0x98>)
 801fb64:	429c      	cmp	r4, r3
 801fb66:	d12a      	bne.n	801fbbe <__swbuf_r+0x6e>
 801fb68:	686c      	ldr	r4, [r5, #4]
 801fb6a:	69a3      	ldr	r3, [r4, #24]
 801fb6c:	60a3      	str	r3, [r4, #8]
 801fb6e:	89a3      	ldrh	r3, [r4, #12]
 801fb70:	071a      	lsls	r2, r3, #28
 801fb72:	d52e      	bpl.n	801fbd2 <__swbuf_r+0x82>
 801fb74:	6923      	ldr	r3, [r4, #16]
 801fb76:	b363      	cbz	r3, 801fbd2 <__swbuf_r+0x82>
 801fb78:	6923      	ldr	r3, [r4, #16]
 801fb7a:	6820      	ldr	r0, [r4, #0]
 801fb7c:	1ac0      	subs	r0, r0, r3
 801fb7e:	6963      	ldr	r3, [r4, #20]
 801fb80:	b2f6      	uxtb	r6, r6
 801fb82:	4283      	cmp	r3, r0
 801fb84:	4637      	mov	r7, r6
 801fb86:	dc04      	bgt.n	801fb92 <__swbuf_r+0x42>
 801fb88:	4621      	mov	r1, r4
 801fb8a:	4628      	mov	r0, r5
 801fb8c:	f000 f98a 	bl	801fea4 <_fflush_r>
 801fb90:	bb28      	cbnz	r0, 801fbde <__swbuf_r+0x8e>
 801fb92:	68a3      	ldr	r3, [r4, #8]
 801fb94:	3b01      	subs	r3, #1
 801fb96:	60a3      	str	r3, [r4, #8]
 801fb98:	6823      	ldr	r3, [r4, #0]
 801fb9a:	1c5a      	adds	r2, r3, #1
 801fb9c:	6022      	str	r2, [r4, #0]
 801fb9e:	701e      	strb	r6, [r3, #0]
 801fba0:	6963      	ldr	r3, [r4, #20]
 801fba2:	3001      	adds	r0, #1
 801fba4:	4283      	cmp	r3, r0
 801fba6:	d004      	beq.n	801fbb2 <__swbuf_r+0x62>
 801fba8:	89a3      	ldrh	r3, [r4, #12]
 801fbaa:	07db      	lsls	r3, r3, #31
 801fbac:	d519      	bpl.n	801fbe2 <__swbuf_r+0x92>
 801fbae:	2e0a      	cmp	r6, #10
 801fbb0:	d117      	bne.n	801fbe2 <__swbuf_r+0x92>
 801fbb2:	4621      	mov	r1, r4
 801fbb4:	4628      	mov	r0, r5
 801fbb6:	f000 f975 	bl	801fea4 <_fflush_r>
 801fbba:	b190      	cbz	r0, 801fbe2 <__swbuf_r+0x92>
 801fbbc:	e00f      	b.n	801fbde <__swbuf_r+0x8e>
 801fbbe:	4b0b      	ldr	r3, [pc, #44]	; (801fbec <__swbuf_r+0x9c>)
 801fbc0:	429c      	cmp	r4, r3
 801fbc2:	d101      	bne.n	801fbc8 <__swbuf_r+0x78>
 801fbc4:	68ac      	ldr	r4, [r5, #8]
 801fbc6:	e7d0      	b.n	801fb6a <__swbuf_r+0x1a>
 801fbc8:	4b09      	ldr	r3, [pc, #36]	; (801fbf0 <__swbuf_r+0xa0>)
 801fbca:	429c      	cmp	r4, r3
 801fbcc:	bf08      	it	eq
 801fbce:	68ec      	ldreq	r4, [r5, #12]
 801fbd0:	e7cb      	b.n	801fb6a <__swbuf_r+0x1a>
 801fbd2:	4621      	mov	r1, r4
 801fbd4:	4628      	mov	r0, r5
 801fbd6:	f000 f80d 	bl	801fbf4 <__swsetup_r>
 801fbda:	2800      	cmp	r0, #0
 801fbdc:	d0cc      	beq.n	801fb78 <__swbuf_r+0x28>
 801fbde:	f04f 37ff 	mov.w	r7, #4294967295
 801fbe2:	4638      	mov	r0, r7
 801fbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbe6:	bf00      	nop
 801fbe8:	08022890 	.word	0x08022890
 801fbec:	080228b0 	.word	0x080228b0
 801fbf0:	08022870 	.word	0x08022870

0801fbf4 <__swsetup_r>:
 801fbf4:	4b32      	ldr	r3, [pc, #200]	; (801fcc0 <__swsetup_r+0xcc>)
 801fbf6:	b570      	push	{r4, r5, r6, lr}
 801fbf8:	681d      	ldr	r5, [r3, #0]
 801fbfa:	4606      	mov	r6, r0
 801fbfc:	460c      	mov	r4, r1
 801fbfe:	b125      	cbz	r5, 801fc0a <__swsetup_r+0x16>
 801fc00:	69ab      	ldr	r3, [r5, #24]
 801fc02:	b913      	cbnz	r3, 801fc0a <__swsetup_r+0x16>
 801fc04:	4628      	mov	r0, r5
 801fc06:	f000 f9b7 	bl	801ff78 <__sinit>
 801fc0a:	4b2e      	ldr	r3, [pc, #184]	; (801fcc4 <__swsetup_r+0xd0>)
 801fc0c:	429c      	cmp	r4, r3
 801fc0e:	d10f      	bne.n	801fc30 <__swsetup_r+0x3c>
 801fc10:	686c      	ldr	r4, [r5, #4]
 801fc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc16:	b29a      	uxth	r2, r3
 801fc18:	0715      	lsls	r5, r2, #28
 801fc1a:	d42c      	bmi.n	801fc76 <__swsetup_r+0x82>
 801fc1c:	06d0      	lsls	r0, r2, #27
 801fc1e:	d411      	bmi.n	801fc44 <__swsetup_r+0x50>
 801fc20:	2209      	movs	r2, #9
 801fc22:	6032      	str	r2, [r6, #0]
 801fc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fc28:	81a3      	strh	r3, [r4, #12]
 801fc2a:	f04f 30ff 	mov.w	r0, #4294967295
 801fc2e:	e03e      	b.n	801fcae <__swsetup_r+0xba>
 801fc30:	4b25      	ldr	r3, [pc, #148]	; (801fcc8 <__swsetup_r+0xd4>)
 801fc32:	429c      	cmp	r4, r3
 801fc34:	d101      	bne.n	801fc3a <__swsetup_r+0x46>
 801fc36:	68ac      	ldr	r4, [r5, #8]
 801fc38:	e7eb      	b.n	801fc12 <__swsetup_r+0x1e>
 801fc3a:	4b24      	ldr	r3, [pc, #144]	; (801fccc <__swsetup_r+0xd8>)
 801fc3c:	429c      	cmp	r4, r3
 801fc3e:	bf08      	it	eq
 801fc40:	68ec      	ldreq	r4, [r5, #12]
 801fc42:	e7e6      	b.n	801fc12 <__swsetup_r+0x1e>
 801fc44:	0751      	lsls	r1, r2, #29
 801fc46:	d512      	bpl.n	801fc6e <__swsetup_r+0x7a>
 801fc48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc4a:	b141      	cbz	r1, 801fc5e <__swsetup_r+0x6a>
 801fc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fc50:	4299      	cmp	r1, r3
 801fc52:	d002      	beq.n	801fc5a <__swsetup_r+0x66>
 801fc54:	4630      	mov	r0, r6
 801fc56:	f7ff fbb7 	bl	801f3c8 <_free_r>
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	6363      	str	r3, [r4, #52]	; 0x34
 801fc5e:	89a3      	ldrh	r3, [r4, #12]
 801fc60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fc64:	81a3      	strh	r3, [r4, #12]
 801fc66:	2300      	movs	r3, #0
 801fc68:	6063      	str	r3, [r4, #4]
 801fc6a:	6923      	ldr	r3, [r4, #16]
 801fc6c:	6023      	str	r3, [r4, #0]
 801fc6e:	89a3      	ldrh	r3, [r4, #12]
 801fc70:	f043 0308 	orr.w	r3, r3, #8
 801fc74:	81a3      	strh	r3, [r4, #12]
 801fc76:	6923      	ldr	r3, [r4, #16]
 801fc78:	b94b      	cbnz	r3, 801fc8e <__swsetup_r+0x9a>
 801fc7a:	89a3      	ldrh	r3, [r4, #12]
 801fc7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fc80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fc84:	d003      	beq.n	801fc8e <__swsetup_r+0x9a>
 801fc86:	4621      	mov	r1, r4
 801fc88:	4630      	mov	r0, r6
 801fc8a:	f000 fa23 	bl	80200d4 <__smakebuf_r>
 801fc8e:	89a2      	ldrh	r2, [r4, #12]
 801fc90:	f012 0301 	ands.w	r3, r2, #1
 801fc94:	d00c      	beq.n	801fcb0 <__swsetup_r+0xbc>
 801fc96:	2300      	movs	r3, #0
 801fc98:	60a3      	str	r3, [r4, #8]
 801fc9a:	6963      	ldr	r3, [r4, #20]
 801fc9c:	425b      	negs	r3, r3
 801fc9e:	61a3      	str	r3, [r4, #24]
 801fca0:	6923      	ldr	r3, [r4, #16]
 801fca2:	b953      	cbnz	r3, 801fcba <__swsetup_r+0xc6>
 801fca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fca8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801fcac:	d1ba      	bne.n	801fc24 <__swsetup_r+0x30>
 801fcae:	bd70      	pop	{r4, r5, r6, pc}
 801fcb0:	0792      	lsls	r2, r2, #30
 801fcb2:	bf58      	it	pl
 801fcb4:	6963      	ldrpl	r3, [r4, #20]
 801fcb6:	60a3      	str	r3, [r4, #8]
 801fcb8:	e7f2      	b.n	801fca0 <__swsetup_r+0xac>
 801fcba:	2000      	movs	r0, #0
 801fcbc:	e7f7      	b.n	801fcae <__swsetup_r+0xba>
 801fcbe:	bf00      	nop
 801fcc0:	20000078 	.word	0x20000078
 801fcc4:	08022890 	.word	0x08022890
 801fcc8:	080228b0 	.word	0x080228b0
 801fccc:	08022870 	.word	0x08022870

0801fcd0 <__register_exitproc>:
 801fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fcd4:	4d2c      	ldr	r5, [pc, #176]	; (801fd88 <__register_exitproc+0xb8>)
 801fcd6:	682c      	ldr	r4, [r5, #0]
 801fcd8:	4607      	mov	r7, r0
 801fcda:	460e      	mov	r6, r1
 801fcdc:	4691      	mov	r9, r2
 801fcde:	4698      	mov	r8, r3
 801fce0:	b934      	cbnz	r4, 801fcf0 <__register_exitproc+0x20>
 801fce2:	4b2a      	ldr	r3, [pc, #168]	; (801fd8c <__register_exitproc+0xbc>)
 801fce4:	4c2a      	ldr	r4, [pc, #168]	; (801fd90 <__register_exitproc+0xc0>)
 801fce6:	602c      	str	r4, [r5, #0]
 801fce8:	b113      	cbz	r3, 801fcf0 <__register_exitproc+0x20>
 801fcea:	681b      	ldr	r3, [r3, #0]
 801fcec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801fcf0:	6863      	ldr	r3, [r4, #4]
 801fcf2:	2b1f      	cmp	r3, #31
 801fcf4:	dd3d      	ble.n	801fd72 <__register_exitproc+0xa2>
 801fcf6:	4b27      	ldr	r3, [pc, #156]	; (801fd94 <__register_exitproc+0xc4>)
 801fcf8:	b91b      	cbnz	r3, 801fd02 <__register_exitproc+0x32>
 801fcfa:	f04f 30ff 	mov.w	r0, #4294967295
 801fcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fd02:	208c      	movs	r0, #140	; 0x8c
 801fd04:	f7ff fb3c 	bl	801f380 <malloc>
 801fd08:	4604      	mov	r4, r0
 801fd0a:	2800      	cmp	r0, #0
 801fd0c:	d0f5      	beq.n	801fcfa <__register_exitproc+0x2a>
 801fd0e:	2300      	movs	r3, #0
 801fd10:	682a      	ldr	r2, [r5, #0]
 801fd12:	6002      	str	r2, [r0, #0]
 801fd14:	6043      	str	r3, [r0, #4]
 801fd16:	6028      	str	r0, [r5, #0]
 801fd18:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801fd1c:	b30f      	cbz	r7, 801fd62 <__register_exitproc+0x92>
 801fd1e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801fd22:	f7ff fb2d 	bl	801f380 <malloc>
 801fd26:	2800      	cmp	r0, #0
 801fd28:	d0e7      	beq.n	801fcfa <__register_exitproc+0x2a>
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801fd30:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801fd34:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801fd38:	6862      	ldr	r2, [r4, #4]
 801fd3a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801fd3e:	2301      	movs	r3, #1
 801fd40:	4093      	lsls	r3, r2
 801fd42:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801fd46:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801fd4a:	431a      	orrs	r2, r3
 801fd4c:	2f02      	cmp	r7, #2
 801fd4e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801fd52:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801fd56:	bf02      	ittt	eq
 801fd58:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801fd5c:	4313      	orreq	r3, r2
 801fd5e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801fd62:	6863      	ldr	r3, [r4, #4]
 801fd64:	1c5a      	adds	r2, r3, #1
 801fd66:	3302      	adds	r3, #2
 801fd68:	6062      	str	r2, [r4, #4]
 801fd6a:	2000      	movs	r0, #0
 801fd6c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801fd70:	e7c5      	b.n	801fcfe <__register_exitproc+0x2e>
 801fd72:	2f00      	cmp	r7, #0
 801fd74:	d0f5      	beq.n	801fd62 <__register_exitproc+0x92>
 801fd76:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801fd7a:	2800      	cmp	r0, #0
 801fd7c:	d1dc      	bne.n	801fd38 <__register_exitproc+0x68>
 801fd7e:	4b05      	ldr	r3, [pc, #20]	; (801fd94 <__register_exitproc+0xc4>)
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d0ba      	beq.n	801fcfa <__register_exitproc+0x2a>
 801fd84:	e7cb      	b.n	801fd1e <__register_exitproc+0x4e>
 801fd86:	bf00      	nop
 801fd88:	20009c44 	.word	0x20009c44
 801fd8c:	00000000 	.word	0x00000000
 801fd90:	20009bb8 	.word	0x20009bb8
 801fd94:	0801f381 	.word	0x0801f381

0801fd98 <__sflush_r>:
 801fd98:	898a      	ldrh	r2, [r1, #12]
 801fd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd9e:	4605      	mov	r5, r0
 801fda0:	0710      	lsls	r0, r2, #28
 801fda2:	460c      	mov	r4, r1
 801fda4:	d458      	bmi.n	801fe58 <__sflush_r+0xc0>
 801fda6:	684b      	ldr	r3, [r1, #4]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	dc05      	bgt.n	801fdb8 <__sflush_r+0x20>
 801fdac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fdae:	2b00      	cmp	r3, #0
 801fdb0:	dc02      	bgt.n	801fdb8 <__sflush_r+0x20>
 801fdb2:	2000      	movs	r0, #0
 801fdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fdb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fdba:	2e00      	cmp	r6, #0
 801fdbc:	d0f9      	beq.n	801fdb2 <__sflush_r+0x1a>
 801fdbe:	2300      	movs	r3, #0
 801fdc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fdc4:	682f      	ldr	r7, [r5, #0]
 801fdc6:	6a21      	ldr	r1, [r4, #32]
 801fdc8:	602b      	str	r3, [r5, #0]
 801fdca:	d032      	beq.n	801fe32 <__sflush_r+0x9a>
 801fdcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fdce:	89a3      	ldrh	r3, [r4, #12]
 801fdd0:	075a      	lsls	r2, r3, #29
 801fdd2:	d505      	bpl.n	801fde0 <__sflush_r+0x48>
 801fdd4:	6863      	ldr	r3, [r4, #4]
 801fdd6:	1ac0      	subs	r0, r0, r3
 801fdd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fdda:	b10b      	cbz	r3, 801fde0 <__sflush_r+0x48>
 801fddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fdde:	1ac0      	subs	r0, r0, r3
 801fde0:	2300      	movs	r3, #0
 801fde2:	4602      	mov	r2, r0
 801fde4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fde6:	6a21      	ldr	r1, [r4, #32]
 801fde8:	4628      	mov	r0, r5
 801fdea:	47b0      	blx	r6
 801fdec:	1c43      	adds	r3, r0, #1
 801fdee:	89a3      	ldrh	r3, [r4, #12]
 801fdf0:	d106      	bne.n	801fe00 <__sflush_r+0x68>
 801fdf2:	6829      	ldr	r1, [r5, #0]
 801fdf4:	291d      	cmp	r1, #29
 801fdf6:	d848      	bhi.n	801fe8a <__sflush_r+0xf2>
 801fdf8:	4a29      	ldr	r2, [pc, #164]	; (801fea0 <__sflush_r+0x108>)
 801fdfa:	40ca      	lsrs	r2, r1
 801fdfc:	07d6      	lsls	r6, r2, #31
 801fdfe:	d544      	bpl.n	801fe8a <__sflush_r+0xf2>
 801fe00:	2200      	movs	r2, #0
 801fe02:	6062      	str	r2, [r4, #4]
 801fe04:	04d9      	lsls	r1, r3, #19
 801fe06:	6922      	ldr	r2, [r4, #16]
 801fe08:	6022      	str	r2, [r4, #0]
 801fe0a:	d504      	bpl.n	801fe16 <__sflush_r+0x7e>
 801fe0c:	1c42      	adds	r2, r0, #1
 801fe0e:	d101      	bne.n	801fe14 <__sflush_r+0x7c>
 801fe10:	682b      	ldr	r3, [r5, #0]
 801fe12:	b903      	cbnz	r3, 801fe16 <__sflush_r+0x7e>
 801fe14:	6560      	str	r0, [r4, #84]	; 0x54
 801fe16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fe18:	602f      	str	r7, [r5, #0]
 801fe1a:	2900      	cmp	r1, #0
 801fe1c:	d0c9      	beq.n	801fdb2 <__sflush_r+0x1a>
 801fe1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fe22:	4299      	cmp	r1, r3
 801fe24:	d002      	beq.n	801fe2c <__sflush_r+0x94>
 801fe26:	4628      	mov	r0, r5
 801fe28:	f7ff face 	bl	801f3c8 <_free_r>
 801fe2c:	2000      	movs	r0, #0
 801fe2e:	6360      	str	r0, [r4, #52]	; 0x34
 801fe30:	e7c0      	b.n	801fdb4 <__sflush_r+0x1c>
 801fe32:	2301      	movs	r3, #1
 801fe34:	4628      	mov	r0, r5
 801fe36:	47b0      	blx	r6
 801fe38:	1c41      	adds	r1, r0, #1
 801fe3a:	d1c8      	bne.n	801fdce <__sflush_r+0x36>
 801fe3c:	682b      	ldr	r3, [r5, #0]
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d0c5      	beq.n	801fdce <__sflush_r+0x36>
 801fe42:	2b1d      	cmp	r3, #29
 801fe44:	d001      	beq.n	801fe4a <__sflush_r+0xb2>
 801fe46:	2b16      	cmp	r3, #22
 801fe48:	d101      	bne.n	801fe4e <__sflush_r+0xb6>
 801fe4a:	602f      	str	r7, [r5, #0]
 801fe4c:	e7b1      	b.n	801fdb2 <__sflush_r+0x1a>
 801fe4e:	89a3      	ldrh	r3, [r4, #12]
 801fe50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe54:	81a3      	strh	r3, [r4, #12]
 801fe56:	e7ad      	b.n	801fdb4 <__sflush_r+0x1c>
 801fe58:	690f      	ldr	r7, [r1, #16]
 801fe5a:	2f00      	cmp	r7, #0
 801fe5c:	d0a9      	beq.n	801fdb2 <__sflush_r+0x1a>
 801fe5e:	0793      	lsls	r3, r2, #30
 801fe60:	680e      	ldr	r6, [r1, #0]
 801fe62:	bf08      	it	eq
 801fe64:	694b      	ldreq	r3, [r1, #20]
 801fe66:	600f      	str	r7, [r1, #0]
 801fe68:	bf18      	it	ne
 801fe6a:	2300      	movne	r3, #0
 801fe6c:	eba6 0807 	sub.w	r8, r6, r7
 801fe70:	608b      	str	r3, [r1, #8]
 801fe72:	f1b8 0f00 	cmp.w	r8, #0
 801fe76:	dd9c      	ble.n	801fdb2 <__sflush_r+0x1a>
 801fe78:	4643      	mov	r3, r8
 801fe7a:	463a      	mov	r2, r7
 801fe7c:	6a21      	ldr	r1, [r4, #32]
 801fe7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fe80:	4628      	mov	r0, r5
 801fe82:	47b0      	blx	r6
 801fe84:	2800      	cmp	r0, #0
 801fe86:	dc06      	bgt.n	801fe96 <__sflush_r+0xfe>
 801fe88:	89a3      	ldrh	r3, [r4, #12]
 801fe8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fe8e:	81a3      	strh	r3, [r4, #12]
 801fe90:	f04f 30ff 	mov.w	r0, #4294967295
 801fe94:	e78e      	b.n	801fdb4 <__sflush_r+0x1c>
 801fe96:	4407      	add	r7, r0
 801fe98:	eba8 0800 	sub.w	r8, r8, r0
 801fe9c:	e7e9      	b.n	801fe72 <__sflush_r+0xda>
 801fe9e:	bf00      	nop
 801fea0:	20400001 	.word	0x20400001

0801fea4 <_fflush_r>:
 801fea4:	b538      	push	{r3, r4, r5, lr}
 801fea6:	690b      	ldr	r3, [r1, #16]
 801fea8:	4605      	mov	r5, r0
 801feaa:	460c      	mov	r4, r1
 801feac:	b1db      	cbz	r3, 801fee6 <_fflush_r+0x42>
 801feae:	b118      	cbz	r0, 801feb8 <_fflush_r+0x14>
 801feb0:	6983      	ldr	r3, [r0, #24]
 801feb2:	b90b      	cbnz	r3, 801feb8 <_fflush_r+0x14>
 801feb4:	f000 f860 	bl	801ff78 <__sinit>
 801feb8:	4b0c      	ldr	r3, [pc, #48]	; (801feec <_fflush_r+0x48>)
 801feba:	429c      	cmp	r4, r3
 801febc:	d109      	bne.n	801fed2 <_fflush_r+0x2e>
 801febe:	686c      	ldr	r4, [r5, #4]
 801fec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fec4:	b17b      	cbz	r3, 801fee6 <_fflush_r+0x42>
 801fec6:	4621      	mov	r1, r4
 801fec8:	4628      	mov	r0, r5
 801feca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fece:	f7ff bf63 	b.w	801fd98 <__sflush_r>
 801fed2:	4b07      	ldr	r3, [pc, #28]	; (801fef0 <_fflush_r+0x4c>)
 801fed4:	429c      	cmp	r4, r3
 801fed6:	d101      	bne.n	801fedc <_fflush_r+0x38>
 801fed8:	68ac      	ldr	r4, [r5, #8]
 801feda:	e7f1      	b.n	801fec0 <_fflush_r+0x1c>
 801fedc:	4b05      	ldr	r3, [pc, #20]	; (801fef4 <_fflush_r+0x50>)
 801fede:	429c      	cmp	r4, r3
 801fee0:	bf08      	it	eq
 801fee2:	68ec      	ldreq	r4, [r5, #12]
 801fee4:	e7ec      	b.n	801fec0 <_fflush_r+0x1c>
 801fee6:	2000      	movs	r0, #0
 801fee8:	bd38      	pop	{r3, r4, r5, pc}
 801feea:	bf00      	nop
 801feec:	08022890 	.word	0x08022890
 801fef0:	080228b0 	.word	0x080228b0
 801fef4:	08022870 	.word	0x08022870

0801fef8 <std>:
 801fef8:	2300      	movs	r3, #0
 801fefa:	b510      	push	{r4, lr}
 801fefc:	4604      	mov	r4, r0
 801fefe:	e9c0 3300 	strd	r3, r3, [r0]
 801ff02:	6083      	str	r3, [r0, #8]
 801ff04:	8181      	strh	r1, [r0, #12]
 801ff06:	6643      	str	r3, [r0, #100]	; 0x64
 801ff08:	81c2      	strh	r2, [r0, #14]
 801ff0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ff0e:	6183      	str	r3, [r0, #24]
 801ff10:	4619      	mov	r1, r3
 801ff12:	2208      	movs	r2, #8
 801ff14:	305c      	adds	r0, #92	; 0x5c
 801ff16:	f7ff fa4e 	bl	801f3b6 <memset>
 801ff1a:	4b05      	ldr	r3, [pc, #20]	; (801ff30 <std+0x38>)
 801ff1c:	6263      	str	r3, [r4, #36]	; 0x24
 801ff1e:	4b05      	ldr	r3, [pc, #20]	; (801ff34 <std+0x3c>)
 801ff20:	62a3      	str	r3, [r4, #40]	; 0x28
 801ff22:	4b05      	ldr	r3, [pc, #20]	; (801ff38 <std+0x40>)
 801ff24:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ff26:	4b05      	ldr	r3, [pc, #20]	; (801ff3c <std+0x44>)
 801ff28:	6224      	str	r4, [r4, #32]
 801ff2a:	6323      	str	r3, [r4, #48]	; 0x30
 801ff2c:	bd10      	pop	{r4, pc}
 801ff2e:	bf00      	nop
 801ff30:	08020159 	.word	0x08020159
 801ff34:	0802017b 	.word	0x0802017b
 801ff38:	080201b3 	.word	0x080201b3
 801ff3c:	080201d7 	.word	0x080201d7

0801ff40 <_cleanup_r>:
 801ff40:	4901      	ldr	r1, [pc, #4]	; (801ff48 <_cleanup_r+0x8>)
 801ff42:	f000 b885 	b.w	8020050 <_fwalk_reent>
 801ff46:	bf00      	nop
 801ff48:	0801fea5 	.word	0x0801fea5

0801ff4c <__sfmoreglue>:
 801ff4c:	b570      	push	{r4, r5, r6, lr}
 801ff4e:	1e4a      	subs	r2, r1, #1
 801ff50:	2568      	movs	r5, #104	; 0x68
 801ff52:	4355      	muls	r5, r2
 801ff54:	460e      	mov	r6, r1
 801ff56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ff5a:	f7ff fa83 	bl	801f464 <_malloc_r>
 801ff5e:	4604      	mov	r4, r0
 801ff60:	b140      	cbz	r0, 801ff74 <__sfmoreglue+0x28>
 801ff62:	2100      	movs	r1, #0
 801ff64:	e9c0 1600 	strd	r1, r6, [r0]
 801ff68:	300c      	adds	r0, #12
 801ff6a:	60a0      	str	r0, [r4, #8]
 801ff6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ff70:	f7ff fa21 	bl	801f3b6 <memset>
 801ff74:	4620      	mov	r0, r4
 801ff76:	bd70      	pop	{r4, r5, r6, pc}

0801ff78 <__sinit>:
 801ff78:	6983      	ldr	r3, [r0, #24]
 801ff7a:	b510      	push	{r4, lr}
 801ff7c:	4604      	mov	r4, r0
 801ff7e:	bb33      	cbnz	r3, 801ffce <__sinit+0x56>
 801ff80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ff84:	6503      	str	r3, [r0, #80]	; 0x50
 801ff86:	4b12      	ldr	r3, [pc, #72]	; (801ffd0 <__sinit+0x58>)
 801ff88:	4a12      	ldr	r2, [pc, #72]	; (801ffd4 <__sinit+0x5c>)
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	6282      	str	r2, [r0, #40]	; 0x28
 801ff8e:	4298      	cmp	r0, r3
 801ff90:	bf04      	itt	eq
 801ff92:	2301      	moveq	r3, #1
 801ff94:	6183      	streq	r3, [r0, #24]
 801ff96:	f000 f81f 	bl	801ffd8 <__sfp>
 801ff9a:	6060      	str	r0, [r4, #4]
 801ff9c:	4620      	mov	r0, r4
 801ff9e:	f000 f81b 	bl	801ffd8 <__sfp>
 801ffa2:	60a0      	str	r0, [r4, #8]
 801ffa4:	4620      	mov	r0, r4
 801ffa6:	f000 f817 	bl	801ffd8 <__sfp>
 801ffaa:	2200      	movs	r2, #0
 801ffac:	60e0      	str	r0, [r4, #12]
 801ffae:	2104      	movs	r1, #4
 801ffb0:	6860      	ldr	r0, [r4, #4]
 801ffb2:	f7ff ffa1 	bl	801fef8 <std>
 801ffb6:	2201      	movs	r2, #1
 801ffb8:	2109      	movs	r1, #9
 801ffba:	68a0      	ldr	r0, [r4, #8]
 801ffbc:	f7ff ff9c 	bl	801fef8 <std>
 801ffc0:	2202      	movs	r2, #2
 801ffc2:	2112      	movs	r1, #18
 801ffc4:	68e0      	ldr	r0, [r4, #12]
 801ffc6:	f7ff ff97 	bl	801fef8 <std>
 801ffca:	2301      	movs	r3, #1
 801ffcc:	61a3      	str	r3, [r4, #24]
 801ffce:	bd10      	pop	{r4, pc}
 801ffd0:	08022838 	.word	0x08022838
 801ffd4:	0801ff41 	.word	0x0801ff41

0801ffd8 <__sfp>:
 801ffd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffda:	4b1b      	ldr	r3, [pc, #108]	; (8020048 <__sfp+0x70>)
 801ffdc:	681e      	ldr	r6, [r3, #0]
 801ffde:	69b3      	ldr	r3, [r6, #24]
 801ffe0:	4607      	mov	r7, r0
 801ffe2:	b913      	cbnz	r3, 801ffea <__sfp+0x12>
 801ffe4:	4630      	mov	r0, r6
 801ffe6:	f7ff ffc7 	bl	801ff78 <__sinit>
 801ffea:	3648      	adds	r6, #72	; 0x48
 801ffec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801fff0:	3b01      	subs	r3, #1
 801fff2:	d503      	bpl.n	801fffc <__sfp+0x24>
 801fff4:	6833      	ldr	r3, [r6, #0]
 801fff6:	b133      	cbz	r3, 8020006 <__sfp+0x2e>
 801fff8:	6836      	ldr	r6, [r6, #0]
 801fffa:	e7f7      	b.n	801ffec <__sfp+0x14>
 801fffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020000:	b16d      	cbz	r5, 802001e <__sfp+0x46>
 8020002:	3468      	adds	r4, #104	; 0x68
 8020004:	e7f4      	b.n	801fff0 <__sfp+0x18>
 8020006:	2104      	movs	r1, #4
 8020008:	4638      	mov	r0, r7
 802000a:	f7ff ff9f 	bl	801ff4c <__sfmoreglue>
 802000e:	6030      	str	r0, [r6, #0]
 8020010:	2800      	cmp	r0, #0
 8020012:	d1f1      	bne.n	801fff8 <__sfp+0x20>
 8020014:	230c      	movs	r3, #12
 8020016:	603b      	str	r3, [r7, #0]
 8020018:	4604      	mov	r4, r0
 802001a:	4620      	mov	r0, r4
 802001c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802001e:	4b0b      	ldr	r3, [pc, #44]	; (802004c <__sfp+0x74>)
 8020020:	6665      	str	r5, [r4, #100]	; 0x64
 8020022:	e9c4 5500 	strd	r5, r5, [r4]
 8020026:	60a5      	str	r5, [r4, #8]
 8020028:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802002c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020030:	2208      	movs	r2, #8
 8020032:	4629      	mov	r1, r5
 8020034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020038:	f7ff f9bd 	bl	801f3b6 <memset>
 802003c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020044:	e7e9      	b.n	802001a <__sfp+0x42>
 8020046:	bf00      	nop
 8020048:	08022838 	.word	0x08022838
 802004c:	ffff0001 	.word	0xffff0001

08020050 <_fwalk_reent>:
 8020050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020054:	4680      	mov	r8, r0
 8020056:	4689      	mov	r9, r1
 8020058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802005c:	2600      	movs	r6, #0
 802005e:	b914      	cbnz	r4, 8020066 <_fwalk_reent+0x16>
 8020060:	4630      	mov	r0, r6
 8020062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020066:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802006a:	3f01      	subs	r7, #1
 802006c:	d501      	bpl.n	8020072 <_fwalk_reent+0x22>
 802006e:	6824      	ldr	r4, [r4, #0]
 8020070:	e7f5      	b.n	802005e <_fwalk_reent+0xe>
 8020072:	89ab      	ldrh	r3, [r5, #12]
 8020074:	2b01      	cmp	r3, #1
 8020076:	d907      	bls.n	8020088 <_fwalk_reent+0x38>
 8020078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802007c:	3301      	adds	r3, #1
 802007e:	d003      	beq.n	8020088 <_fwalk_reent+0x38>
 8020080:	4629      	mov	r1, r5
 8020082:	4640      	mov	r0, r8
 8020084:	47c8      	blx	r9
 8020086:	4306      	orrs	r6, r0
 8020088:	3568      	adds	r5, #104	; 0x68
 802008a:	e7ee      	b.n	802006a <_fwalk_reent+0x1a>

0802008c <__swhatbuf_r>:
 802008c:	b570      	push	{r4, r5, r6, lr}
 802008e:	460e      	mov	r6, r1
 8020090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020094:	2900      	cmp	r1, #0
 8020096:	b096      	sub	sp, #88	; 0x58
 8020098:	4614      	mov	r4, r2
 802009a:	461d      	mov	r5, r3
 802009c:	da07      	bge.n	80200ae <__swhatbuf_r+0x22>
 802009e:	2300      	movs	r3, #0
 80200a0:	602b      	str	r3, [r5, #0]
 80200a2:	89b3      	ldrh	r3, [r6, #12]
 80200a4:	061a      	lsls	r2, r3, #24
 80200a6:	d410      	bmi.n	80200ca <__swhatbuf_r+0x3e>
 80200a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80200ac:	e00e      	b.n	80200cc <__swhatbuf_r+0x40>
 80200ae:	466a      	mov	r2, sp
 80200b0:	f000 f8b8 	bl	8020224 <_fstat_r>
 80200b4:	2800      	cmp	r0, #0
 80200b6:	dbf2      	blt.n	802009e <__swhatbuf_r+0x12>
 80200b8:	9a01      	ldr	r2, [sp, #4]
 80200ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80200be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80200c2:	425a      	negs	r2, r3
 80200c4:	415a      	adcs	r2, r3
 80200c6:	602a      	str	r2, [r5, #0]
 80200c8:	e7ee      	b.n	80200a8 <__swhatbuf_r+0x1c>
 80200ca:	2340      	movs	r3, #64	; 0x40
 80200cc:	2000      	movs	r0, #0
 80200ce:	6023      	str	r3, [r4, #0]
 80200d0:	b016      	add	sp, #88	; 0x58
 80200d2:	bd70      	pop	{r4, r5, r6, pc}

080200d4 <__smakebuf_r>:
 80200d4:	898b      	ldrh	r3, [r1, #12]
 80200d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80200d8:	079d      	lsls	r5, r3, #30
 80200da:	4606      	mov	r6, r0
 80200dc:	460c      	mov	r4, r1
 80200de:	d507      	bpl.n	80200f0 <__smakebuf_r+0x1c>
 80200e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80200e4:	6023      	str	r3, [r4, #0]
 80200e6:	6123      	str	r3, [r4, #16]
 80200e8:	2301      	movs	r3, #1
 80200ea:	6163      	str	r3, [r4, #20]
 80200ec:	b002      	add	sp, #8
 80200ee:	bd70      	pop	{r4, r5, r6, pc}
 80200f0:	ab01      	add	r3, sp, #4
 80200f2:	466a      	mov	r2, sp
 80200f4:	f7ff ffca 	bl	802008c <__swhatbuf_r>
 80200f8:	9900      	ldr	r1, [sp, #0]
 80200fa:	4605      	mov	r5, r0
 80200fc:	4630      	mov	r0, r6
 80200fe:	f7ff f9b1 	bl	801f464 <_malloc_r>
 8020102:	b948      	cbnz	r0, 8020118 <__smakebuf_r+0x44>
 8020104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020108:	059a      	lsls	r2, r3, #22
 802010a:	d4ef      	bmi.n	80200ec <__smakebuf_r+0x18>
 802010c:	f023 0303 	bic.w	r3, r3, #3
 8020110:	f043 0302 	orr.w	r3, r3, #2
 8020114:	81a3      	strh	r3, [r4, #12]
 8020116:	e7e3      	b.n	80200e0 <__smakebuf_r+0xc>
 8020118:	4b0d      	ldr	r3, [pc, #52]	; (8020150 <__smakebuf_r+0x7c>)
 802011a:	62b3      	str	r3, [r6, #40]	; 0x28
 802011c:	89a3      	ldrh	r3, [r4, #12]
 802011e:	6020      	str	r0, [r4, #0]
 8020120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020124:	81a3      	strh	r3, [r4, #12]
 8020126:	9b00      	ldr	r3, [sp, #0]
 8020128:	6163      	str	r3, [r4, #20]
 802012a:	9b01      	ldr	r3, [sp, #4]
 802012c:	6120      	str	r0, [r4, #16]
 802012e:	b15b      	cbz	r3, 8020148 <__smakebuf_r+0x74>
 8020130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020134:	4630      	mov	r0, r6
 8020136:	f000 f887 	bl	8020248 <_isatty_r>
 802013a:	b128      	cbz	r0, 8020148 <__smakebuf_r+0x74>
 802013c:	89a3      	ldrh	r3, [r4, #12]
 802013e:	f023 0303 	bic.w	r3, r3, #3
 8020142:	f043 0301 	orr.w	r3, r3, #1
 8020146:	81a3      	strh	r3, [r4, #12]
 8020148:	89a3      	ldrh	r3, [r4, #12]
 802014a:	431d      	orrs	r5, r3
 802014c:	81a5      	strh	r5, [r4, #12]
 802014e:	e7cd      	b.n	80200ec <__smakebuf_r+0x18>
 8020150:	0801ff41 	.word	0x0801ff41

08020154 <__malloc_lock>:
 8020154:	4770      	bx	lr

08020156 <__malloc_unlock>:
 8020156:	4770      	bx	lr

08020158 <__sread>:
 8020158:	b510      	push	{r4, lr}
 802015a:	460c      	mov	r4, r1
 802015c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020160:	f000 f894 	bl	802028c <_read_r>
 8020164:	2800      	cmp	r0, #0
 8020166:	bfab      	itete	ge
 8020168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802016a:	89a3      	ldrhlt	r3, [r4, #12]
 802016c:	181b      	addge	r3, r3, r0
 802016e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020172:	bfac      	ite	ge
 8020174:	6563      	strge	r3, [r4, #84]	; 0x54
 8020176:	81a3      	strhlt	r3, [r4, #12]
 8020178:	bd10      	pop	{r4, pc}

0802017a <__swrite>:
 802017a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802017e:	461f      	mov	r7, r3
 8020180:	898b      	ldrh	r3, [r1, #12]
 8020182:	05db      	lsls	r3, r3, #23
 8020184:	4605      	mov	r5, r0
 8020186:	460c      	mov	r4, r1
 8020188:	4616      	mov	r6, r2
 802018a:	d505      	bpl.n	8020198 <__swrite+0x1e>
 802018c:	2302      	movs	r3, #2
 802018e:	2200      	movs	r2, #0
 8020190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020194:	f000 f868 	bl	8020268 <_lseek_r>
 8020198:	89a3      	ldrh	r3, [r4, #12]
 802019a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802019e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80201a2:	81a3      	strh	r3, [r4, #12]
 80201a4:	4632      	mov	r2, r6
 80201a6:	463b      	mov	r3, r7
 80201a8:	4628      	mov	r0, r5
 80201aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80201ae:	f000 b817 	b.w	80201e0 <_write_r>

080201b2 <__sseek>:
 80201b2:	b510      	push	{r4, lr}
 80201b4:	460c      	mov	r4, r1
 80201b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201ba:	f000 f855 	bl	8020268 <_lseek_r>
 80201be:	1c43      	adds	r3, r0, #1
 80201c0:	89a3      	ldrh	r3, [r4, #12]
 80201c2:	bf15      	itete	ne
 80201c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80201c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80201ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80201ce:	81a3      	strheq	r3, [r4, #12]
 80201d0:	bf18      	it	ne
 80201d2:	81a3      	strhne	r3, [r4, #12]
 80201d4:	bd10      	pop	{r4, pc}

080201d6 <__sclose>:
 80201d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80201da:	f000 b813 	b.w	8020204 <_close_r>
	...

080201e0 <_write_r>:
 80201e0:	b538      	push	{r3, r4, r5, lr}
 80201e2:	4c07      	ldr	r4, [pc, #28]	; (8020200 <_write_r+0x20>)
 80201e4:	4605      	mov	r5, r0
 80201e6:	4608      	mov	r0, r1
 80201e8:	4611      	mov	r1, r2
 80201ea:	2200      	movs	r2, #0
 80201ec:	6022      	str	r2, [r4, #0]
 80201ee:	461a      	mov	r2, r3
 80201f0:	f7f7 fe27 	bl	8017e42 <_write>
 80201f4:	1c43      	adds	r3, r0, #1
 80201f6:	d102      	bne.n	80201fe <_write_r+0x1e>
 80201f8:	6823      	ldr	r3, [r4, #0]
 80201fa:	b103      	cbz	r3, 80201fe <_write_r+0x1e>
 80201fc:	602b      	str	r3, [r5, #0]
 80201fe:	bd38      	pop	{r3, r4, r5, pc}
 8020200:	2000a794 	.word	0x2000a794

08020204 <_close_r>:
 8020204:	b538      	push	{r3, r4, r5, lr}
 8020206:	4c06      	ldr	r4, [pc, #24]	; (8020220 <_close_r+0x1c>)
 8020208:	2300      	movs	r3, #0
 802020a:	4605      	mov	r5, r0
 802020c:	4608      	mov	r0, r1
 802020e:	6023      	str	r3, [r4, #0]
 8020210:	f7f7 fe33 	bl	8017e7a <_close>
 8020214:	1c43      	adds	r3, r0, #1
 8020216:	d102      	bne.n	802021e <_close_r+0x1a>
 8020218:	6823      	ldr	r3, [r4, #0]
 802021a:	b103      	cbz	r3, 802021e <_close_r+0x1a>
 802021c:	602b      	str	r3, [r5, #0]
 802021e:	bd38      	pop	{r3, r4, r5, pc}
 8020220:	2000a794 	.word	0x2000a794

08020224 <_fstat_r>:
 8020224:	b538      	push	{r3, r4, r5, lr}
 8020226:	4c07      	ldr	r4, [pc, #28]	; (8020244 <_fstat_r+0x20>)
 8020228:	2300      	movs	r3, #0
 802022a:	4605      	mov	r5, r0
 802022c:	4608      	mov	r0, r1
 802022e:	4611      	mov	r1, r2
 8020230:	6023      	str	r3, [r4, #0]
 8020232:	f7f7 fe2e 	bl	8017e92 <_fstat>
 8020236:	1c43      	adds	r3, r0, #1
 8020238:	d102      	bne.n	8020240 <_fstat_r+0x1c>
 802023a:	6823      	ldr	r3, [r4, #0]
 802023c:	b103      	cbz	r3, 8020240 <_fstat_r+0x1c>
 802023e:	602b      	str	r3, [r5, #0]
 8020240:	bd38      	pop	{r3, r4, r5, pc}
 8020242:	bf00      	nop
 8020244:	2000a794 	.word	0x2000a794

08020248 <_isatty_r>:
 8020248:	b538      	push	{r3, r4, r5, lr}
 802024a:	4c06      	ldr	r4, [pc, #24]	; (8020264 <_isatty_r+0x1c>)
 802024c:	2300      	movs	r3, #0
 802024e:	4605      	mov	r5, r0
 8020250:	4608      	mov	r0, r1
 8020252:	6023      	str	r3, [r4, #0]
 8020254:	f7f7 fe2d 	bl	8017eb2 <_isatty>
 8020258:	1c43      	adds	r3, r0, #1
 802025a:	d102      	bne.n	8020262 <_isatty_r+0x1a>
 802025c:	6823      	ldr	r3, [r4, #0]
 802025e:	b103      	cbz	r3, 8020262 <_isatty_r+0x1a>
 8020260:	602b      	str	r3, [r5, #0]
 8020262:	bd38      	pop	{r3, r4, r5, pc}
 8020264:	2000a794 	.word	0x2000a794

08020268 <_lseek_r>:
 8020268:	b538      	push	{r3, r4, r5, lr}
 802026a:	4c07      	ldr	r4, [pc, #28]	; (8020288 <_lseek_r+0x20>)
 802026c:	4605      	mov	r5, r0
 802026e:	4608      	mov	r0, r1
 8020270:	4611      	mov	r1, r2
 8020272:	2200      	movs	r2, #0
 8020274:	6022      	str	r2, [r4, #0]
 8020276:	461a      	mov	r2, r3
 8020278:	f7f7 fe26 	bl	8017ec8 <_lseek>
 802027c:	1c43      	adds	r3, r0, #1
 802027e:	d102      	bne.n	8020286 <_lseek_r+0x1e>
 8020280:	6823      	ldr	r3, [r4, #0]
 8020282:	b103      	cbz	r3, 8020286 <_lseek_r+0x1e>
 8020284:	602b      	str	r3, [r5, #0]
 8020286:	bd38      	pop	{r3, r4, r5, pc}
 8020288:	2000a794 	.word	0x2000a794

0802028c <_read_r>:
 802028c:	b538      	push	{r3, r4, r5, lr}
 802028e:	4c07      	ldr	r4, [pc, #28]	; (80202ac <_read_r+0x20>)
 8020290:	4605      	mov	r5, r0
 8020292:	4608      	mov	r0, r1
 8020294:	4611      	mov	r1, r2
 8020296:	2200      	movs	r2, #0
 8020298:	6022      	str	r2, [r4, #0]
 802029a:	461a      	mov	r2, r3
 802029c:	f7f7 fdb4 	bl	8017e08 <_read>
 80202a0:	1c43      	adds	r3, r0, #1
 80202a2:	d102      	bne.n	80202aa <_read_r+0x1e>
 80202a4:	6823      	ldr	r3, [r4, #0]
 80202a6:	b103      	cbz	r3, 80202aa <_read_r+0x1e>
 80202a8:	602b      	str	r3, [r5, #0]
 80202aa:	bd38      	pop	{r3, r4, r5, pc}
 80202ac:	2000a794 	.word	0x2000a794

080202b0 <_init>:
 80202b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202b2:	bf00      	nop
 80202b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80202b6:	bc08      	pop	{r3}
 80202b8:	469e      	mov	lr, r3
 80202ba:	4770      	bx	lr

080202bc <_fini>:
 80202bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80202be:	bf00      	nop
 80202c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80202c2:	bc08      	pop	{r3}
 80202c4:	469e      	mov	lr, r3
 80202c6:	4770      	bx	lr
